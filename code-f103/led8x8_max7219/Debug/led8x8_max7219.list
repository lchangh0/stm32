
led8x8_max7219.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080024f8  080024f8  000034f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800271c  0800271c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800271c  0800271c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800271c  0800271c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800271c  0800271c  0000371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002720  08002720  00003720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002724  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002730  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002730  000040f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009300  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019bc  00000000  00000000  0000d335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0000ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a4  00000000  00000000  0000f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f42  00000000  00000000  0000fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7af  00000000  00000000  00026b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008338b  00000000  00000000  0003133d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b46c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000227c  00000000  00000000  000b470c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000b6988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024e0 	.word	0x080024e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080024e0 	.word	0x080024e0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ff23 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8f9 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f993 	bl	8000484 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f931 	bl	80003c4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f965 	bl	8000430 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_MatrixInit(&hspi1, GPIOB, GPIO_PIN_9);
 8000166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800016a:	4971      	ldr	r1, [pc, #452]	@ (8000330 <main+0x1e4>)
 800016c:	4871      	ldr	r0, [pc, #452]	@ (8000334 <main+0x1e8>)
 800016e:	f000 fbd3 	bl	8000918 <MAX7219_MatrixInit>
  MAX7219_MatrixUpdate();
 8000172:	f000 fdc9 	bl	8000d08 <MAX7219_MatrixUpdate>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* TIME */
	MAX7219_MatrixSetRow64(0, CHR('B'));
 8000176:	4b70      	ldr	r3, [pc, #448]	@ (8000338 <main+0x1ec>)
 8000178:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fc2d 	bl	80009dc <MAX7219_MatrixSetRow64>
	MAX7219_MatrixSetRow64(1, CHR('O'));
 8000182:	4b6d      	ldr	r3, [pc, #436]	@ (8000338 <main+0x1ec>)
 8000184:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8000188:	2001      	movs	r0, #1
 800018a:	f000 fc27 	bl	80009dc <MAX7219_MatrixSetRow64>
	MAX7219_MatrixSetRow64(2, CHR('M'));
 800018e:	4b6a      	ldr	r3, [pc, #424]	@ (8000338 <main+0x1ec>)
 8000190:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000194:	2002      	movs	r0, #2
 8000196:	f000 fc21 	bl	80009dc <MAX7219_MatrixSetRow64>
	MAX7219_MatrixSetRow64(3, CHR('B'));
 800019a:	4b67      	ldr	r3, [pc, #412]	@ (8000338 <main+0x1ec>)
 800019c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 fc1b 	bl	80009dc <MAX7219_MatrixSetRow64>
	MAX7219_MatrixUpdate();
 80001a6:	f000 fdaf 	bl	8000d08 <MAX7219_MatrixUpdate>
	HAL_Delay(3000);
 80001aa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001ae:	f000 ff57 	bl	8001060 <HAL_Delay>

	for(int i = 1000; i >= 0; i--)
 80001b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001b6:	60fb      	str	r3, [r7, #12]
 80001b8:	e071      	b.n	800029e <main+0x152>
	{
		int temp = (i / 1000) % 10;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	4a5f      	ldr	r2, [pc, #380]	@ (800033c <main+0x1f0>)
 80001be:	fb82 1203 	smull	r1, r2, r2, r3
 80001c2:	1192      	asrs	r2, r2, #6
 80001c4:	17db      	asrs	r3, r3, #31
 80001c6:	1ad2      	subs	r2, r2, r3
 80001c8:	4b5d      	ldr	r3, [pc, #372]	@ (8000340 <main+0x1f4>)
 80001ca:	fb83 1302 	smull	r1, r3, r3, r2
 80001ce:	1099      	asrs	r1, r3, #2
 80001d0:	17d3      	asrs	r3, r2, #31
 80001d2:	1ac9      	subs	r1, r1, r3
 80001d4:	460b      	mov	r3, r1
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	440b      	add	r3, r1
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	1ad3      	subs	r3, r2, r3
 80001de:	603b      	str	r3, [r7, #0]
		MAX7219_MatrixSetRow64(0, numbers[temp]);
 80001e0:	4a58      	ldr	r2, [pc, #352]	@ (8000344 <main+0x1f8>)
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	4413      	add	r3, r2
 80001e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001ec:	2000      	movs	r0, #0
 80001ee:	f000 fbf5 	bl	80009dc <MAX7219_MatrixSetRow64>
		temp = (i / 100) % 10;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	4a54      	ldr	r2, [pc, #336]	@ (8000348 <main+0x1fc>)
 80001f6:	fb82 1203 	smull	r1, r2, r2, r3
 80001fa:	1152      	asrs	r2, r2, #5
 80001fc:	17db      	asrs	r3, r3, #31
 80001fe:	1ad2      	subs	r2, r2, r3
 8000200:	4b4f      	ldr	r3, [pc, #316]	@ (8000340 <main+0x1f4>)
 8000202:	fb83 1302 	smull	r1, r3, r3, r2
 8000206:	1099      	asrs	r1, r3, #2
 8000208:	17d3      	asrs	r3, r2, #31
 800020a:	1ac9      	subs	r1, r1, r3
 800020c:	460b      	mov	r3, r1
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	440b      	add	r3, r1
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	603b      	str	r3, [r7, #0]
		MAX7219_MatrixSetRow64(1, numbers[temp]);
 8000218:	4a4a      	ldr	r2, [pc, #296]	@ (8000344 <main+0x1f8>)
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	4413      	add	r3, r2
 8000220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000224:	2001      	movs	r0, #1
 8000226:	f000 fbd9 	bl	80009dc <MAX7219_MatrixSetRow64>
		temp = (i / 10) % 10;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	4a44      	ldr	r2, [pc, #272]	@ (8000340 <main+0x1f4>)
 800022e:	fb82 1203 	smull	r1, r2, r2, r3
 8000232:	1092      	asrs	r2, r2, #2
 8000234:	17db      	asrs	r3, r3, #31
 8000236:	1ad2      	subs	r2, r2, r3
 8000238:	4b41      	ldr	r3, [pc, #260]	@ (8000340 <main+0x1f4>)
 800023a:	fb83 1302 	smull	r1, r3, r3, r2
 800023e:	1099      	asrs	r1, r3, #2
 8000240:	17d3      	asrs	r3, r2, #31
 8000242:	1ac9      	subs	r1, r1, r3
 8000244:	460b      	mov	r3, r1
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	440b      	add	r3, r1
 800024a:	005b      	lsls	r3, r3, #1
 800024c:	1ad3      	subs	r3, r2, r3
 800024e:	603b      	str	r3, [r7, #0]
		MAX7219_MatrixSetRow64(2, numbers[temp]);
 8000250:	4a3c      	ldr	r2, [pc, #240]	@ (8000344 <main+0x1f8>)
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	00db      	lsls	r3, r3, #3
 8000256:	4413      	add	r3, r2
 8000258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800025c:	2002      	movs	r0, #2
 800025e:	f000 fbbd 	bl	80009dc <MAX7219_MatrixSetRow64>
		temp = i % 10;
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	4b36      	ldr	r3, [pc, #216]	@ (8000340 <main+0x1f4>)
 8000266:	fb83 1302 	smull	r1, r3, r3, r2
 800026a:	1099      	asrs	r1, r3, #2
 800026c:	17d3      	asrs	r3, r2, #31
 800026e:	1ac9      	subs	r1, r1, r3
 8000270:	460b      	mov	r3, r1
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	440b      	add	r3, r1
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	603b      	str	r3, [r7, #0]
		MAX7219_MatrixSetRow64(3, numbers[temp]);
 800027c:	4a31      	ldr	r2, [pc, #196]	@ (8000344 <main+0x1f8>)
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	4413      	add	r3, r2
 8000284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000288:	2003      	movs	r0, #3
 800028a:	f000 fba7 	bl	80009dc <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 800028e:	f000 fd3b 	bl	8000d08 <MAX7219_MatrixUpdate>
		HAL_Delay(10);
 8000292:	200a      	movs	r0, #10
 8000294:	f000 fee4 	bl	8001060 <HAL_Delay>
	for(int i = 1000; i >= 0; i--)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3b01      	subs	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	da8a      	bge.n	80001ba <main+0x6e>
	}

	MAX7219_MatrixSetRow64(0, CHR('B'));
 80002a4:	4b24      	ldr	r3, [pc, #144]	@ (8000338 <main+0x1ec>)
 80002a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 fb96 	bl	80009dc <MAX7219_MatrixSetRow64>
	MAX7219_MatrixSetRow64(1, CHR('A'));
 80002b0:	4b21      	ldr	r3, [pc, #132]	@ (8000338 <main+0x1ec>)
 80002b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fb90 	bl	80009dc <MAX7219_MatrixSetRow64>
	MAX7219_MatrixSetRow64(2, CHR('N'));
 80002bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000338 <main+0x1ec>)
 80002be:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80002c2:	2002      	movs	r0, #2
 80002c4:	f000 fb8a 	bl	80009dc <MAX7219_MatrixSetRow64>
	MAX7219_MatrixSetRow64(3, CHR('G'));
 80002c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000338 <main+0x1ec>)
 80002ca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80002ce:	2003      	movs	r0, #3
 80002d0:	f000 fb84 	bl	80009dc <MAX7219_MatrixSetRow64>
	MAX7219_MatrixUpdate();
 80002d4:	f000 fd18 	bl	8000d08 <MAX7219_MatrixUpdate>
	HAL_Delay(3000);
 80002d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002dc:	f000 fec0 	bl	8001060 <HAL_Delay>

	for(int i = 0; i < 24; i++)
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
 80002e4:	e00a      	b.n	80002fc <main+0x1b0>
	{
		MAX7219_MatrixLShift(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 fc5c 	bl	8000ba4 <MAX7219_MatrixLShift>
		MAX7219_MatrixUpdate();
 80002ec:	f000 fd0c 	bl	8000d08 <MAX7219_MatrixUpdate>
		HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	@ 0x64
 80002f2:	f000 feb5 	bl	8001060 <HAL_Delay>
	for(int i = 0; i < 24; i++)
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	3301      	adds	r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	2b17      	cmp	r3, #23
 8000300:	ddf1      	ble.n	80002e6 <main+0x19a>
	}

	for(int i = 0; i < 24; i++)
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	e00a      	b.n	800031e <main+0x1d2>
	{
		MAX7219_MatrixRShift(1);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 fb99 	bl	8000a40 <MAX7219_MatrixRShift>
		MAX7219_MatrixUpdate();
 800030e:	f000 fcfb 	bl	8000d08 <MAX7219_MatrixUpdate>
		HAL_Delay(100);
 8000312:	2064      	movs	r0, #100	@ 0x64
 8000314:	f000 fea4 	bl	8001060 <HAL_Delay>
	for(int i = 0; i < 24; i++)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3301      	adds	r3, #1
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b17      	cmp	r3, #23
 8000322:	ddf1      	ble.n	8000308 <main+0x1bc>
	}
	HAL_Delay(3000);
 8000324:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000328:	f000 fe9a 	bl	8001060 <HAL_Delay>
	MAX7219_MatrixSetRow64(0, CHR('B'));
 800032c:	e723      	b.n	8000176 <main+0x2a>
 800032e:	bf00      	nop
 8000330:	40010c00 	.word	0x40010c00
 8000334:	20000028 	.word	0x20000028
 8000338:	08002548 	.word	0x08002548
 800033c:	10624dd3 	.word	0x10624dd3
 8000340:	66666667 	.word	0x66666667
 8000344:	080024f8 	.word	0x080024f8
 8000348:	51eb851f 	.word	0x51eb851f

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b090      	sub	sp, #64	@ 0x40
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0318 	add.w	r3, r7, #24
 8000356:	2228      	movs	r2, #40	@ 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f002 f894 	bl	8002488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036e:	2302      	movs	r3, #2
 8000370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	2310      	movs	r3, #16
 8000378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800037a:	2300      	movs	r3, #0
 800037c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f910 	bl	80015a8 <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800038e:	f000 f8c5 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fb7e 	bl	8001aac <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003b6:	f000 f8b1 	bl	800051c <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	@ 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c8:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003ca:	4a18      	ldr	r2, [pc, #96]	@ (800042c <MX_SPI1_Init+0x68>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b16      	ldr	r3, [pc, #88]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d6:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003dc:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e2:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003f8:	2210      	movs	r2, #16
 80003fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <MX_SPI1_Init+0x64>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000402:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_SPI1_Init+0x64>)
 8000404:	2200      	movs	r2, #0
 8000406:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000408:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <MX_SPI1_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800040e:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_SPI1_Init+0x64>)
 8000410:	220a      	movs	r2, #10
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000414:	4804      	ldr	r0, [pc, #16]	@ (8000428 <MX_SPI1_Init+0x64>)
 8000416:	f001 fcd7 	bl	8001dc8 <HAL_SPI_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000420:	f000 f87c 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000028 	.word	0x20000028
 800042c:	40013000 	.word	0x40013000

08000430 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 8000436:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <MX_USART1_UART_Init+0x50>)
 8000438:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 800043c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000440:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b08      	ldr	r3, [pc, #32]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <MX_USART1_UART_Init+0x4c>)
 8000468:	f001 ff2f 	bl	80022ca <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000472:	f000 f853 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000080 	.word	0x20000080
 8000480:	40013800 	.word	0x40013800

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b1e      	ldr	r3, [pc, #120]	@ (8000514 <MX_GPIO_Init+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a1d      	ldr	r2, [pc, #116]	@ (8000514 <MX_GPIO_Init+0x90>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000514 <MX_GPIO_Init+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b18      	ldr	r3, [pc, #96]	@ (8000514 <MX_GPIO_Init+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a17      	ldr	r2, [pc, #92]	@ (8000514 <MX_GPIO_Init+0x90>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <MX_GPIO_Init+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <MX_GPIO_Init+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a11      	ldr	r2, [pc, #68]	@ (8000514 <MX_GPIO_Init+0x90>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004e6:	480c      	ldr	r0, [pc, #48]	@ (8000518 <MX_GPIO_Init+0x94>)
 80004e8:	f001 f846 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4804      	ldr	r0, [pc, #16]	@ (8000518 <MX_GPIO_Init+0x94>)
 8000506:	f000 feb3 	bl	8001270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40010c00 	.word	0x40010c00

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <Error_Handler+0x8>

08000528 <MAX7219_Init>:
static bool SPI_Tx(uint8_t data);
static void DelayInit(void);
static void DelayUS(uint32_t);

void MAX7219_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* ss_port, uint16_t ss_pin)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	4613      	mov	r3, r2
 8000534:	80fb      	strh	r3, [r7, #6]
	Max7219_SPI = spi;
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <MAX7219_Init+0x30>)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	6013      	str	r3, [r2, #0]
	Max7219_SS_Port = ss_port;
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <MAX7219_Init+0x34>)
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	6013      	str	r3, [r2, #0]
	Max7219_SS_Pin = ss_pin;
 8000542:	4a07      	ldr	r2, [pc, #28]	@ (8000560 <MAX7219_Init+0x38>)
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	8013      	strh	r3, [r2, #0]

	/* Us delay */
	DelayInit();
 8000548:	f000 f998 	bl	800087c <DelayInit>

	/* Deselect SS */
	SS_Deselect();
 800054c:	f000 f968 	bl	8000820 <SS_Deselect>
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000c8 	.word	0x200000c8
 800055c:	200000cc 	.word	0x200000cc
 8000560:	200000d0 	.word	0x200000d0

08000564 <MAX7219_Write>:

bool MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	460b      	mov	r3, r1
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	4613      	mov	r3, r2
 8000574:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b03      	cmp	r3, #3
 800057a:	d901      	bls.n	8000580 <MAX7219_Write+0x1c>
 800057c:	2300      	movs	r3, #0
 800057e:	e05b      	b.n	8000638 <MAX7219_Write+0xd4>

	SS_Select();
 8000580:	f000 f93a 	bl	80007f8 <SS_Select>

	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e018      	b.n	80005bc <MAX7219_Write+0x58>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 800058a:	2000      	movs	r0, #0
 800058c:	f000 f95c 	bl	8000848 <SPI_Tx>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MAX7219_Write+0x3c>
 800059c:	2300      	movs	r3, #0
 800059e:	e04b      	b.n	8000638 <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f951 	bl	8000848 <SPI_Tx>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f083 0301 	eor.w	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MAX7219_Write+0x52>
 80005b2:	2300      	movs	r3, #0
 80005b4:	e040      	b.n	8000638 <MAX7219_Write+0xd4>
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3301      	adds	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2b02      	cmp	r3, #2
 80005c0:	dde3      	ble.n	800058a <MAX7219_Write+0x26>
	}

	/* Write register */
	if(!SPI_Tx(reg)) return false;
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f93f 	bl	8000848 <SPI_Tx>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f083 0301 	eor.w	r3, r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MAX7219_Write+0x76>
 80005d6:	2300      	movs	r3, #0
 80005d8:	e02e      	b.n	8000638 <MAX7219_Write+0xd4>
	if(!SPI_Tx(data)) return false;
 80005da:	797b      	ldrb	r3, [r7, #5]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f933 	bl	8000848 <SPI_Tx>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f083 0301 	eor.w	r3, r3, #1
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MAX7219_Write+0x8e>
 80005ee:	2300      	movs	r3, #0
 80005f0:	e022      	b.n	8000638 <MAX7219_Write+0xd4>

	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	e018      	b.n	800062a <MAX7219_Write+0xc6>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 f925 	bl	8000848 <SPI_Tx>
 80005fe:	4603      	mov	r3, r0
 8000600:	f083 0301 	eor.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MAX7219_Write+0xaa>
 800060a:	2300      	movs	r3, #0
 800060c:	e014      	b.n	8000638 <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 800060e:	2000      	movs	r0, #0
 8000610:	f000 f91a 	bl	8000848 <SPI_Tx>
 8000614:	4603      	mov	r3, r0
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MAX7219_Write+0xc0>
 8000620:	2300      	movs	r3, #0
 8000622:	e009      	b.n	8000638 <MAX7219_Write+0xd4>
	for(int i = 0; i < index; i++)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	3301      	adds	r3, #1
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	429a      	cmp	r2, r3
 8000630:	dbe2      	blt.n	80005f8 <MAX7219_Write+0x94>
	}

	SS_Deselect();
 8000632:	f000 f8f5 	bl	8000820 <SS_Deselect>

	return true;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <MAX7219_Digit>:

bool MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	460b      	mov	r3, r1
 800064c:	71bb      	strb	r3, [r7, #6]
 800064e:	4613      	mov	r3, r2
 8000650:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d901      	bls.n	800065c <MAX7219_Digit+0x1c>
 8000658:	2300      	movs	r3, #0
 800065a:	e015      	b.n	8000688 <MAX7219_Digit+0x48>
	if(digit > 0x07) return false;
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	2b07      	cmp	r3, #7
 8000660:	d901      	bls.n	8000666 <MAX7219_Digit+0x26>
 8000662:	2300      	movs	r3, #0
 8000664:	e010      	b.n	8000688 <MAX7219_Digit+0x48>

	if(!MAX7219_Write(index, digit+1, value)) return false;
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	3301      	adds	r3, #1
 800066a:	b2d9      	uxtb	r1, r3
 800066c:	797a      	ldrb	r2, [r7, #5]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff77 	bl	8000564 <MAX7219_Write>
 8000676:	4603      	mov	r3, r0
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MAX7219_Digit+0x46>
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <MAX7219_Digit+0x48>

	return true;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MAX7219_Decode>:

bool MAX7219_Decode(uint8_t index, uint8_t value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d901      	bls.n	80006aa <MAX7219_Decode+0x1a>
 80006a6:	2300      	movs	r3, #0
 80006a8:	e00e      	b.n	80006c8 <MAX7219_Decode+0x38>

	if(!MAX7219_Write(index, MAX7219_REG_DECODE, value)) return false;
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2109      	movs	r1, #9
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff57 	bl	8000564 <MAX7219_Write>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f083 0301 	eor.w	r3, r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MAX7219_Decode+0x36>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <MAX7219_Decode+0x38>

	return true;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <MAX7219_Intensity>:

bool MAX7219_Intensity(uint8_t index, uint8_t value)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d901      	bls.n	80006ea <MAX7219_Intensity+0x1a>
 80006e6:	2300      	movs	r3, #0
 80006e8:	e013      	b.n	8000712 <MAX7219_Intensity+0x42>
	if(value > 0x0F) value = 0x0F;
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d901      	bls.n	80006f4 <MAX7219_Intensity+0x24>
 80006f0:	230f      	movs	r3, #15
 80006f2:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_INTENSITY, value)) return false;
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	210a      	movs	r1, #10
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff32 	bl	8000564 <MAX7219_Write>
 8000700:	4603      	mov	r3, r0
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MAX7219_Intensity+0x40>
 800070c:	2300      	movs	r3, #0
 800070e:	e000      	b.n	8000712 <MAX7219_Intensity+0x42>

	return true;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <MAX7219_ScanLimit>:

bool MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	460a      	mov	r2, r1
 8000724:	71fb      	strb	r3, [r7, #7]
 8000726:	4613      	mov	r3, r2
 8000728:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d901      	bls.n	8000734 <MAX7219_ScanLimit+0x1a>
 8000730:	2300      	movs	r3, #0
 8000732:	e013      	b.n	800075c <MAX7219_ScanLimit+0x42>
	if(value > 0x07) value = 0x07;
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	2b07      	cmp	r3, #7
 8000738:	d901      	bls.n	800073e <MAX7219_ScanLimit+0x24>
 800073a:	2307      	movs	r3, #7
 800073c:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value)) return false;
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	210b      	movs	r1, #11
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff0d 	bl	8000564 <MAX7219_Write>
 800074a:	4603      	mov	r3, r0
 800074c:	f083 0301 	eor.w	r3, r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MAX7219_ScanLimit+0x40>
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <MAX7219_ScanLimit+0x42>

	return true;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <MAX7219_ShutDown>:

bool MAX7219_ShutDown(uint8_t index, uint8_t value)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b03      	cmp	r3, #3
 8000778:	d901      	bls.n	800077e <MAX7219_ShutDown+0x1a>
 800077a:	2300      	movs	r3, #0
 800077c:	e013      	b.n	80007a6 <MAX7219_ShutDown+0x42>
	if(value > 0x01) value = 0x01;
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d901      	bls.n	8000788 <MAX7219_ShutDown+0x24>
 8000784:	2301      	movs	r3, #1
 8000786:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value)) return false;
 8000788:	79ba      	ldrb	r2, [r7, #6]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	210c      	movs	r1, #12
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fee8 	bl	8000564 <MAX7219_Write>
 8000794:	4603      	mov	r3, r0
 8000796:	f083 0301 	eor.w	r3, r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MAX7219_ShutDown+0x40>
 80007a0:	2300      	movs	r3, #0
 80007a2:	e000      	b.n	80007a6 <MAX7219_ShutDown+0x42>

	return true;
 80007a4:	2301      	movs	r3, #1
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <MAX7219_Test>:

bool MAX7219_Test(uint8_t index, uint8_t value)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	460a      	mov	r2, r1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d901      	bls.n	80007c8 <MAX7219_Test+0x1a>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e013      	b.n	80007f0 <MAX7219_Test+0x42>
	if(value > 0x01) value = 0x01;
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d901      	bls.n	80007d2 <MAX7219_Test+0x24>
 80007ce:	2301      	movs	r3, #1
 80007d0:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_TEST, value)) return false;
 80007d2:	79ba      	ldrb	r2, [r7, #6]
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	210f      	movs	r1, #15
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fec3 	bl	8000564 <MAX7219_Write>
 80007de:	4603      	mov	r3, r0
 80007e0:	f083 0301 	eor.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MAX7219_Test+0x40>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <MAX7219_Test+0x42>

	return true;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <SS_Select>:

static void SS_Select()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_RESET);
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <SS_Select+0x20>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a06      	ldr	r2, [pc, #24]	@ (800081c <SS_Select+0x24>)
 8000802:	8811      	ldrh	r1, [r2, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f000 feb6 	bl	8001578 <HAL_GPIO_WritePin>
	DelayUS(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f000 f85d 	bl	80008cc <DelayUS>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000cc 	.word	0x200000cc
 800081c:	200000d0 	.word	0x200000d0

08000820 <SS_Deselect>:

static void SS_Deselect()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_SET);
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <SS_Deselect+0x20>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a06      	ldr	r2, [pc, #24]	@ (8000844 <SS_Deselect+0x24>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2201      	movs	r2, #1
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fea2 	bl	8001578 <HAL_GPIO_WritePin>
	DelayUS(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 f849 	bl	80008cc <DelayUS>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000cc 	.word	0x200000cc
 8000844:	200000d0 	.word	0x200000d0

08000848 <SPI_Tx>:

static bool SPI_Tx(uint8_t data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(Max7219_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <SPI_Tx+0x30>)
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	1df9      	adds	r1, r7, #7
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	2201      	movs	r2, #1
 800085e:	f001 fb37 	bl	8001ed0 <HAL_SPI_Transmit>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SPI_Tx+0x24>
 8000868:	2300      	movs	r3, #0
 800086a:	e000      	b.n	800086e <SPI_Tx+0x26>
	return true;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000c8 	.word	0x200000c8

0800087c <DelayInit>:

static void DelayInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <DelayInit+0x48>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <DelayInit+0x48>)
 8000886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800088a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <DelayInit+0x48>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <DelayInit+0x48>)
 8000892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000896:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <DelayInit+0x4c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <DelayInit+0x4c>)
 800089e:	f023 0301 	bic.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <DelayInit+0x4c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <DelayInit+0x4c>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <DelayInit+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008b6:	bf00      	nop
  __ASM volatile ("NOP");
 80008b8:	bf00      	nop
  __ASM volatile ("NOP");
 80008ba:	bf00      	nop
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	e000edf0 	.word	0xe000edf0
 80008c8:	e0001000 	.word	0xe0001000

080008cc <DelayUS>:

static void DelayUS(uint32_t us) {
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <DelayUS+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <DelayUS+0x44>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9a      	lsrs	r2, r3, #18
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <DelayUS+0x48>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <DelayUS+0x48>)
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f6      	bhi.n	80008ee <DelayUS+0x22>
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	371c      	adds	r7, #28
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000000 	.word	0x20000000
 8000910:	431bde83 	.word	0x431bde83
 8000914:	e0001000 	.word	0xe0001000

08000918 <MAX7219_MatrixInit>:
};

volatile uint8_t FrameBuffer[MAX7219_IC_NUM][8];

void MAX7219_MatrixInit(SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	80fb      	strh	r3, [r7, #6]
	MAX7219_Init(spi, cs_port, cs_pin);
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	461a      	mov	r2, r3
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	f7ff fdfb 	bl	8000528 <MAX7219_Init>

	for(int i = 0; i < MAX7219_IC_NUM; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e02a      	b.n	800098e <MAX7219_MatrixInit+0x76>
	{
		MAX7219_MatrixClear(i);
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f82f 	bl	80009a0 <MAX7219_MatrixClear>
		MAX7219_ShutDown(i, 1);
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2101      	movs	r1, #1
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff0b 	bl	8000764 <MAX7219_ShutDown>
		MAX7219_Test(i, 0);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff2a 	bl	80007ae <MAX7219_Test>
		MAX7219_Decode(i, 0);
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe95 	bl	8000690 <MAX7219_Decode>
		MAX7219_Intensity(i, 1);
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff feaf 	bl	80006d0 <MAX7219_Intensity>
		MAX7219_ScanLimit(i, 7);
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2107      	movs	r1, #7
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fece 	bl	800071a <MAX7219_ScanLimit>
		MAX7219_MatrixClear(i);
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f80c 	bl	80009a0 <MAX7219_MatrixClear>
	for(int i = 0; i < MAX7219_IC_NUM; i++)
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	3301      	adds	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	2b03      	cmp	r3, #3
 8000992:	ddd1      	ble.n	8000938 <MAX7219_MatrixInit+0x20>
	}
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <MAX7219_MatrixClear>:

void MAX7219_MatrixClear(uint8_t index)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i < 8; i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e00a      	b.n	80009c6 <MAX7219_MatrixClear+0x26>
	{
		FrameBuffer[index][i] = 0;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <MAX7219_MatrixClear+0x38>)
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	441a      	add	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 8; i++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	ddf1      	ble.n	80009b0 <MAX7219_MatrixClear+0x10>
	}
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	200000d4 	.word	0x200000d4

080009dc <MAX7219_MatrixSetRow64>:
		FrameBuffer[index][i] = rows[i];
	}
}

void MAX7219_MatrixSetRow64(uint8_t index,  uint64_t rows)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4601      	mov	r1, r0
 80009e4:	e9c7 2300 	strd	r2, r3, [r7]
 80009e8:	460b      	mov	r3, r1
 80009ea:	73fb      	strb	r3, [r7, #15]
	for(int i =0; i < 8; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e01a      	b.n	8000a28 <MAX7219_MatrixSetRow64+0x4c>
	{
		uint8_t row = rows & 0xFF;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	74fb      	strb	r3, [r7, #19]
		FrameBuffer[index][7-i] = row;
 80009f6:	7bfa      	ldrb	r2, [r7, #15]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	490f      	ldr	r1, [pc, #60]	@ (8000a3c <MAX7219_MatrixSetRow64+0x60>)
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	440a      	add	r2, r1
 8000a04:	4413      	add	r3, r2
 8000a06:	7cfa      	ldrb	r2, [r7, #19]
 8000a08:	701a      	strb	r2, [r3, #0]
		rows = rows >> 8;
 8000a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a0e:	f04f 0200 	mov.w	r2, #0
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	0a02      	lsrs	r2, r0, #8
 8000a18:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a1c:	0a0b      	lsrs	r3, r1, #8
 8000a1e:	e9c7 2300 	strd	r2, r3, [r7]
	for(int i =0; i < 8; i++)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	dde1      	ble.n	80009f2 <MAX7219_MatrixSetRow64+0x16>
	}
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	200000d4 	.word	0x200000d4

08000a40 <MAX7219_MatrixRShift>:
{
	FrameBuffer[index][digit] = row;
}

void MAX7219_MatrixRShift(uint8_t step)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	uint8_t msbD0, msbD1, msbD2, msbD3;

	for(int i=0; i < 8; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e09d      	b.n	8000b8c <MAX7219_MatrixRShift+0x14c>
	{
		msbD0 = ((FrameBuffer[0][i] & 0x80) >> 7);
 8000a50:	4a53      	ldr	r2, [pc, #332]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	11db      	asrs	r3, r3, #7
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	72fb      	strb	r3, [r7, #11]
		FrameBuffer[0][i] = FrameBuffer[0][i] << 1;
 8000a64:	4a4e      	ldr	r2, [pc, #312]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	b2d9      	uxtb	r1, r3
 8000a72:	4a4b      	ldr	r2, [pc, #300]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	460a      	mov	r2, r1
 8000a7a:	701a      	strb	r2, [r3, #0]

		msbD1 = ((FrameBuffer[1][i] & 0x80) >> 7);
 8000a7c:	4a48      	ldr	r2, [pc, #288]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	3308      	adds	r3, #8
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	11db      	asrs	r3, r3, #7
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	72bb      	strb	r3, [r7, #10]
		FrameBuffer[1][i] = FrameBuffer[1][i] << 1;
 8000a92:	4a43      	ldr	r2, [pc, #268]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	3308      	adds	r3, #8
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	b2d9      	uxtb	r1, r3
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3308      	adds	r3, #8
 8000aaa:	460a      	mov	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
		FrameBuffer[1][i] |= msbD0;
 8000aae:	4a3c      	ldr	r2, [pc, #240]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	7afb      	ldrb	r3, [r7, #11]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b2d9      	uxtb	r1, r3
 8000ac0:	4a37      	ldr	r2, [pc, #220]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	3308      	adds	r3, #8
 8000ac8:	460a      	mov	r2, r1
 8000aca:	701a      	strb	r2, [r3, #0]

		msbD2 = ((FrameBuffer[2][i] & 0x80) >> 7);
 8000acc:	4a34      	ldr	r2, [pc, #208]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	3310      	adds	r3, #16
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	11db      	asrs	r3, r3, #7
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	727b      	strb	r3, [r7, #9]
		FrameBuffer[2][i] = FrameBuffer[2][i] << 1;
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	3310      	adds	r3, #16
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	b2d9      	uxtb	r1, r3
 8000af2:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	3310      	adds	r3, #16
 8000afa:	460a      	mov	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
		FrameBuffer[2][i] |= msbD1;
 8000afe:	4a28      	ldr	r2, [pc, #160]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	3310      	adds	r3, #16
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	7abb      	ldrb	r3, [r7, #10]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b2d9      	uxtb	r1, r3
 8000b10:	4a23      	ldr	r2, [pc, #140]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4413      	add	r3, r2
 8000b16:	3310      	adds	r3, #16
 8000b18:	460a      	mov	r2, r1
 8000b1a:	701a      	strb	r2, [r3, #0]

		msbD3 = ((FrameBuffer[3][i] & 0x80) >> 7);
 8000b1c:	4a20      	ldr	r2, [pc, #128]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4413      	add	r3, r2
 8000b22:	3318      	adds	r3, #24
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	11db      	asrs	r3, r3, #7
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	723b      	strb	r3, [r7, #8]
		FrameBuffer[3][i] = FrameBuffer[3][i] << 1;
 8000b32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	3318      	adds	r3, #24
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	b2d9      	uxtb	r1, r3
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	3318      	adds	r3, #24
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
		FrameBuffer[3][i] |= msbD2;
 8000b4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	3318      	adds	r3, #24
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	7a7b      	ldrb	r3, [r7, #9]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	b2d9      	uxtb	r1, r3
 8000b60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4413      	add	r3, r2
 8000b66:	3318      	adds	r3, #24
 8000b68:	460a      	mov	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
		FrameBuffer[0][i] |= msbD3;
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	7a3b      	ldrb	r3, [r7, #8]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b2d9      	uxtb	r1, r3
 8000b7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <MAX7219_MatrixRShift+0x160>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4413      	add	r3, r2
 8000b82:	460a      	mov	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 8; i++)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	f77f af5e 	ble.w	8000a50 <MAX7219_MatrixRShift+0x10>
	}
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	200000d4 	.word	0x200000d4

08000ba4 <MAX7219_MatrixLShift>:

void MAX7219_MatrixLShift(uint8_t step)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	uint8_t lsbD0, lsbD1, lsbD2, lsbD3;

	for(int i=0; i < 8; i++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e09d      	b.n	8000cf0 <MAX7219_MatrixLShift+0x14c>
	{
		lsbD3 = ((FrameBuffer[3][i] & 0x01) << 7);
 8000bb4:	4a53      	ldr	r2, [pc, #332]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	3318      	adds	r3, #24
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	01db      	lsls	r3, r3, #7
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000bc8:	72fb      	strb	r3, [r7, #11]
		FrameBuffer[3][i] = FrameBuffer[3][i] >> 1;
 8000bca:	4a4e      	ldr	r2, [pc, #312]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	3318      	adds	r3, #24
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	085b      	lsrs	r3, r3, #1
 8000bd8:	b2d9      	uxtb	r1, r3
 8000bda:	4a4a      	ldr	r2, [pc, #296]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	3318      	adds	r3, #24
 8000be2:	460a      	mov	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]

		lsbD2 = ((FrameBuffer[2][i] & 0x01) << 7);
 8000be6:	4a47      	ldr	r2, [pc, #284]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	3310      	adds	r3, #16
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	01db      	lsls	r3, r3, #7
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000bfa:	72bb      	strb	r3, [r7, #10]
		FrameBuffer[2][i] = FrameBuffer[2][i] >> 1;
 8000bfc:	4a41      	ldr	r2, [pc, #260]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4413      	add	r3, r2
 8000c02:	3310      	adds	r3, #16
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	b2d9      	uxtb	r1, r3
 8000c0c:	4a3d      	ldr	r2, [pc, #244]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4413      	add	r3, r2
 8000c12:	3310      	adds	r3, #16
 8000c14:	460a      	mov	r2, r1
 8000c16:	701a      	strb	r2, [r3, #0]
		FrameBuffer[2][i] |= lsbD3;
 8000c18:	4a3a      	ldr	r2, [pc, #232]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3310      	adds	r3, #16
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	7afb      	ldrb	r3, [r7, #11]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b2d9      	uxtb	r1, r3
 8000c2a:	4a36      	ldr	r2, [pc, #216]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	3310      	adds	r3, #16
 8000c32:	460a      	mov	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]

		lsbD1 = ((FrameBuffer[1][i] & 0x01) << 7);
 8000c36:	4a33      	ldr	r2, [pc, #204]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	01db      	lsls	r3, r3, #7
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000c4a:	727b      	strb	r3, [r7, #9]
		FrameBuffer[1][i] = FrameBuffer[1][i] >> 1;
 8000c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4413      	add	r3, r2
 8000c52:	3308      	adds	r3, #8
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	085b      	lsrs	r3, r3, #1
 8000c5a:	b2d9      	uxtb	r1, r3
 8000c5c:	4a29      	ldr	r2, [pc, #164]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	3308      	adds	r3, #8
 8000c64:	460a      	mov	r2, r1
 8000c66:	701a      	strb	r2, [r3, #0]
		FrameBuffer[1][i] |= lsbD2;
 8000c68:	4a26      	ldr	r2, [pc, #152]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3308      	adds	r3, #8
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	7abb      	ldrb	r3, [r7, #10]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b2d9      	uxtb	r1, r3
 8000c7a:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	3308      	adds	r3, #8
 8000c82:	460a      	mov	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]

		lsbD0 = ((FrameBuffer[0][i] & 0x01) << 7);
 8000c86:	4a1f      	ldr	r2, [pc, #124]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	01db      	lsls	r3, r3, #7
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000c98:	723b      	strb	r3, [r7, #8]
		FrameBuffer[0][i] = FrameBuffer[0][i] >> 1;
 8000c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	085b      	lsrs	r3, r3, #1
 8000ca6:	b2d9      	uxtb	r1, r3
 8000ca8:	4a16      	ldr	r2, [pc, #88]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	460a      	mov	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
		FrameBuffer[0][i] |= lsbD1;
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	7a7b      	ldrb	r3, [r7, #9]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b2d9      	uxtb	r1, r3
 8000cc2:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	460a      	mov	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
		FrameBuffer[3][i] |= lsbD0;
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	7a3b      	ldrb	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b2d9      	uxtb	r1, r3
 8000cde:	4a09      	ldr	r2, [pc, #36]	@ (8000d04 <MAX7219_MatrixLShift+0x160>)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3318      	adds	r3, #24
 8000ce6:	460a      	mov	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 8; i++)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	f77f af5e 	ble.w	8000bb4 <MAX7219_MatrixLShift+0x10>
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	200000d4 	.word	0x200000d4

08000d08 <MAX7219_MatrixUpdate>:

bool MAX7219_MatrixUpdate()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e024      	b.n	8000d5e <MAX7219_MatrixUpdate+0x56>
	{
		for(int digit = 0; digit < 8; digit++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	e01b      	b.n	8000d52 <MAX7219_MatrixUpdate+0x4a>
		{
			uint8_t row = FrameBuffer[index][digit];
 8000d1a:	4a15      	ldr	r2, [pc, #84]	@ (8000d70 <MAX7219_MatrixUpdate+0x68>)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	441a      	add	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	71fb      	strb	r3, [r7, #7]
			if(!MAX7219_Digit(index, digit, row)) return false;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	b2d1      	uxtb	r1, r2
 8000d32:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fc82 	bl	8000640 <MAX7219_Digit>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f083 0301 	eor.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MAX7219_MatrixUpdate+0x44>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e00c      	b.n	8000d66 <MAX7219_MatrixUpdate+0x5e>
		for(int digit = 0; digit < 8; digit++)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	2b07      	cmp	r3, #7
 8000d56:	dde0      	ble.n	8000d1a <MAX7219_MatrixUpdate+0x12>
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	ddd7      	ble.n	8000d14 <MAX7219_MatrixUpdate+0xc>
		}
	}

	return true;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200000d4 	.word	0x200000d4

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_MspInit+0x60>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_MspInit+0x60>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a15      	ldr	r2, [pc, #84]	@ (8000e48 <HAL_SPI_MspInit+0x70>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d123      	bne.n	8000e40 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_SPI_MspInit+0x74>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <HAL_SPI_MspInit+0x74>)
 8000dfe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_SPI_MspInit+0x74>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_SPI_MspInit+0x74>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <HAL_SPI_MspInit+0x74>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_SPI_MspInit+0x74>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e28:	23a0      	movs	r3, #160	@ 0xa0
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_SPI_MspInit+0x78>)
 8000e3c:	f000 fa18 	bl	8001270 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40013000 	.word	0x40013000
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010800 	.word	0x40010800

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d131      	bne.n	8000ed8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <HAL_UART_MspInit+0x90>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee4 <HAL_UART_MspInit+0x90>)
 8000e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_UART_MspInit+0x90>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_UART_MspInit+0x90>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <HAL_UART_MspInit+0x90>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_UART_MspInit+0x90>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <HAL_UART_MspInit+0x94>)
 8000eba:	f000 f9d9 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_UART_MspInit+0x94>)
 8000ed4:	f000 f9cc 	bl	8001270 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010800 	.word	0x40010800

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f874 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f50:	f7ff fff8 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f56:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f58:	4a0c      	ldr	r2, [pc, #48]	@ (8000f8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f6c:	4c09      	ldr	r4, [pc, #36]	@ (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f001 fa8d 	bl	8002498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7e:	f7ff f8e5 	bl	800014c <main>
  bx lr
 8000f82:	4770      	bx	lr
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f8c:	08002724 	.word	0x08002724
  ldr r2, =_sbss
 8000f90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f94:	200000f8 	.word	0x200000f8

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_Init+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <HAL_Init+0x28>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f92b 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fedc 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f935 	bl	8001256 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f90b 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_IncTick+0x1c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_IncTick+0x20>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a03      	ldr	r2, [pc, #12]	@ (8001048 <HAL_IncTick+0x20>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	20000008 	.word	0x20000008
 8001048:	200000f4 	.word	0x200000f4

0800104c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b02      	ldr	r3, [pc, #8]	@ (800105c <HAL_GetTick+0x10>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	200000f4 	.word	0x200000f4

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff fff0 	bl	800104c <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffe0 	bl	800104c <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	@ (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	@ (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	@ 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff90 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff49 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff90 	bl	8001160 <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5f 	bl	800110c <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b08b      	sub	sp, #44	@ 0x2c
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e169      	b.n	8001558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001284:	2201      	movs	r2, #1
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	429a      	cmp	r2, r3
 800129e:	f040 8158 	bne.w	8001552 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001510 <HAL_GPIO_Init+0x2a0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d05e      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012ac:	4a98      	ldr	r2, [pc, #608]	@ (8001510 <HAL_GPIO_Init+0x2a0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d875      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012b2:	4a98      	ldr	r2, [pc, #608]	@ (8001514 <HAL_GPIO_Init+0x2a4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d058      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012b8:	4a96      	ldr	r2, [pc, #600]	@ (8001514 <HAL_GPIO_Init+0x2a4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d86f      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012be:	4a96      	ldr	r2, [pc, #600]	@ (8001518 <HAL_GPIO_Init+0x2a8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d052      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012c4:	4a94      	ldr	r2, [pc, #592]	@ (8001518 <HAL_GPIO_Init+0x2a8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d869      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012ca:	4a94      	ldr	r2, [pc, #592]	@ (800151c <HAL_GPIO_Init+0x2ac>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d04c      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012d0:	4a92      	ldr	r2, [pc, #584]	@ (800151c <HAL_GPIO_Init+0x2ac>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d863      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012d6:	4a92      	ldr	r2, [pc, #584]	@ (8001520 <HAL_GPIO_Init+0x2b0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d046      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012dc:	4a90      	ldr	r2, [pc, #576]	@ (8001520 <HAL_GPIO_Init+0x2b0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d85d      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d82a      	bhi.n	800133c <HAL_GPIO_Init+0xcc>
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d859      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012ea:	a201      	add	r2, pc, #4	@ (adr r2, 80012f0 <HAL_GPIO_Init+0x80>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	0800136b 	.word	0x0800136b
 80012f4:	08001345 	.word	0x08001345
 80012f8:	08001357 	.word	0x08001357
 80012fc:	08001399 	.word	0x08001399
 8001300:	0800139f 	.word	0x0800139f
 8001304:	0800139f 	.word	0x0800139f
 8001308:	0800139f 	.word	0x0800139f
 800130c:	0800139f 	.word	0x0800139f
 8001310:	0800139f 	.word	0x0800139f
 8001314:	0800139f 	.word	0x0800139f
 8001318:	0800139f 	.word	0x0800139f
 800131c:	0800139f 	.word	0x0800139f
 8001320:	0800139f 	.word	0x0800139f
 8001324:	0800139f 	.word	0x0800139f
 8001328:	0800139f 	.word	0x0800139f
 800132c:	0800139f 	.word	0x0800139f
 8001330:	0800139f 	.word	0x0800139f
 8001334:	0800134d 	.word	0x0800134d
 8001338:	08001361 	.word	0x08001361
 800133c:	4a79      	ldr	r2, [pc, #484]	@ (8001524 <HAL_GPIO_Init+0x2b4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001342:	e02c      	b.n	800139e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e029      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	3304      	adds	r3, #4
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	e024      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	3308      	adds	r3, #8
 800135c:	623b      	str	r3, [r7, #32]
          break;
 800135e:	e01f      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	330c      	adds	r3, #12
 8001366:	623b      	str	r3, [r7, #32]
          break;
 8001368:	e01a      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001372:	2304      	movs	r3, #4
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e013      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d105      	bne.n	800138c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001380:	2308      	movs	r3, #8
 8001382:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	611a      	str	r2, [r3, #16]
          break;
 800138a:	e009      	b.n	80013a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	615a      	str	r2, [r3, #20]
          break;
 8001396:	e003      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          break;
 800139e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2bff      	cmp	r3, #255	@ 0xff
 80013a4:	d801      	bhi.n	80013aa <HAL_GPIO_Init+0x13a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_Init+0x13e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2bff      	cmp	r3, #255	@ 0xff
 80013b4:	d802      	bhi.n	80013bc <HAL_GPIO_Init+0x14c>
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x152>
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	3b08      	subs	r3, #8
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	210f      	movs	r1, #15
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	401a      	ands	r2, r3
 80013d4:	6a39      	ldr	r1, [r7, #32]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	431a      	orrs	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80b1 	beq.w	8001552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001528 <HAL_GPIO_Init+0x2b8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001528 <HAL_GPIO_Init+0x2b8>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001528 <HAL_GPIO_Init+0x2b8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001408:	4a48      	ldr	r2, [pc, #288]	@ (800152c <HAL_GPIO_Init+0x2bc>)
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a40      	ldr	r2, [pc, #256]	@ (8001530 <HAL_GPIO_Init+0x2c0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d013      	beq.n	800145c <HAL_GPIO_Init+0x1ec>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a3f      	ldr	r2, [pc, #252]	@ (8001534 <HAL_GPIO_Init+0x2c4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00d      	beq.n	8001458 <HAL_GPIO_Init+0x1e8>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3e      	ldr	r2, [pc, #248]	@ (8001538 <HAL_GPIO_Init+0x2c8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0x1e4>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3d      	ldr	r2, [pc, #244]	@ (800153c <HAL_GPIO_Init+0x2cc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d101      	bne.n	8001450 <HAL_GPIO_Init+0x1e0>
 800144c:	2303      	movs	r3, #3
 800144e:	e006      	b.n	800145e <HAL_GPIO_Init+0x1ee>
 8001450:	2304      	movs	r3, #4
 8001452:	e004      	b.n	800145e <HAL_GPIO_Init+0x1ee>
 8001454:	2302      	movs	r3, #2
 8001456:	e002      	b.n	800145e <HAL_GPIO_Init+0x1ee>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <HAL_GPIO_Init+0x1ee>
 800145c:	2300      	movs	r3, #0
 800145e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001460:	f002 0203 	and.w	r2, r2, #3
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	4093      	lsls	r3, r2
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800146e:	492f      	ldr	r1, [pc, #188]	@ (800152c <HAL_GPIO_Init+0x2bc>)
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001488:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	492c      	ldr	r1, [pc, #176]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4928      	ldr	r1, [pc, #160]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b0:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	4922      	ldr	r1, [pc, #136]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60cb      	str	r3, [r1, #12]
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	491e      	ldr	r1, [pc, #120]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4918      	ldr	r1, [pc, #96]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	4914      	ldr	r1, [pc, #80]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d021      	beq.n	8001544 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	490e      	ldr	r1, [pc, #56]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e021      	b.n	8001552 <HAL_GPIO_Init+0x2e2>
 800150e:	bf00      	nop
 8001510:	10320000 	.word	0x10320000
 8001514:	10310000 	.word	0x10310000
 8001518:	10220000 	.word	0x10220000
 800151c:	10210000 	.word	0x10210000
 8001520:	10120000 	.word	0x10120000
 8001524:	10110000 	.word	0x10110000
 8001528:	40021000 	.word	0x40021000
 800152c:	40010000 	.word	0x40010000
 8001530:	40010800 	.word	0x40010800
 8001534:	40010c00 	.word	0x40010c00
 8001538:	40011000 	.word	0x40011000
 800153c:	40011400 	.word	0x40011400
 8001540:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	43db      	mvns	r3, r3
 800154c:	4909      	ldr	r1, [pc, #36]	@ (8001574 <HAL_GPIO_Init+0x304>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	3301      	adds	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	f47f ae8e 	bne.w	8001284 <HAL_GPIO_Init+0x14>
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	372c      	adds	r7, #44	@ 0x2c
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	611a      	str	r2, [r3, #16]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e272      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8087 	beq.w	80016d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c8:	4b92      	ldr	r3, [pc, #584]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d00c      	beq.n	80015ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d112      	bne.n	8001606 <HAL_RCC_OscConfig+0x5e>
 80015e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ec:	d10b      	bne.n	8001606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ee:	4b89      	ldr	r3, [pc, #548]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d06c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x12c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d168      	bne.n	80016d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e24c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x76>
 8001610:	4b80      	ldr	r3, [pc, #512]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a7f      	ldr	r2, [pc, #508]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e02e      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b7b      	ldr	r3, [pc, #492]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7a      	ldr	r2, [pc, #488]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b78      	ldr	r3, [pc, #480]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a77      	ldr	r2, [pc, #476]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0xbc>
 800164a:	4b72      	ldr	r3, [pc, #456]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a71      	ldr	r2, [pc, #452]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6e      	ldr	r2, [pc, #440]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001664:	4b6b      	ldr	r3, [pc, #428]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6a      	ldr	r2, [pc, #424]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b68      	ldr	r3, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a67      	ldr	r2, [pc, #412]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800167a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fce2 	bl	800104c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fcde 	bl	800104c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	@ 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e200      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0xe4>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fcce 	bl	800104c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fcca 	bl	800104c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	@ 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1ec      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x10c>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d063      	beq.n	80017aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ee:	4b49      	ldr	r3, [pc, #292]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x18c>
 80016fa:	4b46      	ldr	r3, [pc, #280]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1c0      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4939      	ldr	r1, [pc, #228]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fc83 	bl	800104c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fc7f 	bl	800104c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1a1      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4927      	ldr	r1, [pc, #156]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc62 	bl	800104c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fc5e 	bl	800104c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e180      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03a      	beq.n	800182c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d019      	beq.n	80017f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_RCC_OscConfig+0x274>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fc42 	bl	800104c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc3e 	bl	800104c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e160      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f000 face 	bl	8001d8c <RCC_Delay>
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <HAL_RCC_OscConfig+0x274>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fc28 	bl	800104c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fe:	e00f      	b.n	8001820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fc24 	bl	800104c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d908      	bls.n	8001820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e146      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	42420000 	.word	0x42420000
 800181c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b92      	ldr	r3, [pc, #584]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e9      	bne.n	8001800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80a6 	beq.w	8001986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b88      	ldr	r3, [pc, #544]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a87      	ldr	r2, [pc, #540]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b85      	ldr	r3, [pc, #532]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b82      	ldr	r3, [pc, #520]	@ (8001a70 <HAL_RCC_OscConfig+0x4c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	4b7f      	ldr	r3, [pc, #508]	@ (8001a70 <HAL_RCC_OscConfig+0x4c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7e      	ldr	r2, [pc, #504]	@ (8001a70 <HAL_RCC_OscConfig+0x4c8>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff fbe5 	bl	800104c <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fbe1 	bl	800104c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	@ 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e103      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b75      	ldr	r3, [pc, #468]	@ (8001a70 <HAL_RCC_OscConfig+0x4c8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x312>
 80018ac:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	e02d      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x334>
 80018c2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a69      	ldr	r2, [pc, #420]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	4b67      	ldr	r3, [pc, #412]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a66      	ldr	r2, [pc, #408]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	e01c      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x356>
 80018e4:	4b61      	ldr	r3, [pc, #388]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a60      	ldr	r2, [pc, #384]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	e00b      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a5a      	ldr	r2, [pc, #360]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b58      	ldr	r3, [pc, #352]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a57      	ldr	r2, [pc, #348]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d015      	beq.n	800194a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff fb95 	bl	800104c <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff fb91 	bl	800104c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0b1      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ee      	beq.n	8001926 <HAL_RCC_OscConfig+0x37e>
 8001948:	e014      	b.n	8001974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fb7f 	bl	800104c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff fb7b 	bl	800104c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e09b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ee      	bne.n	8001952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8087 	beq.w	8001a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001990:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d061      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d146      	bne.n	8001a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fb4f 	bl	800104c <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fb4b 	bl	800104c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e06d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d8:	d108      	bne.n	80019ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019da:	4b24      	ldr	r3, [pc, #144]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4921      	ldr	r1, [pc, #132]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ec:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a19      	ldr	r1, [r3, #32]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	430b      	orrs	r3, r1
 80019fe:	491b      	ldr	r1, [pc, #108]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fb1f 	bl	800104c <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff fb1b 	bl	800104c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e03d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46a>
 8001a30:	e035      	b.n	8001a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <HAL_RCC_OscConfig+0x4cc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb08 	bl	800104c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff fb04 	bl	800104c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e026      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x498>
 8001a5e:	e01e      	b.n	8001a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e019      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40007000 	.word	0x40007000
 8001a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_RCC_OscConfig+0x500>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0d0      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d910      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	4965      	ldr	r1, [pc, #404]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b63      	ldr	r3, [pc, #396]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0b8      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b08:	4b59      	ldr	r3, [pc, #356]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a58      	ldr	r2, [pc, #352]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b20:	4b53      	ldr	r3, [pc, #332]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a52      	ldr	r2, [pc, #328]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	494d      	ldr	r1, [pc, #308]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d040      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d115      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e07f      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e073      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e06b      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8a:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f023 0203 	bic.w	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4936      	ldr	r1, [pc, #216]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff fa56 	bl	800104c <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff fa52 	bl	800104c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e053      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1eb      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d210      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4922      	ldr	r1, [pc, #136]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e032      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4916      	ldr	r1, [pc, #88]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	490e      	ldr	r1, [pc, #56]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c3a:	f000 f821 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	490a      	ldr	r1, [pc, #40]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	5ccb      	ldrb	r3, [r1, r3]
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <HAL_RCC_ClockConfig+0x1cc>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <HAL_RCC_ClockConfig+0x1d0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f9b4 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	40021000 	.word	0x40021000
 8001c74:	080026f0 	.word	0x080026f0
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8001cae:	e027      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cb2:	613b      	str	r3, [r7, #16]
      break;
 8001cb4:	e027      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	0c9b      	lsrs	r3, r3, #18
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d010      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0c5b      	lsrs	r3, r3, #17
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	4a11      	ldr	r2, [pc, #68]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ce2:	fb03 f202 	mul.w	r2, r3, r2
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e004      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	613b      	str	r3, [r7, #16]
      break;
 8001cfe:	e002      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d02:	613b      	str	r3, [r7, #16]
      break;
 8001d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d06:	693b      	ldr	r3, [r7, #16]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	007a1200 	.word	0x007a1200
 8001d1c:	08002708 	.word	0x08002708
 8001d20:	08002718 	.word	0x08002718
 8001d24:	003d0900 	.word	0x003d0900

08001d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d2c:	4b02      	ldr	r3, [pc, #8]	@ (8001d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d40:	f7ff fff2 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	@ (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08002700 	.word	0x08002700

08001d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	0adb      	lsrs	r3, r3, #11
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4903      	ldr	r1, [pc, #12]	@ (8001d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	08002700 	.word	0x08002700

08001d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d94:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <RCC_Delay+0x34>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <RCC_Delay+0x38>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0a5b      	lsrs	r3, r3, #9
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001da8:	bf00      	nop
  }
  while (Delay --);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	60fa      	str	r2, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f9      	bne.n	8001da8 <RCC_Delay+0x1c>
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	10624dd3 	.word	0x10624dd3

08001dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e076      	b.n	8001ec8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d108      	bne.n	8001df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dea:	d009      	beq.n	8001e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
 8001df2:	e005      	b.n	8001e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe ffdc 	bl	8000dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e84:	ea42 0103 	orr.w	r1, r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	0c1a      	lsrs	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f002 0204 	and.w	r2, r2, #4
 8001ea6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ee0:	f7ff f8b4 	bl	800104c <HAL_GetTick>
 8001ee4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d001      	beq.n	8001efa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e12a      	b.n	8002150 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_SPI_Transmit+0x36>
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e122      	b.n	8002150 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_SPI_Transmit+0x48>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e11b      	b.n	8002150 <HAL_SPI_Transmit+0x280>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2203      	movs	r2, #3
 8001f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	88fa      	ldrh	r2, [r7, #6]
 8001f3e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f66:	d10f      	bne.n	8001f88 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f92:	2b40      	cmp	r3, #64	@ 0x40
 8001f94:	d007      	beq.n	8001fa6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fae:	d152      	bne.n	8002056 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_SPI_Transmit+0xee>
 8001fb8:	8b7b      	ldrh	r3, [r7, #26]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d145      	bne.n	800204a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	1c9a      	adds	r2, r3, #2
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fe2:	e032      	b.n	800204a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d112      	bne.n	8002018 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	881a      	ldrh	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	1c9a      	adds	r2, r3, #2
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002016:	e018      	b.n	800204a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002018:	f7ff f818 	bl	800104c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d803      	bhi.n	8002030 <HAL_SPI_Transmit+0x160>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202e:	d102      	bne.n	8002036 <HAL_SPI_Transmit+0x166>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e082      	b.n	8002150 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1c7      	bne.n	8001fe4 <HAL_SPI_Transmit+0x114>
 8002054:	e053      	b.n	80020fe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <HAL_SPI_Transmit+0x194>
 800205e:	8b7b      	ldrh	r3, [r7, #26]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d147      	bne.n	80020f4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	330c      	adds	r3, #12
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800208a:	e033      	b.n	80020f4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d113      	bne.n	80020c2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	330c      	adds	r3, #12
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020c0:	e018      	b.n	80020f4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020c2:	f7fe ffc3 	bl	800104c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d803      	bhi.n	80020da <HAL_SPI_Transmit+0x20a>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d102      	bne.n	80020e0 <HAL_SPI_Transmit+0x210>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e02d      	b.n	8002150 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1c6      	bne.n	800208c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	6839      	ldr	r1, [r7, #0]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f8b0 	bl	8002268 <SPI_EndRxTxTransaction>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800214e:	2300      	movs	r3, #0
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002168:	f7fe ff70 	bl	800104c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002178:	f7fe ff68 	bl	800104c <HAL_GetTick>
 800217c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800217e:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	0d1b      	lsrs	r3, r3, #20
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800218e:	e054      	b.n	800223a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d050      	beq.n	800223a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002198:	f7fe ff58 	bl	800104c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d902      	bls.n	80021ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d13d      	bne.n	800222a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021c6:	d111      	bne.n	80021ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021d0:	d004      	beq.n	80021dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021da:	d107      	bne.n	80021ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f4:	d10f      	bne.n	8002216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e017      	b.n	800225a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3b01      	subs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	429a      	cmp	r2, r3
 8002256:	d19b      	bne.n	8002190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000000 	.word	0x20000000

08002268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2201      	movs	r2, #1
 800227c:	2102      	movs	r1, #2
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7ff ff6a 	bl	8002158 <SPI_WaitFlagStateUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e013      	b.n	80022c2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2180      	movs	r1, #128	@ 0x80
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff ff57 	bl	8002158 <SPI_WaitFlagStateUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e000      	b.n	80022c2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e042      	b.n	8002362 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7fe fdaf 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2224      	movs	r2, #36	@ 0x24
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800230c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f82c 	bl	800236c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002322:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002332:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002342:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80023a6:	f023 030c 	bic.w	r3, r3, #12
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002480 <UART_SetConfig+0x114>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d103      	bne.n	80023dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023d4:	f7ff fcc6 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	e002      	b.n	80023e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023dc:	f7ff fcae 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 80023e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009a      	lsls	r2, r3, #2
 80023ec:	441a      	add	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	4a22      	ldr	r2, [pc, #136]	@ (8002484 <UART_SetConfig+0x118>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	0119      	lsls	r1, r3, #4
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f2f3 	udiv	r2, r2, r3
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <UART_SetConfig+0x118>)
 800241a:	fba3 0302 	umull	r0, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2064      	movs	r0, #100	@ 0x64
 8002422:	fb00 f303 	mul.w	r3, r0, r3
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	3332      	adds	r3, #50	@ 0x32
 800242c:	4a15      	ldr	r2, [pc, #84]	@ (8002484 <UART_SetConfig+0x118>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002438:	4419      	add	r1, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <UART_SetConfig+0x118>)
 8002452:	fba3 0302 	umull	r0, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2064      	movs	r0, #100	@ 0x64
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	@ 0x32
 8002464:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <UART_SetConfig+0x118>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	440a      	add	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013800 	.word	0x40013800
 8002484:	51eb851f 	.word	0x51eb851f

08002488 <memset>:
 8002488:	4603      	mov	r3, r0
 800248a:	4402      	add	r2, r0
 800248c:	4293      	cmp	r3, r2
 800248e:	d100      	bne.n	8002492 <memset+0xa>
 8002490:	4770      	bx	lr
 8002492:	f803 1b01 	strb.w	r1, [r3], #1
 8002496:	e7f9      	b.n	800248c <memset+0x4>

08002498 <__libc_init_array>:
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	2600      	movs	r6, #0
 800249c:	4d0c      	ldr	r5, [pc, #48]	@ (80024d0 <__libc_init_array+0x38>)
 800249e:	4c0d      	ldr	r4, [pc, #52]	@ (80024d4 <__libc_init_array+0x3c>)
 80024a0:	1b64      	subs	r4, r4, r5
 80024a2:	10a4      	asrs	r4, r4, #2
 80024a4:	42a6      	cmp	r6, r4
 80024a6:	d109      	bne.n	80024bc <__libc_init_array+0x24>
 80024a8:	f000 f81a 	bl	80024e0 <_init>
 80024ac:	2600      	movs	r6, #0
 80024ae:	4d0a      	ldr	r5, [pc, #40]	@ (80024d8 <__libc_init_array+0x40>)
 80024b0:	4c0a      	ldr	r4, [pc, #40]	@ (80024dc <__libc_init_array+0x44>)
 80024b2:	1b64      	subs	r4, r4, r5
 80024b4:	10a4      	asrs	r4, r4, #2
 80024b6:	42a6      	cmp	r6, r4
 80024b8:	d105      	bne.n	80024c6 <__libc_init_array+0x2e>
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
 80024bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80024c0:	4798      	blx	r3
 80024c2:	3601      	adds	r6, #1
 80024c4:	e7ee      	b.n	80024a4 <__libc_init_array+0xc>
 80024c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ca:	4798      	blx	r3
 80024cc:	3601      	adds	r6, #1
 80024ce:	e7f2      	b.n	80024b6 <__libc_init_array+0x1e>
 80024d0:	0800271c 	.word	0x0800271c
 80024d4:	0800271c 	.word	0x0800271c
 80024d8:	0800271c 	.word	0x0800271c
 80024dc:	08002720 	.word	0x08002720

080024e0 <_init>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr

080024ec <_fini>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	bf00      	nop
 80024f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f2:	bc08      	pop	{r3}
 80024f4:	469e      	mov	lr, r3
 80024f6:	4770      	bx	lr

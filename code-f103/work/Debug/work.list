
work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005568  08005568  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005568  08005568  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005568  08005568  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005568  08005568  00006568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800556c  0800556c  0000656c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005570  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20000068  080055d8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b34  080055d8  00007b34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125e1  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f20  00000000  00000000  00019672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0001c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e25  00000000  00000000  0001d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac63  00000000  00000000  0001e60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162f5  00000000  00000000  00039270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009682a  00000000  00000000  0004f565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005374  00000000  00000000  000e5dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000eb148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080054b8 	.word	0x080054b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080054b8 	.word	0x080054b8

0800014c <InitBasic>:
volatile uint16_t rx1_w_idx = 0;
volatile uint16_t rx1_r_idx = 0;


void InitBasic()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// UART1 RX 인터럽트 활성
	HAL_UART_Receive_IT(&huart1, &rx1data, 1);
 8000150:	2201      	movs	r2, #1
 8000152:	4903      	ldr	r1, [pc, #12]	@ (8000160 <InitBasic+0x14>)
 8000154:	4803      	ldr	r0, [pc, #12]	@ (8000164 <InitBasic+0x18>)
 8000156:	f003 fc88 	bl	8003a6a <HAL_UART_Receive_IT>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	20000084 	.word	0x20000084
 8000164:	20000994 	.word	0x20000994

08000168 <GetTick>:


uint32_t GetTick()
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800016c:	f000 fe7e 	bl	8000e6c <HAL_GetTick>
 8000170:	4603      	mov	r3, r0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}

08000176 <GetElapsedTick>:

uint32_t GetElapsedTick(uint32_t start)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b084      	sub	sp, #16
 800017a:	af00      	add	r7, sp, #0
 800017c:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 800017e:	f000 fe75 	bl	8000e6c <HAL_GetTick>
 8000182:	60f8      	str	r0, [r7, #12]

	if (now >= start)
 8000184:	68fa      	ldr	r2, [r7, #12]
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	429a      	cmp	r2, r3
 800018a:	d303      	bcc.n	8000194 <GetElapsedTick+0x1e>
		return now - start;
 800018c:	68fa      	ldr	r2, [r7, #12]
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	1ad3      	subs	r3, r2, r3
 8000192:	e005      	b.n	80001a0 <GetElapsedTick+0x2a>
	else
		return (0xffff - start) + now;
 8000194:	68fa      	ldr	r2, [r7, #12]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	1ad3      	subs	r3, r2, r3
 800019a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800019e:	33ff      	adds	r3, #255	@ 0xff
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3710      	adds	r7, #16
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <__io_putchar>:


int __io_putchar(int ch)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	// printf()함수를 실행했을 때 UART로 출력
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 80001b0:	1d39      	adds	r1, r7, #4
 80001b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001b6:	2201      	movs	r2, #1
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <__io_putchar+0x20>)
 80001ba:	f003 fbcb 	bl	8003954 <HAL_UART_Transmit>
	return ch;
 80001be:	687b      	ldr	r3, [r7, #4]
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	3708      	adds	r7, #8
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	20000994 	.word	0x20000994

080001cc <HAL_UART_RxCpltCallback>:



// UART1 RX 인터럽트 핸들러
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <HAL_UART_RxCpltCallback+0x48>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d115      	bne.n	800020a <HAL_UART_RxCpltCallback+0x3e>
	{
		rx1_buff[rx1_w_idx] = rx1data;
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <HAL_UART_RxCpltCallback+0x4c>)
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b0d      	ldr	r3, [pc, #52]	@ (800021c <HAL_UART_RxCpltCallback+0x50>)
 80001e8:	7819      	ldrb	r1, [r3, #0]
 80001ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000220 <HAL_UART_RxCpltCallback+0x54>)
 80001ec:	5499      	strb	r1, [r3, r2]
		rx1_w_idx = (rx1_w_idx + 1) % sizeof(rx1_buff);
 80001ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000218 <HAL_UART_RxCpltCallback+0x4c>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	3301      	adds	r3, #1
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <HAL_UART_RxCpltCallback+0x4c>)
 80001fe:	801a      	strh	r2, [r3, #0]

		// UART1 RX 인터럽트 활성
		HAL_UART_Receive_IT(&huart1, &rx1data, 1);
 8000200:	2201      	movs	r2, #1
 8000202:	4906      	ldr	r1, [pc, #24]	@ (800021c <HAL_UART_RxCpltCallback+0x50>)
 8000204:	4807      	ldr	r0, [pc, #28]	@ (8000224 <HAL_UART_RxCpltCallback+0x58>)
 8000206:	f003 fc30 	bl	8003a6a <HAL_UART_Receive_IT>
	}
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40013800 	.word	0x40013800
 8000218:	20000188 	.word	0x20000188
 800021c:	20000084 	.word	0x20000084
 8000220:	20000088 	.word	0x20000088
 8000224:	20000994 	.word	0x20000994

08000228 <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile uint8_t can_rx_in = 0;
volatile uint8_t can_rx_out = 0;

// CAN RX_FIFO0 인터럽트 핸들러
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
			&can_rx_frames[can_rx_in].header,
 8000230:	4b1a      	ldr	r3, [pc, #104]	@ (800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	b2db      	uxtb	r3, r3
 8000236:	461a      	mov	r2, r3
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8000238:	4613      	mov	r3, r2
 800023a:	00db      	lsls	r3, r3, #3
 800023c:	4413      	add	r3, r2
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	4a17      	ldr	r2, [pc, #92]	@ (80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000242:	441a      	add	r2, r3
			can_rx_frames[can_rx_in].data) == HAL_OK)
 8000244:	4b15      	ldr	r3, [pc, #84]	@ (800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	4619      	mov	r1, r3
 800024c:	460b      	mov	r3, r1
 800024e:	00db      	lsls	r3, r3, #3
 8000250:	440b      	add	r3, r1
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	3318      	adds	r3, #24
 8000256:	4912      	ldr	r1, [pc, #72]	@ (80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000258:	440b      	add	r3, r1
 800025a:	3304      	adds	r3, #4
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 800025c:	2100      	movs	r1, #0
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f001 faf7 	bl	8001852 <HAL_CAN_GetRxMessage>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d111      	bne.n	800028e <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
	{
		can_rx_in = (can_rx_in + 1) % MAX_CAN_RX_FRAMES;
 800026a:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	3301      	adds	r3, #1
 8000272:	4a0c      	ldr	r2, [pc, #48]	@ (80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000274:	fb82 1203 	smull	r1, r2, r2, r3
 8000278:	1111      	asrs	r1, r2, #4
 800027a:	17da      	asrs	r2, r3, #31
 800027c:	1a8a      	subs	r2, r1, r2
 800027e:	2132      	movs	r1, #50	@ 0x32
 8000280:	fb01 f202 	mul.w	r2, r1, r2
 8000284:	1a9a      	subs	r2, r3, r2
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800028a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		printf("CAN RX Error\r\n");
	}
}
 800028c:	e002      	b.n	8000294 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		printf("CAN RX Error\r\n");
 800028e:	4806      	ldr	r0, [pc, #24]	@ (80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000290:	f004 faa4 	bl	80047dc <puts>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000894 	.word	0x20000894
 80002a0:	2000018c 	.word	0x2000018c
 80002a4:	51eb851f 	.word	0x51eb851f
 80002a8:	080054d0 	.word	0x080054d0

080002ac <ToggleLedD2>:
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
}

void ToggleLedD2()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80002b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002b4:	4802      	ldr	r0, [pc, #8]	@ (80002c0 <ToggleLedD2+0x14>)
 80002b6:	f002 f96d 	bl	8002594 <HAL_GPIO_TogglePin>
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010c00 	.word	0x40010c00

080002c4 <ToggleRunLed>:


uint32_t tm_run_led = 0;

void ToggleRunLed()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	if(GetElapsedTick(tm_run_led) >= 500)
 80002c8:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <ToggleRunLed+0x28>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff52 	bl	8000176 <GetElapsedTick>
 80002d2:	4603      	mov	r3, r0
 80002d4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002d8:	d306      	bcc.n	80002e8 <ToggleRunLed+0x24>
	{
		tm_run_led = HAL_GetTick();
 80002da:	f000 fdc7 	bl	8000e6c <HAL_GetTick>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a02      	ldr	r2, [pc, #8]	@ (80002ec <ToggleRunLed+0x28>)
 80002e2:	6013      	str	r3, [r2, #0]

		// RUN LED Toggle
		ToggleLedD2();
 80002e4:	f7ff ffe2 	bl	80002ac <ToggleLedD2>
	}
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000898 	.word	0x20000898

080002f0 <DoLedWork>:


void DoLedWork()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	ToggleRunLed();
 80002f4:	f7ff ffe6 	bl	80002c4 <ToggleRunLed>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000300:	f000 fd5c 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000304:	f000 f811 	bl	800032a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000308:	f000 f9b6 	bl	8000678 <MX_GPIO_Init>
  MX_CAN_Init();
 800030c:	f000 f8a4 	bl	8000458 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000310:	f000 f988 	bl	8000624 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000314:	f000 f8f8 	bl	8000508 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000318:	f000 f860 	bl	80003dc <MX_ADC1_Init>
  MX_TIM2_Init();
 800031c:	f000 f92a 	bl	8000574 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  InitWork();
 8000320:	f000 fcd0 	bl	8000cc4 <InitWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DoWork();
 8000324:	f000 fcdc 	bl	8000ce0 <DoWork>
 8000328:	e7fc      	b.n	8000324 <main+0x28>

0800032a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b094      	sub	sp, #80	@ 0x50
 800032e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000334:	2228      	movs	r2, #40	@ 0x28
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f004 fb2f 	bl	800499c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000374:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000376:	2300      	movs	r3, #0
 8000378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800037e:	4618      	mov	r0, r3
 8000380:	f002 f922 	bl	80025c8 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x64>
  {
    Error_Handler();
 800038a:	f000 f9ef 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800039e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fb8e 	bl	8002acc <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003b6:	f000 f9d9 	bl	800076c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ba:	2302      	movs	r3, #2
 80003bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4618      	mov	r0, r3
 80003c6:	f002 fd0f 	bl	8002de8 <HAL_RCCEx_PeriphCLKConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003d0:	f000 f9cc 	bl	800076c <Error_Handler>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3750      	adds	r7, #80	@ 0x50
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ec:	4b18      	ldr	r3, [pc, #96]	@ (8000450 <MX_ADC1_Init+0x74>)
 80003ee:	4a19      	ldr	r2, [pc, #100]	@ (8000454 <MX_ADC1_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f2:	4b17      	ldr	r3, [pc, #92]	@ (8000450 <MX_ADC1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003f8:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <MX_ADC1_Init+0x74>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fe:	4b14      	ldr	r3, [pc, #80]	@ (8000450 <MX_ADC1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000404:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <MX_ADC1_Init+0x74>)
 8000406:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800040a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040c:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <MX_ADC1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <MX_ADC1_Init+0x74>)
 8000414:	2201      	movs	r2, #1
 8000416:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000418:	480d      	ldr	r0, [pc, #52]	@ (8000450 <MX_ADC1_Init+0x74>)
 800041a:	f000 fd31 	bl	8000e80 <HAL_ADC_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000424:	f000 f9a2 	bl	800076c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000428:	2301      	movs	r3, #1
 800042a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042c:	2301      	movs	r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000430:	2307      	movs	r3, #7
 8000432:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4805      	ldr	r0, [pc, #20]	@ (8000450 <MX_ADC1_Init+0x74>)
 800043a:	f000 feb3 	bl	80011a4 <HAL_ADC_ConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000444:	f000 f992 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000089c 	.word	0x2000089c
 8000454:	40012400 	.word	0x40012400

08000458 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	@ 0x28
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800045e:	4b28      	ldr	r3, [pc, #160]	@ (8000500 <MX_CAN_Init+0xa8>)
 8000460:	4a28      	ldr	r2, [pc, #160]	@ (8000504 <MX_CAN_Init+0xac>)
 8000462:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000464:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <MX_CAN_Init+0xa8>)
 8000466:	2204      	movs	r2, #4
 8000468:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800046a:	4b25      	ldr	r3, [pc, #148]	@ (8000500 <MX_CAN_Init+0xa8>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000470:	4b23      	ldr	r3, [pc, #140]	@ (8000500 <MX_CAN_Init+0xa8>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000476:	4b22      	ldr	r3, [pc, #136]	@ (8000500 <MX_CAN_Init+0xa8>)
 8000478:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800047c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800047e:	4b20      	ldr	r3, [pc, #128]	@ (8000500 <MX_CAN_Init+0xa8>)
 8000480:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000484:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000486:	4b1e      	ldr	r3, [pc, #120]	@ (8000500 <MX_CAN_Init+0xa8>)
 8000488:	2200      	movs	r2, #0
 800048a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800048c:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <MX_CAN_Init+0xa8>)
 800048e:	2200      	movs	r2, #0
 8000490:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000492:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <MX_CAN_Init+0xa8>)
 8000494:	2200      	movs	r2, #0
 8000496:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000498:	4b19      	ldr	r3, [pc, #100]	@ (8000500 <MX_CAN_Init+0xa8>)
 800049a:	2200      	movs	r2, #0
 800049c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800049e:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <MX_CAN_Init+0xa8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004a4:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <MX_CAN_Init+0xa8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004aa:	4815      	ldr	r0, [pc, #84]	@ (8000500 <MX_CAN_Init+0xa8>)
 80004ac:	f001 f80d 	bl	80014ca <HAL_CAN_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80004b6:	f000 f959 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80004c6:	2300      	movs	r3, #0
 80004c8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80004da:	2301      	movs	r3, #1
 80004dc:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80004de:	230e      	movs	r3, #14
 80004e0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80004e2:	463b      	mov	r3, r7
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	@ (8000500 <MX_CAN_Init+0xa8>)
 80004e8:	f001 f8ea 	bl	80016c0 <HAL_CAN_ConfigFilter>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_CAN_Init+0x9e>
  {
    /* Filter configuration Error */
    Error_Handler();
 80004f2:	f000 f93b 	bl	800076c <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	@ 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200008cc 	.word	0x200008cc
 8000504:	40006400 	.word	0x40006400

08000508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800050c:	4b17      	ldr	r3, [pc, #92]	@ (800056c <MX_SPI1_Init+0x64>)
 800050e:	4a18      	ldr	r2, [pc, #96]	@ (8000570 <MX_SPI1_Init+0x68>)
 8000510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000512:	4b16      	ldr	r3, [pc, #88]	@ (800056c <MX_SPI1_Init+0x64>)
 8000514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <MX_SPI1_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <MX_SPI1_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_SPI1_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_SPI1_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_SPI1_Init+0x64>)
 8000534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_SPI1_Init+0x64>)
 800053c:	2230      	movs	r2, #48	@ 0x30
 800053e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <MX_SPI1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_SPI1_Init+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <MX_SPI1_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_SPI1_Init+0x64>)
 8000554:	220a      	movs	r2, #10
 8000556:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <MX_SPI1_Init+0x64>)
 800055a:	f002 fcfb 	bl	8002f54 <HAL_SPI_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000564:	f000 f902 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200008f4 	.word	0x200008f4
 8000570:	40013000 	.word	0x40013000

08000574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	@ 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000596:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <MX_TIM2_Init+0xac>)
 8000598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800059c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800059e:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <MX_TIM2_Init+0xac>)
 80005a0:	220f      	movs	r2, #15
 80005a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <MX_TIM2_Init+0xac>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <MX_TIM2_Init+0xac>)
 80005ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <MX_TIM2_Init+0xac>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b8:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <MX_TIM2_Init+0xac>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005be:	4818      	ldr	r0, [pc, #96]	@ (8000620 <MX_TIM2_Init+0xac>)
 80005c0:	f002 fd4c 	bl	800305c <HAL_TIM_PWM_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80005ca:	f000 f8cf 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4619      	mov	r1, r3
 80005dc:	4810      	ldr	r0, [pc, #64]	@ (8000620 <MX_TIM2_Init+0xac>)
 80005de:	f003 f90b 	bl	80037f8 <HAL_TIMEx_MasterConfigSynchronization>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80005e8:	f000 f8c0 	bl	800076c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ec:	2360      	movs	r3, #96	@ 0x60
 80005ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	4619      	mov	r1, r3
 8000602:	4807      	ldr	r0, [pc, #28]	@ (8000620 <MX_TIM2_Init+0xac>)
 8000604:	f002 fe1c 	bl	8003240 <HAL_TIM_PWM_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800060e:	f000 f8ad 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000612:	4803      	ldr	r0, [pc, #12]	@ (8000620 <MX_TIM2_Init+0xac>)
 8000614:	f000 f9ec 	bl	80009f0 <HAL_TIM_MspPostInit>

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	@ 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000094c 	.word	0x2000094c

08000624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <MX_USART1_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_USART1_UART_Init+0x4c>)
 800065c:	f003 f92a 	bl	80038b4 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f881 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000994 	.word	0x20000994
 8000674:	40013800 	.word	0x40013800

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068c:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <MX_GPIO_Init+0xe8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a33      	ldr	r2, [pc, #204]	@ (8000760 <MX_GPIO_Init+0xe8>)
 8000692:	f043 0320 	orr.w	r3, r3, #32
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <MX_GPIO_Init+0xe8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0320 	and.w	r3, r3, #32
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000760 <MX_GPIO_Init+0xe8>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000760 <MX_GPIO_Init+0xe8>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <MX_GPIO_Init+0xe8>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <MX_GPIO_Init+0xe8>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <MX_GPIO_Init+0xe8>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <MX_GPIO_Init+0xe8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2118      	movs	r1, #24
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <MX_GPIO_Init+0xec>)
 80006da:	f001 ff43 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80006e4:	4820      	ldr	r0, [pc, #128]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006e6:	f001 ff3d 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80006ea:	2318      	movs	r3, #24
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4818      	ldr	r0, [pc, #96]	@ (8000764 <MX_GPIO_Init+0xec>)
 8000702:	f001 fdab 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000710:	2301      	movs	r3, #1
 8000712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4813      	ldr	r0, [pc, #76]	@ (8000768 <MX_GPIO_Init+0xf0>)
 800071c:	f001 fd9e 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8000720:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8000724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	@ (8000768 <MX_GPIO_Init+0xf0>)
 8000736:	f001 fd91 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800073a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_GPIO_Init+0xf0>)
 8000754:	f001 fd82 	bl	800225c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	40010800 	.word	0x40010800
 8000768:	40010c00 	.word	0x40010c00

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <HAL_MspInit+0x5c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <HAL_MspInit+0x5c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <HAL_MspInit+0x5c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	61d3      	str	r3, [r2, #28]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <HAL_MspInit+0x5c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <HAL_MspInit+0x60>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <HAL_MspInit+0x60>)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000

080007dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <HAL_ADC_MspInit+0x6c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d121      	bne.n	8000840 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <HAL_ADC_MspInit+0x70>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <HAL_ADC_MspInit+0x70>)
 8000802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <HAL_ADC_MspInit+0x70>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <HAL_ADC_MspInit+0x70>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a0c      	ldr	r2, [pc, #48]	@ (800084c <HAL_ADC_MspInit+0x70>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <HAL_ADC_MspInit+0x70>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000830:	2303      	movs	r3, #3
 8000832:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <HAL_ADC_MspInit+0x74>)
 800083c:	f001 fd0e 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40012400 	.word	0x40012400
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800

08000854 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a29      	ldr	r2, [pc, #164]	@ (8000914 <HAL_CAN_MspInit+0xc0>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d14b      	bne.n	800090c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <HAL_CAN_MspInit+0xc4>)
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	4a27      	ldr	r2, [pc, #156]	@ (8000918 <HAL_CAN_MspInit+0xc4>)
 800087a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087e:	61d3      	str	r3, [r2, #28]
 8000880:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <HAL_CAN_MspInit+0xc4>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <HAL_CAN_MspInit+0xc4>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <HAL_CAN_MspInit+0xc4>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <HAL_CAN_MspInit+0xc4>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4818      	ldr	r0, [pc, #96]	@ (800091c <HAL_CAN_MspInit+0xc8>)
 80008ba:	f001 fccf 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <HAL_CAN_MspInit+0xc8>)
 80008d4:	f001 fcc2 	bl	800225c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <HAL_CAN_MspInit+0xcc>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80008f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <HAL_CAN_MspInit+0xcc>)
 80008f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fa:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2014      	movs	r0, #20
 8000902:	f001 fbc2 	bl	800208a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000906:	2014      	movs	r0, #20
 8000908:	f001 fbdb 	bl	80020c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40006400 	.word	0x40006400
 8000918:	40021000 	.word	0x40021000
 800091c:	40010c00 	.word	0x40010c00
 8000920:	40010000 	.word	0x40010000

08000924 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a1b      	ldr	r2, [pc, #108]	@ (80009ac <HAL_SPI_MspInit+0x88>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d12f      	bne.n	80009a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <HAL_SPI_MspInit+0x8c>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a19      	ldr	r2, [pc, #100]	@ (80009b0 <HAL_SPI_MspInit+0x8c>)
 800094a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <HAL_SPI_MspInit+0x8c>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_SPI_MspInit+0x8c>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <HAL_SPI_MspInit+0x8c>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_SPI_MspInit+0x8c>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000974:	23a0      	movs	r3, #160	@ 0xa0
 8000976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <HAL_SPI_MspInit+0x90>)
 8000988:	f001 fc68 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800098c:	2340      	movs	r3, #64	@ 0x40
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <HAL_SPI_MspInit+0x90>)
 80009a0:	f001 fc5c 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40013000 	.word	0x40013000
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010800 	.word	0x40010800

080009b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c8:	d10b      	bne.n	80009e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_TIM_PWM_MspInit+0x34>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <HAL_TIM_PWM_MspInit+0x34>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_TIM_PWM_MspInit+0x34>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a0e:	d117      	bne.n	8000a40 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HAL_TIM_MspPostInit+0x58>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <HAL_TIM_MspPostInit+0x58>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_TIM_MspPostInit+0x58>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <HAL_TIM_MspPostInit+0x5c>)
 8000a3c:	f001 fc0e 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010800 	.word	0x40010800

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a20      	ldr	r2, [pc, #128]	@ (8000aec <HAL_UART_MspInit+0x9c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d139      	bne.n	8000ae4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <HAL_UART_MspInit+0xa0>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a1e      	ldr	r2, [pc, #120]	@ (8000af0 <HAL_UART_MspInit+0xa0>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <HAL_UART_MspInit+0xa0>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <HAL_UART_MspInit+0xa0>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a18      	ldr	r2, [pc, #96]	@ (8000af0 <HAL_UART_MspInit+0xa0>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <HAL_UART_MspInit+0xa0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480f      	ldr	r0, [pc, #60]	@ (8000af4 <HAL_UART_MspInit+0xa4>)
 8000ab6:	f001 fbd1 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	4809      	ldr	r0, [pc, #36]	@ (8000af4 <HAL_UART_MspInit+0xa4>)
 8000ad0:	f001 fbc4 	bl	800225c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2025      	movs	r0, #37	@ 0x25
 8000ada:	f001 fad6 	bl	800208a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ade:	2025      	movs	r0, #37	@ 0x25
 8000ae0:	f001 faef 	bl	80020c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010800 	.word	0x40010800

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f97e 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b56:	f000 ff9d 	bl	8001a94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200008cc 	.word	0x200008cc

08000b64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <USART1_IRQHandler+0x10>)
 8000b6a:	f002 ffa3 	bl	8003ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000994 	.word	0x20000994

08000b78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e00a      	b.n	8000ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b8a:	f3af 8000 	nop.w
 8000b8e:	4601      	mov	r1, r0
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf0      	blt.n	8000b8a <_read+0x12>
  }

  return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e009      	b.n	8000bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff faeb 	bl	80001a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf1      	blt.n	8000bc4 <_write+0x12>
  }
  return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_close>:

int _close(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c10:	605a      	str	r2, [r3, #4]
  return 0;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <_isatty>:

int _isatty(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b085      	sub	sp, #20
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
	...

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	@ (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f003 fedc 	bl	8004a38 <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20005000 	.word	0x20005000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	200009dc 	.word	0x200009dc
 8000cb4:	20000b38 	.word	0x20000b38

08000cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <InitWork>:
#include "pn532_stm32f1.h"
#include "work_buzzer.h"
#include "work_test.h"

void InitWork()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	InitBasic();
 8000cc8:	f7ff fa40 	bl	800014c <InitBasic>

	//InitCanWork();
	//InitRfidPn532Work();
	InitWorkBuzzer();
 8000ccc:	f000 f810 	bl	8000cf0 <InitWorkBuzzer>
	//InitWorkTest();

	printf("Start\n");
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <InitWork+0x18>)
 8000cd2:	f003 fd83 	bl	80047dc <puts>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	080054f4 	.word	0x080054f4

08000ce0 <DoWork>:



void DoWork()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	DoLedWork();
 8000ce4:	f7ff fb04 	bl	80002f0 <DoLedWork>
	//DoButtonWork();
	//DoCanWork();
	//DoRfidPn532Work();
	DoWorkBuzzer();
 8000ce8:	f000 f812 	bl	8000d10 <DoWorkBuzzer>
	//DoWorkTest();
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <InitWorkBuzzer>:


#include "work_buzzer.h"

void InitWorkBuzzer()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000cf4:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <InitWorkBuzzer+0x18>)
 8000cf6:	f000 f99b 	bl	8001030 <HAL_ADC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <InitWorkBuzzer+0x1c>)
 8000cfe:	f002 f9fd 	bl	80030fc <HAL_TIM_PWM_Start>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000089c 	.word	0x2000089c
 8000d0c:	2000094c 	.word	0x2000094c

08000d10 <DoWorkBuzzer>:


static uint32_t tm_buzzer;

void DoWorkBuzzer()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	if (GetElapsedTick(tm_buzzer) >= 500)
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <DoWorkBuzzer+0x50>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fa2b 	bl	8000176 <GetElapsedTick>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d26:	d317      	bcc.n	8000d58 <DoWorkBuzzer+0x48>
	{
		tm_buzzer = GetTick();
 8000d28:	f7ff fa1e 	bl	8000168 <GetTick>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d60 <DoWorkBuzzer+0x50>)
 8000d30:	6013      	str	r3, [r2, #0]

		uint32_t adc = HAL_ADC_GetValue(&hadc1);
 8000d32:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <DoWorkBuzzer+0x54>)
 8000d34:	f000 fa2a 	bl	800118c <HAL_ADC_GetValue>
 8000d38:	6078      	str	r0, [r7, #4]
		printf("ADC:%ld\n", adc);
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	480a      	ldr	r0, [pc, #40]	@ (8000d68 <DoWorkBuzzer+0x58>)
 8000d3e:	f003 fce5 	bl	800470c <iprintf>

		// Duty Cycle 설정
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <DoWorkBuzzer+0x5c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	220a      	movs	r2, #10
 8000d48:	635a      	str	r2, [r3, #52]	@ 0x34

		// 주기 변경
		__HAL_TIM_SET_AUTORELOAD(&htim2, adc);
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <DoWorkBuzzer+0x5c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d52:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <DoWorkBuzzer+0x5c>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60d3      	str	r3, [r2, #12]
	}
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200009e0 	.word	0x200009e0
 8000d64:	2000089c 	.word	0x2000089c
 8000d68:	080054fc 	.word	0x080054fc
 8000d6c:	2000094c 	.word	0x2000094c

08000d70 <Reset_Handler>:
 8000d70:	f7ff ffa2 	bl	8000cb8 <SystemInit>
 8000d74:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <LoopFillZerobss+0xe>)
 8000d76:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <LoopFillZerobss+0x12>)
 8000d78:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <LoopFillZerobss+0x16>)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:
 8000d7e:	58d4      	ldr	r4, [r2, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:
 8000d84:	18c4      	adds	r4, r0, r3
 8000d86:	428c      	cmp	r4, r1
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
 8000d8a:	4a09      	ldr	r2, [pc, #36]	@ (8000db0 <LoopFillZerobss+0x1a>)
 8000d8c:	4c09      	ldr	r4, [pc, #36]	@ (8000db4 <LoopFillZerobss+0x1e>)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:
 8000d96:	42a2      	cmp	r2, r4
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>
 8000d9a:	f003 fe53 	bl	8004a44 <__libc_init_array>
 8000d9e:	f7ff faad 	bl	80002fc <main>
 8000da2:	4770      	bx	lr
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000068 	.word	0x20000068
 8000dac:	08005570 	.word	0x08005570
 8000db0:	20000068 	.word	0x20000068
 8000db4:	20000b34 	.word	0x20000b34

08000db8 <ADC1_2_IRQHandler>:
 8000db8:	e7fe      	b.n	8000db8 <ADC1_2_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_Init+0x28>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <HAL_Init+0x28>)
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f001 f951 	bl	8002074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f000 f808 	bl	8000de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd8:	f7ff fcce 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_InitTick+0x54>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_InitTick+0x58>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 f969 	bl	80020de <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f001 f931 	bl	800208a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	@ (8000e44 <HAL_InitTick+0x5c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a03      	ldr	r2, [pc, #12]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000008 	.word	0x20000008
 8000e68:	200009e4 	.word	0x200009e4

08000e6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b02      	ldr	r3, [pc, #8]	@ (8000e7c <HAL_GetTick+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	200009e4 	.word	0x200009e4

08000e80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0be      	b.n	8001020 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d109      	bne.n	8000ec4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fc8c 	bl	80007dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 fabf 	bl	8001448 <ADC_ConversionStop_Disable>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 8099 	bne.w	800100e <HAL_ADC_Init+0x18e>
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8095 	bne.w	800100e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000eec:	f023 0302 	bic.w	r3, r3, #2
 8000ef0:	f043 0202 	orr.w	r2, r3, #2
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7b1b      	ldrb	r3, [r3, #12]
 8000f06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f18:	d003      	beq.n	8000f22 <HAL_ADC_Init+0xa2>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d102      	bne.n	8000f28 <HAL_ADC_Init+0xa8>
 8000f22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f26:	e000      	b.n	8000f2a <HAL_ADC_Init+0xaa>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7d1b      	ldrb	r3, [r3, #20]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d119      	bne.n	8000f6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7b1b      	ldrb	r3, [r3, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d109      	bne.n	8000f54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	035a      	lsls	r2, r3, #13
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	e00b      	b.n	8000f6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f58:	f043 0220 	orr.w	r2, r3, #32
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <HAL_ADC_Init+0x1a8>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	430b      	orrs	r3, r1
 8000f92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f9c:	d003      	beq.n	8000fa6 <HAL_ADC_Init+0x126>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d104      	bne.n	8000fb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	051b      	lsls	r3, r3, #20
 8000fae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_ADC_Init+0x1ac>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d10b      	bne.n	8000fec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fde:	f023 0303 	bic.w	r3, r3, #3
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fea:	e018      	b.n	800101e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff0:	f023 0312 	bic.w	r3, r3, #18
 8000ff4:	f043 0210 	orr.w	r2, r3, #16
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800100c:	e007      	b.n	800101e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001012:	f043 0210 	orr.w	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	ffe1f7fd 	.word	0xffe1f7fd
 800102c:	ff1f0efe 	.word	0xff1f0efe

08001030 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_ADC_Start+0x1a>
 8001046:	2302      	movs	r3, #2
 8001048:	e098      	b.n	800117c <HAL_ADC_Start+0x14c>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f99e 	bl	8001394 <ADC_Enable>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 8087 	bne.w	8001172 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a41      	ldr	r2, [pc, #260]	@ (8001184 <HAL_ADC_Start+0x154>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d105      	bne.n	800108e <HAL_ADC_Start+0x5e>
 8001082:	4b41      	ldr	r3, [pc, #260]	@ (8001188 <HAL_ADC_Start+0x158>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d115      	bne.n	80010ba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001092:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d026      	beq.n	80010f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b8:	e01d      	b.n	80010f6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001188 <HAL_ADC_Start+0x158>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d004      	beq.n	80010da <HAL_ADC_Start+0xaa>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001184 <HAL_ADC_Start+0x154>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d10d      	bne.n	80010f6 <HAL_ADC_Start+0xc6>
 80010da:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <HAL_ADC_Start+0x158>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d007      	beq.n	80010f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001106:	f023 0206 	bic.w	r2, r3, #6
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800110e:	e002      	b.n	8001116 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f06f 0202 	mvn.w	r2, #2
 8001126:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001132:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001136:	d113      	bne.n	8001160 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800113c:	4a11      	ldr	r2, [pc, #68]	@ (8001184 <HAL_ADC_Start+0x154>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d105      	bne.n	800114e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_ADC_Start+0x158>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800114a:	2b00      	cmp	r3, #0
 800114c:	d108      	bne.n	8001160 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	e00c      	b.n	800117a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	e003      	b.n	800117a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40012800 	.word	0x40012800
 8001188:	40012400 	.word	0x40012400

0800118c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x20>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e0dc      	b.n	800137e <HAL_ADC_ConfigChannel+0x1da>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d81c      	bhi.n	800120e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b05      	subs	r3, #5
 80011e6:	221f      	movs	r2, #31
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b05      	subs	r3, #5
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	635a      	str	r2, [r3, #52]	@ 0x34
 800120c:	e03c      	b.n	8001288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	d81c      	bhi.n	8001250 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3b23      	subs	r3, #35	@ 0x23
 8001228:	221f      	movs	r2, #31
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	4019      	ands	r1, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b23      	subs	r3, #35	@ 0x23
 8001242:	fa00 f203 	lsl.w	r2, r0, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	631a      	str	r2, [r3, #48]	@ 0x30
 800124e:	e01b      	b.n	8001288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b41      	subs	r3, #65	@ 0x41
 8001262:	221f      	movs	r2, #31
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	4019      	ands	r1, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3b41      	subs	r3, #65	@ 0x41
 800127c:	fa00 f203 	lsl.w	r2, r0, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d91c      	bls.n	80012ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	3b1e      	subs	r3, #30
 80012a2:	2207      	movs	r2, #7
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4019      	ands	r1, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	6898      	ldr	r0, [r3, #8]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	3b1e      	subs	r3, #30
 80012bc:	fa00 f203 	lsl.w	r2, r0, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	e019      	b.n	80012fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6919      	ldr	r1, [r3, #16]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	2207      	movs	r2, #7
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4019      	ands	r1, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6898      	ldr	r0, [r3, #8]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	fa00 f203 	lsl.w	r2, r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b10      	cmp	r3, #16
 8001304:	d003      	beq.n	800130e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800130a:	2b11      	cmp	r3, #17
 800130c:	d132      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <HAL_ADC_ConfigChannel+0x1e4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d125      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d126      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001334:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d11a      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800133e:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_ADC_ConfigChannel+0x1e8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <HAL_ADC_ConfigChannel+0x1ec>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9a      	lsrs	r2, r3, #18
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001354:	e002      	b.n	800135c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3b01      	subs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x1b2>
 8001362:	e007      	b.n	8001374 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	f043 0220 	orr.w	r2, r3, #32
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40012400 	.word	0x40012400
 800138c:	20000000 	.word	0x20000000
 8001390:	431bde83 	.word	0x431bde83

08001394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d040      	beq.n	8001434 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0201 	orr.w	r2, r2, #1
 80013c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <ADC_Enable+0xac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001444 <ADC_Enable+0xb0>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0c9b      	lsrs	r3, r3, #18
 80013ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013d0:	e002      	b.n	80013d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f9      	bne.n	80013d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013de:	f7ff fd45 	bl	8000e6c <HAL_GetTick>
 80013e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013e4:	e01f      	b.n	8001426 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013e6:	f7ff fd41 	bl	8000e6c <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d918      	bls.n	8001426 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d011      	beq.n	8001426 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	f043 0210 	orr.w	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e007      	b.n	8001436 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d1d8      	bne.n	80013e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000
 8001444:	431bde83 	.word	0x431bde83

08001448 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b01      	cmp	r3, #1
 8001460:	d12e      	bne.n	80014c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001472:	f7ff fcfb 	bl	8000e6c <HAL_GetTick>
 8001476:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001478:	e01b      	b.n	80014b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800147a:	f7ff fcf7 	bl	8000e6c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d914      	bls.n	80014b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d10d      	bne.n	80014b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	f043 0210 	orr.w	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e007      	b.n	80014c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d0dc      	beq.n	800147a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0ed      	b.n	80016b8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff f9b3 	bl	8000854 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014fe:	f7ff fcb5 	bl	8000e6c <HAL_GetTick>
 8001502:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001504:	e012      	b.n	800152c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001506:	f7ff fcb1 	bl	8000e6c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b0a      	cmp	r3, #10
 8001512:	d90b      	bls.n	800152c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2205      	movs	r2, #5
 8001524:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0c5      	b.n	80016b8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0e5      	beq.n	8001506 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0202 	bic.w	r2, r2, #2
 8001548:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800154a:	f7ff fc8f 	bl	8000e6c <HAL_GetTick>
 800154e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001550:	e012      	b.n	8001578 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001552:	f7ff fc8b 	bl	8000e6c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b0a      	cmp	r3, #10
 800155e:	d90b      	bls.n	8001578 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001564:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2205      	movs	r2, #5
 8001570:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e09f      	b.n	80016b8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1e5      	bne.n	8001552 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7e1b      	ldrb	r3, [r3, #24]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e007      	b.n	80015b0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e5b      	ldrb	r3, [r3, #25]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d108      	bne.n	80015ca <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e007      	b.n	80015da <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7e9b      	ldrb	r3, [r3, #26]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0220 	orr.w	r2, r2, #32
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e007      	b.n	8001604 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0220 	bic.w	r2, r2, #32
 8001602:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7edb      	ldrb	r3, [r3, #27]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0210 	bic.w	r2, r2, #16
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e007      	b.n	800162e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0210 	orr.w	r2, r2, #16
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7f1b      	ldrb	r3, [r3, #28]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0208 	orr.w	r2, r2, #8
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e007      	b.n	8001658 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0208 	bic.w	r2, r2, #8
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7f5b      	ldrb	r3, [r3, #29]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d108      	bne.n	8001672 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0204 	orr.w	r2, r2, #4
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e007      	b.n	8001682 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0204 	bic.w	r2, r2, #4
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	ea42 0103 	orr.w	r1, r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	1e5a      	subs	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016d8:	7cfb      	ldrb	r3, [r7, #19]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d003      	beq.n	80016e6 <HAL_CAN_ConfigFilter+0x26>
 80016de:	7cfb      	ldrb	r3, [r7, #19]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	f040 80aa 	bne.w	800183a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	2201      	movs	r2, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	401a      	ands	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d123      	bne.n	8001768 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001742:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3248      	adds	r2, #72	@ 0x48
 8001748:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800175c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800175e:	6979      	ldr	r1, [r7, #20]
 8001760:	3348      	adds	r3, #72	@ 0x48
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d122      	bne.n	80017b6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001790:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3248      	adds	r2, #72	@ 0x48
 8001796:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ac:	6979      	ldr	r1, [r7, #20]
 80017ae:	3348      	adds	r3, #72	@ 0x48
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	401a      	ands	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80017d0:	e007      	b.n	80017e2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	431a      	orrs	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80017fc:	e007      	b.n	800180e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	431a      	orrs	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	431a      	orrs	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800182c:	f023 0201 	bic.w	r2, r3, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e006      	b.n	8001848 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001852:	b480      	push	{r7}
 8001854:	b087      	sub	sp, #28
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001866:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d003      	beq.n	8001876 <HAL_CAN_GetRxMessage+0x24>
 800186e:	7dfb      	ldrb	r3, [r7, #23]
 8001870:	2b02      	cmp	r3, #2
 8001872:	f040 8103 	bne.w	8001a7c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10e      	bne.n	800189a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d116      	bne.n	80018b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0f7      	b.n	8001a8a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d107      	bne.n	80018b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0e8      	b.n	8001a8a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	331b      	adds	r3, #27
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0204 	and.w	r2, r3, #4
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	331b      	adds	r3, #27
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0d5b      	lsrs	r3, r3, #21
 80018e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e00b      	b.n	8001908 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	331b      	adds	r3, #27
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	08db      	lsrs	r3, r3, #3
 8001900:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	331b      	adds	r3, #27
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	4413      	add	r3, r2
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0202 	and.w	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	331b      	adds	r3, #27
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	3304      	adds	r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2208      	movs	r2, #8
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	e00b      	b.n	8001956 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	331b      	adds	r3, #27
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 020f 	and.w	r2, r3, #15
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	331b      	adds	r3, #27
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4413      	add	r3, r2
 8001962:	3304      	adds	r3, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	b2da      	uxtb	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	331b      	adds	r3, #27
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	3304      	adds	r3, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	0c1b      	lsrs	r3, r3, #16
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0a1a      	lsrs	r2, r3, #8
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0c1a      	lsrs	r2, r3, #16
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	3302      	adds	r3, #2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0e1a      	lsrs	r2, r3, #24
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	3303      	adds	r3, #3
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	3304      	adds	r3, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0a1a      	lsrs	r2, r3, #8
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3305      	adds	r3, #5
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0c1a      	lsrs	r2, r3, #16
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3306      	adds	r3, #6
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0e1a      	lsrs	r2, r3, #24
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	3307      	adds	r3, #7
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0220 	orr.w	r2, r2, #32
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	e007      	b.n	8001a78 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e006      	b.n	8001a8a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
  }
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	@ 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d07c      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d023      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f983 	bl	8001e02 <HAL_CAN_TxMailbox0CompleteCallback>
 8001afc:	e016      	b.n	8001b2c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b10:	e00c      	b.n	8001b2c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b24:	e002      	b.n	8001b2c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f986 	bl	8001e38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d024      	beq.n	8001b80 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f962 	bl	8001e14 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b50:	e016      	b.n	8001b80 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b64:	e00c      	b.n	8001b80 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b78:	e002      	b.n	8001b80 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f965 	bl	8001e4a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d024      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f941 	bl	8001e26 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ba4:	e016      	b.n	8001bd4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb8:	e00c      	b.n	8001bd4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bcc:	e002      	b.n	8001bd4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f944 	bl	8001e5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00c      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f92a 	bl	8001e6e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d009      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe faf8 	bl	8000228 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2208      	movs	r2, #8
 8001c76:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f90a 	bl	8001e92 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d009      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8f2 	bl	8001e80 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8f3 	bl	8001ea4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8eb 	bl	8001eb6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d07b      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d072      	beq.n	8001dda <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d043      	beq.n	8001dda <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d03e      	beq.n	8001dda <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d62:	2b60      	cmp	r3, #96	@ 0x60
 8001d64:	d02b      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x32a>
 8001d66:	2b60      	cmp	r3, #96	@ 0x60
 8001d68:	d82e      	bhi.n	8001dc8 <HAL_CAN_IRQHandler+0x334>
 8001d6a:	2b50      	cmp	r3, #80	@ 0x50
 8001d6c:	d022      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x320>
 8001d6e:	2b50      	cmp	r3, #80	@ 0x50
 8001d70:	d82a      	bhi.n	8001dc8 <HAL_CAN_IRQHandler+0x334>
 8001d72:	2b40      	cmp	r3, #64	@ 0x40
 8001d74:	d019      	beq.n	8001daa <HAL_CAN_IRQHandler+0x316>
 8001d76:	2b40      	cmp	r3, #64	@ 0x40
 8001d78:	d826      	bhi.n	8001dc8 <HAL_CAN_IRQHandler+0x334>
 8001d7a:	2b30      	cmp	r3, #48	@ 0x30
 8001d7c:	d010      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x30c>
 8001d7e:	2b30      	cmp	r3, #48	@ 0x30
 8001d80:	d822      	bhi.n	8001dc8 <HAL_CAN_IRQHandler+0x334>
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d002      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x2f8>
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d005      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d8a:	e01d      	b.n	8001dc8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d94:	e019      	b.n	8001dca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	f043 0310 	orr.w	r3, r3, #16
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d9e:	e014      	b.n	8001dca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001da8:	e00f      	b.n	8001dca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001db2:	e00a      	b.n	8001dca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dbc:	e005      	b.n	8001dca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dc6:	e000      	b.n	8001dca <HAL_CAN_IRQHandler+0x336>
            break;
 8001dc8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001dd8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2204      	movs	r2, #4
 8001de0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f867 	bl	8001ec8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	@ 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4906      	ldr	r1, [pc, #24]	@ (8001f74 <__NVIC_EnableIRQ+0x34>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	@ (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002040:	d301      	bcc.n	8002046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002042:	2301      	movs	r3, #1
 8002044:	e00f      	b.n	8002066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <SysTick_Config+0x40>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204e:	210f      	movs	r1, #15
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f7ff ff90 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <SysTick_Config+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <SysTick_Config+0x40>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff2d 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209c:	f7ff ff42 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 80020a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7ff ff90 	bl	8001fcc <NVIC_EncodePriority>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5f 	bl	8001f78 <__NVIC_SetPriority>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff35 	bl	8001f40 <__NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffa2 	bl	8002030 <SysTick_Config>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d008      	beq.n	8002120 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2204      	movs	r2, #4
 8002112:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e020      	b.n	8002162 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 020e 	bic.w	r2, r2, #14
 800212e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d005      	beq.n	8002190 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e051      	b.n	8002234 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 020e 	bic.w	r2, r2, #14
 800219e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a22      	ldr	r2, [pc, #136]	@ (8002240 <HAL_DMA_Abort_IT+0xd4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d029      	beq.n	800220e <HAL_DMA_Abort_IT+0xa2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a21      	ldr	r2, [pc, #132]	@ (8002244 <HAL_DMA_Abort_IT+0xd8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <HAL_DMA_Abort_IT+0x9e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002248 <HAL_DMA_Abort_IT+0xdc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01a      	beq.n	8002204 <HAL_DMA_Abort_IT+0x98>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <HAL_DMA_Abort_IT+0xe0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d012      	beq.n	80021fe <HAL_DMA_Abort_IT+0x92>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002250 <HAL_DMA_Abort_IT+0xe4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00a      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x8c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <HAL_DMA_Abort_IT+0xe8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d102      	bne.n	80021f2 <HAL_DMA_Abort_IT+0x86>
 80021ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021f0:	e00e      	b.n	8002210 <HAL_DMA_Abort_IT+0xa4>
 80021f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021f6:	e00b      	b.n	8002210 <HAL_DMA_Abort_IT+0xa4>
 80021f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021fc:	e008      	b.n	8002210 <HAL_DMA_Abort_IT+0xa4>
 80021fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002202:	e005      	b.n	8002210 <HAL_DMA_Abort_IT+0xa4>
 8002204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002208:	e002      	b.n	8002210 <HAL_DMA_Abort_IT+0xa4>
 800220a:	2310      	movs	r3, #16
 800220c:	e000      	b.n	8002210 <HAL_DMA_Abort_IT+0xa4>
 800220e:	2301      	movs	r3, #1
 8002210:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <HAL_DMA_Abort_IT+0xec>)
 8002212:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
    } 
  }
  return status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40020008 	.word	0x40020008
 8002244:	4002001c 	.word	0x4002001c
 8002248:	40020030 	.word	0x40020030
 800224c:	40020044 	.word	0x40020044
 8002250:	40020058 	.word	0x40020058
 8002254:	4002006c 	.word	0x4002006c
 8002258:	40020000 	.word	0x40020000

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b08b      	sub	sp, #44	@ 0x2c
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	e169      	b.n	8002544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002270:	2201      	movs	r2, #1
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 8158 	bne.w	800253e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a9a      	ldr	r2, [pc, #616]	@ (80024fc <HAL_GPIO_Init+0x2a0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d05e      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 8002298:	4a98      	ldr	r2, [pc, #608]	@ (80024fc <HAL_GPIO_Init+0x2a0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d875      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 800229e:	4a98      	ldr	r2, [pc, #608]	@ (8002500 <HAL_GPIO_Init+0x2a4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d058      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022a4:	4a96      	ldr	r2, [pc, #600]	@ (8002500 <HAL_GPIO_Init+0x2a4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d86f      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022aa:	4a96      	ldr	r2, [pc, #600]	@ (8002504 <HAL_GPIO_Init+0x2a8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d052      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022b0:	4a94      	ldr	r2, [pc, #592]	@ (8002504 <HAL_GPIO_Init+0x2a8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d869      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022b6:	4a94      	ldr	r2, [pc, #592]	@ (8002508 <HAL_GPIO_Init+0x2ac>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d04c      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022bc:	4a92      	ldr	r2, [pc, #584]	@ (8002508 <HAL_GPIO_Init+0x2ac>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d863      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022c2:	4a92      	ldr	r2, [pc, #584]	@ (800250c <HAL_GPIO_Init+0x2b0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d046      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022c8:	4a90      	ldr	r2, [pc, #576]	@ (800250c <HAL_GPIO_Init+0x2b0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d85d      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022ce:	2b12      	cmp	r3, #18
 80022d0:	d82a      	bhi.n	8002328 <HAL_GPIO_Init+0xcc>
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	d859      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022d6:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <HAL_GPIO_Init+0x80>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	08002357 	.word	0x08002357
 80022e0:	08002331 	.word	0x08002331
 80022e4:	08002343 	.word	0x08002343
 80022e8:	08002385 	.word	0x08002385
 80022ec:	0800238b 	.word	0x0800238b
 80022f0:	0800238b 	.word	0x0800238b
 80022f4:	0800238b 	.word	0x0800238b
 80022f8:	0800238b 	.word	0x0800238b
 80022fc:	0800238b 	.word	0x0800238b
 8002300:	0800238b 	.word	0x0800238b
 8002304:	0800238b 	.word	0x0800238b
 8002308:	0800238b 	.word	0x0800238b
 800230c:	0800238b 	.word	0x0800238b
 8002310:	0800238b 	.word	0x0800238b
 8002314:	0800238b 	.word	0x0800238b
 8002318:	0800238b 	.word	0x0800238b
 800231c:	0800238b 	.word	0x0800238b
 8002320:	08002339 	.word	0x08002339
 8002324:	0800234d 	.word	0x0800234d
 8002328:	4a79      	ldr	r2, [pc, #484]	@ (8002510 <HAL_GPIO_Init+0x2b4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800232e:	e02c      	b.n	800238a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e029      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	3304      	adds	r3, #4
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e024      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	3308      	adds	r3, #8
 8002348:	623b      	str	r3, [r7, #32]
          break;
 800234a:	e01f      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	330c      	adds	r3, #12
 8002352:	623b      	str	r3, [r7, #32]
          break;
 8002354:	e01a      	b.n	800238c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800235e:	2304      	movs	r3, #4
 8002360:	623b      	str	r3, [r7, #32]
          break;
 8002362:	e013      	b.n	800238c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800236c:	2308      	movs	r3, #8
 800236e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	611a      	str	r2, [r3, #16]
          break;
 8002376:	e009      	b.n	800238c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002378:	2308      	movs	r3, #8
 800237a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	615a      	str	r2, [r3, #20]
          break;
 8002382:	e003      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x130>
          break;
 800238a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2bff      	cmp	r3, #255	@ 0xff
 8002390:	d801      	bhi.n	8002396 <HAL_GPIO_Init+0x13a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	e001      	b.n	800239a <HAL_GPIO_Init+0x13e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2bff      	cmp	r3, #255	@ 0xff
 80023a0:	d802      	bhi.n	80023a8 <HAL_GPIO_Init+0x14c>
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	e002      	b.n	80023ae <HAL_GPIO_Init+0x152>
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	3b08      	subs	r3, #8
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	210f      	movs	r1, #15
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	6a39      	ldr	r1, [r7, #32]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	431a      	orrs	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80b1 	beq.w	800253e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_GPIO_Init+0x2b8>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023f4:	4a48      	ldr	r2, [pc, #288]	@ (8002518 <HAL_GPIO_Init+0x2bc>)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a40      	ldr	r2, [pc, #256]	@ (800251c <HAL_GPIO_Init+0x2c0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_GPIO_Init+0x1ec>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3f      	ldr	r2, [pc, #252]	@ (8002520 <HAL_GPIO_Init+0x2c4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00d      	beq.n	8002444 <HAL_GPIO_Init+0x1e8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3e      	ldr	r2, [pc, #248]	@ (8002524 <HAL_GPIO_Init+0x2c8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <HAL_GPIO_Init+0x1e4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <HAL_GPIO_Init+0x2cc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_GPIO_Init+0x1e0>
 8002438:	2303      	movs	r3, #3
 800243a:	e006      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 800243c:	2304      	movs	r3, #4
 800243e:	e004      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002440:	2302      	movs	r3, #2
 8002442:	e002      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002448:	2300      	movs	r3, #0
 800244a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244c:	f002 0203 	and.w	r2, r2, #3
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	4093      	lsls	r3, r2
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800245a:	492f      	ldr	r1, [pc, #188]	@ (8002518 <HAL_GPIO_Init+0x2bc>)
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002474:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	492c      	ldr	r1, [pc, #176]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002482:	4b2a      	ldr	r3, [pc, #168]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	4928      	ldr	r1, [pc, #160]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 800248c:	4013      	ands	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800249c:	4b23      	ldr	r3, [pc, #140]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	4922      	ldr	r1, [pc, #136]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024aa:	4b20      	ldr	r3, [pc, #128]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	491e      	ldr	r1, [pc, #120]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4918      	ldr	r1, [pc, #96]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4914      	ldr	r1, [pc, #80]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d021      	beq.n	8002530 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	490e      	ldr	r1, [pc, #56]	@ (800252c <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	e021      	b.n	800253e <HAL_GPIO_Init+0x2e2>
 80024fa:	bf00      	nop
 80024fc:	10320000 	.word	0x10320000
 8002500:	10310000 	.word	0x10310000
 8002504:	10220000 	.word	0x10220000
 8002508:	10210000 	.word	0x10210000
 800250c:	10120000 	.word	0x10120000
 8002510:	10110000 	.word	0x10110000
 8002514:	40021000 	.word	0x40021000
 8002518:	40010000 	.word	0x40010000
 800251c:	40010800 	.word	0x40010800
 8002520:	40010c00 	.word	0x40010c00
 8002524:	40011000 	.word	0x40011000
 8002528:	40011400 	.word	0x40011400
 800252c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_GPIO_Init+0x304>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	43db      	mvns	r3, r3
 8002538:	4909      	ldr	r1, [pc, #36]	@ (8002560 <HAL_GPIO_Init+0x304>)
 800253a:	4013      	ands	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	3301      	adds	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	f47f ae8e 	bne.w	8002270 <HAL_GPIO_Init+0x14>
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	372c      	adds	r7, #44	@ 0x2c
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	041a      	lsls	r2, r3, #16
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43d9      	mvns	r1, r3
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	400b      	ands	r3, r1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	611a      	str	r2, [r3, #16]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e272      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8087 	beq.w	80026f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e8:	4b92      	ldr	r3, [pc, #584]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d00c      	beq.n	800260e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d112      	bne.n	8002626 <HAL_RCC_OscConfig+0x5e>
 8002600:	4b8c      	ldr	r3, [pc, #560]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260c:	d10b      	bne.n	8002626 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260e:	4b89      	ldr	r3, [pc, #548]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d06c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x12c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d168      	bne.n	80026f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e24c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x76>
 8002630:	4b80      	ldr	r3, [pc, #512]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a7f      	ldr	r2, [pc, #508]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e02e      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x98>
 8002646:	4b7b      	ldr	r3, [pc, #492]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7a      	ldr	r2, [pc, #488]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 800264c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b78      	ldr	r3, [pc, #480]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a77      	ldr	r2, [pc, #476]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002658:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0xbc>
 800266a:	4b72      	ldr	r3, [pc, #456]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a71      	ldr	r2, [pc, #452]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b6f      	ldr	r3, [pc, #444]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6e      	ldr	r2, [pc, #440]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 8002684:	4b6b      	ldr	r3, [pc, #428]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6a      	ldr	r2, [pc, #424]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b68      	ldr	r3, [pc, #416]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a67      	ldr	r2, [pc, #412]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fbe2 	bl	8000e6c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fbde 	bl	8000e6c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e200      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xe4>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fbce 	bl	8000e6c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe fbca 	bl	8000e6c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1ec      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	4b53      	ldr	r3, [pc, #332]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x10c>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d063      	beq.n	80027ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002702:	4b4c      	ldr	r3, [pc, #304]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800270e:	4b49      	ldr	r3, [pc, #292]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x18c>
 800271a:	4b46      	ldr	r3, [pc, #280]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	4b43      	ldr	r3, [pc, #268]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x176>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e1c0      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4939      	ldr	r1, [pc, #228]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	e03a      	b.n	80027ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275c:	4b36      	ldr	r3, [pc, #216]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe fb83 	bl	8000e6c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7fe fb7f 	bl	8000e6c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1a1      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4927      	ldr	r1, [pc, #156]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279e:	4b26      	ldr	r3, [pc, #152]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fb62 	bl	8000e6c <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ac:	f7fe fb5e 	bl	8000e6c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e180      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d03a      	beq.n	800284c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d019      	beq.n	8002812 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <HAL_RCC_OscConfig+0x274>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7fe fb42 	bl	8000e6c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fb3e 	bl	8000e6c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e160      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <HAL_RCC_OscConfig+0x26c>)
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800280a:	2001      	movs	r0, #1
 800280c:	f000 face 	bl	8002dac <RCC_Delay>
 8002810:	e01c      	b.n	800284c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002812:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <HAL_RCC_OscConfig+0x274>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7fe fb28 	bl	8000e6c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281e:	e00f      	b.n	8002840 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002820:	f7fe fb24 	bl	8000e6c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d908      	bls.n	8002840 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e146      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	42420000 	.word	0x42420000
 800283c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002840:	4b92      	ldr	r3, [pc, #584]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e9      	bne.n	8002820 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a6 	beq.w	80029a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b88      	ldr	r3, [pc, #544]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a87      	ldr	r2, [pc, #540]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]
 8002876:	4b85      	ldr	r3, [pc, #532]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b82      	ldr	r3, [pc, #520]	@ (8002a90 <HAL_RCC_OscConfig+0x4c8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d118      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b7f      	ldr	r3, [pc, #508]	@ (8002a90 <HAL_RCC_OscConfig+0x4c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7e      	ldr	r2, [pc, #504]	@ (8002a90 <HAL_RCC_OscConfig+0x4c8>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7fe fae5 	bl	8000e6c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7fe fae1 	bl	8000e6c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b64      	cmp	r3, #100	@ 0x64
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e103      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b75      	ldr	r3, [pc, #468]	@ (8002a90 <HAL_RCC_OscConfig+0x4c8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x312>
 80028cc:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e02d      	b.n	8002936 <HAL_RCC_OscConfig+0x36e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x334>
 80028e2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4a69      	ldr	r2, [pc, #420]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6213      	str	r3, [r2, #32]
 80028ee:	4b67      	ldr	r3, [pc, #412]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4a66      	ldr	r2, [pc, #408]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	6213      	str	r3, [r2, #32]
 80028fa:	e01c      	b.n	8002936 <HAL_RCC_OscConfig+0x36e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d10c      	bne.n	800291e <HAL_RCC_OscConfig+0x356>
 8002904:	4b61      	ldr	r3, [pc, #388]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4a60      	ldr	r2, [pc, #384]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	6213      	str	r3, [r2, #32]
 8002910:	4b5e      	ldr	r3, [pc, #376]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a5d      	ldr	r2, [pc, #372]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	e00b      	b.n	8002936 <HAL_RCC_OscConfig+0x36e>
 800291e:	4b5b      	ldr	r3, [pc, #364]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a5a      	ldr	r2, [pc, #360]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	4b58      	ldr	r3, [pc, #352]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a57      	ldr	r2, [pc, #348]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d015      	beq.n	800296a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe fa95 	bl	8000e6c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe fa91 	bl	8000e6c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0b1      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ee      	beq.n	8002946 <HAL_RCC_OscConfig+0x37e>
 8002968:	e014      	b.n	8002994 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe fa7f 	bl	8000e6c <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fa7b 	bl	8000e6c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e09b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	4b40      	ldr	r3, [pc, #256]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ee      	bne.n	8002972 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d105      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8087 	beq.w	8002abe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b0:	4b36      	ldr	r3, [pc, #216]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d061      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d146      	bne.n	8002a52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c4:	4b33      	ldr	r3, [pc, #204]	@ (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe fa4f 	bl	8000e6c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7fe fa4b 	bl	8000e6c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e06d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e4:	4b29      	ldr	r3, [pc, #164]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f8:	d108      	bne.n	8002a0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029fa:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4921      	ldr	r1, [pc, #132]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a19      	ldr	r1, [r3, #32]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	491b      	ldr	r1, [pc, #108]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a24:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fa1f 	bl	8000e6c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fa1b 	bl	8000e6c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e03d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a44:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x46a>
 8002a50:	e035      	b.n	8002abe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fa08 	bl	8000e6c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fa04 	bl	8000e6c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e026      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x498>
 8002a7e:	e01e      	b.n	8002abe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e019      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40007000 	.word	0x40007000
 8002a94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <HAL_RCC_OscConfig+0x500>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0d0      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d910      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b67      	ldr	r3, [pc, #412]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4965      	ldr	r1, [pc, #404]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b63      	ldr	r3, [pc, #396]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0b8      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d020      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b28:	4b59      	ldr	r3, [pc, #356]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a58      	ldr	r2, [pc, #352]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b40:	4b53      	ldr	r3, [pc, #332]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a52      	ldr	r2, [pc, #328]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4c:	4b50      	ldr	r3, [pc, #320]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	494d      	ldr	r1, [pc, #308]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d040      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d115      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e07f      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e073      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06b      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b39      	ldr	r3, [pc, #228]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4936      	ldr	r1, [pc, #216]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe f956 	bl	8000e6c <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe f952 	bl	8000e6c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e053      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2d      	ldr	r3, [pc, #180]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d210      	bcs.n	8002c1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	4922      	ldr	r1, [pc, #136]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e032      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4916      	ldr	r1, [pc, #88]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	490e      	ldr	r1, [pc, #56]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c5a:	f000 f821 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	490a      	ldr	r1, [pc, #40]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	5ccb      	ldrb	r3, [r1, r3]
 8002c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c72:	4a09      	ldr	r2, [pc, #36]	@ (8002c98 <HAL_RCC_ClockConfig+0x1cc>)
 8002c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c76:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_RCC_ClockConfig+0x1d0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f8b4 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08005508 	.word	0x08005508
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cba:	4b1e      	ldr	r3, [pc, #120]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cce:	e027      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd2:	613b      	str	r3, [r7, #16]
      break;
 8002cd4:	e027      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0c9b      	lsrs	r3, r3, #18
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	4a17      	ldr	r2, [pc, #92]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ce0:	5cd3      	ldrb	r3, [r2, r3]
 8002ce2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	0c5b      	lsrs	r3, r3, #17
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	4a11      	ldr	r2, [pc, #68]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d02:	fb03 f202 	mul.w	r2, r3, r2
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e004      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a0c      	ldr	r2, [pc, #48]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	613b      	str	r3, [r7, #16]
      break;
 8002d1e:	e002      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d22:	613b      	str	r3, [r7, #16]
      break;
 8002d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d26:	693b      	ldr	r3, [r7, #16]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	007a1200 	.word	0x007a1200
 8002d3c:	08005520 	.word	0x08005520
 8002d40:	08005530 	.word	0x08005530
 8002d44:	003d0900 	.word	0x003d0900

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b02      	ldr	r3, [pc, #8]	@ (8002d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	20000000 	.word	0x20000000

08002d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d60:	f7ff fff2 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	@ (8002d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08005518 	.word	0x08005518

08002d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d88:	f7ff ffde 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	0adb      	lsrs	r3, r3, #11
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4903      	ldr	r1, [pc, #12]	@ (8002da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	08005518 	.word	0x08005518

08002dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <RCC_Delay+0x34>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <RCC_Delay+0x38>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0a5b      	lsrs	r3, r3, #9
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dc8:	bf00      	nop
  }
  while (Delay --);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e5a      	subs	r2, r3, #1
 8002dce:	60fa      	str	r2, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f9      	bne.n	8002dc8 <RCC_Delay+0x1c>
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	20000000 	.word	0x20000000
 8002de4:	10624dd3 	.word	0x10624dd3

08002de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d07d      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e08:	4b4f      	ldr	r3, [pc, #316]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10d      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b4c      	ldr	r3, [pc, #304]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	61d3      	str	r3, [r2, #28]
 8002e20:	4b49      	ldr	r3, [pc, #292]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	4b46      	ldr	r3, [pc, #280]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d118      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3c:	4b43      	ldr	r3, [pc, #268]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a42      	ldr	r2, [pc, #264]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e48:	f7fe f810 	bl	8000e6c <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	e008      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e50:	f7fe f80c 	bl	8000e6c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	@ 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e06d      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	4b3a      	ldr	r3, [pc, #232]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e6e:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d02e      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d027      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e96:	4b2e      	ldr	r3, [pc, #184]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea2:	4a29      	ldr	r2, [pc, #164]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d014      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fd ffdb 	bl	8000e6c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fd ffd7 	bl	8000e6c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e036      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ee      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002edc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4917      	ldr	r1, [pc, #92]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4a13      	ldr	r2, [pc, #76]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	490b      	ldr	r1, [pc, #44]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4904      	ldr	r1, [pc, #16]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42420440 	.word	0x42420440

08002f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e076      	b.n	8003054 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d108      	bne.n	8002f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f76:	d009      	beq.n	8002f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61da      	str	r2, [r3, #28]
 8002f7e:	e005      	b.n	8002f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fd fcbc 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003010:	ea42 0103 	orr.w	r1, r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	0c1a      	lsrs	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f002 0204 	and.w	r2, r2, #4
 8003032:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003042:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e041      	b.n	80030f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fc98 	bl	80009b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f000 f992 	bl	80033c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_TIM_PWM_Start+0x24>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	bf14      	ite	ne
 8003118:	2301      	movne	r3, #1
 800311a:	2300      	moveq	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e022      	b.n	8003166 <HAL_TIM_PWM_Start+0x6a>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b04      	cmp	r3, #4
 8003124:	d109      	bne.n	800313a <HAL_TIM_PWM_Start+0x3e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e015      	b.n	8003166 <HAL_TIM_PWM_Start+0x6a>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d109      	bne.n	8003154 <HAL_TIM_PWM_Start+0x58>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e008      	b.n	8003166 <HAL_TIM_PWM_Start+0x6a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e05e      	b.n	800322c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Start+0x82>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800317c:	e013      	b.n	80031a6 <HAL_TIM_PWM_Start+0xaa>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b04      	cmp	r3, #4
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Start+0x92>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800318c:	e00b      	b.n	80031a6 <HAL_TIM_PWM_Start+0xaa>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Start+0xa2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800319c:	e003      	b.n	80031a6 <HAL_TIM_PWM_Start+0xaa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2201      	movs	r2, #1
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fafe 	bl	80037b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003234 <HAL_TIM_PWM_Start+0x138>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d107      	bne.n	80031ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a18      	ldr	r2, [pc, #96]	@ (8003234 <HAL_TIM_PWM_Start+0x138>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_TIM_PWM_Start+0xfa>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e0:	d009      	beq.n	80031f6 <HAL_TIM_PWM_Start+0xfa>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <HAL_TIM_PWM_Start+0x13c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_TIM_PWM_Start+0xfa>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a12      	ldr	r2, [pc, #72]	@ (800323c <HAL_TIM_PWM_Start+0x140>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d111      	bne.n	800321a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b06      	cmp	r3, #6
 8003206:	d010      	beq.n	800322a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003218:	e007      	b.n	800322a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40000400 	.word	0x40000400
 800323c:	40000800 	.word	0x40000800

08003240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800325a:	2302      	movs	r3, #2
 800325c:	e0ae      	b.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	f200 809f 	bhi.w	80033ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800326e:	a201      	add	r2, pc, #4	@ (adr r2, 8003274 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080032a9 	.word	0x080032a9
 8003278:	080033ad 	.word	0x080033ad
 800327c:	080033ad 	.word	0x080033ad
 8003280:	080033ad 	.word	0x080033ad
 8003284:	080032e9 	.word	0x080032e9
 8003288:	080033ad 	.word	0x080033ad
 800328c:	080033ad 	.word	0x080033ad
 8003290:	080033ad 	.word	0x080033ad
 8003294:	0800332b 	.word	0x0800332b
 8003298:	080033ad 	.word	0x080033ad
 800329c:	080033ad 	.word	0x080033ad
 80032a0:	080033ad 	.word	0x080033ad
 80032a4:	0800336b 	.word	0x0800336b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f8f6 	bl	80034a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6999      	ldr	r1, [r3, #24]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	619a      	str	r2, [r3, #24]
      break;
 80032e6:	e064      	b.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f93c 	bl	800356c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	619a      	str	r2, [r3, #24]
      break;
 8003328:	e043      	b.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f985 	bl	8003640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0208 	orr.w	r2, r2, #8
 8003344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0204 	bic.w	r2, r2, #4
 8003354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69d9      	ldr	r1, [r3, #28]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
      break;
 8003368:	e023      	b.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f9cf 	bl	8003714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69d9      	ldr	r1, [r3, #28]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	61da      	str	r2, [r3, #28]
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
      break;
 80033b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003494 <TIM_Base_SetConfig+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x30>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x30>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003498 <TIM_Base_SetConfig+0xd4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x30>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <TIM_Base_SetConfig+0xd8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a22      	ldr	r2, [pc, #136]	@ (8003494 <TIM_Base_SetConfig+0xd0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0x62>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0x62>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1f      	ldr	r2, [pc, #124]	@ (8003498 <TIM_Base_SetConfig+0xd4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0x62>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <TIM_Base_SetConfig+0xd8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <TIM_Base_SetConfig+0xd0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f023 0201 	bic.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]
  }
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800

080034a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f023 0201 	bic.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 0302 	bic.w	r3, r3, #2
 80034e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <TIM_OC1_SetConfig+0xc8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10c      	bne.n	8003516 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0308 	bic.w	r3, r3, #8
 8003502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a13      	ldr	r2, [pc, #76]	@ (8003568 <TIM_OC1_SetConfig+0xc8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d111      	bne.n	8003542 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800352c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40012c00 	.word	0x40012c00

0800356c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f023 0210 	bic.w	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f023 0320 	bic.w	r3, r3, #32
 80035b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a1d      	ldr	r2, [pc, #116]	@ (800363c <TIM_OC2_SetConfig+0xd0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10d      	bne.n	80035e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a14      	ldr	r2, [pc, #80]	@ (800363c <TIM_OC2_SetConfig+0xd0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d113      	bne.n	8003618 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	40012c00 	.word	0x40012c00

08003640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <TIM_OC3_SetConfig+0xd0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d10d      	bne.n	80036ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a14      	ldr	r2, [pc, #80]	@ (8003710 <TIM_OC3_SetConfig+0xd0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d113      	bne.n	80036ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00

08003714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800374a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800375e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	031b      	lsls	r3, r3, #12
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a0f      	ldr	r2, [pc, #60]	@ (80037ac <TIM_OC4_SetConfig+0x98>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d109      	bne.n	8003788 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800377a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00

080037b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2201      	movs	r2, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	401a      	ands	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1a      	ldr	r2, [r3, #32]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800380c:	2302      	movs	r3, #2
 800380e:	e046      	b.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a16      	ldr	r2, [pc, #88]	@ (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385c:	d009      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a12      	ldr	r2, [pc, #72]	@ (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a10      	ldr	r2, [pc, #64]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10c      	bne.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4313      	orrs	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800

080038b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e042      	b.n	800394c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd f8b8 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	@ 0x24
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fdb7 	bl	800446c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800390c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800391c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800392c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	d175      	bne.n	8003a60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_UART_Transmit+0x2c>
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e06e      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2221      	movs	r2, #33	@ 0x21
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003992:	f7fd fa6b 	bl	8000e6c <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ac:	d108      	bne.n	80039c0 <HAL_UART_Transmit+0x6c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e003      	b.n	80039c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c8:	e02e      	b.n	8003a28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	@ 0x80
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fb1c 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e03a      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	3302      	adds	r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e007      	b.n	8003a1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3301      	adds	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1cb      	bne.n	80039ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2140      	movs	r1, #64	@ 0x40
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fae8 	bl	8004012 <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e006      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	4613      	mov	r3, r2
 8003a76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d112      	bne.n	8003aaa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_UART_Receive_IT+0x26>
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e00b      	b.n	8003aac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fb0f 	bl	80040c4 <UART_Start_Receive_IT>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	e000      	b.n	8003aac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10f      	bne.n	8003b1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_UART_IRQHandler+0x66>
 8003b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fbec 	bl	80042f0 <UART_Receive_IT>
      return;
 8003b18:	e25b      	b.n	8003fd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80de 	beq.w	8003ce0 <HAL_UART_IRQHandler+0x22c>
 8003b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80d1 	beq.w	8003ce0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <HAL_UART_IRQHandler+0xae>
 8003b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_UART_IRQHandler+0xd2>
 8003b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	f043 0202 	orr.w	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_UART_IRQHandler+0xf6>
 8003b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f043 0204 	orr.w	r2, r3, #4
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d011      	beq.n	8003bda <HAL_UART_IRQHandler+0x126>
 8003bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	f043 0208 	orr.w	r2, r3, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 81f2 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_UART_IRQHandler+0x14e>
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fb77 	bl	80042f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d103      	bne.n	8003c2e <HAL_UART_IRQHandler+0x17a>
 8003c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d04f      	beq.n	8003cce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa81 	bl	8004136 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d041      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1d9      	bne.n	8003c42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d013      	beq.n	8003cbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e94 <HAL_UART_IRQHandler+0x3e0>)
 8003c9c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fa62 	bl	800216c <HAL_DMA_Abort_IT>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e00e      	b.n	8003cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f993 	bl	8003fea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	e00a      	b.n	8003cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f98f 	bl	8003fea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	e006      	b.n	8003cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f98b 	bl	8003fea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cda:	e175      	b.n	8003fc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	bf00      	nop
    return;
 8003cde:	e173      	b.n	8003fc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	f040 814f 	bne.w	8003f88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8148 	beq.w	8003f88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8141 	beq.w	8003f88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80b6 	beq.w	8003e98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8145 	beq.w	8003fcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	f080 813e 	bcs.w	8003fcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	f000 8088 	beq.w	8003e74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d90:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1d9      	bne.n	8003d64 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003dc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3314      	adds	r3, #20
 8003dd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dd4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ddc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003de6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e1      	bne.n	8003db0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e3      	bne.n	8003dec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e44:	f023 0310 	bic.w	r3, r3, #16
 8003e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e3      	bne.n	8003e32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe f941 	bl	80020f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8b6 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e90:	e09c      	b.n	8003fcc <HAL_UART_IRQHandler+0x518>
 8003e92:	bf00      	nop
 8003e94:	080041fb 	.word	0x080041fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 808e 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8089 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ee2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e3      	bne.n	8003ebe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	623b      	str	r3, [r7, #32]
   return(result);
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0310 	bic.w	r3, r3, #16
 8003f52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f60:	61fa      	str	r2, [r7, #28]
 8003f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	69b9      	ldr	r1, [r7, #24]
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e3      	bne.n	8003f3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f83b 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f86:	e023      	b.n	8003fd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x4f4>
 8003f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f93e 	bl	8004222 <UART_Transmit_IT>
    return;
 8003fa6:	e014      	b.n	8003fd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x51e>
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f97d 	bl	80042c0 <UART_EndTransmit_IT>
    return;
 8003fc6:	e004      	b.n	8003fd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fc8:	bf00      	nop
 8003fca:	e002      	b.n	8003fd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fd0:	bf00      	nop
  }
}
 8003fd2:	37e8      	adds	r7, #232	@ 0xe8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr

08003fea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004022:	e03b      	b.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d037      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7fc ff1e 	bl	8000e6c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <UART_WaitOnFlagUntilTimeout+0x30>
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e03a      	b.n	80040bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d023      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b80      	cmp	r3, #128	@ 0x80
 8004058:	d020      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b40      	cmp	r3, #64	@ 0x40
 800405e:	d01d      	beq.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b08      	cmp	r3, #8
 800406c:	d116      	bne.n	800409c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f856 	bl	8004136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2208      	movs	r2, #8
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e00f      	b.n	80040bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d0b4      	beq.n	8004024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	88fa      	ldrh	r2, [r7, #6]
 80040e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2222      	movs	r2, #34	@ 0x22
 80040ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004108:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0220 	orr.w	r2, r2, #32
 8004128:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004136:	b480      	push	{r7}
 8004138:	b095      	sub	sp, #84	@ 0x54
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800415e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	61fb      	str	r3, [r7, #28]
   return(result);
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004194:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d119      	bne.n	80041e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f023 0310 	bic.w	r3, r3, #16
 80041c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ce:	61ba      	str	r2, [r7, #24]
 80041d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	6979      	ldr	r1, [r7, #20]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	613b      	str	r3, [r7, #16]
   return(result);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e5      	bne.n	80041ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041f0:	bf00      	nop
 80041f2:	3754      	adds	r7, #84	@ 0x54
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fee8 	bl	8003fea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b21      	cmp	r3, #33	@ 0x21
 8004234:	d13e      	bne.n	80042b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800423e:	d114      	bne.n	800426a <UART_Transmit_IT+0x48>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d110      	bne.n	800426a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800425c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	1c9a      	adds	r2, r3, #2
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	621a      	str	r2, [r3, #32]
 8004268:	e008      	b.n	800427c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	1c59      	adds	r1, r3, #1
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6211      	str	r1, [r2, #32]
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29b      	uxth	r3, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4619      	mov	r1, r3
 800428a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10f      	bne.n	80042b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800429e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fe79 	bl	8003fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	@ 0x30
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b22      	cmp	r3, #34	@ 0x22
 8004302:	f040 80ae 	bne.w	8004462 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430e:	d117      	bne.n	8004340 <UART_Receive_IT+0x50>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d113      	bne.n	8004340 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432e:	b29a      	uxth	r2, r3
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	1c9a      	adds	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	629a      	str	r2, [r3, #40]	@ 0x28
 800433e:	e026      	b.n	800438e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004352:	d007      	beq.n	8004364 <UART_Receive_IT+0x74>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <UART_Receive_IT+0x82>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	e008      	b.n	8004384 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800437e:	b2da      	uxtb	r2, r3
 8004380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004382:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4619      	mov	r1, r3
 800439c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d15d      	bne.n	800445e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0220 	bic.w	r2, r2, #32
 80043b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d135      	bne.n	8004454 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	613b      	str	r3, [r7, #16]
   return(result);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f023 0310 	bic.w	r3, r3, #16
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440e:	623a      	str	r2, [r7, #32]
 8004410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	69f9      	ldr	r1, [r7, #28]
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	61bb      	str	r3, [r7, #24]
   return(result);
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e5      	bne.n	80043ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b10      	cmp	r3, #16
 800442e:	d10a      	bne.n	8004446 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fdd5 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
 8004452:	e002      	b.n	800445a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fb feb9 	bl	80001cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e002      	b.n	8004464 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3730      	adds	r7, #48	@ 0x30
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044a6:	f023 030c 	bic.w	r3, r3, #12
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004580 <UART_SetConfig+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7fe fc56 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	e002      	b.n	80044e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7fe fc3e 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 80044e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	4a22      	ldr	r2, [pc, #136]	@ (8004584 <UART_SetConfig+0x118>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	0119      	lsls	r1, r3, #4
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009a      	lsls	r2, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	fbb2 f2f3 	udiv	r2, r2, r3
 8004518:	4b1a      	ldr	r3, [pc, #104]	@ (8004584 <UART_SetConfig+0x118>)
 800451a:	fba3 0302 	umull	r0, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2064      	movs	r0, #100	@ 0x64
 8004522:	fb00 f303 	mul.w	r3, r0, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	3332      	adds	r3, #50	@ 0x32
 800452c:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <UART_SetConfig+0x118>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004538:	4419      	add	r1, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009a      	lsls	r2, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <UART_SetConfig+0x118>)
 8004552:	fba3 0302 	umull	r0, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2064      	movs	r0, #100	@ 0x64
 800455a:	fb00 f303 	mul.w	r3, r0, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	3332      	adds	r3, #50	@ 0x32
 8004564:	4a07      	ldr	r2, [pc, #28]	@ (8004584 <UART_SetConfig+0x118>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	440a      	add	r2, r1
 8004576:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40013800 	.word	0x40013800
 8004584:	51eb851f 	.word	0x51eb851f

08004588 <std>:
 8004588:	2300      	movs	r3, #0
 800458a:	b510      	push	{r4, lr}
 800458c:	4604      	mov	r4, r0
 800458e:	e9c0 3300 	strd	r3, r3, [r0]
 8004592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004596:	6083      	str	r3, [r0, #8]
 8004598:	8181      	strh	r1, [r0, #12]
 800459a:	6643      	str	r3, [r0, #100]	@ 0x64
 800459c:	81c2      	strh	r2, [r0, #14]
 800459e:	6183      	str	r3, [r0, #24]
 80045a0:	4619      	mov	r1, r3
 80045a2:	2208      	movs	r2, #8
 80045a4:	305c      	adds	r0, #92	@ 0x5c
 80045a6:	f000 f9f9 	bl	800499c <memset>
 80045aa:	4b0d      	ldr	r3, [pc, #52]	@ (80045e0 <std+0x58>)
 80045ac:	6224      	str	r4, [r4, #32]
 80045ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80045b0:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <std+0x5c>)
 80045b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <std+0x60>)
 80045b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045b8:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <std+0x64>)
 80045ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <std+0x68>)
 80045be:	429c      	cmp	r4, r3
 80045c0:	d006      	beq.n	80045d0 <std+0x48>
 80045c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045c6:	4294      	cmp	r4, r2
 80045c8:	d002      	beq.n	80045d0 <std+0x48>
 80045ca:	33d0      	adds	r3, #208	@ 0xd0
 80045cc:	429c      	cmp	r4, r3
 80045ce:	d105      	bne.n	80045dc <std+0x54>
 80045d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f000 ba58 	b.w	8004a8c <__retarget_lock_init_recursive>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	bf00      	nop
 80045e0:	080047ed 	.word	0x080047ed
 80045e4:	0800480f 	.word	0x0800480f
 80045e8:	08004847 	.word	0x08004847
 80045ec:	0800486b 	.word	0x0800486b
 80045f0:	200009e8 	.word	0x200009e8

080045f4 <stdio_exit_handler>:
 80045f4:	4a02      	ldr	r2, [pc, #8]	@ (8004600 <stdio_exit_handler+0xc>)
 80045f6:	4903      	ldr	r1, [pc, #12]	@ (8004604 <stdio_exit_handler+0x10>)
 80045f8:	4803      	ldr	r0, [pc, #12]	@ (8004608 <stdio_exit_handler+0x14>)
 80045fa:	f000 b869 	b.w	80046d0 <_fwalk_sglue>
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c
 8004604:	08005325 	.word	0x08005325
 8004608:	2000001c 	.word	0x2000001c

0800460c <cleanup_stdio>:
 800460c:	6841      	ldr	r1, [r0, #4]
 800460e:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <cleanup_stdio+0x34>)
 8004610:	b510      	push	{r4, lr}
 8004612:	4299      	cmp	r1, r3
 8004614:	4604      	mov	r4, r0
 8004616:	d001      	beq.n	800461c <cleanup_stdio+0x10>
 8004618:	f000 fe84 	bl	8005324 <_fflush_r>
 800461c:	68a1      	ldr	r1, [r4, #8]
 800461e:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <cleanup_stdio+0x38>)
 8004620:	4299      	cmp	r1, r3
 8004622:	d002      	beq.n	800462a <cleanup_stdio+0x1e>
 8004624:	4620      	mov	r0, r4
 8004626:	f000 fe7d 	bl	8005324 <_fflush_r>
 800462a:	68e1      	ldr	r1, [r4, #12]
 800462c:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <cleanup_stdio+0x3c>)
 800462e:	4299      	cmp	r1, r3
 8004630:	d004      	beq.n	800463c <cleanup_stdio+0x30>
 8004632:	4620      	mov	r0, r4
 8004634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004638:	f000 be74 	b.w	8005324 <_fflush_r>
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	200009e8 	.word	0x200009e8
 8004644:	20000a50 	.word	0x20000a50
 8004648:	20000ab8 	.word	0x20000ab8

0800464c <global_stdio_init.part.0>:
 800464c:	b510      	push	{r4, lr}
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <global_stdio_init.part.0+0x30>)
 8004650:	4c0b      	ldr	r4, [pc, #44]	@ (8004680 <global_stdio_init.part.0+0x34>)
 8004652:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <global_stdio_init.part.0+0x38>)
 8004654:	4620      	mov	r0, r4
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	2104      	movs	r1, #4
 800465a:	2200      	movs	r2, #0
 800465c:	f7ff ff94 	bl	8004588 <std>
 8004660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004664:	2201      	movs	r2, #1
 8004666:	2109      	movs	r1, #9
 8004668:	f7ff ff8e 	bl	8004588 <std>
 800466c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004670:	2202      	movs	r2, #2
 8004672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004676:	2112      	movs	r1, #18
 8004678:	f7ff bf86 	b.w	8004588 <std>
 800467c:	20000b20 	.word	0x20000b20
 8004680:	200009e8 	.word	0x200009e8
 8004684:	080045f5 	.word	0x080045f5

08004688 <__sfp_lock_acquire>:
 8004688:	4801      	ldr	r0, [pc, #4]	@ (8004690 <__sfp_lock_acquire+0x8>)
 800468a:	f000 ba00 	b.w	8004a8e <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	20000b29 	.word	0x20000b29

08004694 <__sfp_lock_release>:
 8004694:	4801      	ldr	r0, [pc, #4]	@ (800469c <__sfp_lock_release+0x8>)
 8004696:	f000 b9fb 	b.w	8004a90 <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	20000b29 	.word	0x20000b29

080046a0 <__sinit>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	4604      	mov	r4, r0
 80046a4:	f7ff fff0 	bl	8004688 <__sfp_lock_acquire>
 80046a8:	6a23      	ldr	r3, [r4, #32]
 80046aa:	b11b      	cbz	r3, 80046b4 <__sinit+0x14>
 80046ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b0:	f7ff bff0 	b.w	8004694 <__sfp_lock_release>
 80046b4:	4b04      	ldr	r3, [pc, #16]	@ (80046c8 <__sinit+0x28>)
 80046b6:	6223      	str	r3, [r4, #32]
 80046b8:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <__sinit+0x2c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f5      	bne.n	80046ac <__sinit+0xc>
 80046c0:	f7ff ffc4 	bl	800464c <global_stdio_init.part.0>
 80046c4:	e7f2      	b.n	80046ac <__sinit+0xc>
 80046c6:	bf00      	nop
 80046c8:	0800460d 	.word	0x0800460d
 80046cc:	20000b20 	.word	0x20000b20

080046d0 <_fwalk_sglue>:
 80046d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d4:	4607      	mov	r7, r0
 80046d6:	4688      	mov	r8, r1
 80046d8:	4614      	mov	r4, r2
 80046da:	2600      	movs	r6, #0
 80046dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046e0:	f1b9 0901 	subs.w	r9, r9, #1
 80046e4:	d505      	bpl.n	80046f2 <_fwalk_sglue+0x22>
 80046e6:	6824      	ldr	r4, [r4, #0]
 80046e8:	2c00      	cmp	r4, #0
 80046ea:	d1f7      	bne.n	80046dc <_fwalk_sglue+0xc>
 80046ec:	4630      	mov	r0, r6
 80046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f2:	89ab      	ldrh	r3, [r5, #12]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d907      	bls.n	8004708 <_fwalk_sglue+0x38>
 80046f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046fc:	3301      	adds	r3, #1
 80046fe:	d003      	beq.n	8004708 <_fwalk_sglue+0x38>
 8004700:	4629      	mov	r1, r5
 8004702:	4638      	mov	r0, r7
 8004704:	47c0      	blx	r8
 8004706:	4306      	orrs	r6, r0
 8004708:	3568      	adds	r5, #104	@ 0x68
 800470a:	e7e9      	b.n	80046e0 <_fwalk_sglue+0x10>

0800470c <iprintf>:
 800470c:	b40f      	push	{r0, r1, r2, r3}
 800470e:	b507      	push	{r0, r1, r2, lr}
 8004710:	4906      	ldr	r1, [pc, #24]	@ (800472c <iprintf+0x20>)
 8004712:	ab04      	add	r3, sp, #16
 8004714:	6808      	ldr	r0, [r1, #0]
 8004716:	f853 2b04 	ldr.w	r2, [r3], #4
 800471a:	6881      	ldr	r1, [r0, #8]
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	f000 fad7 	bl	8004cd0 <_vfiprintf_r>
 8004722:	b003      	add	sp, #12
 8004724:	f85d eb04 	ldr.w	lr, [sp], #4
 8004728:	b004      	add	sp, #16
 800472a:	4770      	bx	lr
 800472c:	20000018 	.word	0x20000018

08004730 <_puts_r>:
 8004730:	6a03      	ldr	r3, [r0, #32]
 8004732:	b570      	push	{r4, r5, r6, lr}
 8004734:	4605      	mov	r5, r0
 8004736:	460e      	mov	r6, r1
 8004738:	6884      	ldr	r4, [r0, #8]
 800473a:	b90b      	cbnz	r3, 8004740 <_puts_r+0x10>
 800473c:	f7ff ffb0 	bl	80046a0 <__sinit>
 8004740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004742:	07db      	lsls	r3, r3, #31
 8004744:	d405      	bmi.n	8004752 <_puts_r+0x22>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	0598      	lsls	r0, r3, #22
 800474a:	d402      	bmi.n	8004752 <_puts_r+0x22>
 800474c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800474e:	f000 f99e 	bl	8004a8e <__retarget_lock_acquire_recursive>
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	0719      	lsls	r1, r3, #28
 8004756:	d502      	bpl.n	800475e <_puts_r+0x2e>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d135      	bne.n	80047ca <_puts_r+0x9a>
 800475e:	4621      	mov	r1, r4
 8004760:	4628      	mov	r0, r5
 8004762:	f000 f8c5 	bl	80048f0 <__swsetup_r>
 8004766:	b380      	cbz	r0, 80047ca <_puts_r+0x9a>
 8004768:	f04f 35ff 	mov.w	r5, #4294967295
 800476c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800476e:	07da      	lsls	r2, r3, #31
 8004770:	d405      	bmi.n	800477e <_puts_r+0x4e>
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	059b      	lsls	r3, r3, #22
 8004776:	d402      	bmi.n	800477e <_puts_r+0x4e>
 8004778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800477a:	f000 f989 	bl	8004a90 <__retarget_lock_release_recursive>
 800477e:	4628      	mov	r0, r5
 8004780:	bd70      	pop	{r4, r5, r6, pc}
 8004782:	2b00      	cmp	r3, #0
 8004784:	da04      	bge.n	8004790 <_puts_r+0x60>
 8004786:	69a2      	ldr	r2, [r4, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	dc17      	bgt.n	80047bc <_puts_r+0x8c>
 800478c:	290a      	cmp	r1, #10
 800478e:	d015      	beq.n	80047bc <_puts_r+0x8c>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	7019      	strb	r1, [r3, #0]
 8004798:	68a3      	ldr	r3, [r4, #8]
 800479a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800479e:	3b01      	subs	r3, #1
 80047a0:	60a3      	str	r3, [r4, #8]
 80047a2:	2900      	cmp	r1, #0
 80047a4:	d1ed      	bne.n	8004782 <_puts_r+0x52>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da11      	bge.n	80047ce <_puts_r+0x9e>
 80047aa:	4622      	mov	r2, r4
 80047ac:	210a      	movs	r1, #10
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 f85f 	bl	8004872 <__swbuf_r>
 80047b4:	3001      	adds	r0, #1
 80047b6:	d0d7      	beq.n	8004768 <_puts_r+0x38>
 80047b8:	250a      	movs	r5, #10
 80047ba:	e7d7      	b.n	800476c <_puts_r+0x3c>
 80047bc:	4622      	mov	r2, r4
 80047be:	4628      	mov	r0, r5
 80047c0:	f000 f857 	bl	8004872 <__swbuf_r>
 80047c4:	3001      	adds	r0, #1
 80047c6:	d1e7      	bne.n	8004798 <_puts_r+0x68>
 80047c8:	e7ce      	b.n	8004768 <_puts_r+0x38>
 80047ca:	3e01      	subs	r6, #1
 80047cc:	e7e4      	b.n	8004798 <_puts_r+0x68>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	6022      	str	r2, [r4, #0]
 80047d4:	220a      	movs	r2, #10
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e7ee      	b.n	80047b8 <_puts_r+0x88>
	...

080047dc <puts>:
 80047dc:	4b02      	ldr	r3, [pc, #8]	@ (80047e8 <puts+0xc>)
 80047de:	4601      	mov	r1, r0
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	f7ff bfa5 	b.w	8004730 <_puts_r>
 80047e6:	bf00      	nop
 80047e8:	20000018 	.word	0x20000018

080047ec <__sread>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	460c      	mov	r4, r1
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	f000 f8fc 	bl	80049f0 <_read_r>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	bfab      	itete	ge
 80047fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004800:	181b      	addge	r3, r3, r0
 8004802:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004806:	bfac      	ite	ge
 8004808:	6563      	strge	r3, [r4, #84]	@ 0x54
 800480a:	81a3      	strhlt	r3, [r4, #12]
 800480c:	bd10      	pop	{r4, pc}

0800480e <__swrite>:
 800480e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004812:	461f      	mov	r7, r3
 8004814:	898b      	ldrh	r3, [r1, #12]
 8004816:	4605      	mov	r5, r0
 8004818:	05db      	lsls	r3, r3, #23
 800481a:	460c      	mov	r4, r1
 800481c:	4616      	mov	r6, r2
 800481e:	d505      	bpl.n	800482c <__swrite+0x1e>
 8004820:	2302      	movs	r3, #2
 8004822:	2200      	movs	r2, #0
 8004824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004828:	f000 f8d0 	bl	80049cc <_lseek_r>
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	4632      	mov	r2, r6
 8004830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	4628      	mov	r0, r5
 8004838:	463b      	mov	r3, r7
 800483a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800483e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	f000 b8e7 	b.w	8004a14 <_write_r>

08004846 <__sseek>:
 8004846:	b510      	push	{r4, lr}
 8004848:	460c      	mov	r4, r1
 800484a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484e:	f000 f8bd 	bl	80049cc <_lseek_r>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	bf15      	itete	ne
 8004858:	6560      	strne	r0, [r4, #84]	@ 0x54
 800485a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800485e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004862:	81a3      	strheq	r3, [r4, #12]
 8004864:	bf18      	it	ne
 8004866:	81a3      	strhne	r3, [r4, #12]
 8004868:	bd10      	pop	{r4, pc}

0800486a <__sclose>:
 800486a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486e:	f000 b89d 	b.w	80049ac <_close_r>

08004872 <__swbuf_r>:
 8004872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004874:	460e      	mov	r6, r1
 8004876:	4614      	mov	r4, r2
 8004878:	4605      	mov	r5, r0
 800487a:	b118      	cbz	r0, 8004884 <__swbuf_r+0x12>
 800487c:	6a03      	ldr	r3, [r0, #32]
 800487e:	b90b      	cbnz	r3, 8004884 <__swbuf_r+0x12>
 8004880:	f7ff ff0e 	bl	80046a0 <__sinit>
 8004884:	69a3      	ldr	r3, [r4, #24]
 8004886:	60a3      	str	r3, [r4, #8]
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	071a      	lsls	r2, r3, #28
 800488c:	d501      	bpl.n	8004892 <__swbuf_r+0x20>
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	b943      	cbnz	r3, 80048a4 <__swbuf_r+0x32>
 8004892:	4621      	mov	r1, r4
 8004894:	4628      	mov	r0, r5
 8004896:	f000 f82b 	bl	80048f0 <__swsetup_r>
 800489a:	b118      	cbz	r0, 80048a4 <__swbuf_r+0x32>
 800489c:	f04f 37ff 	mov.w	r7, #4294967295
 80048a0:	4638      	mov	r0, r7
 80048a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	6922      	ldr	r2, [r4, #16]
 80048a8:	b2f6      	uxtb	r6, r6
 80048aa:	1a98      	subs	r0, r3, r2
 80048ac:	6963      	ldr	r3, [r4, #20]
 80048ae:	4637      	mov	r7, r6
 80048b0:	4283      	cmp	r3, r0
 80048b2:	dc05      	bgt.n	80048c0 <__swbuf_r+0x4e>
 80048b4:	4621      	mov	r1, r4
 80048b6:	4628      	mov	r0, r5
 80048b8:	f000 fd34 	bl	8005324 <_fflush_r>
 80048bc:	2800      	cmp	r0, #0
 80048be:	d1ed      	bne.n	800489c <__swbuf_r+0x2a>
 80048c0:	68a3      	ldr	r3, [r4, #8]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60a3      	str	r3, [r4, #8]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	6022      	str	r2, [r4, #0]
 80048cc:	701e      	strb	r6, [r3, #0]
 80048ce:	6962      	ldr	r2, [r4, #20]
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d004      	beq.n	80048e0 <__swbuf_r+0x6e>
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	07db      	lsls	r3, r3, #31
 80048da:	d5e1      	bpl.n	80048a0 <__swbuf_r+0x2e>
 80048dc:	2e0a      	cmp	r6, #10
 80048de:	d1df      	bne.n	80048a0 <__swbuf_r+0x2e>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 fd1e 	bl	8005324 <_fflush_r>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d0d9      	beq.n	80048a0 <__swbuf_r+0x2e>
 80048ec:	e7d6      	b.n	800489c <__swbuf_r+0x2a>
	...

080048f0 <__swsetup_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4b29      	ldr	r3, [pc, #164]	@ (8004998 <__swsetup_r+0xa8>)
 80048f4:	4605      	mov	r5, r0
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	460c      	mov	r4, r1
 80048fa:	b118      	cbz	r0, 8004904 <__swsetup_r+0x14>
 80048fc:	6a03      	ldr	r3, [r0, #32]
 80048fe:	b90b      	cbnz	r3, 8004904 <__swsetup_r+0x14>
 8004900:	f7ff fece 	bl	80046a0 <__sinit>
 8004904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004908:	0719      	lsls	r1, r3, #28
 800490a:	d422      	bmi.n	8004952 <__swsetup_r+0x62>
 800490c:	06da      	lsls	r2, r3, #27
 800490e:	d407      	bmi.n	8004920 <__swsetup_r+0x30>
 8004910:	2209      	movs	r2, #9
 8004912:	602a      	str	r2, [r5, #0]
 8004914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004918:	f04f 30ff 	mov.w	r0, #4294967295
 800491c:	81a3      	strh	r3, [r4, #12]
 800491e:	e033      	b.n	8004988 <__swsetup_r+0x98>
 8004920:	0758      	lsls	r0, r3, #29
 8004922:	d512      	bpl.n	800494a <__swsetup_r+0x5a>
 8004924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004926:	b141      	cbz	r1, 800493a <__swsetup_r+0x4a>
 8004928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800492c:	4299      	cmp	r1, r3
 800492e:	d002      	beq.n	8004936 <__swsetup_r+0x46>
 8004930:	4628      	mov	r0, r5
 8004932:	f000 f8af 	bl	8004a94 <_free_r>
 8004936:	2300      	movs	r3, #0
 8004938:	6363      	str	r3, [r4, #52]	@ 0x34
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	2300      	movs	r3, #0
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	81a3      	strh	r3, [r4, #12]
 8004952:	6923      	ldr	r3, [r4, #16]
 8004954:	b94b      	cbnz	r3, 800496a <__swsetup_r+0x7a>
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800495c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004960:	d003      	beq.n	800496a <__swsetup_r+0x7a>
 8004962:	4621      	mov	r1, r4
 8004964:	4628      	mov	r0, r5
 8004966:	f000 fd2a 	bl	80053be <__smakebuf_r>
 800496a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496e:	f013 0201 	ands.w	r2, r3, #1
 8004972:	d00a      	beq.n	800498a <__swsetup_r+0x9a>
 8004974:	2200      	movs	r2, #0
 8004976:	60a2      	str	r2, [r4, #8]
 8004978:	6962      	ldr	r2, [r4, #20]
 800497a:	4252      	negs	r2, r2
 800497c:	61a2      	str	r2, [r4, #24]
 800497e:	6922      	ldr	r2, [r4, #16]
 8004980:	b942      	cbnz	r2, 8004994 <__swsetup_r+0xa4>
 8004982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004986:	d1c5      	bne.n	8004914 <__swsetup_r+0x24>
 8004988:	bd38      	pop	{r3, r4, r5, pc}
 800498a:	0799      	lsls	r1, r3, #30
 800498c:	bf58      	it	pl
 800498e:	6962      	ldrpl	r2, [r4, #20]
 8004990:	60a2      	str	r2, [r4, #8]
 8004992:	e7f4      	b.n	800497e <__swsetup_r+0x8e>
 8004994:	2000      	movs	r0, #0
 8004996:	e7f7      	b.n	8004988 <__swsetup_r+0x98>
 8004998:	20000018 	.word	0x20000018

0800499c <memset>:
 800499c:	4603      	mov	r3, r0
 800499e:	4402      	add	r2, r0
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d100      	bne.n	80049a6 <memset+0xa>
 80049a4:	4770      	bx	lr
 80049a6:	f803 1b01 	strb.w	r1, [r3], #1
 80049aa:	e7f9      	b.n	80049a0 <memset+0x4>

080049ac <_close_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	2300      	movs	r3, #0
 80049b0:	4d05      	ldr	r5, [pc, #20]	@ (80049c8 <_close_r+0x1c>)
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	602b      	str	r3, [r5, #0]
 80049b8:	f7fc f917 	bl	8000bea <_close>
 80049bc:	1c43      	adds	r3, r0, #1
 80049be:	d102      	bne.n	80049c6 <_close_r+0x1a>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	b103      	cbz	r3, 80049c6 <_close_r+0x1a>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	20000b24 	.word	0x20000b24

080049cc <_lseek_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	4611      	mov	r1, r2
 80049d4:	2200      	movs	r2, #0
 80049d6:	4d05      	ldr	r5, [pc, #20]	@ (80049ec <_lseek_r+0x20>)
 80049d8:	602a      	str	r2, [r5, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f7fc f929 	bl	8000c32 <_lseek>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_lseek_r+0x1e>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_lseek_r+0x1e>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	20000b24 	.word	0x20000b24

080049f0 <_read_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	2200      	movs	r2, #0
 80049fa:	4d05      	ldr	r5, [pc, #20]	@ (8004a10 <_read_r+0x20>)
 80049fc:	602a      	str	r2, [r5, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f7fc f8ba 	bl	8000b78 <_read>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_read_r+0x1e>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_read_r+0x1e>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	20000b24 	.word	0x20000b24

08004a14 <_write_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4d05      	ldr	r5, [pc, #20]	@ (8004a34 <_write_r+0x20>)
 8004a20:	602a      	str	r2, [r5, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f7fc f8c5 	bl	8000bb2 <_write>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_write_r+0x1e>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_write_r+0x1e>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	20000b24 	.word	0x20000b24

08004a38 <__errno>:
 8004a38:	4b01      	ldr	r3, [pc, #4]	@ (8004a40 <__errno+0x8>)
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000018 	.word	0x20000018

08004a44 <__libc_init_array>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	2600      	movs	r6, #0
 8004a48:	4d0c      	ldr	r5, [pc, #48]	@ (8004a7c <__libc_init_array+0x38>)
 8004a4a:	4c0d      	ldr	r4, [pc, #52]	@ (8004a80 <__libc_init_array+0x3c>)
 8004a4c:	1b64      	subs	r4, r4, r5
 8004a4e:	10a4      	asrs	r4, r4, #2
 8004a50:	42a6      	cmp	r6, r4
 8004a52:	d109      	bne.n	8004a68 <__libc_init_array+0x24>
 8004a54:	f000 fd30 	bl	80054b8 <_init>
 8004a58:	2600      	movs	r6, #0
 8004a5a:	4d0a      	ldr	r5, [pc, #40]	@ (8004a84 <__libc_init_array+0x40>)
 8004a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8004a88 <__libc_init_array+0x44>)
 8004a5e:	1b64      	subs	r4, r4, r5
 8004a60:	10a4      	asrs	r4, r4, #2
 8004a62:	42a6      	cmp	r6, r4
 8004a64:	d105      	bne.n	8004a72 <__libc_init_array+0x2e>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6c:	4798      	blx	r3
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7ee      	b.n	8004a50 <__libc_init_array+0xc>
 8004a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a76:	4798      	blx	r3
 8004a78:	3601      	adds	r6, #1
 8004a7a:	e7f2      	b.n	8004a62 <__libc_init_array+0x1e>
 8004a7c:	08005568 	.word	0x08005568
 8004a80:	08005568 	.word	0x08005568
 8004a84:	08005568 	.word	0x08005568
 8004a88:	0800556c 	.word	0x0800556c

08004a8c <__retarget_lock_init_recursive>:
 8004a8c:	4770      	bx	lr

08004a8e <__retarget_lock_acquire_recursive>:
 8004a8e:	4770      	bx	lr

08004a90 <__retarget_lock_release_recursive>:
 8004a90:	4770      	bx	lr
	...

08004a94 <_free_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	4605      	mov	r5, r0
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	d040      	beq.n	8004b1e <_free_r+0x8a>
 8004a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa0:	1f0c      	subs	r4, r1, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bfb8      	it	lt
 8004aa6:	18e4      	addlt	r4, r4, r3
 8004aa8:	f000 f8de 	bl	8004c68 <__malloc_lock>
 8004aac:	4a1c      	ldr	r2, [pc, #112]	@ (8004b20 <_free_r+0x8c>)
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	b933      	cbnz	r3, 8004ac0 <_free_r+0x2c>
 8004ab2:	6063      	str	r3, [r4, #4]
 8004ab4:	6014      	str	r4, [r2, #0]
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004abc:	f000 b8da 	b.w	8004c74 <__malloc_unlock>
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	d908      	bls.n	8004ad6 <_free_r+0x42>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	1821      	adds	r1, r4, r0
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	bf01      	itttt	eq
 8004acc:	6819      	ldreq	r1, [r3, #0]
 8004ace:	685b      	ldreq	r3, [r3, #4]
 8004ad0:	1809      	addeq	r1, r1, r0
 8004ad2:	6021      	streq	r1, [r4, #0]
 8004ad4:	e7ed      	b.n	8004ab2 <_free_r+0x1e>
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	b10b      	cbz	r3, 8004ae0 <_free_r+0x4c>
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	d9fa      	bls.n	8004ad6 <_free_r+0x42>
 8004ae0:	6811      	ldr	r1, [r2, #0]
 8004ae2:	1850      	adds	r0, r2, r1
 8004ae4:	42a0      	cmp	r0, r4
 8004ae6:	d10b      	bne.n	8004b00 <_free_r+0x6c>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	4401      	add	r1, r0
 8004aec:	1850      	adds	r0, r2, r1
 8004aee:	4283      	cmp	r3, r0
 8004af0:	6011      	str	r1, [r2, #0]
 8004af2:	d1e0      	bne.n	8004ab6 <_free_r+0x22>
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4408      	add	r0, r1
 8004afa:	6010      	str	r0, [r2, #0]
 8004afc:	6053      	str	r3, [r2, #4]
 8004afe:	e7da      	b.n	8004ab6 <_free_r+0x22>
 8004b00:	d902      	bls.n	8004b08 <_free_r+0x74>
 8004b02:	230c      	movs	r3, #12
 8004b04:	602b      	str	r3, [r5, #0]
 8004b06:	e7d6      	b.n	8004ab6 <_free_r+0x22>
 8004b08:	6820      	ldr	r0, [r4, #0]
 8004b0a:	1821      	adds	r1, r4, r0
 8004b0c:	428b      	cmp	r3, r1
 8004b0e:	bf01      	itttt	eq
 8004b10:	6819      	ldreq	r1, [r3, #0]
 8004b12:	685b      	ldreq	r3, [r3, #4]
 8004b14:	1809      	addeq	r1, r1, r0
 8004b16:	6021      	streq	r1, [r4, #0]
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	6054      	str	r4, [r2, #4]
 8004b1c:	e7cb      	b.n	8004ab6 <_free_r+0x22>
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	20000b30 	.word	0x20000b30

08004b24 <sbrk_aligned>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4e0f      	ldr	r6, [pc, #60]	@ (8004b64 <sbrk_aligned+0x40>)
 8004b28:	460c      	mov	r4, r1
 8004b2a:	6831      	ldr	r1, [r6, #0]
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	b911      	cbnz	r1, 8004b36 <sbrk_aligned+0x12>
 8004b30:	f000 fca4 	bl	800547c <_sbrk_r>
 8004b34:	6030      	str	r0, [r6, #0]
 8004b36:	4621      	mov	r1, r4
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 fc9f 	bl	800547c <_sbrk_r>
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	d103      	bne.n	8004b4a <sbrk_aligned+0x26>
 8004b42:	f04f 34ff 	mov.w	r4, #4294967295
 8004b46:	4620      	mov	r0, r4
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
 8004b4a:	1cc4      	adds	r4, r0, #3
 8004b4c:	f024 0403 	bic.w	r4, r4, #3
 8004b50:	42a0      	cmp	r0, r4
 8004b52:	d0f8      	beq.n	8004b46 <sbrk_aligned+0x22>
 8004b54:	1a21      	subs	r1, r4, r0
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 fc90 	bl	800547c <_sbrk_r>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d1f2      	bne.n	8004b46 <sbrk_aligned+0x22>
 8004b60:	e7ef      	b.n	8004b42 <sbrk_aligned+0x1e>
 8004b62:	bf00      	nop
 8004b64:	20000b2c 	.word	0x20000b2c

08004b68 <_malloc_r>:
 8004b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b6c:	1ccd      	adds	r5, r1, #3
 8004b6e:	f025 0503 	bic.w	r5, r5, #3
 8004b72:	3508      	adds	r5, #8
 8004b74:	2d0c      	cmp	r5, #12
 8004b76:	bf38      	it	cc
 8004b78:	250c      	movcc	r5, #12
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	db01      	blt.n	8004b84 <_malloc_r+0x1c>
 8004b80:	42a9      	cmp	r1, r5
 8004b82:	d904      	bls.n	8004b8e <_malloc_r+0x26>
 8004b84:	230c      	movs	r3, #12
 8004b86:	6033      	str	r3, [r6, #0]
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c64 <_malloc_r+0xfc>
 8004b92:	f000 f869 	bl	8004c68 <__malloc_lock>
 8004b96:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9a:	461c      	mov	r4, r3
 8004b9c:	bb44      	cbnz	r4, 8004bf0 <_malloc_r+0x88>
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f7ff ffbf 	bl	8004b24 <sbrk_aligned>
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	4604      	mov	r4, r0
 8004baa:	d158      	bne.n	8004c5e <_malloc_r+0xf6>
 8004bac:	f8d8 4000 	ldr.w	r4, [r8]
 8004bb0:	4627      	mov	r7, r4
 8004bb2:	2f00      	cmp	r7, #0
 8004bb4:	d143      	bne.n	8004c3e <_malloc_r+0xd6>
 8004bb6:	2c00      	cmp	r4, #0
 8004bb8:	d04b      	beq.n	8004c52 <_malloc_r+0xea>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	4639      	mov	r1, r7
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	eb04 0903 	add.w	r9, r4, r3
 8004bc4:	f000 fc5a 	bl	800547c <_sbrk_r>
 8004bc8:	4581      	cmp	r9, r0
 8004bca:	d142      	bne.n	8004c52 <_malloc_r+0xea>
 8004bcc:	6821      	ldr	r1, [r4, #0]
 8004bce:	4630      	mov	r0, r6
 8004bd0:	1a6d      	subs	r5, r5, r1
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	f7ff ffa6 	bl	8004b24 <sbrk_aligned>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d03a      	beq.n	8004c52 <_malloc_r+0xea>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	442b      	add	r3, r5
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	f8d8 3000 	ldr.w	r3, [r8]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	bb62      	cbnz	r2, 8004c44 <_malloc_r+0xdc>
 8004bea:	f8c8 7000 	str.w	r7, [r8]
 8004bee:	e00f      	b.n	8004c10 <_malloc_r+0xa8>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	1b52      	subs	r2, r2, r5
 8004bf4:	d420      	bmi.n	8004c38 <_malloc_r+0xd0>
 8004bf6:	2a0b      	cmp	r2, #11
 8004bf8:	d917      	bls.n	8004c2a <_malloc_r+0xc2>
 8004bfa:	1961      	adds	r1, r4, r5
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	6025      	str	r5, [r4, #0]
 8004c00:	bf18      	it	ne
 8004c02:	6059      	strne	r1, [r3, #4]
 8004c04:	6863      	ldr	r3, [r4, #4]
 8004c06:	bf08      	it	eq
 8004c08:	f8c8 1000 	streq.w	r1, [r8]
 8004c0c:	5162      	str	r2, [r4, r5]
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 f82f 	bl	8004c74 <__malloc_unlock>
 8004c16:	f104 000b 	add.w	r0, r4, #11
 8004c1a:	1d23      	adds	r3, r4, #4
 8004c1c:	f020 0007 	bic.w	r0, r0, #7
 8004c20:	1ac2      	subs	r2, r0, r3
 8004c22:	bf1c      	itt	ne
 8004c24:	1a1b      	subne	r3, r3, r0
 8004c26:	50a3      	strne	r3, [r4, r2]
 8004c28:	e7af      	b.n	8004b8a <_malloc_r+0x22>
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	bf0c      	ite	eq
 8004c30:	f8c8 2000 	streq.w	r2, [r8]
 8004c34:	605a      	strne	r2, [r3, #4]
 8004c36:	e7eb      	b.n	8004c10 <_malloc_r+0xa8>
 8004c38:	4623      	mov	r3, r4
 8004c3a:	6864      	ldr	r4, [r4, #4]
 8004c3c:	e7ae      	b.n	8004b9c <_malloc_r+0x34>
 8004c3e:	463c      	mov	r4, r7
 8004c40:	687f      	ldr	r7, [r7, #4]
 8004c42:	e7b6      	b.n	8004bb2 <_malloc_r+0x4a>
 8004c44:	461a      	mov	r2, r3
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	42a3      	cmp	r3, r4
 8004c4a:	d1fb      	bne.n	8004c44 <_malloc_r+0xdc>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6053      	str	r3, [r2, #4]
 8004c50:	e7de      	b.n	8004c10 <_malloc_r+0xa8>
 8004c52:	230c      	movs	r3, #12
 8004c54:	4630      	mov	r0, r6
 8004c56:	6033      	str	r3, [r6, #0]
 8004c58:	f000 f80c 	bl	8004c74 <__malloc_unlock>
 8004c5c:	e794      	b.n	8004b88 <_malloc_r+0x20>
 8004c5e:	6005      	str	r5, [r0, #0]
 8004c60:	e7d6      	b.n	8004c10 <_malloc_r+0xa8>
 8004c62:	bf00      	nop
 8004c64:	20000b30 	.word	0x20000b30

08004c68 <__malloc_lock>:
 8004c68:	4801      	ldr	r0, [pc, #4]	@ (8004c70 <__malloc_lock+0x8>)
 8004c6a:	f7ff bf10 	b.w	8004a8e <__retarget_lock_acquire_recursive>
 8004c6e:	bf00      	nop
 8004c70:	20000b28 	.word	0x20000b28

08004c74 <__malloc_unlock>:
 8004c74:	4801      	ldr	r0, [pc, #4]	@ (8004c7c <__malloc_unlock+0x8>)
 8004c76:	f7ff bf0b 	b.w	8004a90 <__retarget_lock_release_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	20000b28 	.word	0x20000b28

08004c80 <__sfputc_r>:
 8004c80:	6893      	ldr	r3, [r2, #8]
 8004c82:	b410      	push	{r4}
 8004c84:	3b01      	subs	r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	6093      	str	r3, [r2, #8]
 8004c8a:	da07      	bge.n	8004c9c <__sfputc_r+0x1c>
 8004c8c:	6994      	ldr	r4, [r2, #24]
 8004c8e:	42a3      	cmp	r3, r4
 8004c90:	db01      	blt.n	8004c96 <__sfputc_r+0x16>
 8004c92:	290a      	cmp	r1, #10
 8004c94:	d102      	bne.n	8004c9c <__sfputc_r+0x1c>
 8004c96:	bc10      	pop	{r4}
 8004c98:	f7ff bdeb 	b.w	8004872 <__swbuf_r>
 8004c9c:	6813      	ldr	r3, [r2, #0]
 8004c9e:	1c58      	adds	r0, r3, #1
 8004ca0:	6010      	str	r0, [r2, #0]
 8004ca2:	7019      	strb	r1, [r3, #0]
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	bc10      	pop	{r4}
 8004ca8:	4770      	bx	lr

08004caa <__sfputs_r>:
 8004caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cac:	4606      	mov	r6, r0
 8004cae:	460f      	mov	r7, r1
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	18d5      	adds	r5, r2, r3
 8004cb4:	42ac      	cmp	r4, r5
 8004cb6:	d101      	bne.n	8004cbc <__sfputs_r+0x12>
 8004cb8:	2000      	movs	r0, #0
 8004cba:	e007      	b.n	8004ccc <__sfputs_r+0x22>
 8004cbc:	463a      	mov	r2, r7
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc4:	f7ff ffdc 	bl	8004c80 <__sfputc_r>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d1f3      	bne.n	8004cb4 <__sfputs_r+0xa>
 8004ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cd0 <_vfiprintf_r>:
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	460d      	mov	r5, r1
 8004cd6:	4614      	mov	r4, r2
 8004cd8:	4698      	mov	r8, r3
 8004cda:	4606      	mov	r6, r0
 8004cdc:	b09d      	sub	sp, #116	@ 0x74
 8004cde:	b118      	cbz	r0, 8004ce8 <_vfiprintf_r+0x18>
 8004ce0:	6a03      	ldr	r3, [r0, #32]
 8004ce2:	b90b      	cbnz	r3, 8004ce8 <_vfiprintf_r+0x18>
 8004ce4:	f7ff fcdc 	bl	80046a0 <__sinit>
 8004ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cea:	07d9      	lsls	r1, r3, #31
 8004cec:	d405      	bmi.n	8004cfa <_vfiprintf_r+0x2a>
 8004cee:	89ab      	ldrh	r3, [r5, #12]
 8004cf0:	059a      	lsls	r2, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_vfiprintf_r+0x2a>
 8004cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cf6:	f7ff feca 	bl	8004a8e <__retarget_lock_acquire_recursive>
 8004cfa:	89ab      	ldrh	r3, [r5, #12]
 8004cfc:	071b      	lsls	r3, r3, #28
 8004cfe:	d501      	bpl.n	8004d04 <_vfiprintf_r+0x34>
 8004d00:	692b      	ldr	r3, [r5, #16]
 8004d02:	b99b      	cbnz	r3, 8004d2c <_vfiprintf_r+0x5c>
 8004d04:	4629      	mov	r1, r5
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff fdf2 	bl	80048f0 <__swsetup_r>
 8004d0c:	b170      	cbz	r0, 8004d2c <_vfiprintf_r+0x5c>
 8004d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d10:	07dc      	lsls	r4, r3, #31
 8004d12:	d504      	bpl.n	8004d1e <_vfiprintf_r+0x4e>
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	b01d      	add	sp, #116	@ 0x74
 8004d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	0598      	lsls	r0, r3, #22
 8004d22:	d4f7      	bmi.n	8004d14 <_vfiprintf_r+0x44>
 8004d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d26:	f7ff feb3 	bl	8004a90 <__retarget_lock_release_recursive>
 8004d2a:	e7f3      	b.n	8004d14 <_vfiprintf_r+0x44>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d30:	2320      	movs	r3, #32
 8004d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d36:	2330      	movs	r3, #48	@ 0x30
 8004d38:	f04f 0901 	mov.w	r9, #1
 8004d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d40:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004eec <_vfiprintf_r+0x21c>
 8004d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d48:	4623      	mov	r3, r4
 8004d4a:	469a      	mov	sl, r3
 8004d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d50:	b10a      	cbz	r2, 8004d56 <_vfiprintf_r+0x86>
 8004d52:	2a25      	cmp	r2, #37	@ 0x25
 8004d54:	d1f9      	bne.n	8004d4a <_vfiprintf_r+0x7a>
 8004d56:	ebba 0b04 	subs.w	fp, sl, r4
 8004d5a:	d00b      	beq.n	8004d74 <_vfiprintf_r+0xa4>
 8004d5c:	465b      	mov	r3, fp
 8004d5e:	4622      	mov	r2, r4
 8004d60:	4629      	mov	r1, r5
 8004d62:	4630      	mov	r0, r6
 8004d64:	f7ff ffa1 	bl	8004caa <__sfputs_r>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f000 80a7 	beq.w	8004ebc <_vfiprintf_r+0x1ec>
 8004d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d70:	445a      	add	r2, fp
 8004d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d74:	f89a 3000 	ldrb.w	r3, [sl]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 809f 	beq.w	8004ebc <_vfiprintf_r+0x1ec>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f04f 32ff 	mov.w	r2, #4294967295
 8004d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d88:	f10a 0a01 	add.w	sl, sl, #1
 8004d8c:	9304      	str	r3, [sp, #16]
 8004d8e:	9307      	str	r3, [sp, #28]
 8004d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d96:	4654      	mov	r4, sl
 8004d98:	2205      	movs	r2, #5
 8004d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9e:	4853      	ldr	r0, [pc, #332]	@ (8004eec <_vfiprintf_r+0x21c>)
 8004da0:	f000 fb7c 	bl	800549c <memchr>
 8004da4:	9a04      	ldr	r2, [sp, #16]
 8004da6:	b9d8      	cbnz	r0, 8004de0 <_vfiprintf_r+0x110>
 8004da8:	06d1      	lsls	r1, r2, #27
 8004daa:	bf44      	itt	mi
 8004dac:	2320      	movmi	r3, #32
 8004dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db2:	0713      	lsls	r3, r2, #28
 8004db4:	bf44      	itt	mi
 8004db6:	232b      	movmi	r3, #43	@ 0x2b
 8004db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc2:	d015      	beq.n	8004df0 <_vfiprintf_r+0x120>
 8004dc4:	4654      	mov	r4, sl
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	f04f 0c0a 	mov.w	ip, #10
 8004dcc:	9a07      	ldr	r2, [sp, #28]
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dd4:	3b30      	subs	r3, #48	@ 0x30
 8004dd6:	2b09      	cmp	r3, #9
 8004dd8:	d94b      	bls.n	8004e72 <_vfiprintf_r+0x1a2>
 8004dda:	b1b0      	cbz	r0, 8004e0a <_vfiprintf_r+0x13a>
 8004ddc:	9207      	str	r2, [sp, #28]
 8004dde:	e014      	b.n	8004e0a <_vfiprintf_r+0x13a>
 8004de0:	eba0 0308 	sub.w	r3, r0, r8
 8004de4:	fa09 f303 	lsl.w	r3, r9, r3
 8004de8:	4313      	orrs	r3, r2
 8004dea:	46a2      	mov	sl, r4
 8004dec:	9304      	str	r3, [sp, #16]
 8004dee:	e7d2      	b.n	8004d96 <_vfiprintf_r+0xc6>
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	1d19      	adds	r1, r3, #4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	9103      	str	r1, [sp, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bfbb      	ittet	lt
 8004dfc:	425b      	neglt	r3, r3
 8004dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8004e02:	9307      	strge	r3, [sp, #28]
 8004e04:	9307      	strlt	r3, [sp, #28]
 8004e06:	bfb8      	it	lt
 8004e08:	9204      	strlt	r2, [sp, #16]
 8004e0a:	7823      	ldrb	r3, [r4, #0]
 8004e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e0e:	d10a      	bne.n	8004e26 <_vfiprintf_r+0x156>
 8004e10:	7863      	ldrb	r3, [r4, #1]
 8004e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e14:	d132      	bne.n	8004e7c <_vfiprintf_r+0x1ac>
 8004e16:	9b03      	ldr	r3, [sp, #12]
 8004e18:	3402      	adds	r4, #2
 8004e1a:	1d1a      	adds	r2, r3, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	9203      	str	r2, [sp, #12]
 8004e20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e24:	9305      	str	r3, [sp, #20]
 8004e26:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004ef0 <_vfiprintf_r+0x220>
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	7821      	ldrb	r1, [r4, #0]
 8004e30:	f000 fb34 	bl	800549c <memchr>
 8004e34:	b138      	cbz	r0, 8004e46 <_vfiprintf_r+0x176>
 8004e36:	2240      	movs	r2, #64	@ 0x40
 8004e38:	9b04      	ldr	r3, [sp, #16]
 8004e3a:	eba0 000a 	sub.w	r0, r0, sl
 8004e3e:	4082      	lsls	r2, r0
 8004e40:	4313      	orrs	r3, r2
 8004e42:	3401      	adds	r4, #1
 8004e44:	9304      	str	r3, [sp, #16]
 8004e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e4a:	2206      	movs	r2, #6
 8004e4c:	4829      	ldr	r0, [pc, #164]	@ (8004ef4 <_vfiprintf_r+0x224>)
 8004e4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e52:	f000 fb23 	bl	800549c <memchr>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d03f      	beq.n	8004eda <_vfiprintf_r+0x20a>
 8004e5a:	4b27      	ldr	r3, [pc, #156]	@ (8004ef8 <_vfiprintf_r+0x228>)
 8004e5c:	bb1b      	cbnz	r3, 8004ea6 <_vfiprintf_r+0x1d6>
 8004e5e:	9b03      	ldr	r3, [sp, #12]
 8004e60:	3307      	adds	r3, #7
 8004e62:	f023 0307 	bic.w	r3, r3, #7
 8004e66:	3308      	adds	r3, #8
 8004e68:	9303      	str	r3, [sp, #12]
 8004e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e6c:	443b      	add	r3, r7
 8004e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e70:	e76a      	b.n	8004d48 <_vfiprintf_r+0x78>
 8004e72:	460c      	mov	r4, r1
 8004e74:	2001      	movs	r0, #1
 8004e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e7a:	e7a8      	b.n	8004dce <_vfiprintf_r+0xfe>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f04f 0c0a 	mov.w	ip, #10
 8004e82:	4619      	mov	r1, r3
 8004e84:	3401      	adds	r4, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e8e:	3a30      	subs	r2, #48	@ 0x30
 8004e90:	2a09      	cmp	r2, #9
 8004e92:	d903      	bls.n	8004e9c <_vfiprintf_r+0x1cc>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0c6      	beq.n	8004e26 <_vfiprintf_r+0x156>
 8004e98:	9105      	str	r1, [sp, #20]
 8004e9a:	e7c4      	b.n	8004e26 <_vfiprintf_r+0x156>
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ea4:	e7f0      	b.n	8004e88 <_vfiprintf_r+0x1b8>
 8004ea6:	ab03      	add	r3, sp, #12
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	462a      	mov	r2, r5
 8004eac:	4630      	mov	r0, r6
 8004eae:	4b13      	ldr	r3, [pc, #76]	@ (8004efc <_vfiprintf_r+0x22c>)
 8004eb0:	a904      	add	r1, sp, #16
 8004eb2:	f3af 8000 	nop.w
 8004eb6:	4607      	mov	r7, r0
 8004eb8:	1c78      	adds	r0, r7, #1
 8004eba:	d1d6      	bne.n	8004e6a <_vfiprintf_r+0x19a>
 8004ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ebe:	07d9      	lsls	r1, r3, #31
 8004ec0:	d405      	bmi.n	8004ece <_vfiprintf_r+0x1fe>
 8004ec2:	89ab      	ldrh	r3, [r5, #12]
 8004ec4:	059a      	lsls	r2, r3, #22
 8004ec6:	d402      	bmi.n	8004ece <_vfiprintf_r+0x1fe>
 8004ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004eca:	f7ff fde1 	bl	8004a90 <__retarget_lock_release_recursive>
 8004ece:	89ab      	ldrh	r3, [r5, #12]
 8004ed0:	065b      	lsls	r3, r3, #25
 8004ed2:	f53f af1f 	bmi.w	8004d14 <_vfiprintf_r+0x44>
 8004ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ed8:	e71e      	b.n	8004d18 <_vfiprintf_r+0x48>
 8004eda:	ab03      	add	r3, sp, #12
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	462a      	mov	r2, r5
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <_vfiprintf_r+0x22c>)
 8004ee4:	a904      	add	r1, sp, #16
 8004ee6:	f000 f87d 	bl	8004fe4 <_printf_i>
 8004eea:	e7e4      	b.n	8004eb6 <_vfiprintf_r+0x1e6>
 8004eec:	08005532 	.word	0x08005532
 8004ef0:	08005538 	.word	0x08005538
 8004ef4:	0800553c 	.word	0x0800553c
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	08004cab 	.word	0x08004cab

08004f00 <_printf_common>:
 8004f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	4616      	mov	r6, r2
 8004f06:	4698      	mov	r8, r3
 8004f08:	688a      	ldr	r2, [r1, #8]
 8004f0a:	690b      	ldr	r3, [r1, #16]
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	bfb8      	it	lt
 8004f12:	4613      	movlt	r3, r2
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f20:	b10a      	cbz	r2, 8004f26 <_printf_common+0x26>
 8004f22:	3301      	adds	r3, #1
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	0699      	lsls	r1, r3, #26
 8004f2a:	bf42      	ittt	mi
 8004f2c:	6833      	ldrmi	r3, [r6, #0]
 8004f2e:	3302      	addmi	r3, #2
 8004f30:	6033      	strmi	r3, [r6, #0]
 8004f32:	6825      	ldr	r5, [r4, #0]
 8004f34:	f015 0506 	ands.w	r5, r5, #6
 8004f38:	d106      	bne.n	8004f48 <_printf_common+0x48>
 8004f3a:	f104 0a19 	add.w	sl, r4, #25
 8004f3e:	68e3      	ldr	r3, [r4, #12]
 8004f40:	6832      	ldr	r2, [r6, #0]
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	42ab      	cmp	r3, r5
 8004f46:	dc2b      	bgt.n	8004fa0 <_printf_common+0xa0>
 8004f48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f4c:	6822      	ldr	r2, [r4, #0]
 8004f4e:	3b00      	subs	r3, #0
 8004f50:	bf18      	it	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	0692      	lsls	r2, r2, #26
 8004f56:	d430      	bmi.n	8004fba <_printf_common+0xba>
 8004f58:	4641      	mov	r1, r8
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f60:	47c8      	blx	r9
 8004f62:	3001      	adds	r0, #1
 8004f64:	d023      	beq.n	8004fae <_printf_common+0xae>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	f003 0306 	and.w	r3, r3, #6
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	bf14      	ite	ne
 8004f72:	2500      	movne	r5, #0
 8004f74:	6833      	ldreq	r3, [r6, #0]
 8004f76:	f04f 0600 	mov.w	r6, #0
 8004f7a:	bf08      	it	eq
 8004f7c:	68e5      	ldreq	r5, [r4, #12]
 8004f7e:	f104 041a 	add.w	r4, r4, #26
 8004f82:	bf08      	it	eq
 8004f84:	1aed      	subeq	r5, r5, r3
 8004f86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f8a:	bf08      	it	eq
 8004f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfc4      	itt	gt
 8004f94:	1a9b      	subgt	r3, r3, r2
 8004f96:	18ed      	addgt	r5, r5, r3
 8004f98:	42b5      	cmp	r5, r6
 8004f9a:	d11a      	bne.n	8004fd2 <_printf_common+0xd2>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e008      	b.n	8004fb2 <_printf_common+0xb2>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	4652      	mov	r2, sl
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	47c8      	blx	r9
 8004faa:	3001      	adds	r0, #1
 8004fac:	d103      	bne.n	8004fb6 <_printf_common+0xb6>
 8004fae:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb6:	3501      	adds	r5, #1
 8004fb8:	e7c1      	b.n	8004f3e <_printf_common+0x3e>
 8004fba:	2030      	movs	r0, #48	@ 0x30
 8004fbc:	18e1      	adds	r1, r4, r3
 8004fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fc8:	4422      	add	r2, r4
 8004fca:	3302      	adds	r3, #2
 8004fcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fd0:	e7c2      	b.n	8004f58 <_printf_common+0x58>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	4638      	mov	r0, r7
 8004fda:	47c8      	blx	r9
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d0e6      	beq.n	8004fae <_printf_common+0xae>
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7d9      	b.n	8004f98 <_printf_common+0x98>

08004fe4 <_printf_i>:
 8004fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe8:	7e0f      	ldrb	r7, [r1, #24]
 8004fea:	4691      	mov	r9, r2
 8004fec:	2f78      	cmp	r7, #120	@ 0x78
 8004fee:	4680      	mov	r8, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	469a      	mov	sl, r3
 8004ff4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ffa:	d807      	bhi.n	800500c <_printf_i+0x28>
 8004ffc:	2f62      	cmp	r7, #98	@ 0x62
 8004ffe:	d80a      	bhi.n	8005016 <_printf_i+0x32>
 8005000:	2f00      	cmp	r7, #0
 8005002:	f000 80d3 	beq.w	80051ac <_printf_i+0x1c8>
 8005006:	2f58      	cmp	r7, #88	@ 0x58
 8005008:	f000 80ba 	beq.w	8005180 <_printf_i+0x19c>
 800500c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005014:	e03a      	b.n	800508c <_printf_i+0xa8>
 8005016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800501a:	2b15      	cmp	r3, #21
 800501c:	d8f6      	bhi.n	800500c <_printf_i+0x28>
 800501e:	a101      	add	r1, pc, #4	@ (adr r1, 8005024 <_printf_i+0x40>)
 8005020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005024:	0800507d 	.word	0x0800507d
 8005028:	08005091 	.word	0x08005091
 800502c:	0800500d 	.word	0x0800500d
 8005030:	0800500d 	.word	0x0800500d
 8005034:	0800500d 	.word	0x0800500d
 8005038:	0800500d 	.word	0x0800500d
 800503c:	08005091 	.word	0x08005091
 8005040:	0800500d 	.word	0x0800500d
 8005044:	0800500d 	.word	0x0800500d
 8005048:	0800500d 	.word	0x0800500d
 800504c:	0800500d 	.word	0x0800500d
 8005050:	08005193 	.word	0x08005193
 8005054:	080050bb 	.word	0x080050bb
 8005058:	0800514d 	.word	0x0800514d
 800505c:	0800500d 	.word	0x0800500d
 8005060:	0800500d 	.word	0x0800500d
 8005064:	080051b5 	.word	0x080051b5
 8005068:	0800500d 	.word	0x0800500d
 800506c:	080050bb 	.word	0x080050bb
 8005070:	0800500d 	.word	0x0800500d
 8005074:	0800500d 	.word	0x0800500d
 8005078:	08005155 	.word	0x08005155
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	1d1a      	adds	r2, r3, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6032      	str	r2, [r6, #0]
 8005084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800508c:	2301      	movs	r3, #1
 800508e:	e09e      	b.n	80051ce <_printf_i+0x1ea>
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	6820      	ldr	r0, [r4, #0]
 8005094:	1d19      	adds	r1, r3, #4
 8005096:	6031      	str	r1, [r6, #0]
 8005098:	0606      	lsls	r6, r0, #24
 800509a:	d501      	bpl.n	80050a0 <_printf_i+0xbc>
 800509c:	681d      	ldr	r5, [r3, #0]
 800509e:	e003      	b.n	80050a8 <_printf_i+0xc4>
 80050a0:	0645      	lsls	r5, r0, #25
 80050a2:	d5fb      	bpl.n	800509c <_printf_i+0xb8>
 80050a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	da03      	bge.n	80050b4 <_printf_i+0xd0>
 80050ac:	232d      	movs	r3, #45	@ 0x2d
 80050ae:	426d      	negs	r5, r5
 80050b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050b4:	230a      	movs	r3, #10
 80050b6:	4859      	ldr	r0, [pc, #356]	@ (800521c <_printf_i+0x238>)
 80050b8:	e011      	b.n	80050de <_printf_i+0xfa>
 80050ba:	6821      	ldr	r1, [r4, #0]
 80050bc:	6833      	ldr	r3, [r6, #0]
 80050be:	0608      	lsls	r0, r1, #24
 80050c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80050c4:	d402      	bmi.n	80050cc <_printf_i+0xe8>
 80050c6:	0649      	lsls	r1, r1, #25
 80050c8:	bf48      	it	mi
 80050ca:	b2ad      	uxthmi	r5, r5
 80050cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ce:	6033      	str	r3, [r6, #0]
 80050d0:	bf14      	ite	ne
 80050d2:	230a      	movne	r3, #10
 80050d4:	2308      	moveq	r3, #8
 80050d6:	4851      	ldr	r0, [pc, #324]	@ (800521c <_printf_i+0x238>)
 80050d8:	2100      	movs	r1, #0
 80050da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050de:	6866      	ldr	r6, [r4, #4]
 80050e0:	2e00      	cmp	r6, #0
 80050e2:	bfa8      	it	ge
 80050e4:	6821      	ldrge	r1, [r4, #0]
 80050e6:	60a6      	str	r6, [r4, #8]
 80050e8:	bfa4      	itt	ge
 80050ea:	f021 0104 	bicge.w	r1, r1, #4
 80050ee:	6021      	strge	r1, [r4, #0]
 80050f0:	b90d      	cbnz	r5, 80050f6 <_printf_i+0x112>
 80050f2:	2e00      	cmp	r6, #0
 80050f4:	d04b      	beq.n	800518e <_printf_i+0x1aa>
 80050f6:	4616      	mov	r6, r2
 80050f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80050fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005100:	5dc7      	ldrb	r7, [r0, r7]
 8005102:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005106:	462f      	mov	r7, r5
 8005108:	42bb      	cmp	r3, r7
 800510a:	460d      	mov	r5, r1
 800510c:	d9f4      	bls.n	80050f8 <_printf_i+0x114>
 800510e:	2b08      	cmp	r3, #8
 8005110:	d10b      	bne.n	800512a <_printf_i+0x146>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	07df      	lsls	r7, r3, #31
 8005116:	d508      	bpl.n	800512a <_printf_i+0x146>
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	6861      	ldr	r1, [r4, #4]
 800511c:	4299      	cmp	r1, r3
 800511e:	bfde      	ittt	le
 8005120:	2330      	movle	r3, #48	@ 0x30
 8005122:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005126:	f106 36ff 	addle.w	r6, r6, #4294967295
 800512a:	1b92      	subs	r2, r2, r6
 800512c:	6122      	str	r2, [r4, #16]
 800512e:	464b      	mov	r3, r9
 8005130:	4621      	mov	r1, r4
 8005132:	4640      	mov	r0, r8
 8005134:	f8cd a000 	str.w	sl, [sp]
 8005138:	aa03      	add	r2, sp, #12
 800513a:	f7ff fee1 	bl	8004f00 <_printf_common>
 800513e:	3001      	adds	r0, #1
 8005140:	d14a      	bne.n	80051d8 <_printf_i+0x1f4>
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	b004      	add	sp, #16
 8005148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f043 0320 	orr.w	r3, r3, #32
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	2778      	movs	r7, #120	@ 0x78
 8005156:	4832      	ldr	r0, [pc, #200]	@ (8005220 <_printf_i+0x23c>)
 8005158:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	6831      	ldr	r1, [r6, #0]
 8005160:	061f      	lsls	r7, r3, #24
 8005162:	f851 5b04 	ldr.w	r5, [r1], #4
 8005166:	d402      	bmi.n	800516e <_printf_i+0x18a>
 8005168:	065f      	lsls	r7, r3, #25
 800516a:	bf48      	it	mi
 800516c:	b2ad      	uxthmi	r5, r5
 800516e:	6031      	str	r1, [r6, #0]
 8005170:	07d9      	lsls	r1, r3, #31
 8005172:	bf44      	itt	mi
 8005174:	f043 0320 	orrmi.w	r3, r3, #32
 8005178:	6023      	strmi	r3, [r4, #0]
 800517a:	b11d      	cbz	r5, 8005184 <_printf_i+0x1a0>
 800517c:	2310      	movs	r3, #16
 800517e:	e7ab      	b.n	80050d8 <_printf_i+0xf4>
 8005180:	4826      	ldr	r0, [pc, #152]	@ (800521c <_printf_i+0x238>)
 8005182:	e7e9      	b.n	8005158 <_printf_i+0x174>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	e7f6      	b.n	800517c <_printf_i+0x198>
 800518e:	4616      	mov	r6, r2
 8005190:	e7bd      	b.n	800510e <_printf_i+0x12a>
 8005192:	6833      	ldr	r3, [r6, #0]
 8005194:	6825      	ldr	r5, [r4, #0]
 8005196:	1d18      	adds	r0, r3, #4
 8005198:	6961      	ldr	r1, [r4, #20]
 800519a:	6030      	str	r0, [r6, #0]
 800519c:	062e      	lsls	r6, r5, #24
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	d501      	bpl.n	80051a6 <_printf_i+0x1c2>
 80051a2:	6019      	str	r1, [r3, #0]
 80051a4:	e002      	b.n	80051ac <_printf_i+0x1c8>
 80051a6:	0668      	lsls	r0, r5, #25
 80051a8:	d5fb      	bpl.n	80051a2 <_printf_i+0x1be>
 80051aa:	8019      	strh	r1, [r3, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	4616      	mov	r6, r2
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	e7bc      	b.n	800512e <_printf_i+0x14a>
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	2100      	movs	r1, #0
 80051b8:	1d1a      	adds	r2, r3, #4
 80051ba:	6032      	str	r2, [r6, #0]
 80051bc:	681e      	ldr	r6, [r3, #0]
 80051be:	6862      	ldr	r2, [r4, #4]
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f96b 	bl	800549c <memchr>
 80051c6:	b108      	cbz	r0, 80051cc <_printf_i+0x1e8>
 80051c8:	1b80      	subs	r0, r0, r6
 80051ca:	6060      	str	r0, [r4, #4]
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	2300      	movs	r3, #0
 80051d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d6:	e7aa      	b.n	800512e <_printf_i+0x14a>
 80051d8:	4632      	mov	r2, r6
 80051da:	4649      	mov	r1, r9
 80051dc:	4640      	mov	r0, r8
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	47d0      	blx	sl
 80051e2:	3001      	adds	r0, #1
 80051e4:	d0ad      	beq.n	8005142 <_printf_i+0x15e>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	079b      	lsls	r3, r3, #30
 80051ea:	d413      	bmi.n	8005214 <_printf_i+0x230>
 80051ec:	68e0      	ldr	r0, [r4, #12]
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	4298      	cmp	r0, r3
 80051f2:	bfb8      	it	lt
 80051f4:	4618      	movlt	r0, r3
 80051f6:	e7a6      	b.n	8005146 <_printf_i+0x162>
 80051f8:	2301      	movs	r3, #1
 80051fa:	4632      	mov	r2, r6
 80051fc:	4649      	mov	r1, r9
 80051fe:	4640      	mov	r0, r8
 8005200:	47d0      	blx	sl
 8005202:	3001      	adds	r0, #1
 8005204:	d09d      	beq.n	8005142 <_printf_i+0x15e>
 8005206:	3501      	adds	r5, #1
 8005208:	68e3      	ldr	r3, [r4, #12]
 800520a:	9903      	ldr	r1, [sp, #12]
 800520c:	1a5b      	subs	r3, r3, r1
 800520e:	42ab      	cmp	r3, r5
 8005210:	dcf2      	bgt.n	80051f8 <_printf_i+0x214>
 8005212:	e7eb      	b.n	80051ec <_printf_i+0x208>
 8005214:	2500      	movs	r5, #0
 8005216:	f104 0619 	add.w	r6, r4, #25
 800521a:	e7f5      	b.n	8005208 <_printf_i+0x224>
 800521c:	08005543 	.word	0x08005543
 8005220:	08005554 	.word	0x08005554

08005224 <__sflush_r>:
 8005224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	0716      	lsls	r6, r2, #28
 800522c:	4605      	mov	r5, r0
 800522e:	460c      	mov	r4, r1
 8005230:	d454      	bmi.n	80052dc <__sflush_r+0xb8>
 8005232:	684b      	ldr	r3, [r1, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	dc02      	bgt.n	800523e <__sflush_r+0x1a>
 8005238:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	dd48      	ble.n	80052d0 <__sflush_r+0xac>
 800523e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005240:	2e00      	cmp	r6, #0
 8005242:	d045      	beq.n	80052d0 <__sflush_r+0xac>
 8005244:	2300      	movs	r3, #0
 8005246:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800524a:	682f      	ldr	r7, [r5, #0]
 800524c:	6a21      	ldr	r1, [r4, #32]
 800524e:	602b      	str	r3, [r5, #0]
 8005250:	d030      	beq.n	80052b4 <__sflush_r+0x90>
 8005252:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	0759      	lsls	r1, r3, #29
 8005258:	d505      	bpl.n	8005266 <__sflush_r+0x42>
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	1ad2      	subs	r2, r2, r3
 800525e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005260:	b10b      	cbz	r3, 8005266 <__sflush_r+0x42>
 8005262:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005264:	1ad2      	subs	r2, r2, r3
 8005266:	2300      	movs	r3, #0
 8005268:	4628      	mov	r0, r5
 800526a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800526c:	6a21      	ldr	r1, [r4, #32]
 800526e:	47b0      	blx	r6
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	d106      	bne.n	8005284 <__sflush_r+0x60>
 8005276:	6829      	ldr	r1, [r5, #0]
 8005278:	291d      	cmp	r1, #29
 800527a:	d82b      	bhi.n	80052d4 <__sflush_r+0xb0>
 800527c:	4a28      	ldr	r2, [pc, #160]	@ (8005320 <__sflush_r+0xfc>)
 800527e:	410a      	asrs	r2, r1
 8005280:	07d6      	lsls	r6, r2, #31
 8005282:	d427      	bmi.n	80052d4 <__sflush_r+0xb0>
 8005284:	2200      	movs	r2, #0
 8005286:	6062      	str	r2, [r4, #4]
 8005288:	6922      	ldr	r2, [r4, #16]
 800528a:	04d9      	lsls	r1, r3, #19
 800528c:	6022      	str	r2, [r4, #0]
 800528e:	d504      	bpl.n	800529a <__sflush_r+0x76>
 8005290:	1c42      	adds	r2, r0, #1
 8005292:	d101      	bne.n	8005298 <__sflush_r+0x74>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	b903      	cbnz	r3, 800529a <__sflush_r+0x76>
 8005298:	6560      	str	r0, [r4, #84]	@ 0x54
 800529a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800529c:	602f      	str	r7, [r5, #0]
 800529e:	b1b9      	cbz	r1, 80052d0 <__sflush_r+0xac>
 80052a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052a4:	4299      	cmp	r1, r3
 80052a6:	d002      	beq.n	80052ae <__sflush_r+0x8a>
 80052a8:	4628      	mov	r0, r5
 80052aa:	f7ff fbf3 	bl	8004a94 <_free_r>
 80052ae:	2300      	movs	r3, #0
 80052b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80052b2:	e00d      	b.n	80052d0 <__sflush_r+0xac>
 80052b4:	2301      	movs	r3, #1
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b0      	blx	r6
 80052ba:	4602      	mov	r2, r0
 80052bc:	1c50      	adds	r0, r2, #1
 80052be:	d1c9      	bne.n	8005254 <__sflush_r+0x30>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0c6      	beq.n	8005254 <__sflush_r+0x30>
 80052c6:	2b1d      	cmp	r3, #29
 80052c8:	d001      	beq.n	80052ce <__sflush_r+0xaa>
 80052ca:	2b16      	cmp	r3, #22
 80052cc:	d11d      	bne.n	800530a <__sflush_r+0xe6>
 80052ce:	602f      	str	r7, [r5, #0]
 80052d0:	2000      	movs	r0, #0
 80052d2:	e021      	b.n	8005318 <__sflush_r+0xf4>
 80052d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d8:	b21b      	sxth	r3, r3
 80052da:	e01a      	b.n	8005312 <__sflush_r+0xee>
 80052dc:	690f      	ldr	r7, [r1, #16]
 80052de:	2f00      	cmp	r7, #0
 80052e0:	d0f6      	beq.n	80052d0 <__sflush_r+0xac>
 80052e2:	0793      	lsls	r3, r2, #30
 80052e4:	bf18      	it	ne
 80052e6:	2300      	movne	r3, #0
 80052e8:	680e      	ldr	r6, [r1, #0]
 80052ea:	bf08      	it	eq
 80052ec:	694b      	ldreq	r3, [r1, #20]
 80052ee:	1bf6      	subs	r6, r6, r7
 80052f0:	600f      	str	r7, [r1, #0]
 80052f2:	608b      	str	r3, [r1, #8]
 80052f4:	2e00      	cmp	r6, #0
 80052f6:	ddeb      	ble.n	80052d0 <__sflush_r+0xac>
 80052f8:	4633      	mov	r3, r6
 80052fa:	463a      	mov	r2, r7
 80052fc:	4628      	mov	r0, r5
 80052fe:	6a21      	ldr	r1, [r4, #32]
 8005300:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005304:	47e0      	blx	ip
 8005306:	2800      	cmp	r0, #0
 8005308:	dc07      	bgt.n	800531a <__sflush_r+0xf6>
 800530a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005312:	f04f 30ff 	mov.w	r0, #4294967295
 8005316:	81a3      	strh	r3, [r4, #12]
 8005318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800531a:	4407      	add	r7, r0
 800531c:	1a36      	subs	r6, r6, r0
 800531e:	e7e9      	b.n	80052f4 <__sflush_r+0xd0>
 8005320:	dfbffffe 	.word	0xdfbffffe

08005324 <_fflush_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	690b      	ldr	r3, [r1, #16]
 8005328:	4605      	mov	r5, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b913      	cbnz	r3, 8005334 <_fflush_r+0x10>
 800532e:	2500      	movs	r5, #0
 8005330:	4628      	mov	r0, r5
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	b118      	cbz	r0, 800533e <_fflush_r+0x1a>
 8005336:	6a03      	ldr	r3, [r0, #32]
 8005338:	b90b      	cbnz	r3, 800533e <_fflush_r+0x1a>
 800533a:	f7ff f9b1 	bl	80046a0 <__sinit>
 800533e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f3      	beq.n	800532e <_fflush_r+0xa>
 8005346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005348:	07d0      	lsls	r0, r2, #31
 800534a:	d404      	bmi.n	8005356 <_fflush_r+0x32>
 800534c:	0599      	lsls	r1, r3, #22
 800534e:	d402      	bmi.n	8005356 <_fflush_r+0x32>
 8005350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005352:	f7ff fb9c 	bl	8004a8e <__retarget_lock_acquire_recursive>
 8005356:	4628      	mov	r0, r5
 8005358:	4621      	mov	r1, r4
 800535a:	f7ff ff63 	bl	8005224 <__sflush_r>
 800535e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005360:	4605      	mov	r5, r0
 8005362:	07da      	lsls	r2, r3, #31
 8005364:	d4e4      	bmi.n	8005330 <_fflush_r+0xc>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	059b      	lsls	r3, r3, #22
 800536a:	d4e1      	bmi.n	8005330 <_fflush_r+0xc>
 800536c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800536e:	f7ff fb8f 	bl	8004a90 <__retarget_lock_release_recursive>
 8005372:	e7dd      	b.n	8005330 <_fflush_r+0xc>

08005374 <__swhatbuf_r>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	460c      	mov	r4, r1
 8005378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537c:	4615      	mov	r5, r2
 800537e:	2900      	cmp	r1, #0
 8005380:	461e      	mov	r6, r3
 8005382:	b096      	sub	sp, #88	@ 0x58
 8005384:	da0c      	bge.n	80053a0 <__swhatbuf_r+0x2c>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	2100      	movs	r1, #0
 800538a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800538e:	bf14      	ite	ne
 8005390:	2340      	movne	r3, #64	@ 0x40
 8005392:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005396:	2000      	movs	r0, #0
 8005398:	6031      	str	r1, [r6, #0]
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	b016      	add	sp, #88	@ 0x58
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	466a      	mov	r2, sp
 80053a2:	f000 f849 	bl	8005438 <_fstat_r>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	dbed      	blt.n	8005386 <__swhatbuf_r+0x12>
 80053aa:	9901      	ldr	r1, [sp, #4]
 80053ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053b4:	4259      	negs	r1, r3
 80053b6:	4159      	adcs	r1, r3
 80053b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053bc:	e7eb      	b.n	8005396 <__swhatbuf_r+0x22>

080053be <__smakebuf_r>:
 80053be:	898b      	ldrh	r3, [r1, #12]
 80053c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053c2:	079d      	lsls	r5, r3, #30
 80053c4:	4606      	mov	r6, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	d507      	bpl.n	80053da <__smakebuf_r+0x1c>
 80053ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	2301      	movs	r3, #1
 80053d4:	6163      	str	r3, [r4, #20]
 80053d6:	b003      	add	sp, #12
 80053d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053da:	466a      	mov	r2, sp
 80053dc:	ab01      	add	r3, sp, #4
 80053de:	f7ff ffc9 	bl	8005374 <__swhatbuf_r>
 80053e2:	9f00      	ldr	r7, [sp, #0]
 80053e4:	4605      	mov	r5, r0
 80053e6:	4639      	mov	r1, r7
 80053e8:	4630      	mov	r0, r6
 80053ea:	f7ff fbbd 	bl	8004b68 <_malloc_r>
 80053ee:	b948      	cbnz	r0, 8005404 <__smakebuf_r+0x46>
 80053f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f4:	059a      	lsls	r2, r3, #22
 80053f6:	d4ee      	bmi.n	80053d6 <__smakebuf_r+0x18>
 80053f8:	f023 0303 	bic.w	r3, r3, #3
 80053fc:	f043 0302 	orr.w	r3, r3, #2
 8005400:	81a3      	strh	r3, [r4, #12]
 8005402:	e7e2      	b.n	80053ca <__smakebuf_r+0xc>
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800540a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	6020      	str	r0, [r4, #0]
 8005414:	b15b      	cbz	r3, 800542e <__smakebuf_r+0x70>
 8005416:	4630      	mov	r0, r6
 8005418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800541c:	f000 f81e 	bl	800545c <_isatty_r>
 8005420:	b128      	cbz	r0, 800542e <__smakebuf_r+0x70>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	f023 0303 	bic.w	r3, r3, #3
 8005428:	f043 0301 	orr.w	r3, r3, #1
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	431d      	orrs	r5, r3
 8005432:	81a5      	strh	r5, [r4, #12]
 8005434:	e7cf      	b.n	80053d6 <__smakebuf_r+0x18>
	...

08005438 <_fstat_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	2300      	movs	r3, #0
 800543c:	4d06      	ldr	r5, [pc, #24]	@ (8005458 <_fstat_r+0x20>)
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	4611      	mov	r1, r2
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	f7fb fbdb 	bl	8000c00 <_fstat>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	d102      	bne.n	8005454 <_fstat_r+0x1c>
 800544e:	682b      	ldr	r3, [r5, #0]
 8005450:	b103      	cbz	r3, 8005454 <_fstat_r+0x1c>
 8005452:	6023      	str	r3, [r4, #0]
 8005454:	bd38      	pop	{r3, r4, r5, pc}
 8005456:	bf00      	nop
 8005458:	20000b24 	.word	0x20000b24

0800545c <_isatty_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	2300      	movs	r3, #0
 8005460:	4d05      	ldr	r5, [pc, #20]	@ (8005478 <_isatty_r+0x1c>)
 8005462:	4604      	mov	r4, r0
 8005464:	4608      	mov	r0, r1
 8005466:	602b      	str	r3, [r5, #0]
 8005468:	f7fb fbd9 	bl	8000c1e <_isatty>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_isatty_r+0x1a>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_isatty_r+0x1a>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	20000b24 	.word	0x20000b24

0800547c <_sbrk_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	2300      	movs	r3, #0
 8005480:	4d05      	ldr	r5, [pc, #20]	@ (8005498 <_sbrk_r+0x1c>)
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	f7fb fbe0 	bl	8000c4c <_sbrk>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_sbrk_r+0x1a>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_sbrk_r+0x1a>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20000b24 	.word	0x20000b24

0800549c <memchr>:
 800549c:	4603      	mov	r3, r0
 800549e:	b510      	push	{r4, lr}
 80054a0:	b2c9      	uxtb	r1, r1
 80054a2:	4402      	add	r2, r0
 80054a4:	4293      	cmp	r3, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	d101      	bne.n	80054ae <memchr+0x12>
 80054aa:	2000      	movs	r0, #0
 80054ac:	e003      	b.n	80054b6 <memchr+0x1a>
 80054ae:	7804      	ldrb	r4, [r0, #0]
 80054b0:	3301      	adds	r3, #1
 80054b2:	428c      	cmp	r4, r1
 80054b4:	d1f6      	bne.n	80054a4 <memchr+0x8>
 80054b6:	bd10      	pop	{r4, pc}

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr


work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080053b4  080053b4  000063b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005670  08005670  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005670  08005670  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005670  08005670  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005670  08005670  00006670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005674  08005674  00006674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005678  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b88  20000068  080056e0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  080056e0  00007bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8df  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af2  00000000  00000000  00014970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00017468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b3  00000000  00000000  00018148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0d4  00000000  00000000  00018afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011234  00000000  00000000  00032bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898c9  00000000  00000000  00043e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd6cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a80  00000000  00000000  000cd710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d1190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800539c 	.word	0x0800539c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800539c 	.word	0x0800539c

0800014c <InitBasic>:
volatile uint16_t rx1_w_idx = 0;
volatile uint16_t rx1_r_idx = 0;


void InitBasic()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// UART1 RX 인터럽트 활성
	HAL_UART_Receive_IT(&huart1, &rx1data, 1);
 8000150:	2201      	movs	r2, #1
 8000152:	4903      	ldr	r1, [pc, #12]	@ (8000160 <InitBasic+0x14>)
 8000154:	4803      	ldr	r0, [pc, #12]	@ (8000164 <InitBasic+0x18>)
 8000156:	f003 fbbd 	bl	80038d4 <HAL_UART_Receive_IT>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	20000084 	.word	0x20000084
 8000164:	2000092c 	.word	0x2000092c

08000168 <GetElapsedTick>:


uint32_t GetElapsedTick(uint32_t start)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b084      	sub	sp, #16
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 8000170:	f001 fb1c 	bl	80017ac <HAL_GetTick>
 8000174:	60f8      	str	r0, [r7, #12]

	if (now >= start)
 8000176:	68fa      	ldr	r2, [r7, #12]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	429a      	cmp	r2, r3
 800017c:	d303      	bcc.n	8000186 <GetElapsedTick+0x1e>
		return now - start;
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	e005      	b.n	8000192 <GetElapsedTick+0x2a>
	else
		return (0xffff - start) + now;
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	1ad3      	subs	r3, r2, r3
 800018c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000190:	33ff      	adds	r3, #255	@ 0xff
}
 8000192:	4618      	mov	r0, r3
 8000194:	3710      	adds	r7, #16
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
	...

0800019c <__io_putchar>:


int __io_putchar(int ch)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	// printf()함수를 실행했을 때 UART로 출력
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 80001a4:	1d39      	adds	r1, r7, #4
 80001a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001aa:	2201      	movs	r2, #1
 80001ac:	4803      	ldr	r0, [pc, #12]	@ (80001bc <__io_putchar+0x20>)
 80001ae:	f003 fb06 	bl	80037be <HAL_UART_Transmit>
	return ch;
 80001b2:	687b      	ldr	r3, [r7, #4]
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000092c 	.word	0x2000092c

080001c0 <HAL_UART_RxCpltCallback>:



// UART1 RX 인터럽트 핸들러
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000208 <HAL_UART_RxCpltCallback+0x48>)
 80001ce:	4293      	cmp	r3, r2
 80001d0:	d115      	bne.n	80001fe <HAL_UART_RxCpltCallback+0x3e>
	{
		rx1_buff[rx1_w_idx] = rx1data;
 80001d2:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <HAL_UART_RxCpltCallback+0x4c>)
 80001d4:	881b      	ldrh	r3, [r3, #0]
 80001d6:	b29b      	uxth	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <HAL_UART_RxCpltCallback+0x50>)
 80001dc:	7819      	ldrb	r1, [r3, #0]
 80001de:	4b0d      	ldr	r3, [pc, #52]	@ (8000214 <HAL_UART_RxCpltCallback+0x54>)
 80001e0:	5499      	strb	r1, [r3, r2]
		rx1_w_idx = (rx1_w_idx + 1) % sizeof(rx1_buff);
 80001e2:	4b0a      	ldr	r3, [pc, #40]	@ (800020c <HAL_UART_RxCpltCallback+0x4c>)
 80001e4:	881b      	ldrh	r3, [r3, #0]
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	3301      	adds	r3, #1
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <HAL_UART_RxCpltCallback+0x4c>)
 80001f2:	801a      	strh	r2, [r3, #0]

		// UART1 RX 인터럽트 활성
		HAL_UART_Receive_IT(&huart1, &rx1data, 1);
 80001f4:	2201      	movs	r2, #1
 80001f6:	4906      	ldr	r1, [pc, #24]	@ (8000210 <HAL_UART_RxCpltCallback+0x50>)
 80001f8:	4807      	ldr	r0, [pc, #28]	@ (8000218 <HAL_UART_RxCpltCallback+0x58>)
 80001fa:	f003 fb6b 	bl	80038d4 <HAL_UART_Receive_IT>
	}
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40013800 	.word	0x40013800
 800020c:	20000188 	.word	0x20000188
 8000210:	20000084 	.word	0x20000084
 8000214:	20000088 	.word	0x20000088
 8000218:	2000092c 	.word	0x2000092c

0800021c <ReadButton>:
uint8_t old_sw5=0;
uint8_t sw5_cnt=0;
uint8_t tmp_sw5=0;

void ReadButton()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	// 10msec마다 sw4상태를 읽고 3번 연속 같은 값이면 입력 처리
	if(GetElapsedTick(tm_sw4) >= 10) {
 8000220:	4b3c      	ldr	r3, [pc, #240]	@ (8000314 <ReadButton+0xf8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4618      	mov	r0, r3
 8000226:	f7ff ff9f 	bl	8000168 <GetElapsedTick>
 800022a:	4603      	mov	r3, r0
 800022c:	2b09      	cmp	r3, #9
 800022e:	d933      	bls.n	8000298 <ReadButton+0x7c>
		tm_sw4 = HAL_GetTick();
 8000230:	f001 fabc 	bl	80017ac <HAL_GetTick>
 8000234:	4603      	mov	r3, r0
 8000236:	4a37      	ldr	r2, [pc, #220]	@ (8000314 <ReadButton+0xf8>)
 8000238:	6013      	str	r3, [r2, #0]
		tmp_sw4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800023a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800023e:	4836      	ldr	r0, [pc, #216]	@ (8000318 <ReadButton+0xfc>)
 8000240:	f002 fb2e 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	4b34      	ldr	r3, [pc, #208]	@ (800031c <ReadButton+0x100>)
 800024a:	701a      	strb	r2, [r3, #0]

		if(old_sw4 != tmp_sw4) {
 800024c:	4b34      	ldr	r3, [pc, #208]	@ (8000320 <ReadButton+0x104>)
 800024e:	781a      	ldrb	r2, [r3, #0]
 8000250:	4b32      	ldr	r3, [pc, #200]	@ (800031c <ReadButton+0x100>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	429a      	cmp	r2, r3
 8000256:	d007      	beq.n	8000268 <ReadButton+0x4c>
			old_sw4 = tmp_sw4;
 8000258:	4b30      	ldr	r3, [pc, #192]	@ (800031c <ReadButton+0x100>)
 800025a:	781a      	ldrb	r2, [r3, #0]
 800025c:	4b30      	ldr	r3, [pc, #192]	@ (8000320 <ReadButton+0x104>)
 800025e:	701a      	strb	r2, [r3, #0]
			sw4_cnt = 3;
 8000260:	4b30      	ldr	r3, [pc, #192]	@ (8000324 <ReadButton+0x108>)
 8000262:	2203      	movs	r2, #3
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e017      	b.n	8000298 <ReadButton+0x7c>
		} else {
			if(sw4_cnt) {
 8000268:	4b2e      	ldr	r3, [pc, #184]	@ (8000324 <ReadButton+0x108>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d013      	beq.n	8000298 <ReadButton+0x7c>
				sw4_cnt--;
 8000270:	4b2c      	ldr	r3, [pc, #176]	@ (8000324 <ReadButton+0x108>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4b2a      	ldr	r3, [pc, #168]	@ (8000324 <ReadButton+0x108>)
 800027a:	701a      	strb	r2, [r3, #0]
				if(sw4_cnt == 0) {
 800027c:	4b29      	ldr	r3, [pc, #164]	@ (8000324 <ReadButton+0x108>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <ReadButton+0x7c>
					// pushed down
					if (tmp_sw4 == 0)
 8000284:	4b25      	ldr	r3, [pc, #148]	@ (800031c <ReadButton+0x100>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d105      	bne.n	8000298 <ReadButton+0x7c>
					{
						btn1_pushed = 1;
 800028c:	4b26      	ldr	r3, [pc, #152]	@ (8000328 <ReadButton+0x10c>)
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
						printf("Button1 pushed\r\n");
 8000292:	4826      	ldr	r0, [pc, #152]	@ (800032c <ReadButton+0x110>)
 8000294:	f004 f9e0 	bl	8004658 <puts>
			}
		}
	}

	// 10msec마다 sw5상태를 읽고 3번 연속 같은 값이면 입력 처리
	if(GetElapsedTick(tm_sw5) >= 10) {
 8000298:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <ReadButton+0x114>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff63 	bl	8000168 <GetElapsedTick>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b09      	cmp	r3, #9
 80002a6:	d933      	bls.n	8000310 <ReadButton+0xf4>
		tm_sw5 = HAL_GetTick();
 80002a8:	f001 fa80 	bl	80017ac <HAL_GetTick>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4a20      	ldr	r2, [pc, #128]	@ (8000330 <ReadButton+0x114>)
 80002b0:	6013      	str	r3, [r2, #0]
		tmp_sw5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80002b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002b6:	4818      	ldr	r0, [pc, #96]	@ (8000318 <ReadButton+0xfc>)
 80002b8:	f002 faf2 	bl	80028a0 <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	461a      	mov	r2, r3
 80002c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000334 <ReadButton+0x118>)
 80002c2:	701a      	strb	r2, [r3, #0]

		if(old_sw5 != tmp_sw5) {
 80002c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000338 <ReadButton+0x11c>)
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000334 <ReadButton+0x118>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d007      	beq.n	80002e0 <ReadButton+0xc4>
			old_sw5 = tmp_sw5;
 80002d0:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <ReadButton+0x118>)
 80002d2:	781a      	ldrb	r2, [r3, #0]
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <ReadButton+0x11c>)
 80002d6:	701a      	strb	r2, [r3, #0]
			sw5_cnt = 3;
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <ReadButton+0x120>)
 80002da:	2203      	movs	r2, #3
 80002dc:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 80002de:	e017      	b.n	8000310 <ReadButton+0xf4>
			if(sw5_cnt) {
 80002e0:	4b16      	ldr	r3, [pc, #88]	@ (800033c <ReadButton+0x120>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d013      	beq.n	8000310 <ReadButton+0xf4>
				sw5_cnt--;
 80002e8:	4b14      	ldr	r3, [pc, #80]	@ (800033c <ReadButton+0x120>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	3b01      	subs	r3, #1
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <ReadButton+0x120>)
 80002f2:	701a      	strb	r2, [r3, #0]
				if(sw5_cnt == 0) {
 80002f4:	4b11      	ldr	r3, [pc, #68]	@ (800033c <ReadButton+0x120>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d109      	bne.n	8000310 <ReadButton+0xf4>
					if (tmp_sw5 == 0)
 80002fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000334 <ReadButton+0x118>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d105      	bne.n	8000310 <ReadButton+0xf4>
						btn2_pushed = 1;
 8000304:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <ReadButton+0x124>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
						printf("Bbutton2 pushed\r\n");
 800030a:	480e      	ldr	r0, [pc, #56]	@ (8000344 <ReadButton+0x128>)
 800030c:	f004 f9a4 	bl	8004658 <puts>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	2000018c 	.word	0x2000018c
 8000318:	40010c00 	.word	0x40010c00
 800031c:	20000192 	.word	0x20000192
 8000320:	20000190 	.word	0x20000190
 8000324:	20000191 	.word	0x20000191
 8000328:	2000018a 	.word	0x2000018a
 800032c:	080053b4 	.word	0x080053b4
 8000330:	20000194 	.word	0x20000194
 8000334:	2000019a 	.word	0x2000019a
 8000338:	20000198 	.word	0x20000198
 800033c:	20000199 	.word	0x20000199
 8000340:	2000018b 	.word	0x2000018b
 8000344:	080053c4 	.word	0x080053c4

08000348 <DoButtonWork>:


void DoButtonWork()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	ReadButton();
 800034c:	f7ff ff66 	bl	800021c <ReadButton>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile uint8_t can_rx_in = 0;
volatile uint8_t can_rx_out = 0;

// CAN RX_FIFO0 인터럽트 핸들러
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
			&can_rx_frames[can_rx_in].header,
 800035c:	4b1a      	ldr	r3, [pc, #104]	@ (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	461a      	mov	r2, r3
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8000364:	4613      	mov	r3, r2
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	4413      	add	r3, r2
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4a17      	ldr	r2, [pc, #92]	@ (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800036e:	441a      	add	r2, r3
			can_rx_frames[can_rx_in].data) == HAL_OK)
 8000370:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4619      	mov	r1, r3
 8000378:	460b      	mov	r3, r1
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	440b      	add	r3, r1
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	3318      	adds	r3, #24
 8000382:	4912      	ldr	r1, [pc, #72]	@ (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000384:	440b      	add	r3, r1
 8000386:	3304      	adds	r3, #4
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8000388:	2100      	movs	r1, #0
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f001 fc00 	bl	8001b90 <HAL_CAN_GetRxMessage>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d111      	bne.n	80003ba <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
	{
		can_rx_in = (can_rx_in + 1) % MAX_CAN_RX_FRAMES;
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	b2db      	uxtb	r3, r3
 800039c:	3301      	adds	r3, #1
 800039e:	4a0c      	ldr	r2, [pc, #48]	@ (80003d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80003a0:	fb82 1203 	smull	r1, r2, r2, r3
 80003a4:	1111      	asrs	r1, r2, #4
 80003a6:	17da      	asrs	r2, r3, #31
 80003a8:	1a8a      	subs	r2, r1, r2
 80003aa:	2132      	movs	r1, #50	@ 0x32
 80003ac:	fb01 f202 	mul.w	r2, r1, r2
 80003b0:	1a9a      	subs	r2, r3, r2
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	4b04      	ldr	r3, [pc, #16]	@ (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80003b6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		printf("CAN RX Error\r\n");
	}
}
 80003b8:	e002      	b.n	80003c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		printf("CAN RX Error\r\n");
 80003ba:	4806      	ldr	r0, [pc, #24]	@ (80003d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80003bc:	f004 f94c 	bl	8004658 <puts>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200008a4 	.word	0x200008a4
 80003cc:	2000019c 	.word	0x2000019c
 80003d0:	51eb851f 	.word	0x51eb851f
 80003d4:	080053d8 	.word	0x080053d8

080003d8 <ToggleLedD2>:
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
}

void ToggleLedD2()
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80003dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003e0:	4802      	ldr	r0, [pc, #8]	@ (80003ec <ToggleLedD2+0x14>)
 80003e2:	f002 fa8c 	bl	80028fe <HAL_GPIO_TogglePin>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <ToggleRunLed>:


uint32_t tm_run_led = 0;

void ToggleRunLed()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	if(GetElapsedTick(tm_run_led) >= 500)
 80003f4:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <ToggleRunLed+0x28>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff feb5 	bl	8000168 <GetElapsedTick>
 80003fe:	4603      	mov	r3, r0
 8000400:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000404:	d306      	bcc.n	8000414 <ToggleRunLed+0x24>
	{
		tm_run_led = HAL_GetTick();
 8000406:	f001 f9d1 	bl	80017ac <HAL_GetTick>
 800040a:	4603      	mov	r3, r0
 800040c:	4a02      	ldr	r2, [pc, #8]	@ (8000418 <ToggleRunLed+0x28>)
 800040e:	6013      	str	r3, [r2, #0]

		// RUN LED Toggle
		ToggleLedD2();
 8000410:	f7ff ffe2 	bl	80003d8 <ToggleLedD2>
	}
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200008a8 	.word	0x200008a8

0800041c <DoLedWork>:


void DoLedWork()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	ToggleRunLed();
 8000420:	f7ff ffe6 	bl	80003f0 <ToggleRunLed>
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042c:	f001 f966 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000430:	f000 f80d 	bl	800044e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000434:	f000 f908 	bl	8000648 <MX_GPIO_Init>
  MX_CAN_Init();
 8000438:	f000 f84e 	bl	80004d8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800043c:	f000 f8da 	bl	80005f4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000440:	f000 f8a2 	bl	8000588 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  InitWork();
 8000444:	f001 f91c 	bl	8001680 <InitWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DoWork();
 8000448:	f001 f928 	bl	800169c <DoWork>
 800044c:	e7fc      	b.n	8000448 <main+0x20>

0800044e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b090      	sub	sp, #64	@ 0x40
 8000452:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000454:	f107 0318 	add.w	r3, r7, #24
 8000458:	2228      	movs	r2, #40	@ 0x28
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f004 f9db 	bl	8004818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000470:	2301      	movs	r3, #1
 8000472:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000478:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047e:	2301      	movs	r3, #1
 8000480:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800048a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800048c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	4618      	mov	r0, r3
 8000498:	f002 fa4a 	bl	8002930 <HAL_RCC_OscConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a2:	f000 f94b 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a6:	230f      	movs	r3, #15
 80004a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004aa:	2302      	movs	r3, #2
 80004ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2102      	movs	r1, #2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f002 fcb7 	bl	8002e34 <HAL_RCC_ClockConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004cc:	f000 f936 	bl	800073c <Error_Handler>
  }
}
 80004d0:	bf00      	nop
 80004d2:	3740      	adds	r7, #64	@ 0x40
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	@ 0x28
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004de:	4b28      	ldr	r3, [pc, #160]	@ (8000580 <MX_CAN_Init+0xa8>)
 80004e0:	4a28      	ldr	r2, [pc, #160]	@ (8000584 <MX_CAN_Init+0xac>)
 80004e2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80004e4:	4b26      	ldr	r3, [pc, #152]	@ (8000580 <MX_CAN_Init+0xa8>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004ea:	4b25      	ldr	r3, [pc, #148]	@ (8000580 <MX_CAN_Init+0xa8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004f0:	4b23      	ldr	r3, [pc, #140]	@ (8000580 <MX_CAN_Init+0xa8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80004f6:	4b22      	ldr	r3, [pc, #136]	@ (8000580 <MX_CAN_Init+0xa8>)
 80004f8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004fe:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <MX_CAN_Init+0xa8>)
 8000500:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000504:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000506:	4b1e      	ldr	r3, [pc, #120]	@ (8000580 <MX_CAN_Init+0xa8>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800050c:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <MX_CAN_Init+0xa8>)
 800050e:	2200      	movs	r2, #0
 8000510:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000512:	4b1b      	ldr	r3, [pc, #108]	@ (8000580 <MX_CAN_Init+0xa8>)
 8000514:	2200      	movs	r2, #0
 8000516:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000518:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <MX_CAN_Init+0xa8>)
 800051a:	2200      	movs	r2, #0
 800051c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800051e:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <MX_CAN_Init+0xa8>)
 8000520:	2200      	movs	r2, #0
 8000522:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000524:	4b16      	ldr	r3, [pc, #88]	@ (8000580 <MX_CAN_Init+0xa8>)
 8000526:	2200      	movs	r2, #0
 8000528:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800052a:	4815      	ldr	r0, [pc, #84]	@ (8000580 <MX_CAN_Init+0xa8>)
 800052c:	f001 f96c 	bl	8001808 <HAL_CAN_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000536:	f000 f901 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000542:	2301      	movs	r3, #1
 8000544:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800055a:	2301      	movs	r3, #1
 800055c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800055e:	230e      	movs	r3, #14
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	@ (8000580 <MX_CAN_Init+0xa8>)
 8000568:	f001 fa49 	bl	80019fe <HAL_CAN_ConfigFilter>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_CAN_Init+0x9e>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000572:	f000 f8e3 	bl	800073c <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3728      	adds	r7, #40	@ 0x28
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200008ac 	.word	0x200008ac
 8000584:	40006400 	.word	0x40006400

08000588 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800058c:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <MX_SPI1_Init+0x64>)
 800058e:	4a18      	ldr	r2, [pc, #96]	@ (80005f0 <MX_SPI1_Init+0x68>)
 8000590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000592:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <MX_SPI1_Init+0x64>)
 8000594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <MX_SPI1_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005bc:	2230      	movs	r2, #48	@ 0x30
 80005be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005c2:	2280      	movs	r2, #128	@ 0x80
 80005c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005d4:	220a      	movs	r2, #10
 80005d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005d8:	4804      	ldr	r0, [pc, #16]	@ (80005ec <MX_SPI1_Init+0x64>)
 80005da:	f002 fdb9 	bl	8003150 <HAL_SPI_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005e4:	f000 f8aa 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200008d4 	.word	0x200008d4
 80005f0:	40013000 	.word	0x40013000

080005f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_USART1_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800062c:	f003 f877 	bl	800371e <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f881 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000092c 	.word	0x2000092c
 8000644:	40013800 	.word	0x40013800

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <MX_GPIO_Init+0xe8>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a33      	ldr	r2, [pc, #204]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <MX_GPIO_Init+0xe8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a2d      	ldr	r2, [pc, #180]	@ (8000730 <MX_GPIO_Init+0xe8>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_GPIO_Init+0xe8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a27      	ldr	r2, [pc, #156]	@ (8000730 <MX_GPIO_Init+0xe8>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_GPIO_Init+0xe8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2118      	movs	r1, #24
 80006a8:	4822      	ldr	r0, [pc, #136]	@ (8000734 <MX_GPIO_Init+0xec>)
 80006aa:	f002 f910 	bl	80028ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80006b4:	4820      	ldr	r0, [pc, #128]	@ (8000738 <MX_GPIO_Init+0xf0>)
 80006b6:	f002 f90a 	bl	80028ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80006ba:	2318      	movs	r3, #24
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	4818      	ldr	r0, [pc, #96]	@ (8000734 <MX_GPIO_Init+0xec>)
 80006d2:	f001 ff61 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4813      	ldr	r0, [pc, #76]	@ (8000738 <MX_GPIO_Init+0xf0>)
 80006ec:	f001 ff54 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_GPIO_Init+0xf0>)
 8000706:	f001 ff47 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800070a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_GPIO_Init+0xf0>)
 8000724:	f001 ff38 	bl	8002598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800
 8000738:	40010c00 	.word	0x40010c00

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b0c8      	sub	sp, #288	@ 0x120
 800074c:	af00      	add	r7, sp, #0
 800074e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000752:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000756:	6018      	str	r0, [r3, #0]
 8000758:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800075c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000760:	6019      	str	r1, [r3, #0]
 8000762:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000766:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800076a:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 800076c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000770:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2bff      	cmp	r3, #255	@ 0xff
 8000778:	d806      	bhi.n	8000788 <PN532_WriteFrame+0x40>
 800077a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800077e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	e0aa      	b.n	80008e4 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 8000794:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000798:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80007a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007a8:	2200      	movs	r2, #0
 80007aa:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80007ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007b4:	22ff      	movs	r2, #255	@ 0xff
 80007b6:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80007be:	e010      	b.n	80007e2 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 80007c0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007c4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80007c8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007cc:	5cd2      	ldrb	r2, [r2, r3]
 80007ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80007d2:	4413      	add	r3, r2
 80007d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80007d8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007dc:	3301      	adds	r3, #1
 80007de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80007e2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d9ea      	bls.n	80007c0 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 80007ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007ee:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007fe:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000800:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000804:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	425b      	negs	r3, r3
 800080e:	b2da      	uxtb	r2, r3
 8000810:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000814:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000818:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000820:	e023      	b.n	800086a <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000822:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000826:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800082a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	441a      	add	r2, r3
 8000832:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000836:	3305      	adds	r3, #5
 8000838:	7811      	ldrb	r1, [r2, #0]
 800083a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800083e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000842:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000844:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000848:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800084c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	4413      	add	r3, r2
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800085a:	4413      	add	r3, r2
 800085c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000860:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000864:	3301      	adds	r3, #1
 8000866:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800086a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800086e:	b29b      	uxth	r3, r3
 8000870:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000874:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000878:	8812      	ldrh	r2, [r2, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d8d1      	bhi.n	8000822 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 800087e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000882:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	3305      	adds	r3, #5
 800088a:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800088e:	43d2      	mvns	r2, r2
 8000890:	b2d1      	uxtb	r1, r2
 8000892:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000896:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800089a:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 800089c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008a0:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	3306      	adds	r3, #6
 80008a8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80008ac:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80008b0:	2100      	movs	r1, #0
 80008b2:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80008b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80008c4:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80008c8:	8812      	ldrh	r2, [r2, #0]
 80008ca:	3207      	adds	r2, #7
 80008cc:	b291      	uxth	r1, r2
 80008ce:	f107 0214 	add.w	r2, r7, #20
 80008d2:	4610      	mov	r0, r2
 80008d4:	4798      	blx	r3
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	e000      	b.n	80008e4 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0c8      	sub	sp, #288	@ 0x120
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80008fe:	6018      	str	r0, [r3, #0]
 8000900:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000904:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000908:	6019      	str	r1, [r3, #0]
 800090a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800090e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000912:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 800091a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800091e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800092a:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 800092e:	8812      	ldrh	r2, [r2, #0]
 8000930:	3207      	adds	r2, #7
 8000932:	b291      	uxth	r1, r2
 8000934:	f107 0214 	add.w	r2, r7, #20
 8000938:	4610      	mov	r0, r2
 800093a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8000942:	e019      	b.n	8000978 <PN532_ReadFrame+0x88>
        offset += 1;
 8000944:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000948:	3301      	adds	r3, #1
 800094a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 800094e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000952:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	1dda      	adds	r2, r3, #7
 800095a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800095e:	429a      	cmp	r2, r3
 8000960:	da0a      	bge.n	8000978 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000962:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000966:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	485b      	ldr	r0, [pc, #364]	@ (8000adc <PN532_ReadFrame+0x1ec>)
 8000970:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	e0ab      	b.n	8000ad0 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000978:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800097c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000980:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0dc      	beq.n	8000944 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 800098a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800098e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000992:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	2bff      	cmp	r3, #255	@ 0xff
 800099a:	d00a      	beq.n	80009b2 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 800099c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	484c      	ldr	r0, [pc, #304]	@ (8000adc <PN532_ReadFrame+0x1ec>)
 80009aa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	e08e      	b.n	8000ad0 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 80009b2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80009b6:	3301      	adds	r3, #1
 80009b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 80009bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009c0:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	1dda      	adds	r2, r3, #7
 80009c8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80009cc:	429a      	cmp	r2, r3
 80009ce:	da0a      	bge.n	80009e6 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 80009d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4840      	ldr	r0, [pc, #256]	@ (8000ae0 <PN532_ReadFrame+0x1f0>)
 80009de:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	e074      	b.n	8000ad0 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 80009e6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80009ea:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009ee:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009f2:	5cd3      	ldrb	r3, [r2, r3]
 80009f4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 80009f8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80009fc:	3301      	adds	r3, #1
 80009fe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a02:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a06:	5cd2      	ldrb	r2, [r2, r3]
 8000a08:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00a      	beq.n	8000a2a <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000a14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4830      	ldr	r0, [pc, #192]	@ (8000ae4 <PN532_ReadFrame+0x1f4>)
 8000a22:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	e052      	b.n	8000ad0 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000a30:	e014      	b.n	8000a5c <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000a32:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a36:	1c9a      	adds	r2, r3, #2
 8000a38:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a42:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a46:	5cd2      	ldrb	r2, [r2, r3]
 8000a48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000a4c:	4413      	add	r3, r2
 8000a4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000a52:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000a56:	3301      	adds	r3, #1
 8000a58:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000a5c:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000a60:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d2e4      	bcs.n	8000a32 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000a68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00a      	beq.n	8000a86 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000a70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	481a      	ldr	r0, [pc, #104]	@ (8000ae8 <PN532_ReadFrame+0x1f8>)
 8000a7e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	e024      	b.n	8000ad0 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000a8c:	e018      	b.n	8000ac0 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000a8e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a92:	1c9a      	adds	r2, r3, #2
 8000a94:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000a98:	441a      	add	r2, r3
 8000a9a:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000a9e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000aa2:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8000aa6:	6809      	ldr	r1, [r1, #0]
 8000aa8:	440b      	add	r3, r1
 8000aaa:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000aae:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000ab2:	5c8a      	ldrb	r2, [r1, r2]
 8000ab4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000ab6:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000aba:	3301      	adds	r3, #1
 8000abc:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000ac0:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000ac4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d3e0      	bcc.n	8000a8e <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000acc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	080053fc 	.word	0x080053fc
 8000ae0:	08005430 	.word	0x08005430
 8000ae4:	0800544c 	.word	0x0800544c
 8000ae8:	0800547c 	.word	0x0800547c

08000aec <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b0c7      	sub	sp, #284	@ 0x11c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000af6:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000afa:	6020      	str	r0, [r4, #0]
 8000afc:	4608      	mov	r0, r1
 8000afe:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000b02:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000b06:	600a      	str	r2, [r1, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b0e:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000b12:	4602      	mov	r2, r0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b1e:	460a      	mov	r2, r1
 8000b20:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000b22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000b2a:	22d4      	movs	r2, #212	@ 0xd4
 8000b2c:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000b2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000b36:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000b3a:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8000b3e:	7812      	ldrb	r2, [r2, #0]
 8000b40:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000b48:	e012      	b.n	8000b70 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000b4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000b52:	441a      	add	r2, r3
 8000b54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000b58:	3302      	adds	r3, #2
 8000b5a:	7811      	ldrb	r1, [r2, #0]
 8000b5c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000b60:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000b64:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000b66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d8e5      	bhi.n	8000b4a <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000b7e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8000b82:	3302      	adds	r3, #2
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f107 0110 	add.w	r1, r7, #16
 8000b8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	f7ff fdd8 	bl	8000748 <PN532_WriteFrame>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d011      	beq.n	8000bc2 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000b9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ba2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000bac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	485b      	ldr	r0, [pc, #364]	@ (8000d28 <PN532_CallFunction+0x23c>)
 8000bba:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	e0ac      	b.n	8000d1c <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000bc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000bd2:	4798      	blx	r3
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f083 0301 	eor.w	r3, r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	e09a      	b.n	8000d1c <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000be6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f107 0210 	add.w	r2, r7, #16
 8000bf6:	2106      	movs	r1, #6
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000c02:	e01c      	b.n	8000c3e <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000c04:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000c08:	4a48      	ldr	r2, [pc, #288]	@ (8000d2c <PN532_CallFunction+0x240>)
 8000c0a:	5cd2      	ldrb	r2, [r2, r3]
 8000c0c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000c10:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000c14:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000c18:	5ccb      	ldrb	r3, [r1, r3]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d00a      	beq.n	8000c34 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000c1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4841      	ldr	r0, [pc, #260]	@ (8000d30 <PN532_CallFunction+0x244>)
 8000c2c:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e073      	b.n	8000d1c <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000c34:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000c38:	3301      	adds	r3, #1
 8000c3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000c3e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000c42:	2b05      	cmp	r3, #5
 8000c44:	d9de      	bls.n	8000c04 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000c46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000c56:	4798      	blx	r3
 8000c58:	4603      	mov	r3, r0
 8000c5a:	f083 0301 	eor.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	e058      	b.n	8000d1c <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000c6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	3302      	adds	r3, #2
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f107 0110 	add.w	r1, r7, #16
 8000c7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	f7ff fe33 	bl	80008f0 <PN532_ReadFrame>
 8000c8a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000c8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2bd5      	cmp	r3, #213	@ 0xd5
 8000c9a:	d10d      	bne.n	8000cb8 <PN532_CallFunction+0x1cc>
 8000c9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ca4:	785b      	ldrb	r3, [r3, #1]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cac:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d00a      	beq.n	8000cce <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000cb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	481b      	ldr	r0, [pc, #108]	@ (8000d34 <PN532_CallFunction+0x248>)
 8000cc6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	e026      	b.n	8000d1c <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000cd4:	e015      	b.n	8000d02 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000cd6:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000cda:	1c9a      	adds	r2, r3, #2
 8000cdc:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000ce0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000ce4:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000ce8:	6809      	ldr	r1, [r1, #0]
 8000cea:	440b      	add	r3, r1
 8000cec:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000cf0:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000cf4:	5c8a      	ldrb	r2, [r1, r2]
 8000cf6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000cf8:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000d02:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000d0c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000d10:	8812      	ldrh	r2, [r2, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d8df      	bhi.n	8000cd6 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000d16:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d1a:	3b02      	subs	r3, #2
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	080054b0 	.word	0x080054b0
 8000d2c:	08005608 	.word	0x08005608
 8000d30:	080054c4 	.word	0x080054c4
 8000d34:	080054f0 	.word	0x080054f0

08000d38 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af04      	add	r7, sp, #16
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000d42:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2304      	movs	r3, #4
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	2102      	movs	r1, #2
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fec8 	bl	8000aec <PN532_CallFunction>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d62:	d106      	bne.n	8000d72 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <PN532_GetFirmwareVersion+0x44>)
 8000d6a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	e000      	b.n	8000d74 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	08005518 	.word	0x08005518

08000d80 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af04      	add	r7, sp, #16
 8000d86:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <PN532_SamConfiguration+0x40>)
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	4611      	mov	r1, r2
 8000d92:	8019      	strh	r1, [r3, #0]
 8000d94:	3302      	adds	r3, #2
 8000d96:	0c12      	lsrs	r2, r2, #16
 8000d98:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9e:	9302      	str	r3, [sp, #8]
 8000da0:	2303      	movs	r3, #3
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2300      	movs	r3, #0
 8000dac:	2200      	movs	r2, #0
 8000dae:	2114      	movs	r1, #20
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fe9b 	bl	8000aec <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	08005534 	.word	0x08005534

08000dc4 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b090      	sub	sp, #64	@ 0x40
 8000dc8:	af04      	add	r7, sp, #16
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000de0:	f107 0210 	add.w	r2, r7, #16
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	2302      	movs	r3, #2
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2313      	movs	r3, #19
 8000df4:	214a      	movs	r1, #74	@ 0x4a
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff fe78 	bl	8000aec <PN532_CallFunction>
 8000dfc:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	da02      	bge.n	8000e0a <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	e02e      	b.n	8000e68 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000e0a:	7c3b      	ldrb	r3, [r7, #16]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d006      	beq.n	8000e1e <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <PN532_ReadPassiveTarget+0xac>)
 8000e16:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1c:	e024      	b.n	8000e68 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000e1e:	7d7b      	ldrb	r3, [r7, #21]
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d906      	bls.n	8000e32 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <PN532_ReadPassiveTarget+0xb0>)
 8000e2a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e30:	e01a      	b.n	8000e68 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000e38:	e010      	b.n	8000e5c <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e3e:	1d9a      	adds	r2, r3, #6
 8000e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	440b      	add	r3, r1
 8000e48:	3230      	adds	r2, #48	@ 0x30
 8000e4a:	443a      	add	r2, r7
 8000e4c:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000e50:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000e52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e56:	3301      	adds	r3, #1
 8000e58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000e5c:	7d7b      	ldrb	r3, [r7, #21]
 8000e5e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3e9      	bcc.n	8000e3a <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000e66:	7d7b      	ldrb	r3, [r7, #21]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3730      	adds	r7, #48	@ 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	08005538 	.word	0x08005538
 8000e74:	08005558 	.word	0x08005558

08000e78 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2108      	movs	r1, #8
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <PN532_Reset+0x3c>)
 8000e82:	f001 fd24 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e86:	2064      	movs	r0, #100	@ 0x64
 8000e88:	f000 fc9a 	bl	80017c0 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2108      	movs	r1, #8
 8000e90:	4808      	ldr	r0, [pc, #32]	@ (8000eb4 <PN532_Reset+0x3c>)
 8000e92:	f001 fd1c 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000e96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e9a:	f000 fc91 	bl	80017c0 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <PN532_Reset+0x3c>)
 8000ea4:	f001 fd13 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000ea8:	2064      	movs	r0, #100	@ 0x64
 8000eaa:	f000 fc89 	bl	80017c0 <HAL_Delay>
    return PN532_STATUS_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <PN532_Log>:

void PN532_Log(const char* log) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <PN532_Log+0x18>)
 8000ec4:	f003 fb58 	bl	8004578 <iprintf>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08005580 	.word	0x08005580

08000ed4 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <spi_rw+0x48>)
 8000ee6:	f001 fcf2 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f000 fc68 	bl	80017c0 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	220a      	movs	r2, #10
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <spi_rw+0x4c>)
 8000efe:	f002 f9ab 	bl	8003258 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 fc5c 	bl	80017c0 <HAL_Delay>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <spi_rw+0x48>)
 8000f0e:	f001 fcde 	bl	80028ce <HAL_GPIO_WritePin>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	200008d4 	.word	0x200008d4

08000f24 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8000f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
 8000f32:	466b      	mov	r3, sp
 8000f34:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	1c59      	adds	r1, r3, #1
 8000f3a:	1e4b      	subs	r3, r1, #1
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	460a      	mov	r2, r1
 8000f40:	2300      	movs	r3, #0
 8000f42:	4690      	mov	r8, r2
 8000f44:	4699      	mov	r9, r3
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4614      	mov	r4, r2
 8000f60:	461d      	mov	r5, r3
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	00eb      	lsls	r3, r5, #3
 8000f6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f70:	00e2      	lsls	r2, r4, #3
 8000f72:	460b      	mov	r3, r1
 8000f74:	3307      	adds	r3, #7
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f7e:	466b      	mov	r3, sp
 8000f80:	3300      	adds	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2203      	movs	r2, #3
 8000f88:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f000 fc18 	bl	80017c0 <HAL_Delay>
    spi_rw(frame, count + 1);
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4619      	mov	r1, r3
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f7ff ff9a 	bl	8000ed4 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	75fb      	strb	r3, [r7, #23]
 8000fa4:	e00a      	b.n	8000fbc <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	440b      	add	r3, r1
 8000fb0:	68f9      	ldr	r1, [r7, #12]
 8000fb2:	5c8a      	ldrb	r2, [r1, r2]
 8000fb4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	75fb      	strb	r3, [r7, #23]
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d8ef      	bhi.n	8000fa6 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	46b5      	mov	sp, r6
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000fd4 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8000fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
 8000fe2:	466b      	mov	r3, sp
 8000fe4:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	1e4b      	subs	r3, r1, #1
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	460a      	mov	r2, r1
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	4690      	mov	r8, r2
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800100a:	460a      	mov	r2, r1
 800100c:	2300      	movs	r3, #0
 800100e:	4614      	mov	r4, r2
 8001010:	461d      	mov	r5, r3
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	00eb      	lsls	r3, r5, #3
 800101c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001020:	00e2      	lsls	r2, r4, #3
 8001022:	460b      	mov	r3, r1
 8001024:	3307      	adds	r3, #7
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	ebad 0d03 	sub.w	sp, sp, r3
 800102e:	466b      	mov	r3, sp
 8001030:	3300      	adds	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
 800103e:	e00a      	b.n	8001056 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	441a      	add	r2, r3
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	3301      	adds	r3, #1
 800104a:	7811      	ldrb	r1, [r2, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	3301      	adds	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	b29b      	uxth	r3, r3
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8ef      	bhi.n	8001040 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4619      	mov	r1, r3
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff ff32 	bl	8000ed4 <spi_rw>
    return PN532_STATUS_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	46b5      	mov	sp, r6
}
 8001074:	4618      	mov	r0, r3
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800107e <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8001086:	2302      	movs	r3, #2
 8001088:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 800108a:	f000 fb8f 	bl	80017ac <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001090:	e010      	b.n	80010b4 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8001092:	200a      	movs	r0, #10
 8001094:	f000 fb94 	bl	80017c0 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	2102      	movs	r1, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff18 	bl	8000ed4 <spi_rw>
        if (status[1] == _SPI_READY) {
 80010a4:	7a7b      	ldrb	r3, [r7, #9]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <PN532_SPI_WaitReady+0x30>
            return true;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00b      	b.n	80010c6 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 80010ae:	2005      	movs	r0, #5
 80010b0:	f000 fb86 	bl	80017c0 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 80010b4:	f000 fb7a 	bl	80017ac <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8e6      	bhi.n	8001092 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 80010d6:	2300      	movs	r3, #0
 80010d8:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 80010da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010de:	f000 fb6f 	bl	80017c0 <HAL_Delay>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	480a      	ldr	r0, [pc, #40]	@ (8001110 <PN532_SPI_Wakeup+0x40>)
 80010e8:	f001 fbf1 	bl	80028ce <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 80010ec:	2002      	movs	r0, #2
 80010ee:	f000 fb67 	bl	80017c0 <HAL_Delay>
    spi_rw(data, 1);
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2101      	movs	r1, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff feec 	bl	8000ed4 <spi_rw>
    HAL_Delay(1000);
 80010fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001100:	f000 fb5e 	bl	80017c0 <HAL_Delay>
    return PN532_STATUS_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40010800 	.word	0x40010800

08001114 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0c      	ldr	r2, [pc, #48]	@ (8001150 <PN532_SPI_Init+0x3c>)
 8001120:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <PN532_SPI_Init+0x40>)
 8001126:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <PN532_SPI_Init+0x44>)
 800112c:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <PN532_SPI_Init+0x48>)
 8001132:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <PN532_SPI_Init+0x4c>)
 8001138:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a09      	ldr	r2, [pc, #36]	@ (8001164 <PN532_SPI_Init+0x50>)
 800113e:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	4798      	blx	r3
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	08000e79 	.word	0x08000e79
 8001154:	08000f25 	.word	0x08000f25
 8001158:	08000fd5 	.word	0x08000fd5
 800115c:	0800107f 	.word	0x0800107f
 8001160:	080010d1 	.word	0x080010d1
 8001164:	08000eb9 	.word	0x08000eb9

08001168 <InitSpi1Work>:
uint8_t buff[255];
uint8_t uid[MIFARE_UID_MAX_LENGTH];
int32_t uid_len = 0;

void InitSpi1Work()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	//HAL_SPI_Receive_IT(&hspi1, &spiRx, 1);

	  printf("Hello!\r\n");
 800116c:	4811      	ldr	r0, [pc, #68]	@ (80011b4 <InitSpi1Work+0x4c>)
 800116e:	f003 fa73 	bl	8004658 <puts>

	  PN532_SPI_Init(&pn532);
 8001172:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <InitSpi1Work+0x50>)
 8001174:	f7ff ffce 	bl	8001114 <PN532_SPI_Init>
	  PN532_GetFirmwareVersion(&pn532, buff);
 8001178:	4910      	ldr	r1, [pc, #64]	@ (80011bc <InitSpi1Work+0x54>)
 800117a:	480f      	ldr	r0, [pc, #60]	@ (80011b8 <InitSpi1Work+0x50>)
 800117c:	f7ff fddc 	bl	8000d38 <PN532_GetFirmwareVersion>
	  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8001180:	490e      	ldr	r1, [pc, #56]	@ (80011bc <InitSpi1Work+0x54>)
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <InitSpi1Work+0x50>)
 8001184:	f7ff fdd8 	bl	8000d38 <PN532_GetFirmwareVersion>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10f      	bne.n	80011ae <InitSpi1Work+0x46>
	    printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <InitSpi1Work+0x54>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	4619      	mov	r1, r3
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <InitSpi1Work+0x54>)
 8001196:	789b      	ldrb	r3, [r3, #2]
 8001198:	461a      	mov	r2, r3
 800119a:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <InitSpi1Work+0x58>)
 800119c:	f003 f9ec 	bl	8004578 <iprintf>
	  } else {
	    return;
	  }
	  PN532_SamConfiguration(&pn532);
 80011a0:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <InitSpi1Work+0x50>)
 80011a2:	f7ff fded 	bl	8000d80 <PN532_SamConfiguration>
	  printf("Waiting for RFID/NFC card...\r\n");
 80011a6:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <InitSpi1Work+0x5c>)
 80011a8:	f003 fa56 	bl	8004658 <puts>
 80011ac:	e000      	b.n	80011b0 <InitSpi1Work+0x48>
	    return;
 80011ae:	bf00      	nop
}
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	08005588 	.word	0x08005588
 80011b8:	20000974 	.word	0x20000974
 80011bc:	2000098c 	.word	0x2000098c
 80011c0:	08005590 	.word	0x08005590
 80011c4:	080055bc 	.word	0x080055bc

080011c8 <DoSpi1Work>:
    }
}
*/

void DoSpi1Work()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(rx_buff); i++)
		printf("%02X ", rx_buff[i]);
	printf("\n");
	*/

    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80011ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d2:	2200      	movs	r2, #0
 80011d4:	4915      	ldr	r1, [pc, #84]	@ (800122c <DoSpi1Work+0x64>)
 80011d6:	4816      	ldr	r0, [pc, #88]	@ (8001230 <DoSpi1Work+0x68>)
 80011d8:	f7ff fdf4 	bl	8000dc4 <PN532_ReadPassiveTarget>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <DoSpi1Work+0x6c>)
 80011e0:	6013      	str	r3, [r2, #0]
    if (uid_len == PN532_STATUS_ERROR) {
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <DoSpi1Work+0x6c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ea:	d103      	bne.n	80011f4 <DoSpi1Work+0x2c>
      printf(".");
 80011ec:	202e      	movs	r0, #46	@ 0x2e
 80011ee:	f003 f9d5 	bl	800459c <putchar>
        printf("%02x ", uid[i]);
      }
      printf("\r\n");
    }

}
 80011f2:	e017      	b.n	8001224 <DoSpi1Work+0x5c>
      printf("Found card with UID: ");
 80011f4:	4810      	ldr	r0, [pc, #64]	@ (8001238 <DoSpi1Work+0x70>)
 80011f6:	f003 f9bf 	bl	8004578 <iprintf>
      for (uint8_t i = 0; i < uid_len; i++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	e009      	b.n	8001214 <DoSpi1Work+0x4c>
        printf("%02x ", uid[i]);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <DoSpi1Work+0x64>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <DoSpi1Work+0x74>)
 800120a:	f003 f9b5 	bl	8004578 <iprintf>
      for (uint8_t i = 0; i < uid_len; i++) {
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	3301      	adds	r3, #1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <DoSpi1Work+0x6c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbf0      	blt.n	8001200 <DoSpi1Work+0x38>
      printf("\r\n");
 800121e:	4808      	ldr	r0, [pc, #32]	@ (8001240 <DoSpi1Work+0x78>)
 8001220:	f003 fa1a 	bl	8004658 <puts>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000a8c 	.word	0x20000a8c
 8001230:	20000974 	.word	0x20000974
 8001234:	20000a98 	.word	0x20000a98
 8001238:	080055dc 	.word	0x080055dc
 800123c:	080055f4 	.word	0x080055f4
 8001240:	080055fc 	.word	0x080055fc

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a14      	ldr	r2, [pc, #80]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <HAL_MspInit+0x5c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_MspInit+0x60>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <HAL_MspInit+0x60>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000

080012a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a29      	ldr	r2, [pc, #164]	@ (8001368 <HAL_CAN_MspInit+0xc0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d14b      	bne.n	8001360 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012c8:	4b28      	ldr	r3, [pc, #160]	@ (800136c <HAL_CAN_MspInit+0xc4>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	4a27      	ldr	r2, [pc, #156]	@ (800136c <HAL_CAN_MspInit+0xc4>)
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012d2:	61d3      	str	r3, [r2, #28]
 80012d4:	4b25      	ldr	r3, [pc, #148]	@ (800136c <HAL_CAN_MspInit+0xc4>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b22      	ldr	r3, [pc, #136]	@ (800136c <HAL_CAN_MspInit+0xc4>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a21      	ldr	r2, [pc, #132]	@ (800136c <HAL_CAN_MspInit+0xc4>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <HAL_CAN_MspInit+0xc4>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4818      	ldr	r0, [pc, #96]	@ (8001370 <HAL_CAN_MspInit+0xc8>)
 800130e:	f001 f943 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001312:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4812      	ldr	r0, [pc, #72]	@ (8001370 <HAL_CAN_MspInit+0xc8>)
 8001328:	f001 f936 	bl	8002598 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_CAN_MspInit+0xcc>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <HAL_CAN_MspInit+0xcc>)
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2014      	movs	r0, #20
 8001356:	f001 f836 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800135a:	2014      	movs	r0, #20
 800135c:	f001 f84f 	bl	80023fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40006400 	.word	0x40006400
 800136c:	40021000 	.word	0x40021000
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <HAL_SPI_MspInit+0x88>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d12f      	bne.n	80013f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 800139e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013c8:	23a0      	movs	r3, #160	@ 0xa0
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	@ (8001408 <HAL_SPI_MspInit+0x90>)
 80013dc:	f001 f8dc 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e0:	2340      	movs	r3, #64	@ 0x40
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <HAL_SPI_MspInit+0x90>)
 80013f4:	f001 f8d0 	bl	8002598 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013000 	.word	0x40013000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a20      	ldr	r2, [pc, #128]	@ (80014a8 <HAL_UART_MspInit+0x9c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d139      	bne.n	80014a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a1e      	ldr	r2, [pc, #120]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a18      	ldr	r2, [pc, #96]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800145c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	480f      	ldr	r0, [pc, #60]	@ (80014b0 <HAL_UART_MspInit+0xa4>)
 8001472:	f001 f891 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <HAL_UART_MspInit+0xa4>)
 800148c:	f001 f884 	bl	8002598 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2025      	movs	r0, #37	@ 0x25
 8001496:	f000 ff96 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800149a:	2025      	movs	r0, #37	@ 0x25
 800149c:	f000 ffaf 	bl	80023fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010800 	.word	0x40010800

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <NMI_Handler+0x4>

080014bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <MemManage_Handler+0x4>

080014cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <UsageFault_Handler+0x4>

080014dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f940 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001512:	f000 fc5e 	bl	8001dd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200008ac 	.word	0x200008ac

08001520 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <USART1_IRQHandler+0x10>)
 8001526:	f002 f9fb 	bl	8003920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000092c 	.word	0x2000092c

08001534 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e00a      	b.n	800155c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001546:	f3af 8000 	nop.w
 800154a:	4601      	mov	r1, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	b2ca      	uxtb	r2, r1
 8001554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbf0      	blt.n	8001546 <_read+0x12>
  }

  return len;
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e009      	b.n	8001594 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fe07 	bl	800019c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf1      	blt.n	8001580 <_write+0x12>
  }
  return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_close>:

int _close(int file)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015cc:	605a      	str	r2, [r3, #4]
  return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <_isatty>:

int _isatty(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
	...

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f003 f93c 	bl	80048b4 <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20005000 	.word	0x20005000
 8001668:	00000400 	.word	0x00000400
 800166c:	20000a9c 	.word	0x20000a9c
 8001670:	20000bf0 	.word	0x20000bf0

08001674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <InitWork>:
#include "spi1.h"
#include "pn532.h"
#include "pn532_stm32f1.h"

void InitWork()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	InitBasic();
 8001684:	f7fe fd62 	bl	800014c <InitBasic>

	//InitCanWork();
	InitSpi1Work();
 8001688:	f7ff fd6e 	bl	8001168 <InitSpi1Work>

	printf("Start\n");
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <InitWork+0x18>)
 800168e:	f002 ffe3 	bl	8004658 <puts>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	08005600 	.word	0x08005600

0800169c <DoWork>:



void DoWork()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	DoLedWork();
 80016a0:	f7fe febc 	bl	800041c <DoLedWork>
	DoButtonWork();
 80016a4:	f7fe fe50 	bl	8000348 <DoButtonWork>

	//DoCanWork();
	DoSpi1Work();
 80016a8:	f7ff fd8e 	bl	80011c8 <DoSpi1Work>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff ffe0 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016b6:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016b8:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016cc:	4c09      	ldr	r4, [pc, #36]	@ (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f003 f8f1 	bl	80048c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016de:	f7fe fea3 	bl	8000428 <main>
  bx lr
 80016e2:	4770      	bx	lr
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016ec:	08005678 	.word	0x08005678
  ldr r2, =_sbss
 80016f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016f4:	20000bf0 	.word	0x20000bf0

080016f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC1_2_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <HAL_Init+0x28>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <HAL_Init+0x28>)
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 fe4f 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fd94 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fe67 	bl	800241a <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 fe2f 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <HAL_IncTick+0x1c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_IncTick+0x20>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a03      	ldr	r2, [pc, #12]	@ (80017a8 <HAL_IncTick+0x20>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000aa0 	.word	0x20000aa0

080017ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b02      	ldr	r3, [pc, #8]	@ (80017bc <HAL_GetTick+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000aa0 	.word	0x20000aa0

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff fff0 	bl	80017ac <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_Delay+0x44>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffe0 	bl	80017ac <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008

08001808 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0ed      	b.n	80019f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fd3e 	bl	80012a8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800183c:	f7ff ffb6 	bl	80017ac <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001842:	e012      	b.n	800186a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001844:	f7ff ffb2 	bl	80017ac <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b0a      	cmp	r3, #10
 8001850:	d90b      	bls.n	800186a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2205      	movs	r2, #5
 8001862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0c5      	b.n	80019f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0e5      	beq.n	8001844 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0202 	bic.w	r2, r2, #2
 8001886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001888:	f7ff ff90 	bl	80017ac <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800188e:	e012      	b.n	80018b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001890:	f7ff ff8c 	bl	80017ac <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b0a      	cmp	r3, #10
 800189c:	d90b      	bls.n	80018b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2205      	movs	r2, #5
 80018ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e09f      	b.n	80019f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e5      	bne.n	8001890 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7e1b      	ldrb	r3, [r3, #24]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d108      	bne.n	80018de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e007      	b.n	80018ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7e5b      	ldrb	r3, [r3, #25]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d108      	bne.n	8001908 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e007      	b.n	8001918 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001916:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7e9b      	ldrb	r3, [r3, #26]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d108      	bne.n	8001932 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0220 	orr.w	r2, r2, #32
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e007      	b.n	8001942 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0220 	bic.w	r2, r2, #32
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7edb      	ldrb	r3, [r3, #27]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d108      	bne.n	800195c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0210 	bic.w	r2, r2, #16
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e007      	b.n	800196c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0210 	orr.w	r2, r2, #16
 800196a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7f1b      	ldrb	r3, [r3, #28]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d108      	bne.n	8001986 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0208 	orr.w	r2, r2, #8
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e007      	b.n	8001996 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0208 	bic.w	r2, r2, #8
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7f5b      	ldrb	r3, [r3, #29]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0204 	orr.w	r2, r2, #4
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e007      	b.n	80019c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0204 	bic.w	r2, r2, #4
 80019be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	ea42 0103 	orr.w	r1, r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	1e5a      	subs	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b087      	sub	sp, #28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d003      	beq.n	8001a24 <HAL_CAN_ConfigFilter+0x26>
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	f040 80aa 	bne.w	8001b78 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d123      	bne.n	8001aa6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	401a      	ands	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3248      	adds	r2, #72	@ 0x48
 8001a86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	3348      	adds	r3, #72	@ 0x48
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d122      	bne.n	8001af4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ace:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3248      	adds	r2, #72	@ 0x48
 8001ad4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ae8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aea:	6979      	ldr	r1, [r7, #20]
 8001aec:	3348      	adds	r3, #72	@ 0x48
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b0e:	e007      	b.n	8001b20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b3a:	e007      	b.n	8001b4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b6a:	f023 0201 	bic.w	r2, r3, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e006      	b.n	8001b86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d003      	beq.n	8001bb4 <HAL_CAN_GetRxMessage+0x24>
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	f040 8103 	bne.w	8001dba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d116      	bne.n	8001bf6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0f7      	b.n	8001dc8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d107      	bne.n	8001bf6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0e8      	b.n	8001dc8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	331b      	adds	r3, #27
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	4413      	add	r3, r2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0204 	and.w	r2, r3, #4
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10c      	bne.n	8001c2e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	331b      	adds	r3, #27
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0d5b      	lsrs	r3, r3, #21
 8001c24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e00b      	b.n	8001c46 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	331b      	adds	r3, #27
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4413      	add	r3, r2
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	331b      	adds	r3, #27
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0202 	and.w	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	331b      	adds	r3, #27
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	4413      	add	r3, r2
 8001c68:	3304      	adds	r3, #4
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2208      	movs	r2, #8
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	e00b      	b.n	8001c94 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	331b      	adds	r3, #27
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 020f 	and.w	r2, r3, #15
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	331b      	adds	r3, #27
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	331b      	adds	r3, #27
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0a1a      	lsrs	r2, r3, #8
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0c1a      	lsrs	r2, r3, #16
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	3302      	adds	r3, #2
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e1a      	lsrs	r2, r3, #24
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	3303      	adds	r3, #3
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0a1a      	lsrs	r2, r3, #8
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	3305      	adds	r3, #5
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0c1a      	lsrs	r2, r3, #16
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	3306      	adds	r3, #6
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0e1a      	lsrs	r2, r3, #24
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	3307      	adds	r3, #7
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d108      	bne.n	8001da6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	e007      	b.n	8001db6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e006      	b.n	8001dc8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
  }
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b08a      	sub	sp, #40	@ 0x28
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d07c      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d023      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f983 	bl	8002140 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e3a:	e016      	b.n	8001e6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4e:	e00c      	b.n	8001e6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e62:	e002      	b.n	8001e6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f986 	bl	8002176 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d024      	beq.n	8001ebe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f962 	bl	8002152 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e8e:	e016      	b.n	8001ebe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea2:	e00c      	b.n	8001ebe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d004      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb6:	e002      	b.n	8001ebe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f965 	bl	8002188 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d024      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ed0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f941 	bl	8002164 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ee2:	e016      	b.n	8001f12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d004      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef6:	e00c      	b.n	8001f12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0a:	e002      	b.n	8001f12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f944 	bl	800219a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00c      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2210      	movs	r2, #16
 8001f34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2208      	movs	r2, #8
 8001f50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f92a 	bl	80021ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe f9ef 	bl	8000354 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00c      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2210      	movs	r2, #16
 8001f98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f90a 	bl	80021d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8f2 	bl	80021be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8f3 	bl	80021e2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2208      	movs	r2, #8
 8002016:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8eb 	bl	80021f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d07b      	beq.n	8002120 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d072      	beq.n	8002118 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800208c:	2b00      	cmp	r3, #0
 800208e:	d043      	beq.n	8002118 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d03e      	beq.n	8002118 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020a0:	2b60      	cmp	r3, #96	@ 0x60
 80020a2:	d02b      	beq.n	80020fc <HAL_CAN_IRQHandler+0x32a>
 80020a4:	2b60      	cmp	r3, #96	@ 0x60
 80020a6:	d82e      	bhi.n	8002106 <HAL_CAN_IRQHandler+0x334>
 80020a8:	2b50      	cmp	r3, #80	@ 0x50
 80020aa:	d022      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x320>
 80020ac:	2b50      	cmp	r3, #80	@ 0x50
 80020ae:	d82a      	bhi.n	8002106 <HAL_CAN_IRQHandler+0x334>
 80020b0:	2b40      	cmp	r3, #64	@ 0x40
 80020b2:	d019      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x316>
 80020b4:	2b40      	cmp	r3, #64	@ 0x40
 80020b6:	d826      	bhi.n	8002106 <HAL_CAN_IRQHandler+0x334>
 80020b8:	2b30      	cmp	r3, #48	@ 0x30
 80020ba:	d010      	beq.n	80020de <HAL_CAN_IRQHandler+0x30c>
 80020bc:	2b30      	cmp	r3, #48	@ 0x30
 80020be:	d822      	bhi.n	8002106 <HAL_CAN_IRQHandler+0x334>
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d002      	beq.n	80020ca <HAL_CAN_IRQHandler+0x2f8>
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d005      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020c8:	e01d      	b.n	8002106 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020d2:	e019      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020dc:	e014      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f043 0320 	orr.w	r3, r3, #32
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020e6:	e00f      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020f0:	e00a      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020fa:	e005      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002104:	e000      	b.n	8002108 <HAL_CAN_IRQHandler+0x336>
            break;
 8002106:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002116:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2204      	movs	r2, #4
 800211e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f867 	bl	8002206 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	@ 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4906      	ldr	r1, [pc, #24]	@ (80022b0 <__NVIC_EnableIRQ+0x34>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	@ (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	@ (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	@ 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff90 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff2d 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff42 	bl	8002260 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff90 	bl	8002308 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5f 	bl	80022b4 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff35 	bl	800227c <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d008      	beq.n	800245c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e020      	b.n	800249e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 020e 	bic.w	r2, r2, #14
 800246a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d005      	beq.n	80024cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2204      	movs	r2, #4
 80024c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e051      	b.n	8002570 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 020e 	bic.w	r2, r2, #14
 80024da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a22      	ldr	r2, [pc, #136]	@ (800257c <HAL_DMA_Abort_IT+0xd4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d029      	beq.n	800254a <HAL_DMA_Abort_IT+0xa2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a21      	ldr	r2, [pc, #132]	@ (8002580 <HAL_DMA_Abort_IT+0xd8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <HAL_DMA_Abort_IT+0x9e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	@ (8002584 <HAL_DMA_Abort_IT+0xdc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01a      	beq.n	8002540 <HAL_DMA_Abort_IT+0x98>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_DMA_Abort_IT+0xe0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d012      	beq.n	800253a <HAL_DMA_Abort_IT+0x92>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1c      	ldr	r2, [pc, #112]	@ (800258c <HAL_DMA_Abort_IT+0xe4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00a      	beq.n	8002534 <HAL_DMA_Abort_IT+0x8c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_DMA_Abort_IT+0xe8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d102      	bne.n	800252e <HAL_DMA_Abort_IT+0x86>
 8002528:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800252c:	e00e      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 800252e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002532:	e00b      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 8002534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002538:	e008      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 800253a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800253e:	e005      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 8002540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002544:	e002      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 8002546:	2310      	movs	r3, #16
 8002548:	e000      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 800254a:	2301      	movs	r3, #1
 800254c:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <HAL_DMA_Abort_IT+0xec>)
 800254e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
    } 
  }
  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40020008 	.word	0x40020008
 8002580:	4002001c 	.word	0x4002001c
 8002584:	40020030 	.word	0x40020030
 8002588:	40020044 	.word	0x40020044
 800258c:	40020058 	.word	0x40020058
 8002590:	4002006c 	.word	0x4002006c
 8002594:	40020000 	.word	0x40020000

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b08b      	sub	sp, #44	@ 0x2c
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	e169      	b.n	8002880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025ac:	2201      	movs	r2, #1
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 8158 	bne.w	800287a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002838 <HAL_GPIO_Init+0x2a0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d05e      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025d4:	4a98      	ldr	r2, [pc, #608]	@ (8002838 <HAL_GPIO_Init+0x2a0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d875      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025da:	4a98      	ldr	r2, [pc, #608]	@ (800283c <HAL_GPIO_Init+0x2a4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d058      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025e0:	4a96      	ldr	r2, [pc, #600]	@ (800283c <HAL_GPIO_Init+0x2a4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d86f      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025e6:	4a96      	ldr	r2, [pc, #600]	@ (8002840 <HAL_GPIO_Init+0x2a8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d052      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025ec:	4a94      	ldr	r2, [pc, #592]	@ (8002840 <HAL_GPIO_Init+0x2a8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d869      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025f2:	4a94      	ldr	r2, [pc, #592]	@ (8002844 <HAL_GPIO_Init+0x2ac>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04c      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025f8:	4a92      	ldr	r2, [pc, #584]	@ (8002844 <HAL_GPIO_Init+0x2ac>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d863      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025fe:	4a92      	ldr	r2, [pc, #584]	@ (8002848 <HAL_GPIO_Init+0x2b0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d046      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 8002604:	4a90      	ldr	r2, [pc, #576]	@ (8002848 <HAL_GPIO_Init+0x2b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d85d      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 800260a:	2b12      	cmp	r3, #18
 800260c:	d82a      	bhi.n	8002664 <HAL_GPIO_Init+0xcc>
 800260e:	2b12      	cmp	r3, #18
 8002610:	d859      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 8002612:	a201      	add	r2, pc, #4	@ (adr r2, 8002618 <HAL_GPIO_Init+0x80>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002693 	.word	0x08002693
 800261c:	0800266d 	.word	0x0800266d
 8002620:	0800267f 	.word	0x0800267f
 8002624:	080026c1 	.word	0x080026c1
 8002628:	080026c7 	.word	0x080026c7
 800262c:	080026c7 	.word	0x080026c7
 8002630:	080026c7 	.word	0x080026c7
 8002634:	080026c7 	.word	0x080026c7
 8002638:	080026c7 	.word	0x080026c7
 800263c:	080026c7 	.word	0x080026c7
 8002640:	080026c7 	.word	0x080026c7
 8002644:	080026c7 	.word	0x080026c7
 8002648:	080026c7 	.word	0x080026c7
 800264c:	080026c7 	.word	0x080026c7
 8002650:	080026c7 	.word	0x080026c7
 8002654:	080026c7 	.word	0x080026c7
 8002658:	080026c7 	.word	0x080026c7
 800265c:	08002675 	.word	0x08002675
 8002660:	08002689 	.word	0x08002689
 8002664:	4a79      	ldr	r2, [pc, #484]	@ (800284c <HAL_GPIO_Init+0x2b4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800266a:	e02c      	b.n	80026c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	623b      	str	r3, [r7, #32]
          break;
 8002672:	e029      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	3304      	adds	r3, #4
 800267a:	623b      	str	r3, [r7, #32]
          break;
 800267c:	e024      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	3308      	adds	r3, #8
 8002684:	623b      	str	r3, [r7, #32]
          break;
 8002686:	e01f      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	330c      	adds	r3, #12
 800268e:	623b      	str	r3, [r7, #32]
          break;
 8002690:	e01a      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800269a:	2304      	movs	r3, #4
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e013      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	611a      	str	r2, [r3, #16]
          break;
 80026b2:	e009      	b.n	80026c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b4:	2308      	movs	r3, #8
 80026b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	615a      	str	r2, [r3, #20]
          break;
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          break;
 80026c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2bff      	cmp	r3, #255	@ 0xff
 80026cc:	d801      	bhi.n	80026d2 <HAL_GPIO_Init+0x13a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_Init+0x13e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2bff      	cmp	r3, #255	@ 0xff
 80026dc:	d802      	bhi.n	80026e4 <HAL_GPIO_Init+0x14c>
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_Init+0x152>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	3b08      	subs	r3, #8
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	210f      	movs	r1, #15
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80b1 	beq.w	800287a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002718:	4b4d      	ldr	r3, [pc, #308]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a4c      	ldr	r2, [pc, #304]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002730:	4a48      	ldr	r2, [pc, #288]	@ (8002854 <HAL_GPIO_Init+0x2bc>)
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a40      	ldr	r2, [pc, #256]	@ (8002858 <HAL_GPIO_Init+0x2c0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <HAL_GPIO_Init+0x1ec>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3f      	ldr	r2, [pc, #252]	@ (800285c <HAL_GPIO_Init+0x2c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00d      	beq.n	8002780 <HAL_GPIO_Init+0x1e8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3e      	ldr	r2, [pc, #248]	@ (8002860 <HAL_GPIO_Init+0x2c8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <HAL_GPIO_Init+0x1e4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3d      	ldr	r2, [pc, #244]	@ (8002864 <HAL_GPIO_Init+0x2cc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_GPIO_Init+0x1e0>
 8002774:	2303      	movs	r3, #3
 8002776:	e006      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002778:	2304      	movs	r3, #4
 800277a:	e004      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 800277c:	2302      	movs	r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002784:	2300      	movs	r3, #0
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4093      	lsls	r3, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002796:	492f      	ldr	r1, [pc, #188]	@ (8002854 <HAL_GPIO_Init+0x2bc>)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	492c      	ldr	r1, [pc, #176]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027be:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4928      	ldr	r1, [pc, #160]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027d8:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4922      	ldr	r1, [pc, #136]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	491e      	ldr	r1, [pc, #120]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002800:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4918      	ldr	r1, [pc, #96]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	43db      	mvns	r3, r3
 8002816:	4914      	ldr	r1, [pc, #80]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002818:	4013      	ands	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d021      	beq.n	800286c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	490e      	ldr	r1, [pc, #56]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e021      	b.n	800287a <HAL_GPIO_Init+0x2e2>
 8002836:	bf00      	nop
 8002838:	10320000 	.word	0x10320000
 800283c:	10310000 	.word	0x10310000
 8002840:	10220000 	.word	0x10220000
 8002844:	10210000 	.word	0x10210000
 8002848:	10120000 	.word	0x10120000
 800284c:	10110000 	.word	0x10110000
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	40010800 	.word	0x40010800
 800285c:	40010c00 	.word	0x40010c00
 8002860:	40011000 	.word	0x40011000
 8002864:	40011400 	.word	0x40011400
 8002868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_GPIO_Init+0x304>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	43db      	mvns	r3, r3
 8002874:	4909      	ldr	r1, [pc, #36]	@ (800289c <HAL_GPIO_Init+0x304>)
 8002876:	4013      	ands	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	3301      	adds	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	f47f ae8e 	bne.w	80025ac <HAL_GPIO_Init+0x14>
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	372c      	adds	r7, #44	@ 0x2c
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	807b      	strh	r3, [r7, #2]
 80028da:	4613      	mov	r3, r2
 80028dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028de:	787b      	ldrb	r3, [r7, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ea:	e003      	b.n	80028f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	041a      	lsls	r2, r3, #16
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002910:	887a      	ldrh	r2, [r7, #2]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	041a      	lsls	r2, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43d9      	mvns	r1, r3
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	400b      	ands	r3, r1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e272      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8087 	beq.w	8002a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002950:	4b92      	ldr	r3, [pc, #584]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b04      	cmp	r3, #4
 800295a:	d00c      	beq.n	8002976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800295c:	4b8f      	ldr	r3, [pc, #572]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	d112      	bne.n	800298e <HAL_RCC_OscConfig+0x5e>
 8002968:	4b8c      	ldr	r3, [pc, #560]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002974:	d10b      	bne.n	800298e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002976:	4b89      	ldr	r3, [pc, #548]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d06c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x12c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d168      	bne.n	8002a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e24c      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x76>
 8002998:	4b80      	ldr	r3, [pc, #512]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e02e      	b.n	8002a04 <HAL_RCC_OscConfig+0xd4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x98>
 80029ae:	4b7b      	ldr	r3, [pc, #492]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7a      	ldr	r2, [pc, #488]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b78      	ldr	r3, [pc, #480]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a77      	ldr	r2, [pc, #476]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xd4>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0xbc>
 80029d2:	4b72      	ldr	r3, [pc, #456]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a71      	ldr	r2, [pc, #452]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b6f      	ldr	r3, [pc, #444]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6e      	ldr	r2, [pc, #440]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xd4>
 80029ec:	4b6b      	ldr	r3, [pc, #428]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b68      	ldr	r3, [pc, #416]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a67      	ldr	r2, [pc, #412]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fece 	bl	80017ac <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe feca 	bl	80017ac <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e200      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b5d      	ldr	r3, [pc, #372]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe4>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe feba 	bl	80017ac <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe feb6 	bl	80017ac <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1ec      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	4b53      	ldr	r3, [pc, #332]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x10c>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d063      	beq.n	8002b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a76:	4b49      	ldr	r3, [pc, #292]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d11c      	bne.n	8002abc <HAL_RCC_OscConfig+0x18c>
 8002a82:	4b46      	ldr	r3, [pc, #280]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d116      	bne.n	8002abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	4b43      	ldr	r3, [pc, #268]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x176>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e1c0      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4939      	ldr	r1, [pc, #228]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	e03a      	b.n	8002b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac4:	4b36      	ldr	r3, [pc, #216]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe fe6f 	bl	80017ac <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad2:	f7fe fe6b 	bl	80017ac <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e1a1      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4927      	ldr	r1, [pc, #156]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
 8002b04:	e015      	b.n	8002b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b06:	4b26      	ldr	r3, [pc, #152]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fe4e 	bl	80017ac <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b14:	f7fe fe4a 	bl	80017ac <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e180      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	4b1d      	ldr	r3, [pc, #116]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03a      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d019      	beq.n	8002b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b46:	4b17      	ldr	r3, [pc, #92]	@ (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fe2e 	bl	80017ac <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe fe2a 	bl	80017ac <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e160      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b72:	2001      	movs	r0, #1
 8002b74:	f000 face 	bl	8003114 <RCC_Delay>
 8002b78:	e01c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7fe fe14 	bl	80017ac <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b86:	e00f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b88:	f7fe fe10 	bl	80017ac <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d908      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e146      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	42420000 	.word	0x42420000
 8002ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	4b92      	ldr	r3, [pc, #584]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e9      	bne.n	8002b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a6 	beq.w	8002d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b8b      	ldr	r3, [pc, #556]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b88      	ldr	r3, [pc, #544]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a87      	ldr	r2, [pc, #540]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	61d3      	str	r3, [r2, #28]
 8002bde:	4b85      	ldr	r3, [pc, #532]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	4b82      	ldr	r3, [pc, #520]	@ (8002df8 <HAL_RCC_OscConfig+0x4c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8002df8 <HAL_RCC_OscConfig+0x4c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8002df8 <HAL_RCC_OscConfig+0x4c8>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7fe fdd1 	bl	80017ac <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7fe fdcd 	bl	80017ac <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b64      	cmp	r3, #100	@ 0x64
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e103      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	4b75      	ldr	r3, [pc, #468]	@ (8002df8 <HAL_RCC_OscConfig+0x4c8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x312>
 8002c34:	4b6f      	ldr	r3, [pc, #444]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4a6e      	ldr	r2, [pc, #440]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6213      	str	r3, [r2, #32]
 8002c40:	e02d      	b.n	8002c9e <HAL_RCC_OscConfig+0x36e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x334>
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4a69      	ldr	r2, [pc, #420]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6213      	str	r3, [r2, #32]
 8002c56:	4b67      	ldr	r3, [pc, #412]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4a66      	ldr	r2, [pc, #408]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	f023 0304 	bic.w	r3, r3, #4
 8002c60:	6213      	str	r3, [r2, #32]
 8002c62:	e01c      	b.n	8002c9e <HAL_RCC_OscConfig+0x36e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x356>
 8002c6c:	4b61      	ldr	r3, [pc, #388]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a60      	ldr	r2, [pc, #384]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	4b5e      	ldr	r3, [pc, #376]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a5d      	ldr	r2, [pc, #372]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6213      	str	r3, [r2, #32]
 8002c84:	e00b      	b.n	8002c9e <HAL_RCC_OscConfig+0x36e>
 8002c86:	4b5b      	ldr	r3, [pc, #364]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a5a      	ldr	r2, [pc, #360]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	4b58      	ldr	r3, [pc, #352]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a57      	ldr	r2, [pc, #348]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fd81 	bl	80017ac <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe fd7d 	bl	80017ac <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0b1      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ee      	beq.n	8002cae <HAL_RCC_OscConfig+0x37e>
 8002cd0:	e014      	b.n	8002cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fd6b 	bl	80017ac <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe fd67 	bl	80017ac <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e09b      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	4b40      	ldr	r3, [pc, #256]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ee      	bne.n	8002cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d02:	4b3c      	ldr	r3, [pc, #240]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4a3b      	ldr	r2, [pc, #236]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8087 	beq.w	8002e26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d18:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d061      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d146      	bne.n	8002dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b33      	ldr	r3, [pc, #204]	@ (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fd3b 	bl	80017ac <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fe fd37 	bl	80017ac <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e06d      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4c:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d108      	bne.n	8002d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d62:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4921      	ldr	r1, [pc, #132]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d74:	4b1f      	ldr	r3, [pc, #124]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a19      	ldr	r1, [r3, #32]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	430b      	orrs	r3, r1
 8002d86:	491b      	ldr	r1, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fd0b 	bl	80017ac <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fd07 	bl	80017ac <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e03d      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dac:	4b11      	ldr	r3, [pc, #68]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x46a>
 8002db8:	e035      	b.n	8002e26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b10      	ldr	r3, [pc, #64]	@ (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fcf4 	bl	80017ac <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fcf0 	bl	80017ac <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e026      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x498>
 8002de6:	e01e      	b.n	8002e26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e019      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_OscConfig+0x500>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000

08002e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0d0      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d910      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b67      	ldr	r3, [pc, #412]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 0207 	bic.w	r2, r3, #7
 8002e5e:	4965      	ldr	r1, [pc, #404]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b63      	ldr	r3, [pc, #396]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0b8      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e90:	4b59      	ldr	r3, [pc, #356]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a58      	ldr	r2, [pc, #352]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea8:	4b53      	ldr	r3, [pc, #332]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a52      	ldr	r2, [pc, #328]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002eb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b50      	ldr	r3, [pc, #320]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	494d      	ldr	r1, [pc, #308]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d040      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d115      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e07f      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b41      	ldr	r3, [pc, #260]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e073      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06b      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b39      	ldr	r3, [pc, #228]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4936      	ldr	r1, [pc, #216]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f24:	f7fe fc42 	bl	80017ac <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fe fc3e 	bl	80017ac <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e053      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b27      	ldr	r3, [pc, #156]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d210      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b24      	ldr	r3, [pc, #144]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	4922      	ldr	r1, [pc, #136]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e032      	b.n	8002fea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4916      	ldr	r1, [pc, #88]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fae:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	490e      	ldr	r1, [pc, #56]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fc2:	f000 f821 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	490a      	ldr	r1, [pc, #40]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	5ccb      	ldrb	r3, [r1, r3]
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a09      	ldr	r2, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x1cc>)
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fde:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <HAL_RCC_ClockConfig+0x1d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fba0 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08005610 	.word	0x08005610
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003022:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <HAL_RCC_GetSysClockFreq+0x94>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d002      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x30>
 8003032:	2b08      	cmp	r3, #8
 8003034:	d003      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x36>
 8003036:	e027      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003038:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800303a:	613b      	str	r3, [r7, #16]
      break;
 800303c:	e027      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003048:	5cd3      	ldrb	r3, [r2, r3]
 800304a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003056:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_RCC_GetSysClockFreq+0x94>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	0c5b      	lsrs	r3, r3, #17
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	4a11      	ldr	r2, [pc, #68]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a0d      	ldr	r2, [pc, #52]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800306a:	fb03 f202 	mul.w	r2, r3, r2
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e004      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0c      	ldr	r2, [pc, #48]	@ (80030ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	613b      	str	r3, [r7, #16]
      break;
 8003086:	e002      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800308a:	613b      	str	r3, [r7, #16]
      break;
 800308c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308e:	693b      	ldr	r3, [r7, #16]
}
 8003090:	4618      	mov	r0, r3
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	007a1200 	.word	0x007a1200
 80030a4:	08005628 	.word	0x08005628
 80030a8:	08005638 	.word	0x08005638
 80030ac:	003d0900 	.word	0x003d0900

080030b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b4:	4b02      	ldr	r3, [pc, #8]	@ (80030c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr
 80030c0:	20000000 	.word	0x20000000

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c8:	f7ff fff2 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	@ (80030e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	08005620 	.word	0x08005620

080030ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	0adb      	lsrs	r3, r3, #11
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	@ (8003110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	08005620 	.word	0x08005620

08003114 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800311c:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <RCC_Delay+0x34>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <RCC_Delay+0x38>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0a5b      	lsrs	r3, r3, #9
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003130:	bf00      	nop
  }
  while (Delay --);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1e5a      	subs	r2, r3, #1
 8003136:	60fa      	str	r2, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f9      	bne.n	8003130 <RCC_Delay+0x1c>
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	20000000 	.word	0x20000000
 800314c:	10624dd3 	.word	0x10624dd3

08003150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e076      	b.n	8003250 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003166:	2b00      	cmp	r3, #0
 8003168:	d108      	bne.n	800317c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003172:	d009      	beq.n	8003188 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	61da      	str	r2, [r3, #28]
 800317a:	e005      	b.n	8003188 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fe f8e8 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320c:	ea42 0103 	orr.w	r1, r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	0c1a      	lsrs	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f002 0204 	and.w	r2, r2, #4
 800322e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003266:	2301      	movs	r3, #1
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800326a:	f7fe fa9f 	bl	80017ac <HAL_GetTick>
 800326e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003276:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d00c      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0x4a>
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800328e:	d106      	bne.n	800329e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <HAL_SPI_TransmitReceive+0x46>
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	2b04      	cmp	r3, #4
 800329c:	d001      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
 80032a0:	e17f      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x5c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x5c>
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e174      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x6e>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e16d      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x34a>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2205      	movs	r2, #5
 80032de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	887a      	ldrh	r2, [r7, #2]
 80032f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	887a      	ldrh	r2, [r7, #2]
 800330a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003322:	2b40      	cmp	r3, #64	@ 0x40
 8003324:	d007      	beq.n	8003336 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800333e:	d17e      	bne.n	800343e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_SPI_TransmitReceive+0xf6>
 8003348:	8afb      	ldrh	r3, [r7, #22]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d16c      	bne.n	8003428 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	881a      	ldrh	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	1c9a      	adds	r2, r3, #2
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003372:	e059      	b.n	8003428 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d11b      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x162>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d016      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x162>
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	2b01      	cmp	r3, #1
 8003390:	d113      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	1c9a      	adds	r2, r3, #2
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d119      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x1a4>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d014      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	b292      	uxth	r2, r2
 80033de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033f8:	2301      	movs	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033fc:	f7fe f9d6 	bl	80017ac <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003408:	429a      	cmp	r2, r3
 800340a:	d80d      	bhi.n	8003428 <HAL_SPI_TransmitReceive+0x1d0>
 800340c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d009      	beq.n	8003428 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0bc      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1a0      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x11c>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d19b      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x11c>
 800343c:	e082      	b.n	8003544 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_SPI_TransmitReceive+0x1f4>
 8003446:	8afb      	ldrh	r3, [r7, #22]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d171      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	7812      	ldrb	r2, [r2, #0]
 8003458:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003472:	e05d      	b.n	8003530 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d11c      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x264>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d017      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x264>
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	2b01      	cmp	r3, #1
 8003490:	d114      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d119      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x2a6>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d014      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034fa:	2301      	movs	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034fe:	f7fe f955 	bl	80017ac <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800350a:	429a      	cmp	r2, r3
 800350c:	d803      	bhi.n	8003516 <HAL_SPI_TransmitReceive+0x2be>
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d102      	bne.n	800351c <HAL_SPI_TransmitReceive+0x2c4>
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e038      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d19c      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x21c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d197      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f8b7 	bl	80036bc <SPI_EndRxTxTransaction>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e01d      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3728      	adds	r7, #40	@ 0x28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035bc:	f7fe f8f6 	bl	80017ac <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035cc:	f7fe f8ee 	bl	80017ac <HAL_GetTick>
 80035d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035d2:	4b39      	ldr	r3, [pc, #228]	@ (80036b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	015b      	lsls	r3, r3, #5
 80035d8:	0d1b      	lsrs	r3, r3, #20
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035e2:	e054      	b.n	800368e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d050      	beq.n	800368e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ec:	f7fe f8de 	bl	80017ac <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d902      	bls.n	8003602 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d13d      	bne.n	800367e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003610:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800361a:	d111      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x94>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003624:	d004      	beq.n	8003630 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362e:	d107      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800363e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003648:	d10f      	bne.n	800366a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003668:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e017      	b.n	80036ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3b01      	subs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d19b      	bne.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000

080036bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2201      	movs	r2, #1
 80036d0:	2102      	movs	r1, #2
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f7ff ff6a 	bl	80035ac <SPI_WaitFlagStateUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e2:	f043 0220 	orr.w	r2, r3, #32
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e013      	b.n	8003716 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ff57 	bl	80035ac <SPI_WaitFlagStateUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e000      	b.n	8003716 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e042      	b.n	80037b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fd fe61 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2224      	movs	r2, #36	@ 0x24
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003760:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fdb8 	bl	80042d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003776:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003786:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003796:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08a      	sub	sp, #40	@ 0x28
 80037c2:	af02      	add	r7, sp, #8
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d175      	bne.n	80038ca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_UART_Transmit+0x2c>
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06e      	b.n	80038cc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2221      	movs	r2, #33	@ 0x21
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fc:	f7fd ffd6 	bl	80017ac <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003816:	d108      	bne.n	800382a <HAL_UART_Transmit+0x6c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e003      	b.n	8003832 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003832:	e02e      	b.n	8003892 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	@ 0x80
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fb1d 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e03a      	b.n	80038cc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	3302      	adds	r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e007      	b.n	8003884 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3301      	adds	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1cb      	bne.n	8003834 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2200      	movs	r2, #0
 80038a4:	2140      	movs	r1, #64	@ 0x40
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fae9 	bl	8003e7e <UART_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e006      	b.n	80038cc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d112      	bne.n	8003914 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_UART_Receive_IT+0x26>
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e00b      	b.n	8003916 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	461a      	mov	r2, r3
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fb10 	bl	8003f30 <UART_Start_Receive_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	e000      	b.n	8003916 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b0ba      	sub	sp, #232	@ 0xe8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800395e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_UART_IRQHandler+0x66>
 8003972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fbec 	bl	800415c <UART_Receive_IT>
      return;
 8003984:	e25b      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80de 	beq.w	8003b4c <HAL_UART_IRQHandler+0x22c>
 8003990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800399c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80d1 	beq.w	8003b4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_UART_IRQHandler+0xae>
 80039b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_UART_IRQHandler+0xd2>
 80039da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	f043 0202 	orr.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_UART_IRQHandler+0xf6>
 80039fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <HAL_UART_IRQHandler+0x126>
 8003a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d105      	bne.n	8003a3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	f043 0208 	orr.w	r2, r3, #8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 81f2 	beq.w	8003e34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_UART_IRQHandler+0x14e>
 8003a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fb77 	bl	800415c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <HAL_UART_IRQHandler+0x17a>
 8003a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04f      	beq.n	8003b3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa81 	bl	8003fa2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d041      	beq.n	8003b32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3314      	adds	r3, #20
 8003ab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ada:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ade:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1d9      	bne.n	8003aae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d013      	beq.n	8003b2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b06:	4a7e      	ldr	r2, [pc, #504]	@ (8003d00 <HAL_UART_IRQHandler+0x3e0>)
 8003b08:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fcca 	bl	80024a8 <HAL_DMA_Abort_IT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b24:	4610      	mov	r0, r2
 8003b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e00e      	b.n	8003b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f993 	bl	8003e56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e00a      	b.n	8003b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f98f 	bl	8003e56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e006      	b.n	8003b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f98b 	bl	8003e56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b46:	e175      	b.n	8003e34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	bf00      	nop
    return;
 8003b4a:	e173      	b.n	8003e34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f040 814f 	bne.w	8003df4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8148 	beq.w	8003df4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8141 	beq.w	8003df4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80b6 	beq.w	8003d04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8145 	beq.w	8003e38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	f080 813e 	bcs.w	8003e38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bc2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	f000 8088 	beq.w	8003ce0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bfc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c08:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1d9      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c40:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e1      	bne.n	8003c1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3314      	adds	r3, #20
 8003c78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c7c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e3      	bne.n	8003c58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb0:	f023 0310 	bic.w	r3, r3, #16
 8003cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cc2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cc4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e3      	bne.n	8003c9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fba9 	bl	8002432 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8b6 	bl	8003e68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cfc:	e09c      	b.n	8003e38 <HAL_UART_IRQHandler+0x518>
 8003cfe:	bf00      	nop
 8003d00:	08004067 	.word	0x08004067
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 808e 	beq.w	8003e3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8089 	beq.w	8003e3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e3      	bne.n	8003d2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	623b      	str	r3, [r7, #32]
   return(result);
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d86:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e3      	bne.n	8003d62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003dcc:	61fa      	str	r2, [r7, #28]
 8003dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	69b9      	ldr	r1, [r7, #24]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e3      	bne.n	8003da8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f83b 	bl	8003e68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003df2:	e023      	b.n	8003e3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <HAL_UART_IRQHandler+0x4f4>
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f93e 	bl	800408e <UART_Transmit_IT>
    return;
 8003e12:	e014      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <HAL_UART_IRQHandler+0x51e>
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f97d 	bl	800412c <UART_EndTransmit_IT>
    return;
 8003e32:	e004      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e34:	bf00      	nop
 8003e36:	e002      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e38:	bf00      	nop
 8003e3a:	e000      	b.n	8003e3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e3c:	bf00      	nop
  }
}
 8003e3e:	37e8      	adds	r7, #232	@ 0xe8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	e03b      	b.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d037      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fd fc88 	bl	80017ac <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	6a3a      	ldr	r2, [r7, #32]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e03a      	b.n	8003f28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b80      	cmp	r3, #128	@ 0x80
 8003ec4:	d020      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d01d      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d116      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f856 	bl	8003fa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2208      	movs	r2, #8
 8003efa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e00f      	b.n	8003f28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d0b4      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2222      	movs	r2, #34	@ 0x22
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0220 	orr.w	r2, r2, #32
 8003f94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b095      	sub	sp, #84	@ 0x54
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fca:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e5      	bne.n	8003fde <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004016:	2b01      	cmp	r3, #1
 8004018:	d119      	bne.n	800404e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	60bb      	str	r3, [r7, #8]
   return(result);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	647b      	str	r3, [r7, #68]	@ 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800403a:	61ba      	str	r2, [r7, #24]
 800403c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6979      	ldr	r1, [r7, #20]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	613b      	str	r3, [r7, #16]
   return(result);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e5      	bne.n	800401a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800405c:	bf00      	nop
 800405e:	3754      	adds	r7, #84	@ 0x54
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff fee8 	bl	8003e56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b21      	cmp	r3, #33	@ 0x21
 80040a0:	d13e      	bne.n	8004120 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040aa:	d114      	bne.n	80040d6 <UART_Transmit_IT+0x48>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d110      	bne.n	80040d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	1c9a      	adds	r2, r3, #2
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]
 80040d4:	e008      	b.n	80040e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	1c59      	adds	r1, r3, #1
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6211      	str	r1, [r2, #32]
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4619      	mov	r1, r3
 80040f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10f      	bne.n	800411c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800410a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800411a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004142:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fe79 	bl	8003e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	@ 0x30
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b22      	cmp	r3, #34	@ 0x22
 800416e:	f040 80ae 	bne.w	80042ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417a:	d117      	bne.n	80041ac <UART_Receive_IT+0x50>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d113      	bne.n	80041ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419a:	b29a      	uxth	r2, r3
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	1c9a      	adds	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80041aa:	e026      	b.n	80041fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041be:	d007      	beq.n	80041d0 <UART_Receive_IT+0x74>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <UART_Receive_IT+0x82>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e008      	b.n	80041f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4619      	mov	r1, r3
 8004208:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800420a:	2b00      	cmp	r3, #0
 800420c:	d15d      	bne.n	80042ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0220 	bic.w	r2, r2, #32
 800421c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800422c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	2b01      	cmp	r3, #1
 8004252:	d135      	bne.n	80042c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	613b      	str	r3, [r7, #16]
   return(result);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427a:	623a      	str	r2, [r7, #32]
 800427c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	69f9      	ldr	r1, [r7, #28]
 8004280:	6a3a      	ldr	r2, [r7, #32]
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	61bb      	str	r3, [r7, #24]
   return(result);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e5      	bne.n	800425a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b10      	cmp	r3, #16
 800429a:	d10a      	bne.n	80042b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fdd5 	bl	8003e68 <HAL_UARTEx_RxEventCallback>
 80042be:	e002      	b.n	80042c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fb ff7d 	bl	80001c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e002      	b.n	80042d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3730      	adds	r7, #48	@ 0x30
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004312:	f023 030c 	bic.w	r3, r3, #12
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	430b      	orrs	r3, r1
 800431e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2c      	ldr	r2, [pc, #176]	@ (80043ec <UART_SetConfig+0x114>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d103      	bne.n	8004348 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004340:	f7fe fed4 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	e002      	b.n	800434e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7fe febc 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 800434c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	4a22      	ldr	r2, [pc, #136]	@ (80043f0 <UART_SetConfig+0x118>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	0119      	lsls	r1, r3, #4
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009a      	lsls	r2, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	fbb2 f2f3 	udiv	r2, r2, r3
 8004384:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <UART_SetConfig+0x118>)
 8004386:	fba3 0302 	umull	r0, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2064      	movs	r0, #100	@ 0x64
 800438e:	fb00 f303 	mul.w	r3, r0, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	@ 0x32
 8004398:	4a15      	ldr	r2, [pc, #84]	@ (80043f0 <UART_SetConfig+0x118>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a4:	4419      	add	r1, r3
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043bc:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <UART_SetConfig+0x118>)
 80043be:	fba3 0302 	umull	r0, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2064      	movs	r0, #100	@ 0x64
 80043c6:	fb00 f303 	mul.w	r3, r0, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	@ 0x32
 80043d0:	4a07      	ldr	r2, [pc, #28]	@ (80043f0 <UART_SetConfig+0x118>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	440a      	add	r2, r1
 80043e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40013800 	.word	0x40013800
 80043f0:	51eb851f 	.word	0x51eb851f

080043f4 <std>:
 80043f4:	2300      	movs	r3, #0
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
 80043fa:	e9c0 3300 	strd	r3, r3, [r0]
 80043fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004402:	6083      	str	r3, [r0, #8]
 8004404:	8181      	strh	r1, [r0, #12]
 8004406:	6643      	str	r3, [r0, #100]	@ 0x64
 8004408:	81c2      	strh	r2, [r0, #14]
 800440a:	6183      	str	r3, [r0, #24]
 800440c:	4619      	mov	r1, r3
 800440e:	2208      	movs	r2, #8
 8004410:	305c      	adds	r0, #92	@ 0x5c
 8004412:	f000 fa01 	bl	8004818 <memset>
 8004416:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <std+0x58>)
 8004418:	6224      	str	r4, [r4, #32]
 800441a:	6263      	str	r3, [r4, #36]	@ 0x24
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <std+0x5c>)
 800441e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004420:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <std+0x60>)
 8004422:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004424:	4b0c      	ldr	r3, [pc, #48]	@ (8004458 <std+0x64>)
 8004426:	6323      	str	r3, [r4, #48]	@ 0x30
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <std+0x68>)
 800442a:	429c      	cmp	r4, r3
 800442c:	d006      	beq.n	800443c <std+0x48>
 800442e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004432:	4294      	cmp	r4, r2
 8004434:	d002      	beq.n	800443c <std+0x48>
 8004436:	33d0      	adds	r3, #208	@ 0xd0
 8004438:	429c      	cmp	r4, r3
 800443a:	d105      	bne.n	8004448 <std+0x54>
 800443c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004444:	f000 ba60 	b.w	8004908 <__retarget_lock_init_recursive>
 8004448:	bd10      	pop	{r4, pc}
 800444a:	bf00      	nop
 800444c:	08004669 	.word	0x08004669
 8004450:	0800468b 	.word	0x0800468b
 8004454:	080046c3 	.word	0x080046c3
 8004458:	080046e7 	.word	0x080046e7
 800445c:	20000aa4 	.word	0x20000aa4

08004460 <stdio_exit_handler>:
 8004460:	4a02      	ldr	r2, [pc, #8]	@ (800446c <stdio_exit_handler+0xc>)
 8004462:	4903      	ldr	r1, [pc, #12]	@ (8004470 <stdio_exit_handler+0x10>)
 8004464:	4803      	ldr	r0, [pc, #12]	@ (8004474 <stdio_exit_handler+0x14>)
 8004466:	f000 b869 	b.w	800453c <_fwalk_sglue>
 800446a:	bf00      	nop
 800446c:	2000000c 	.word	0x2000000c
 8004470:	080051a1 	.word	0x080051a1
 8004474:	2000001c 	.word	0x2000001c

08004478 <cleanup_stdio>:
 8004478:	6841      	ldr	r1, [r0, #4]
 800447a:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <cleanup_stdio+0x34>)
 800447c:	b510      	push	{r4, lr}
 800447e:	4299      	cmp	r1, r3
 8004480:	4604      	mov	r4, r0
 8004482:	d001      	beq.n	8004488 <cleanup_stdio+0x10>
 8004484:	f000 fe8c 	bl	80051a0 <_fflush_r>
 8004488:	68a1      	ldr	r1, [r4, #8]
 800448a:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <cleanup_stdio+0x38>)
 800448c:	4299      	cmp	r1, r3
 800448e:	d002      	beq.n	8004496 <cleanup_stdio+0x1e>
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fe85 	bl	80051a0 <_fflush_r>
 8004496:	68e1      	ldr	r1, [r4, #12]
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <cleanup_stdio+0x3c>)
 800449a:	4299      	cmp	r1, r3
 800449c:	d004      	beq.n	80044a8 <cleanup_stdio+0x30>
 800449e:	4620      	mov	r0, r4
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a4:	f000 be7c 	b.w	80051a0 <_fflush_r>
 80044a8:	bd10      	pop	{r4, pc}
 80044aa:	bf00      	nop
 80044ac:	20000aa4 	.word	0x20000aa4
 80044b0:	20000b0c 	.word	0x20000b0c
 80044b4:	20000b74 	.word	0x20000b74

080044b8 <global_stdio_init.part.0>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <global_stdio_init.part.0+0x30>)
 80044bc:	4c0b      	ldr	r4, [pc, #44]	@ (80044ec <global_stdio_init.part.0+0x34>)
 80044be:	4a0c      	ldr	r2, [pc, #48]	@ (80044f0 <global_stdio_init.part.0+0x38>)
 80044c0:	4620      	mov	r0, r4
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	2104      	movs	r1, #4
 80044c6:	2200      	movs	r2, #0
 80044c8:	f7ff ff94 	bl	80043f4 <std>
 80044cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044d0:	2201      	movs	r2, #1
 80044d2:	2109      	movs	r1, #9
 80044d4:	f7ff ff8e 	bl	80043f4 <std>
 80044d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044dc:	2202      	movs	r2, #2
 80044de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044e2:	2112      	movs	r1, #18
 80044e4:	f7ff bf86 	b.w	80043f4 <std>
 80044e8:	20000bdc 	.word	0x20000bdc
 80044ec:	20000aa4 	.word	0x20000aa4
 80044f0:	08004461 	.word	0x08004461

080044f4 <__sfp_lock_acquire>:
 80044f4:	4801      	ldr	r0, [pc, #4]	@ (80044fc <__sfp_lock_acquire+0x8>)
 80044f6:	f000 ba08 	b.w	800490a <__retarget_lock_acquire_recursive>
 80044fa:	bf00      	nop
 80044fc:	20000be5 	.word	0x20000be5

08004500 <__sfp_lock_release>:
 8004500:	4801      	ldr	r0, [pc, #4]	@ (8004508 <__sfp_lock_release+0x8>)
 8004502:	f000 ba03 	b.w	800490c <__retarget_lock_release_recursive>
 8004506:	bf00      	nop
 8004508:	20000be5 	.word	0x20000be5

0800450c <__sinit>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4604      	mov	r4, r0
 8004510:	f7ff fff0 	bl	80044f4 <__sfp_lock_acquire>
 8004514:	6a23      	ldr	r3, [r4, #32]
 8004516:	b11b      	cbz	r3, 8004520 <__sinit+0x14>
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451c:	f7ff bff0 	b.w	8004500 <__sfp_lock_release>
 8004520:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <__sinit+0x28>)
 8004522:	6223      	str	r3, [r4, #32]
 8004524:	4b04      	ldr	r3, [pc, #16]	@ (8004538 <__sinit+0x2c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f5      	bne.n	8004518 <__sinit+0xc>
 800452c:	f7ff ffc4 	bl	80044b8 <global_stdio_init.part.0>
 8004530:	e7f2      	b.n	8004518 <__sinit+0xc>
 8004532:	bf00      	nop
 8004534:	08004479 	.word	0x08004479
 8004538:	20000bdc 	.word	0x20000bdc

0800453c <_fwalk_sglue>:
 800453c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004540:	4607      	mov	r7, r0
 8004542:	4688      	mov	r8, r1
 8004544:	4614      	mov	r4, r2
 8004546:	2600      	movs	r6, #0
 8004548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800454c:	f1b9 0901 	subs.w	r9, r9, #1
 8004550:	d505      	bpl.n	800455e <_fwalk_sglue+0x22>
 8004552:	6824      	ldr	r4, [r4, #0]
 8004554:	2c00      	cmp	r4, #0
 8004556:	d1f7      	bne.n	8004548 <_fwalk_sglue+0xc>
 8004558:	4630      	mov	r0, r6
 800455a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800455e:	89ab      	ldrh	r3, [r5, #12]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d907      	bls.n	8004574 <_fwalk_sglue+0x38>
 8004564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004568:	3301      	adds	r3, #1
 800456a:	d003      	beq.n	8004574 <_fwalk_sglue+0x38>
 800456c:	4629      	mov	r1, r5
 800456e:	4638      	mov	r0, r7
 8004570:	47c0      	blx	r8
 8004572:	4306      	orrs	r6, r0
 8004574:	3568      	adds	r5, #104	@ 0x68
 8004576:	e7e9      	b.n	800454c <_fwalk_sglue+0x10>

08004578 <iprintf>:
 8004578:	b40f      	push	{r0, r1, r2, r3}
 800457a:	b507      	push	{r0, r1, r2, lr}
 800457c:	4906      	ldr	r1, [pc, #24]	@ (8004598 <iprintf+0x20>)
 800457e:	ab04      	add	r3, sp, #16
 8004580:	6808      	ldr	r0, [r1, #0]
 8004582:	f853 2b04 	ldr.w	r2, [r3], #4
 8004586:	6881      	ldr	r1, [r0, #8]
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	f000 fadf 	bl	8004b4c <_vfiprintf_r>
 800458e:	b003      	add	sp, #12
 8004590:	f85d eb04 	ldr.w	lr, [sp], #4
 8004594:	b004      	add	sp, #16
 8004596:	4770      	bx	lr
 8004598:	20000018 	.word	0x20000018

0800459c <putchar>:
 800459c:	4b02      	ldr	r3, [pc, #8]	@ (80045a8 <putchar+0xc>)
 800459e:	4601      	mov	r1, r0
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	6882      	ldr	r2, [r0, #8]
 80045a4:	f000 be85 	b.w	80052b2 <_putc_r>
 80045a8:	20000018 	.word	0x20000018

080045ac <_puts_r>:
 80045ac:	6a03      	ldr	r3, [r0, #32]
 80045ae:	b570      	push	{r4, r5, r6, lr}
 80045b0:	4605      	mov	r5, r0
 80045b2:	460e      	mov	r6, r1
 80045b4:	6884      	ldr	r4, [r0, #8]
 80045b6:	b90b      	cbnz	r3, 80045bc <_puts_r+0x10>
 80045b8:	f7ff ffa8 	bl	800450c <__sinit>
 80045bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045be:	07db      	lsls	r3, r3, #31
 80045c0:	d405      	bmi.n	80045ce <_puts_r+0x22>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	0598      	lsls	r0, r3, #22
 80045c6:	d402      	bmi.n	80045ce <_puts_r+0x22>
 80045c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ca:	f000 f99e 	bl	800490a <__retarget_lock_acquire_recursive>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	0719      	lsls	r1, r3, #28
 80045d2:	d502      	bpl.n	80045da <_puts_r+0x2e>
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d135      	bne.n	8004646 <_puts_r+0x9a>
 80045da:	4621      	mov	r1, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 f8c5 	bl	800476c <__swsetup_r>
 80045e2:	b380      	cbz	r0, 8004646 <_puts_r+0x9a>
 80045e4:	f04f 35ff 	mov.w	r5, #4294967295
 80045e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045ea:	07da      	lsls	r2, r3, #31
 80045ec:	d405      	bmi.n	80045fa <_puts_r+0x4e>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	059b      	lsls	r3, r3, #22
 80045f2:	d402      	bmi.n	80045fa <_puts_r+0x4e>
 80045f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045f6:	f000 f989 	bl	800490c <__retarget_lock_release_recursive>
 80045fa:	4628      	mov	r0, r5
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da04      	bge.n	800460c <_puts_r+0x60>
 8004602:	69a2      	ldr	r2, [r4, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	dc17      	bgt.n	8004638 <_puts_r+0x8c>
 8004608:	290a      	cmp	r1, #10
 800460a:	d015      	beq.n	8004638 <_puts_r+0x8c>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	7019      	strb	r1, [r3, #0]
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800461a:	3b01      	subs	r3, #1
 800461c:	60a3      	str	r3, [r4, #8]
 800461e:	2900      	cmp	r1, #0
 8004620:	d1ed      	bne.n	80045fe <_puts_r+0x52>
 8004622:	2b00      	cmp	r3, #0
 8004624:	da11      	bge.n	800464a <_puts_r+0x9e>
 8004626:	4622      	mov	r2, r4
 8004628:	210a      	movs	r1, #10
 800462a:	4628      	mov	r0, r5
 800462c:	f000 f85f 	bl	80046ee <__swbuf_r>
 8004630:	3001      	adds	r0, #1
 8004632:	d0d7      	beq.n	80045e4 <_puts_r+0x38>
 8004634:	250a      	movs	r5, #10
 8004636:	e7d7      	b.n	80045e8 <_puts_r+0x3c>
 8004638:	4622      	mov	r2, r4
 800463a:	4628      	mov	r0, r5
 800463c:	f000 f857 	bl	80046ee <__swbuf_r>
 8004640:	3001      	adds	r0, #1
 8004642:	d1e7      	bne.n	8004614 <_puts_r+0x68>
 8004644:	e7ce      	b.n	80045e4 <_puts_r+0x38>
 8004646:	3e01      	subs	r6, #1
 8004648:	e7e4      	b.n	8004614 <_puts_r+0x68>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	6022      	str	r2, [r4, #0]
 8004650:	220a      	movs	r2, #10
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e7ee      	b.n	8004634 <_puts_r+0x88>
	...

08004658 <puts>:
 8004658:	4b02      	ldr	r3, [pc, #8]	@ (8004664 <puts+0xc>)
 800465a:	4601      	mov	r1, r0
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	f7ff bfa5 	b.w	80045ac <_puts_r>
 8004662:	bf00      	nop
 8004664:	20000018 	.word	0x20000018

08004668 <__sread>:
 8004668:	b510      	push	{r4, lr}
 800466a:	460c      	mov	r4, r1
 800466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004670:	f000 f8fc 	bl	800486c <_read_r>
 8004674:	2800      	cmp	r0, #0
 8004676:	bfab      	itete	ge
 8004678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800467a:	89a3      	ldrhlt	r3, [r4, #12]
 800467c:	181b      	addge	r3, r3, r0
 800467e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004682:	bfac      	ite	ge
 8004684:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004686:	81a3      	strhlt	r3, [r4, #12]
 8004688:	bd10      	pop	{r4, pc}

0800468a <__swrite>:
 800468a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	461f      	mov	r7, r3
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	4605      	mov	r5, r0
 8004694:	05db      	lsls	r3, r3, #23
 8004696:	460c      	mov	r4, r1
 8004698:	4616      	mov	r6, r2
 800469a:	d505      	bpl.n	80046a8 <__swrite+0x1e>
 800469c:	2302      	movs	r3, #2
 800469e:	2200      	movs	r2, #0
 80046a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a4:	f000 f8d0 	bl	8004848 <_lseek_r>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	4632      	mov	r2, r6
 80046ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	4628      	mov	r0, r5
 80046b4:	463b      	mov	r3, r7
 80046b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046be:	f000 b8e7 	b.w	8004890 <_write_r>

080046c2 <__sseek>:
 80046c2:	b510      	push	{r4, lr}
 80046c4:	460c      	mov	r4, r1
 80046c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ca:	f000 f8bd 	bl	8004848 <_lseek_r>
 80046ce:	1c43      	adds	r3, r0, #1
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	bf15      	itete	ne
 80046d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046de:	81a3      	strheq	r3, [r4, #12]
 80046e0:	bf18      	it	ne
 80046e2:	81a3      	strhne	r3, [r4, #12]
 80046e4:	bd10      	pop	{r4, pc}

080046e6 <__sclose>:
 80046e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ea:	f000 b89d 	b.w	8004828 <_close_r>

080046ee <__swbuf_r>:
 80046ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f0:	460e      	mov	r6, r1
 80046f2:	4614      	mov	r4, r2
 80046f4:	4605      	mov	r5, r0
 80046f6:	b118      	cbz	r0, 8004700 <__swbuf_r+0x12>
 80046f8:	6a03      	ldr	r3, [r0, #32]
 80046fa:	b90b      	cbnz	r3, 8004700 <__swbuf_r+0x12>
 80046fc:	f7ff ff06 	bl	800450c <__sinit>
 8004700:	69a3      	ldr	r3, [r4, #24]
 8004702:	60a3      	str	r3, [r4, #8]
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	071a      	lsls	r2, r3, #28
 8004708:	d501      	bpl.n	800470e <__swbuf_r+0x20>
 800470a:	6923      	ldr	r3, [r4, #16]
 800470c:	b943      	cbnz	r3, 8004720 <__swbuf_r+0x32>
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 f82b 	bl	800476c <__swsetup_r>
 8004716:	b118      	cbz	r0, 8004720 <__swbuf_r+0x32>
 8004718:	f04f 37ff 	mov.w	r7, #4294967295
 800471c:	4638      	mov	r0, r7
 800471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	6922      	ldr	r2, [r4, #16]
 8004724:	b2f6      	uxtb	r6, r6
 8004726:	1a98      	subs	r0, r3, r2
 8004728:	6963      	ldr	r3, [r4, #20]
 800472a:	4637      	mov	r7, r6
 800472c:	4283      	cmp	r3, r0
 800472e:	dc05      	bgt.n	800473c <__swbuf_r+0x4e>
 8004730:	4621      	mov	r1, r4
 8004732:	4628      	mov	r0, r5
 8004734:	f000 fd34 	bl	80051a0 <_fflush_r>
 8004738:	2800      	cmp	r0, #0
 800473a:	d1ed      	bne.n	8004718 <__swbuf_r+0x2a>
 800473c:	68a3      	ldr	r3, [r4, #8]
 800473e:	3b01      	subs	r3, #1
 8004740:	60a3      	str	r3, [r4, #8]
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	6022      	str	r2, [r4, #0]
 8004748:	701e      	strb	r6, [r3, #0]
 800474a:	6962      	ldr	r2, [r4, #20]
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	429a      	cmp	r2, r3
 8004750:	d004      	beq.n	800475c <__swbuf_r+0x6e>
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	07db      	lsls	r3, r3, #31
 8004756:	d5e1      	bpl.n	800471c <__swbuf_r+0x2e>
 8004758:	2e0a      	cmp	r6, #10
 800475a:	d1df      	bne.n	800471c <__swbuf_r+0x2e>
 800475c:	4621      	mov	r1, r4
 800475e:	4628      	mov	r0, r5
 8004760:	f000 fd1e 	bl	80051a0 <_fflush_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	d0d9      	beq.n	800471c <__swbuf_r+0x2e>
 8004768:	e7d6      	b.n	8004718 <__swbuf_r+0x2a>
	...

0800476c <__swsetup_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4b29      	ldr	r3, [pc, #164]	@ (8004814 <__swsetup_r+0xa8>)
 8004770:	4605      	mov	r5, r0
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	460c      	mov	r4, r1
 8004776:	b118      	cbz	r0, 8004780 <__swsetup_r+0x14>
 8004778:	6a03      	ldr	r3, [r0, #32]
 800477a:	b90b      	cbnz	r3, 8004780 <__swsetup_r+0x14>
 800477c:	f7ff fec6 	bl	800450c <__sinit>
 8004780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004784:	0719      	lsls	r1, r3, #28
 8004786:	d422      	bmi.n	80047ce <__swsetup_r+0x62>
 8004788:	06da      	lsls	r2, r3, #27
 800478a:	d407      	bmi.n	800479c <__swsetup_r+0x30>
 800478c:	2209      	movs	r2, #9
 800478e:	602a      	str	r2, [r5, #0]
 8004790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	e033      	b.n	8004804 <__swsetup_r+0x98>
 800479c:	0758      	lsls	r0, r3, #29
 800479e:	d512      	bpl.n	80047c6 <__swsetup_r+0x5a>
 80047a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047a2:	b141      	cbz	r1, 80047b6 <__swsetup_r+0x4a>
 80047a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047a8:	4299      	cmp	r1, r3
 80047aa:	d002      	beq.n	80047b2 <__swsetup_r+0x46>
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f8af 	bl	8004910 <_free_r>
 80047b2:	2300      	movs	r3, #0
 80047b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80047b6:	89a3      	ldrh	r3, [r4, #12]
 80047b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047bc:	81a3      	strh	r3, [r4, #12]
 80047be:	2300      	movs	r3, #0
 80047c0:	6063      	str	r3, [r4, #4]
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f043 0308 	orr.w	r3, r3, #8
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	b94b      	cbnz	r3, 80047e6 <__swsetup_r+0x7a>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047dc:	d003      	beq.n	80047e6 <__swsetup_r+0x7a>
 80047de:	4621      	mov	r1, r4
 80047e0:	4628      	mov	r0, r5
 80047e2:	f000 fd2a 	bl	800523a <__smakebuf_r>
 80047e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ea:	f013 0201 	ands.w	r2, r3, #1
 80047ee:	d00a      	beq.n	8004806 <__swsetup_r+0x9a>
 80047f0:	2200      	movs	r2, #0
 80047f2:	60a2      	str	r2, [r4, #8]
 80047f4:	6962      	ldr	r2, [r4, #20]
 80047f6:	4252      	negs	r2, r2
 80047f8:	61a2      	str	r2, [r4, #24]
 80047fa:	6922      	ldr	r2, [r4, #16]
 80047fc:	b942      	cbnz	r2, 8004810 <__swsetup_r+0xa4>
 80047fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004802:	d1c5      	bne.n	8004790 <__swsetup_r+0x24>
 8004804:	bd38      	pop	{r3, r4, r5, pc}
 8004806:	0799      	lsls	r1, r3, #30
 8004808:	bf58      	it	pl
 800480a:	6962      	ldrpl	r2, [r4, #20]
 800480c:	60a2      	str	r2, [r4, #8]
 800480e:	e7f4      	b.n	80047fa <__swsetup_r+0x8e>
 8004810:	2000      	movs	r0, #0
 8004812:	e7f7      	b.n	8004804 <__swsetup_r+0x98>
 8004814:	20000018 	.word	0x20000018

08004818 <memset>:
 8004818:	4603      	mov	r3, r0
 800481a:	4402      	add	r2, r0
 800481c:	4293      	cmp	r3, r2
 800481e:	d100      	bne.n	8004822 <memset+0xa>
 8004820:	4770      	bx	lr
 8004822:	f803 1b01 	strb.w	r1, [r3], #1
 8004826:	e7f9      	b.n	800481c <memset+0x4>

08004828 <_close_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	2300      	movs	r3, #0
 800482c:	4d05      	ldr	r5, [pc, #20]	@ (8004844 <_close_r+0x1c>)
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	602b      	str	r3, [r5, #0]
 8004834:	f7fc feb7 	bl	80015a6 <_close>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_close_r+0x1a>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_close_r+0x1a>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	20000be0 	.word	0x20000be0

08004848 <_lseek_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	2200      	movs	r2, #0
 8004852:	4d05      	ldr	r5, [pc, #20]	@ (8004868 <_lseek_r+0x20>)
 8004854:	602a      	str	r2, [r5, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f7fc fec9 	bl	80015ee <_lseek>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_lseek_r+0x1e>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_lseek_r+0x1e>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000be0 	.word	0x20000be0

0800486c <_read_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4604      	mov	r4, r0
 8004870:	4608      	mov	r0, r1
 8004872:	4611      	mov	r1, r2
 8004874:	2200      	movs	r2, #0
 8004876:	4d05      	ldr	r5, [pc, #20]	@ (800488c <_read_r+0x20>)
 8004878:	602a      	str	r2, [r5, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	f7fc fe5a 	bl	8001534 <_read>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d102      	bne.n	800488a <_read_r+0x1e>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	b103      	cbz	r3, 800488a <_read_r+0x1e>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	bd38      	pop	{r3, r4, r5, pc}
 800488c:	20000be0 	.word	0x20000be0

08004890 <_write_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4604      	mov	r4, r0
 8004894:	4608      	mov	r0, r1
 8004896:	4611      	mov	r1, r2
 8004898:	2200      	movs	r2, #0
 800489a:	4d05      	ldr	r5, [pc, #20]	@ (80048b0 <_write_r+0x20>)
 800489c:	602a      	str	r2, [r5, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	f7fc fe65 	bl	800156e <_write>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_write_r+0x1e>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_write_r+0x1e>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	20000be0 	.word	0x20000be0

080048b4 <__errno>:
 80048b4:	4b01      	ldr	r3, [pc, #4]	@ (80048bc <__errno+0x8>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000018 	.word	0x20000018

080048c0 <__libc_init_array>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	2600      	movs	r6, #0
 80048c4:	4d0c      	ldr	r5, [pc, #48]	@ (80048f8 <__libc_init_array+0x38>)
 80048c6:	4c0d      	ldr	r4, [pc, #52]	@ (80048fc <__libc_init_array+0x3c>)
 80048c8:	1b64      	subs	r4, r4, r5
 80048ca:	10a4      	asrs	r4, r4, #2
 80048cc:	42a6      	cmp	r6, r4
 80048ce:	d109      	bne.n	80048e4 <__libc_init_array+0x24>
 80048d0:	f000 fd64 	bl	800539c <_init>
 80048d4:	2600      	movs	r6, #0
 80048d6:	4d0a      	ldr	r5, [pc, #40]	@ (8004900 <__libc_init_array+0x40>)
 80048d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004904 <__libc_init_array+0x44>)
 80048da:	1b64      	subs	r4, r4, r5
 80048dc:	10a4      	asrs	r4, r4, #2
 80048de:	42a6      	cmp	r6, r4
 80048e0:	d105      	bne.n	80048ee <__libc_init_array+0x2e>
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e8:	4798      	blx	r3
 80048ea:	3601      	adds	r6, #1
 80048ec:	e7ee      	b.n	80048cc <__libc_init_array+0xc>
 80048ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f2:	4798      	blx	r3
 80048f4:	3601      	adds	r6, #1
 80048f6:	e7f2      	b.n	80048de <__libc_init_array+0x1e>
 80048f8:	08005670 	.word	0x08005670
 80048fc:	08005670 	.word	0x08005670
 8004900:	08005670 	.word	0x08005670
 8004904:	08005674 	.word	0x08005674

08004908 <__retarget_lock_init_recursive>:
 8004908:	4770      	bx	lr

0800490a <__retarget_lock_acquire_recursive>:
 800490a:	4770      	bx	lr

0800490c <__retarget_lock_release_recursive>:
 800490c:	4770      	bx	lr
	...

08004910 <_free_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4605      	mov	r5, r0
 8004914:	2900      	cmp	r1, #0
 8004916:	d040      	beq.n	800499a <_free_r+0x8a>
 8004918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491c:	1f0c      	subs	r4, r1, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfb8      	it	lt
 8004922:	18e4      	addlt	r4, r4, r3
 8004924:	f000 f8de 	bl	8004ae4 <__malloc_lock>
 8004928:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <_free_r+0x8c>)
 800492a:	6813      	ldr	r3, [r2, #0]
 800492c:	b933      	cbnz	r3, 800493c <_free_r+0x2c>
 800492e:	6063      	str	r3, [r4, #4]
 8004930:	6014      	str	r4, [r2, #0]
 8004932:	4628      	mov	r0, r5
 8004934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004938:	f000 b8da 	b.w	8004af0 <__malloc_unlock>
 800493c:	42a3      	cmp	r3, r4
 800493e:	d908      	bls.n	8004952 <_free_r+0x42>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	1821      	adds	r1, r4, r0
 8004944:	428b      	cmp	r3, r1
 8004946:	bf01      	itttt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	1809      	addeq	r1, r1, r0
 800494e:	6021      	streq	r1, [r4, #0]
 8004950:	e7ed      	b.n	800492e <_free_r+0x1e>
 8004952:	461a      	mov	r2, r3
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	b10b      	cbz	r3, 800495c <_free_r+0x4c>
 8004958:	42a3      	cmp	r3, r4
 800495a:	d9fa      	bls.n	8004952 <_free_r+0x42>
 800495c:	6811      	ldr	r1, [r2, #0]
 800495e:	1850      	adds	r0, r2, r1
 8004960:	42a0      	cmp	r0, r4
 8004962:	d10b      	bne.n	800497c <_free_r+0x6c>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	4401      	add	r1, r0
 8004968:	1850      	adds	r0, r2, r1
 800496a:	4283      	cmp	r3, r0
 800496c:	6011      	str	r1, [r2, #0]
 800496e:	d1e0      	bne.n	8004932 <_free_r+0x22>
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4408      	add	r0, r1
 8004976:	6010      	str	r0, [r2, #0]
 8004978:	6053      	str	r3, [r2, #4]
 800497a:	e7da      	b.n	8004932 <_free_r+0x22>
 800497c:	d902      	bls.n	8004984 <_free_r+0x74>
 800497e:	230c      	movs	r3, #12
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	e7d6      	b.n	8004932 <_free_r+0x22>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	1821      	adds	r1, r4, r0
 8004988:	428b      	cmp	r3, r1
 800498a:	bf01      	itttt	eq
 800498c:	6819      	ldreq	r1, [r3, #0]
 800498e:	685b      	ldreq	r3, [r3, #4]
 8004990:	1809      	addeq	r1, r1, r0
 8004992:	6021      	streq	r1, [r4, #0]
 8004994:	6063      	str	r3, [r4, #4]
 8004996:	6054      	str	r4, [r2, #4]
 8004998:	e7cb      	b.n	8004932 <_free_r+0x22>
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20000bec 	.word	0x20000bec

080049a0 <sbrk_aligned>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4e0f      	ldr	r6, [pc, #60]	@ (80049e0 <sbrk_aligned+0x40>)
 80049a4:	460c      	mov	r4, r1
 80049a6:	6831      	ldr	r1, [r6, #0]
 80049a8:	4605      	mov	r5, r0
 80049aa:	b911      	cbnz	r1, 80049b2 <sbrk_aligned+0x12>
 80049ac:	f000 fcd8 	bl	8005360 <_sbrk_r>
 80049b0:	6030      	str	r0, [r6, #0]
 80049b2:	4621      	mov	r1, r4
 80049b4:	4628      	mov	r0, r5
 80049b6:	f000 fcd3 	bl	8005360 <_sbrk_r>
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	d103      	bne.n	80049c6 <sbrk_aligned+0x26>
 80049be:	f04f 34ff 	mov.w	r4, #4294967295
 80049c2:	4620      	mov	r0, r4
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	1cc4      	adds	r4, r0, #3
 80049c8:	f024 0403 	bic.w	r4, r4, #3
 80049cc:	42a0      	cmp	r0, r4
 80049ce:	d0f8      	beq.n	80049c2 <sbrk_aligned+0x22>
 80049d0:	1a21      	subs	r1, r4, r0
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 fcc4 	bl	8005360 <_sbrk_r>
 80049d8:	3001      	adds	r0, #1
 80049da:	d1f2      	bne.n	80049c2 <sbrk_aligned+0x22>
 80049dc:	e7ef      	b.n	80049be <sbrk_aligned+0x1e>
 80049de:	bf00      	nop
 80049e0:	20000be8 	.word	0x20000be8

080049e4 <_malloc_r>:
 80049e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e8:	1ccd      	adds	r5, r1, #3
 80049ea:	f025 0503 	bic.w	r5, r5, #3
 80049ee:	3508      	adds	r5, #8
 80049f0:	2d0c      	cmp	r5, #12
 80049f2:	bf38      	it	cc
 80049f4:	250c      	movcc	r5, #12
 80049f6:	2d00      	cmp	r5, #0
 80049f8:	4606      	mov	r6, r0
 80049fa:	db01      	blt.n	8004a00 <_malloc_r+0x1c>
 80049fc:	42a9      	cmp	r1, r5
 80049fe:	d904      	bls.n	8004a0a <_malloc_r+0x26>
 8004a00:	230c      	movs	r3, #12
 8004a02:	6033      	str	r3, [r6, #0]
 8004a04:	2000      	movs	r0, #0
 8004a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ae0 <_malloc_r+0xfc>
 8004a0e:	f000 f869 	bl	8004ae4 <__malloc_lock>
 8004a12:	f8d8 3000 	ldr.w	r3, [r8]
 8004a16:	461c      	mov	r4, r3
 8004a18:	bb44      	cbnz	r4, 8004a6c <_malloc_r+0x88>
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f7ff ffbf 	bl	80049a0 <sbrk_aligned>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	4604      	mov	r4, r0
 8004a26:	d158      	bne.n	8004ada <_malloc_r+0xf6>
 8004a28:	f8d8 4000 	ldr.w	r4, [r8]
 8004a2c:	4627      	mov	r7, r4
 8004a2e:	2f00      	cmp	r7, #0
 8004a30:	d143      	bne.n	8004aba <_malloc_r+0xd6>
 8004a32:	2c00      	cmp	r4, #0
 8004a34:	d04b      	beq.n	8004ace <_malloc_r+0xea>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	4639      	mov	r1, r7
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	eb04 0903 	add.w	r9, r4, r3
 8004a40:	f000 fc8e 	bl	8005360 <_sbrk_r>
 8004a44:	4581      	cmp	r9, r0
 8004a46:	d142      	bne.n	8004ace <_malloc_r+0xea>
 8004a48:	6821      	ldr	r1, [r4, #0]
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	1a6d      	subs	r5, r5, r1
 8004a4e:	4629      	mov	r1, r5
 8004a50:	f7ff ffa6 	bl	80049a0 <sbrk_aligned>
 8004a54:	3001      	adds	r0, #1
 8004a56:	d03a      	beq.n	8004ace <_malloc_r+0xea>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	442b      	add	r3, r5
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	bb62      	cbnz	r2, 8004ac0 <_malloc_r+0xdc>
 8004a66:	f8c8 7000 	str.w	r7, [r8]
 8004a6a:	e00f      	b.n	8004a8c <_malloc_r+0xa8>
 8004a6c:	6822      	ldr	r2, [r4, #0]
 8004a6e:	1b52      	subs	r2, r2, r5
 8004a70:	d420      	bmi.n	8004ab4 <_malloc_r+0xd0>
 8004a72:	2a0b      	cmp	r2, #11
 8004a74:	d917      	bls.n	8004aa6 <_malloc_r+0xc2>
 8004a76:	1961      	adds	r1, r4, r5
 8004a78:	42a3      	cmp	r3, r4
 8004a7a:	6025      	str	r5, [r4, #0]
 8004a7c:	bf18      	it	ne
 8004a7e:	6059      	strne	r1, [r3, #4]
 8004a80:	6863      	ldr	r3, [r4, #4]
 8004a82:	bf08      	it	eq
 8004a84:	f8c8 1000 	streq.w	r1, [r8]
 8004a88:	5162      	str	r2, [r4, r5]
 8004a8a:	604b      	str	r3, [r1, #4]
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f000 f82f 	bl	8004af0 <__malloc_unlock>
 8004a92:	f104 000b 	add.w	r0, r4, #11
 8004a96:	1d23      	adds	r3, r4, #4
 8004a98:	f020 0007 	bic.w	r0, r0, #7
 8004a9c:	1ac2      	subs	r2, r0, r3
 8004a9e:	bf1c      	itt	ne
 8004aa0:	1a1b      	subne	r3, r3, r0
 8004aa2:	50a3      	strne	r3, [r4, r2]
 8004aa4:	e7af      	b.n	8004a06 <_malloc_r+0x22>
 8004aa6:	6862      	ldr	r2, [r4, #4]
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	bf0c      	ite	eq
 8004aac:	f8c8 2000 	streq.w	r2, [r8]
 8004ab0:	605a      	strne	r2, [r3, #4]
 8004ab2:	e7eb      	b.n	8004a8c <_malloc_r+0xa8>
 8004ab4:	4623      	mov	r3, r4
 8004ab6:	6864      	ldr	r4, [r4, #4]
 8004ab8:	e7ae      	b.n	8004a18 <_malloc_r+0x34>
 8004aba:	463c      	mov	r4, r7
 8004abc:	687f      	ldr	r7, [r7, #4]
 8004abe:	e7b6      	b.n	8004a2e <_malloc_r+0x4a>
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	42a3      	cmp	r3, r4
 8004ac6:	d1fb      	bne.n	8004ac0 <_malloc_r+0xdc>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	6053      	str	r3, [r2, #4]
 8004acc:	e7de      	b.n	8004a8c <_malloc_r+0xa8>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	6033      	str	r3, [r6, #0]
 8004ad4:	f000 f80c 	bl	8004af0 <__malloc_unlock>
 8004ad8:	e794      	b.n	8004a04 <_malloc_r+0x20>
 8004ada:	6005      	str	r5, [r0, #0]
 8004adc:	e7d6      	b.n	8004a8c <_malloc_r+0xa8>
 8004ade:	bf00      	nop
 8004ae0:	20000bec 	.word	0x20000bec

08004ae4 <__malloc_lock>:
 8004ae4:	4801      	ldr	r0, [pc, #4]	@ (8004aec <__malloc_lock+0x8>)
 8004ae6:	f7ff bf10 	b.w	800490a <__retarget_lock_acquire_recursive>
 8004aea:	bf00      	nop
 8004aec:	20000be4 	.word	0x20000be4

08004af0 <__malloc_unlock>:
 8004af0:	4801      	ldr	r0, [pc, #4]	@ (8004af8 <__malloc_unlock+0x8>)
 8004af2:	f7ff bf0b 	b.w	800490c <__retarget_lock_release_recursive>
 8004af6:	bf00      	nop
 8004af8:	20000be4 	.word	0x20000be4

08004afc <__sfputc_r>:
 8004afc:	6893      	ldr	r3, [r2, #8]
 8004afe:	b410      	push	{r4}
 8004b00:	3b01      	subs	r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	6093      	str	r3, [r2, #8]
 8004b06:	da07      	bge.n	8004b18 <__sfputc_r+0x1c>
 8004b08:	6994      	ldr	r4, [r2, #24]
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	db01      	blt.n	8004b12 <__sfputc_r+0x16>
 8004b0e:	290a      	cmp	r1, #10
 8004b10:	d102      	bne.n	8004b18 <__sfputc_r+0x1c>
 8004b12:	bc10      	pop	{r4}
 8004b14:	f7ff bdeb 	b.w	80046ee <__swbuf_r>
 8004b18:	6813      	ldr	r3, [r2, #0]
 8004b1a:	1c58      	adds	r0, r3, #1
 8004b1c:	6010      	str	r0, [r2, #0]
 8004b1e:	7019      	strb	r1, [r3, #0]
 8004b20:	4608      	mov	r0, r1
 8004b22:	bc10      	pop	{r4}
 8004b24:	4770      	bx	lr

08004b26 <__sfputs_r>:
 8004b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b28:	4606      	mov	r6, r0
 8004b2a:	460f      	mov	r7, r1
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	18d5      	adds	r5, r2, r3
 8004b30:	42ac      	cmp	r4, r5
 8004b32:	d101      	bne.n	8004b38 <__sfputs_r+0x12>
 8004b34:	2000      	movs	r0, #0
 8004b36:	e007      	b.n	8004b48 <__sfputs_r+0x22>
 8004b38:	463a      	mov	r2, r7
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b40:	f7ff ffdc 	bl	8004afc <__sfputc_r>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d1f3      	bne.n	8004b30 <__sfputs_r+0xa>
 8004b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b4c <_vfiprintf_r>:
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	460d      	mov	r5, r1
 8004b52:	4614      	mov	r4, r2
 8004b54:	4698      	mov	r8, r3
 8004b56:	4606      	mov	r6, r0
 8004b58:	b09d      	sub	sp, #116	@ 0x74
 8004b5a:	b118      	cbz	r0, 8004b64 <_vfiprintf_r+0x18>
 8004b5c:	6a03      	ldr	r3, [r0, #32]
 8004b5e:	b90b      	cbnz	r3, 8004b64 <_vfiprintf_r+0x18>
 8004b60:	f7ff fcd4 	bl	800450c <__sinit>
 8004b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b66:	07d9      	lsls	r1, r3, #31
 8004b68:	d405      	bmi.n	8004b76 <_vfiprintf_r+0x2a>
 8004b6a:	89ab      	ldrh	r3, [r5, #12]
 8004b6c:	059a      	lsls	r2, r3, #22
 8004b6e:	d402      	bmi.n	8004b76 <_vfiprintf_r+0x2a>
 8004b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b72:	f7ff feca 	bl	800490a <__retarget_lock_acquire_recursive>
 8004b76:	89ab      	ldrh	r3, [r5, #12]
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	d501      	bpl.n	8004b80 <_vfiprintf_r+0x34>
 8004b7c:	692b      	ldr	r3, [r5, #16]
 8004b7e:	b99b      	cbnz	r3, 8004ba8 <_vfiprintf_r+0x5c>
 8004b80:	4629      	mov	r1, r5
 8004b82:	4630      	mov	r0, r6
 8004b84:	f7ff fdf2 	bl	800476c <__swsetup_r>
 8004b88:	b170      	cbz	r0, 8004ba8 <_vfiprintf_r+0x5c>
 8004b8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b8c:	07dc      	lsls	r4, r3, #31
 8004b8e:	d504      	bpl.n	8004b9a <_vfiprintf_r+0x4e>
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	b01d      	add	sp, #116	@ 0x74
 8004b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9a:	89ab      	ldrh	r3, [r5, #12]
 8004b9c:	0598      	lsls	r0, r3, #22
 8004b9e:	d4f7      	bmi.n	8004b90 <_vfiprintf_r+0x44>
 8004ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ba2:	f7ff feb3 	bl	800490c <__retarget_lock_release_recursive>
 8004ba6:	e7f3      	b.n	8004b90 <_vfiprintf_r+0x44>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bac:	2320      	movs	r3, #32
 8004bae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bb2:	2330      	movs	r3, #48	@ 0x30
 8004bb4:	f04f 0901 	mov.w	r9, #1
 8004bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bbc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004d68 <_vfiprintf_r+0x21c>
 8004bc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bc4:	4623      	mov	r3, r4
 8004bc6:	469a      	mov	sl, r3
 8004bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bcc:	b10a      	cbz	r2, 8004bd2 <_vfiprintf_r+0x86>
 8004bce:	2a25      	cmp	r2, #37	@ 0x25
 8004bd0:	d1f9      	bne.n	8004bc6 <_vfiprintf_r+0x7a>
 8004bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd6:	d00b      	beq.n	8004bf0 <_vfiprintf_r+0xa4>
 8004bd8:	465b      	mov	r3, fp
 8004bda:	4622      	mov	r2, r4
 8004bdc:	4629      	mov	r1, r5
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7ff ffa1 	bl	8004b26 <__sfputs_r>
 8004be4:	3001      	adds	r0, #1
 8004be6:	f000 80a7 	beq.w	8004d38 <_vfiprintf_r+0x1ec>
 8004bea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bec:	445a      	add	r2, fp
 8004bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 809f 	beq.w	8004d38 <_vfiprintf_r+0x1ec>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c04:	f10a 0a01 	add.w	sl, sl, #1
 8004c08:	9304      	str	r3, [sp, #16]
 8004c0a:	9307      	str	r3, [sp, #28]
 8004c0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c10:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c12:	4654      	mov	r4, sl
 8004c14:	2205      	movs	r2, #5
 8004c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c1a:	4853      	ldr	r0, [pc, #332]	@ (8004d68 <_vfiprintf_r+0x21c>)
 8004c1c:	f000 fbb0 	bl	8005380 <memchr>
 8004c20:	9a04      	ldr	r2, [sp, #16]
 8004c22:	b9d8      	cbnz	r0, 8004c5c <_vfiprintf_r+0x110>
 8004c24:	06d1      	lsls	r1, r2, #27
 8004c26:	bf44      	itt	mi
 8004c28:	2320      	movmi	r3, #32
 8004c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c2e:	0713      	lsls	r3, r2, #28
 8004c30:	bf44      	itt	mi
 8004c32:	232b      	movmi	r3, #43	@ 0x2b
 8004c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c38:	f89a 3000 	ldrb.w	r3, [sl]
 8004c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c3e:	d015      	beq.n	8004c6c <_vfiprintf_r+0x120>
 8004c40:	4654      	mov	r4, sl
 8004c42:	2000      	movs	r0, #0
 8004c44:	f04f 0c0a 	mov.w	ip, #10
 8004c48:	9a07      	ldr	r2, [sp, #28]
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c50:	3b30      	subs	r3, #48	@ 0x30
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	d94b      	bls.n	8004cee <_vfiprintf_r+0x1a2>
 8004c56:	b1b0      	cbz	r0, 8004c86 <_vfiprintf_r+0x13a>
 8004c58:	9207      	str	r2, [sp, #28]
 8004c5a:	e014      	b.n	8004c86 <_vfiprintf_r+0x13a>
 8004c5c:	eba0 0308 	sub.w	r3, r0, r8
 8004c60:	fa09 f303 	lsl.w	r3, r9, r3
 8004c64:	4313      	orrs	r3, r2
 8004c66:	46a2      	mov	sl, r4
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	e7d2      	b.n	8004c12 <_vfiprintf_r+0xc6>
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	1d19      	adds	r1, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	9103      	str	r1, [sp, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bfbb      	ittet	lt
 8004c78:	425b      	neglt	r3, r3
 8004c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c7e:	9307      	strge	r3, [sp, #28]
 8004c80:	9307      	strlt	r3, [sp, #28]
 8004c82:	bfb8      	it	lt
 8004c84:	9204      	strlt	r2, [sp, #16]
 8004c86:	7823      	ldrb	r3, [r4, #0]
 8004c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c8a:	d10a      	bne.n	8004ca2 <_vfiprintf_r+0x156>
 8004c8c:	7863      	ldrb	r3, [r4, #1]
 8004c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c90:	d132      	bne.n	8004cf8 <_vfiprintf_r+0x1ac>
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	3402      	adds	r4, #2
 8004c96:	1d1a      	adds	r2, r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	9203      	str	r2, [sp, #12]
 8004c9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ca0:	9305      	str	r3, [sp, #20]
 8004ca2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004d6c <_vfiprintf_r+0x220>
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	4650      	mov	r0, sl
 8004caa:	7821      	ldrb	r1, [r4, #0]
 8004cac:	f000 fb68 	bl	8005380 <memchr>
 8004cb0:	b138      	cbz	r0, 8004cc2 <_vfiprintf_r+0x176>
 8004cb2:	2240      	movs	r2, #64	@ 0x40
 8004cb4:	9b04      	ldr	r3, [sp, #16]
 8004cb6:	eba0 000a 	sub.w	r0, r0, sl
 8004cba:	4082      	lsls	r2, r0
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	3401      	adds	r4, #1
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc6:	2206      	movs	r2, #6
 8004cc8:	4829      	ldr	r0, [pc, #164]	@ (8004d70 <_vfiprintf_r+0x224>)
 8004cca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cce:	f000 fb57 	bl	8005380 <memchr>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d03f      	beq.n	8004d56 <_vfiprintf_r+0x20a>
 8004cd6:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <_vfiprintf_r+0x228>)
 8004cd8:	bb1b      	cbnz	r3, 8004d22 <_vfiprintf_r+0x1d6>
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	3307      	adds	r3, #7
 8004cde:	f023 0307 	bic.w	r3, r3, #7
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce8:	443b      	add	r3, r7
 8004cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cec:	e76a      	b.n	8004bc4 <_vfiprintf_r+0x78>
 8004cee:	460c      	mov	r4, r1
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf6:	e7a8      	b.n	8004c4a <_vfiprintf_r+0xfe>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f04f 0c0a 	mov.w	ip, #10
 8004cfe:	4619      	mov	r1, r3
 8004d00:	3401      	adds	r4, #1
 8004d02:	9305      	str	r3, [sp, #20]
 8004d04:	4620      	mov	r0, r4
 8004d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d0a:	3a30      	subs	r2, #48	@ 0x30
 8004d0c:	2a09      	cmp	r2, #9
 8004d0e:	d903      	bls.n	8004d18 <_vfiprintf_r+0x1cc>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0c6      	beq.n	8004ca2 <_vfiprintf_r+0x156>
 8004d14:	9105      	str	r1, [sp, #20]
 8004d16:	e7c4      	b.n	8004ca2 <_vfiprintf_r+0x156>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d20:	e7f0      	b.n	8004d04 <_vfiprintf_r+0x1b8>
 8004d22:	ab03      	add	r3, sp, #12
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	462a      	mov	r2, r5
 8004d28:	4630      	mov	r0, r6
 8004d2a:	4b13      	ldr	r3, [pc, #76]	@ (8004d78 <_vfiprintf_r+0x22c>)
 8004d2c:	a904      	add	r1, sp, #16
 8004d2e:	f3af 8000 	nop.w
 8004d32:	4607      	mov	r7, r0
 8004d34:	1c78      	adds	r0, r7, #1
 8004d36:	d1d6      	bne.n	8004ce6 <_vfiprintf_r+0x19a>
 8004d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d3a:	07d9      	lsls	r1, r3, #31
 8004d3c:	d405      	bmi.n	8004d4a <_vfiprintf_r+0x1fe>
 8004d3e:	89ab      	ldrh	r3, [r5, #12]
 8004d40:	059a      	lsls	r2, r3, #22
 8004d42:	d402      	bmi.n	8004d4a <_vfiprintf_r+0x1fe>
 8004d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d46:	f7ff fde1 	bl	800490c <__retarget_lock_release_recursive>
 8004d4a:	89ab      	ldrh	r3, [r5, #12]
 8004d4c:	065b      	lsls	r3, r3, #25
 8004d4e:	f53f af1f 	bmi.w	8004b90 <_vfiprintf_r+0x44>
 8004d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d54:	e71e      	b.n	8004b94 <_vfiprintf_r+0x48>
 8004d56:	ab03      	add	r3, sp, #12
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	462a      	mov	r2, r5
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <_vfiprintf_r+0x22c>)
 8004d60:	a904      	add	r1, sp, #16
 8004d62:	f000 f87d 	bl	8004e60 <_printf_i>
 8004d66:	e7e4      	b.n	8004d32 <_vfiprintf_r+0x1e6>
 8004d68:	0800563a 	.word	0x0800563a
 8004d6c:	08005640 	.word	0x08005640
 8004d70:	08005644 	.word	0x08005644
 8004d74:	00000000 	.word	0x00000000
 8004d78:	08004b27 	.word	0x08004b27

08004d7c <_printf_common>:
 8004d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d80:	4616      	mov	r6, r2
 8004d82:	4698      	mov	r8, r3
 8004d84:	688a      	ldr	r2, [r1, #8]
 8004d86:	690b      	ldr	r3, [r1, #16]
 8004d88:	4607      	mov	r7, r0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	bfb8      	it	lt
 8004d8e:	4613      	movlt	r3, r2
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d96:	460c      	mov	r4, r1
 8004d98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d9c:	b10a      	cbz	r2, 8004da2 <_printf_common+0x26>
 8004d9e:	3301      	adds	r3, #1
 8004da0:	6033      	str	r3, [r6, #0]
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	0699      	lsls	r1, r3, #26
 8004da6:	bf42      	ittt	mi
 8004da8:	6833      	ldrmi	r3, [r6, #0]
 8004daa:	3302      	addmi	r3, #2
 8004dac:	6033      	strmi	r3, [r6, #0]
 8004dae:	6825      	ldr	r5, [r4, #0]
 8004db0:	f015 0506 	ands.w	r5, r5, #6
 8004db4:	d106      	bne.n	8004dc4 <_printf_common+0x48>
 8004db6:	f104 0a19 	add.w	sl, r4, #25
 8004dba:	68e3      	ldr	r3, [r4, #12]
 8004dbc:	6832      	ldr	r2, [r6, #0]
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	42ab      	cmp	r3, r5
 8004dc2:	dc2b      	bgt.n	8004e1c <_printf_common+0xa0>
 8004dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	3b00      	subs	r3, #0
 8004dcc:	bf18      	it	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	0692      	lsls	r2, r2, #26
 8004dd2:	d430      	bmi.n	8004e36 <_printf_common+0xba>
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ddc:	47c8      	blx	r9
 8004dde:	3001      	adds	r0, #1
 8004de0:	d023      	beq.n	8004e2a <_printf_common+0xae>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	6922      	ldr	r2, [r4, #16]
 8004de6:	f003 0306 	and.w	r3, r3, #6
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	bf14      	ite	ne
 8004dee:	2500      	movne	r5, #0
 8004df0:	6833      	ldreq	r3, [r6, #0]
 8004df2:	f04f 0600 	mov.w	r6, #0
 8004df6:	bf08      	it	eq
 8004df8:	68e5      	ldreq	r5, [r4, #12]
 8004dfa:	f104 041a 	add.w	r4, r4, #26
 8004dfe:	bf08      	it	eq
 8004e00:	1aed      	subeq	r5, r5, r3
 8004e02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e06:	bf08      	it	eq
 8004e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	bfc4      	itt	gt
 8004e10:	1a9b      	subgt	r3, r3, r2
 8004e12:	18ed      	addgt	r5, r5, r3
 8004e14:	42b5      	cmp	r5, r6
 8004e16:	d11a      	bne.n	8004e4e <_printf_common+0xd2>
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e008      	b.n	8004e2e <_printf_common+0xb2>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	4652      	mov	r2, sl
 8004e20:	4641      	mov	r1, r8
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c8      	blx	r9
 8004e26:	3001      	adds	r0, #1
 8004e28:	d103      	bne.n	8004e32 <_printf_common+0xb6>
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e32:	3501      	adds	r5, #1
 8004e34:	e7c1      	b.n	8004dba <_printf_common+0x3e>
 8004e36:	2030      	movs	r0, #48	@ 0x30
 8004e38:	18e1      	adds	r1, r4, r3
 8004e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e44:	4422      	add	r2, r4
 8004e46:	3302      	adds	r3, #2
 8004e48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e4c:	e7c2      	b.n	8004dd4 <_printf_common+0x58>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4622      	mov	r2, r4
 8004e52:	4641      	mov	r1, r8
 8004e54:	4638      	mov	r0, r7
 8004e56:	47c8      	blx	r9
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d0e6      	beq.n	8004e2a <_printf_common+0xae>
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	e7d9      	b.n	8004e14 <_printf_common+0x98>

08004e60 <_printf_i>:
 8004e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	7e0f      	ldrb	r7, [r1, #24]
 8004e66:	4691      	mov	r9, r2
 8004e68:	2f78      	cmp	r7, #120	@ 0x78
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	469a      	mov	sl, r3
 8004e70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e76:	d807      	bhi.n	8004e88 <_printf_i+0x28>
 8004e78:	2f62      	cmp	r7, #98	@ 0x62
 8004e7a:	d80a      	bhi.n	8004e92 <_printf_i+0x32>
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	f000 80d3 	beq.w	8005028 <_printf_i+0x1c8>
 8004e82:	2f58      	cmp	r7, #88	@ 0x58
 8004e84:	f000 80ba 	beq.w	8004ffc <_printf_i+0x19c>
 8004e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e90:	e03a      	b.n	8004f08 <_printf_i+0xa8>
 8004e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e96:	2b15      	cmp	r3, #21
 8004e98:	d8f6      	bhi.n	8004e88 <_printf_i+0x28>
 8004e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004ea0 <_printf_i+0x40>)
 8004e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea0:	08004ef9 	.word	0x08004ef9
 8004ea4:	08004f0d 	.word	0x08004f0d
 8004ea8:	08004e89 	.word	0x08004e89
 8004eac:	08004e89 	.word	0x08004e89
 8004eb0:	08004e89 	.word	0x08004e89
 8004eb4:	08004e89 	.word	0x08004e89
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004e89 	.word	0x08004e89
 8004ec0:	08004e89 	.word	0x08004e89
 8004ec4:	08004e89 	.word	0x08004e89
 8004ec8:	08004e89 	.word	0x08004e89
 8004ecc:	0800500f 	.word	0x0800500f
 8004ed0:	08004f37 	.word	0x08004f37
 8004ed4:	08004fc9 	.word	0x08004fc9
 8004ed8:	08004e89 	.word	0x08004e89
 8004edc:	08004e89 	.word	0x08004e89
 8004ee0:	08005031 	.word	0x08005031
 8004ee4:	08004e89 	.word	0x08004e89
 8004ee8:	08004f37 	.word	0x08004f37
 8004eec:	08004e89 	.word	0x08004e89
 8004ef0:	08004e89 	.word	0x08004e89
 8004ef4:	08004fd1 	.word	0x08004fd1
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6032      	str	r2, [r6, #0]
 8004f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e09e      	b.n	800504a <_printf_i+0x1ea>
 8004f0c:	6833      	ldr	r3, [r6, #0]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	1d19      	adds	r1, r3, #4
 8004f12:	6031      	str	r1, [r6, #0]
 8004f14:	0606      	lsls	r6, r0, #24
 8004f16:	d501      	bpl.n	8004f1c <_printf_i+0xbc>
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	e003      	b.n	8004f24 <_printf_i+0xc4>
 8004f1c:	0645      	lsls	r5, r0, #25
 8004f1e:	d5fb      	bpl.n	8004f18 <_printf_i+0xb8>
 8004f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	da03      	bge.n	8004f30 <_printf_i+0xd0>
 8004f28:	232d      	movs	r3, #45	@ 0x2d
 8004f2a:	426d      	negs	r5, r5
 8004f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f30:	230a      	movs	r3, #10
 8004f32:	4859      	ldr	r0, [pc, #356]	@ (8005098 <_printf_i+0x238>)
 8004f34:	e011      	b.n	8004f5a <_printf_i+0xfa>
 8004f36:	6821      	ldr	r1, [r4, #0]
 8004f38:	6833      	ldr	r3, [r6, #0]
 8004f3a:	0608      	lsls	r0, r1, #24
 8004f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f40:	d402      	bmi.n	8004f48 <_printf_i+0xe8>
 8004f42:	0649      	lsls	r1, r1, #25
 8004f44:	bf48      	it	mi
 8004f46:	b2ad      	uxthmi	r5, r5
 8004f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f4a:	6033      	str	r3, [r6, #0]
 8004f4c:	bf14      	ite	ne
 8004f4e:	230a      	movne	r3, #10
 8004f50:	2308      	moveq	r3, #8
 8004f52:	4851      	ldr	r0, [pc, #324]	@ (8005098 <_printf_i+0x238>)
 8004f54:	2100      	movs	r1, #0
 8004f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f5a:	6866      	ldr	r6, [r4, #4]
 8004f5c:	2e00      	cmp	r6, #0
 8004f5e:	bfa8      	it	ge
 8004f60:	6821      	ldrge	r1, [r4, #0]
 8004f62:	60a6      	str	r6, [r4, #8]
 8004f64:	bfa4      	itt	ge
 8004f66:	f021 0104 	bicge.w	r1, r1, #4
 8004f6a:	6021      	strge	r1, [r4, #0]
 8004f6c:	b90d      	cbnz	r5, 8004f72 <_printf_i+0x112>
 8004f6e:	2e00      	cmp	r6, #0
 8004f70:	d04b      	beq.n	800500a <_printf_i+0x1aa>
 8004f72:	4616      	mov	r6, r2
 8004f74:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f78:	fb03 5711 	mls	r7, r3, r1, r5
 8004f7c:	5dc7      	ldrb	r7, [r0, r7]
 8004f7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f82:	462f      	mov	r7, r5
 8004f84:	42bb      	cmp	r3, r7
 8004f86:	460d      	mov	r5, r1
 8004f88:	d9f4      	bls.n	8004f74 <_printf_i+0x114>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d10b      	bne.n	8004fa6 <_printf_i+0x146>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	07df      	lsls	r7, r3, #31
 8004f92:	d508      	bpl.n	8004fa6 <_printf_i+0x146>
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	6861      	ldr	r1, [r4, #4]
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	bfde      	ittt	le
 8004f9c:	2330      	movle	r3, #48	@ 0x30
 8004f9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fa6:	1b92      	subs	r2, r2, r6
 8004fa8:	6122      	str	r2, [r4, #16]
 8004faa:	464b      	mov	r3, r9
 8004fac:	4621      	mov	r1, r4
 8004fae:	4640      	mov	r0, r8
 8004fb0:	f8cd a000 	str.w	sl, [sp]
 8004fb4:	aa03      	add	r2, sp, #12
 8004fb6:	f7ff fee1 	bl	8004d7c <_printf_common>
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d14a      	bne.n	8005054 <_printf_i+0x1f4>
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	b004      	add	sp, #16
 8004fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f043 0320 	orr.w	r3, r3, #32
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	2778      	movs	r7, #120	@ 0x78
 8004fd2:	4832      	ldr	r0, [pc, #200]	@ (800509c <_printf_i+0x23c>)
 8004fd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	6831      	ldr	r1, [r6, #0]
 8004fdc:	061f      	lsls	r7, r3, #24
 8004fde:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fe2:	d402      	bmi.n	8004fea <_printf_i+0x18a>
 8004fe4:	065f      	lsls	r7, r3, #25
 8004fe6:	bf48      	it	mi
 8004fe8:	b2ad      	uxthmi	r5, r5
 8004fea:	6031      	str	r1, [r6, #0]
 8004fec:	07d9      	lsls	r1, r3, #31
 8004fee:	bf44      	itt	mi
 8004ff0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ff4:	6023      	strmi	r3, [r4, #0]
 8004ff6:	b11d      	cbz	r5, 8005000 <_printf_i+0x1a0>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	e7ab      	b.n	8004f54 <_printf_i+0xf4>
 8004ffc:	4826      	ldr	r0, [pc, #152]	@ (8005098 <_printf_i+0x238>)
 8004ffe:	e7e9      	b.n	8004fd4 <_printf_i+0x174>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	f023 0320 	bic.w	r3, r3, #32
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	e7f6      	b.n	8004ff8 <_printf_i+0x198>
 800500a:	4616      	mov	r6, r2
 800500c:	e7bd      	b.n	8004f8a <_printf_i+0x12a>
 800500e:	6833      	ldr	r3, [r6, #0]
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	1d18      	adds	r0, r3, #4
 8005014:	6961      	ldr	r1, [r4, #20]
 8005016:	6030      	str	r0, [r6, #0]
 8005018:	062e      	lsls	r6, r5, #24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	d501      	bpl.n	8005022 <_printf_i+0x1c2>
 800501e:	6019      	str	r1, [r3, #0]
 8005020:	e002      	b.n	8005028 <_printf_i+0x1c8>
 8005022:	0668      	lsls	r0, r5, #25
 8005024:	d5fb      	bpl.n	800501e <_printf_i+0x1be>
 8005026:	8019      	strh	r1, [r3, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	4616      	mov	r6, r2
 800502c:	6123      	str	r3, [r4, #16]
 800502e:	e7bc      	b.n	8004faa <_printf_i+0x14a>
 8005030:	6833      	ldr	r3, [r6, #0]
 8005032:	2100      	movs	r1, #0
 8005034:	1d1a      	adds	r2, r3, #4
 8005036:	6032      	str	r2, [r6, #0]
 8005038:	681e      	ldr	r6, [r3, #0]
 800503a:	6862      	ldr	r2, [r4, #4]
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f99f 	bl	8005380 <memchr>
 8005042:	b108      	cbz	r0, 8005048 <_printf_i+0x1e8>
 8005044:	1b80      	subs	r0, r0, r6
 8005046:	6060      	str	r0, [r4, #4]
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	2300      	movs	r3, #0
 800504e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005052:	e7aa      	b.n	8004faa <_printf_i+0x14a>
 8005054:	4632      	mov	r2, r6
 8005056:	4649      	mov	r1, r9
 8005058:	4640      	mov	r0, r8
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	47d0      	blx	sl
 800505e:	3001      	adds	r0, #1
 8005060:	d0ad      	beq.n	8004fbe <_printf_i+0x15e>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	079b      	lsls	r3, r3, #30
 8005066:	d413      	bmi.n	8005090 <_printf_i+0x230>
 8005068:	68e0      	ldr	r0, [r4, #12]
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	4298      	cmp	r0, r3
 800506e:	bfb8      	it	lt
 8005070:	4618      	movlt	r0, r3
 8005072:	e7a6      	b.n	8004fc2 <_printf_i+0x162>
 8005074:	2301      	movs	r3, #1
 8005076:	4632      	mov	r2, r6
 8005078:	4649      	mov	r1, r9
 800507a:	4640      	mov	r0, r8
 800507c:	47d0      	blx	sl
 800507e:	3001      	adds	r0, #1
 8005080:	d09d      	beq.n	8004fbe <_printf_i+0x15e>
 8005082:	3501      	adds	r5, #1
 8005084:	68e3      	ldr	r3, [r4, #12]
 8005086:	9903      	ldr	r1, [sp, #12]
 8005088:	1a5b      	subs	r3, r3, r1
 800508a:	42ab      	cmp	r3, r5
 800508c:	dcf2      	bgt.n	8005074 <_printf_i+0x214>
 800508e:	e7eb      	b.n	8005068 <_printf_i+0x208>
 8005090:	2500      	movs	r5, #0
 8005092:	f104 0619 	add.w	r6, r4, #25
 8005096:	e7f5      	b.n	8005084 <_printf_i+0x224>
 8005098:	0800564b 	.word	0x0800564b
 800509c:	0800565c 	.word	0x0800565c

080050a0 <__sflush_r>:
 80050a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	0716      	lsls	r6, r2, #28
 80050a8:	4605      	mov	r5, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	d454      	bmi.n	8005158 <__sflush_r+0xb8>
 80050ae:	684b      	ldr	r3, [r1, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	dc02      	bgt.n	80050ba <__sflush_r+0x1a>
 80050b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	dd48      	ble.n	800514c <__sflush_r+0xac>
 80050ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050bc:	2e00      	cmp	r6, #0
 80050be:	d045      	beq.n	800514c <__sflush_r+0xac>
 80050c0:	2300      	movs	r3, #0
 80050c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050c6:	682f      	ldr	r7, [r5, #0]
 80050c8:	6a21      	ldr	r1, [r4, #32]
 80050ca:	602b      	str	r3, [r5, #0]
 80050cc:	d030      	beq.n	8005130 <__sflush_r+0x90>
 80050ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	0759      	lsls	r1, r3, #29
 80050d4:	d505      	bpl.n	80050e2 <__sflush_r+0x42>
 80050d6:	6863      	ldr	r3, [r4, #4]
 80050d8:	1ad2      	subs	r2, r2, r3
 80050da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050dc:	b10b      	cbz	r3, 80050e2 <__sflush_r+0x42>
 80050de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050e0:	1ad2      	subs	r2, r2, r3
 80050e2:	2300      	movs	r3, #0
 80050e4:	4628      	mov	r0, r5
 80050e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050e8:	6a21      	ldr	r1, [r4, #32]
 80050ea:	47b0      	blx	r6
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	d106      	bne.n	8005100 <__sflush_r+0x60>
 80050f2:	6829      	ldr	r1, [r5, #0]
 80050f4:	291d      	cmp	r1, #29
 80050f6:	d82b      	bhi.n	8005150 <__sflush_r+0xb0>
 80050f8:	4a28      	ldr	r2, [pc, #160]	@ (800519c <__sflush_r+0xfc>)
 80050fa:	410a      	asrs	r2, r1
 80050fc:	07d6      	lsls	r6, r2, #31
 80050fe:	d427      	bmi.n	8005150 <__sflush_r+0xb0>
 8005100:	2200      	movs	r2, #0
 8005102:	6062      	str	r2, [r4, #4]
 8005104:	6922      	ldr	r2, [r4, #16]
 8005106:	04d9      	lsls	r1, r3, #19
 8005108:	6022      	str	r2, [r4, #0]
 800510a:	d504      	bpl.n	8005116 <__sflush_r+0x76>
 800510c:	1c42      	adds	r2, r0, #1
 800510e:	d101      	bne.n	8005114 <__sflush_r+0x74>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	b903      	cbnz	r3, 8005116 <__sflush_r+0x76>
 8005114:	6560      	str	r0, [r4, #84]	@ 0x54
 8005116:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005118:	602f      	str	r7, [r5, #0]
 800511a:	b1b9      	cbz	r1, 800514c <__sflush_r+0xac>
 800511c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005120:	4299      	cmp	r1, r3
 8005122:	d002      	beq.n	800512a <__sflush_r+0x8a>
 8005124:	4628      	mov	r0, r5
 8005126:	f7ff fbf3 	bl	8004910 <_free_r>
 800512a:	2300      	movs	r3, #0
 800512c:	6363      	str	r3, [r4, #52]	@ 0x34
 800512e:	e00d      	b.n	800514c <__sflush_r+0xac>
 8005130:	2301      	movs	r3, #1
 8005132:	4628      	mov	r0, r5
 8005134:	47b0      	blx	r6
 8005136:	4602      	mov	r2, r0
 8005138:	1c50      	adds	r0, r2, #1
 800513a:	d1c9      	bne.n	80050d0 <__sflush_r+0x30>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0c6      	beq.n	80050d0 <__sflush_r+0x30>
 8005142:	2b1d      	cmp	r3, #29
 8005144:	d001      	beq.n	800514a <__sflush_r+0xaa>
 8005146:	2b16      	cmp	r3, #22
 8005148:	d11d      	bne.n	8005186 <__sflush_r+0xe6>
 800514a:	602f      	str	r7, [r5, #0]
 800514c:	2000      	movs	r0, #0
 800514e:	e021      	b.n	8005194 <__sflush_r+0xf4>
 8005150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005154:	b21b      	sxth	r3, r3
 8005156:	e01a      	b.n	800518e <__sflush_r+0xee>
 8005158:	690f      	ldr	r7, [r1, #16]
 800515a:	2f00      	cmp	r7, #0
 800515c:	d0f6      	beq.n	800514c <__sflush_r+0xac>
 800515e:	0793      	lsls	r3, r2, #30
 8005160:	bf18      	it	ne
 8005162:	2300      	movne	r3, #0
 8005164:	680e      	ldr	r6, [r1, #0]
 8005166:	bf08      	it	eq
 8005168:	694b      	ldreq	r3, [r1, #20]
 800516a:	1bf6      	subs	r6, r6, r7
 800516c:	600f      	str	r7, [r1, #0]
 800516e:	608b      	str	r3, [r1, #8]
 8005170:	2e00      	cmp	r6, #0
 8005172:	ddeb      	ble.n	800514c <__sflush_r+0xac>
 8005174:	4633      	mov	r3, r6
 8005176:	463a      	mov	r2, r7
 8005178:	4628      	mov	r0, r5
 800517a:	6a21      	ldr	r1, [r4, #32]
 800517c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005180:	47e0      	blx	ip
 8005182:	2800      	cmp	r0, #0
 8005184:	dc07      	bgt.n	8005196 <__sflush_r+0xf6>
 8005186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800518e:	f04f 30ff 	mov.w	r0, #4294967295
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005196:	4407      	add	r7, r0
 8005198:	1a36      	subs	r6, r6, r0
 800519a:	e7e9      	b.n	8005170 <__sflush_r+0xd0>
 800519c:	dfbffffe 	.word	0xdfbffffe

080051a0 <_fflush_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	690b      	ldr	r3, [r1, #16]
 80051a4:	4605      	mov	r5, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	b913      	cbnz	r3, 80051b0 <_fflush_r+0x10>
 80051aa:	2500      	movs	r5, #0
 80051ac:	4628      	mov	r0, r5
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	b118      	cbz	r0, 80051ba <_fflush_r+0x1a>
 80051b2:	6a03      	ldr	r3, [r0, #32]
 80051b4:	b90b      	cbnz	r3, 80051ba <_fflush_r+0x1a>
 80051b6:	f7ff f9a9 	bl	800450c <__sinit>
 80051ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f3      	beq.n	80051aa <_fflush_r+0xa>
 80051c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051c4:	07d0      	lsls	r0, r2, #31
 80051c6:	d404      	bmi.n	80051d2 <_fflush_r+0x32>
 80051c8:	0599      	lsls	r1, r3, #22
 80051ca:	d402      	bmi.n	80051d2 <_fflush_r+0x32>
 80051cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ce:	f7ff fb9c 	bl	800490a <__retarget_lock_acquire_recursive>
 80051d2:	4628      	mov	r0, r5
 80051d4:	4621      	mov	r1, r4
 80051d6:	f7ff ff63 	bl	80050a0 <__sflush_r>
 80051da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051dc:	4605      	mov	r5, r0
 80051de:	07da      	lsls	r2, r3, #31
 80051e0:	d4e4      	bmi.n	80051ac <_fflush_r+0xc>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	059b      	lsls	r3, r3, #22
 80051e6:	d4e1      	bmi.n	80051ac <_fflush_r+0xc>
 80051e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ea:	f7ff fb8f 	bl	800490c <__retarget_lock_release_recursive>
 80051ee:	e7dd      	b.n	80051ac <_fflush_r+0xc>

080051f0 <__swhatbuf_r>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	460c      	mov	r4, r1
 80051f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f8:	4615      	mov	r5, r2
 80051fa:	2900      	cmp	r1, #0
 80051fc:	461e      	mov	r6, r3
 80051fe:	b096      	sub	sp, #88	@ 0x58
 8005200:	da0c      	bge.n	800521c <__swhatbuf_r+0x2c>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	2100      	movs	r1, #0
 8005206:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800520a:	bf14      	ite	ne
 800520c:	2340      	movne	r3, #64	@ 0x40
 800520e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005212:	2000      	movs	r0, #0
 8005214:	6031      	str	r1, [r6, #0]
 8005216:	602b      	str	r3, [r5, #0]
 8005218:	b016      	add	sp, #88	@ 0x58
 800521a:	bd70      	pop	{r4, r5, r6, pc}
 800521c:	466a      	mov	r2, sp
 800521e:	f000 f87d 	bl	800531c <_fstat_r>
 8005222:	2800      	cmp	r0, #0
 8005224:	dbed      	blt.n	8005202 <__swhatbuf_r+0x12>
 8005226:	9901      	ldr	r1, [sp, #4]
 8005228:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800522c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005230:	4259      	negs	r1, r3
 8005232:	4159      	adcs	r1, r3
 8005234:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005238:	e7eb      	b.n	8005212 <__swhatbuf_r+0x22>

0800523a <__smakebuf_r>:
 800523a:	898b      	ldrh	r3, [r1, #12]
 800523c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800523e:	079d      	lsls	r5, r3, #30
 8005240:	4606      	mov	r6, r0
 8005242:	460c      	mov	r4, r1
 8005244:	d507      	bpl.n	8005256 <__smakebuf_r+0x1c>
 8005246:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	2301      	movs	r3, #1
 8005250:	6163      	str	r3, [r4, #20]
 8005252:	b003      	add	sp, #12
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005256:	466a      	mov	r2, sp
 8005258:	ab01      	add	r3, sp, #4
 800525a:	f7ff ffc9 	bl	80051f0 <__swhatbuf_r>
 800525e:	9f00      	ldr	r7, [sp, #0]
 8005260:	4605      	mov	r5, r0
 8005262:	4639      	mov	r1, r7
 8005264:	4630      	mov	r0, r6
 8005266:	f7ff fbbd 	bl	80049e4 <_malloc_r>
 800526a:	b948      	cbnz	r0, 8005280 <__smakebuf_r+0x46>
 800526c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005270:	059a      	lsls	r2, r3, #22
 8005272:	d4ee      	bmi.n	8005252 <__smakebuf_r+0x18>
 8005274:	f023 0303 	bic.w	r3, r3, #3
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	81a3      	strh	r3, [r4, #12]
 800527e:	e7e2      	b.n	8005246 <__smakebuf_r+0xc>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	9b01      	ldr	r3, [sp, #4]
 800528e:	6020      	str	r0, [r4, #0]
 8005290:	b15b      	cbz	r3, 80052aa <__smakebuf_r+0x70>
 8005292:	4630      	mov	r0, r6
 8005294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005298:	f000 f852 	bl	8005340 <_isatty_r>
 800529c:	b128      	cbz	r0, 80052aa <__smakebuf_r+0x70>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	f023 0303 	bic.w	r3, r3, #3
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	431d      	orrs	r5, r3
 80052ae:	81a5      	strh	r5, [r4, #12]
 80052b0:	e7cf      	b.n	8005252 <__smakebuf_r+0x18>

080052b2 <_putc_r>:
 80052b2:	b570      	push	{r4, r5, r6, lr}
 80052b4:	460d      	mov	r5, r1
 80052b6:	4614      	mov	r4, r2
 80052b8:	4606      	mov	r6, r0
 80052ba:	b118      	cbz	r0, 80052c4 <_putc_r+0x12>
 80052bc:	6a03      	ldr	r3, [r0, #32]
 80052be:	b90b      	cbnz	r3, 80052c4 <_putc_r+0x12>
 80052c0:	f7ff f924 	bl	800450c <__sinit>
 80052c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052c6:	07d8      	lsls	r0, r3, #31
 80052c8:	d405      	bmi.n	80052d6 <_putc_r+0x24>
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	0599      	lsls	r1, r3, #22
 80052ce:	d402      	bmi.n	80052d6 <_putc_r+0x24>
 80052d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052d2:	f7ff fb1a 	bl	800490a <__retarget_lock_acquire_recursive>
 80052d6:	68a3      	ldr	r3, [r4, #8]
 80052d8:	3b01      	subs	r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	60a3      	str	r3, [r4, #8]
 80052de:	da05      	bge.n	80052ec <_putc_r+0x3a>
 80052e0:	69a2      	ldr	r2, [r4, #24]
 80052e2:	4293      	cmp	r3, r2
 80052e4:	db12      	blt.n	800530c <_putc_r+0x5a>
 80052e6:	b2eb      	uxtb	r3, r5
 80052e8:	2b0a      	cmp	r3, #10
 80052ea:	d00f      	beq.n	800530c <_putc_r+0x5a>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	6022      	str	r2, [r4, #0]
 80052f2:	701d      	strb	r5, [r3, #0]
 80052f4:	b2ed      	uxtb	r5, r5
 80052f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052f8:	07da      	lsls	r2, r3, #31
 80052fa:	d405      	bmi.n	8005308 <_putc_r+0x56>
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	059b      	lsls	r3, r3, #22
 8005300:	d402      	bmi.n	8005308 <_putc_r+0x56>
 8005302:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005304:	f7ff fb02 	bl	800490c <__retarget_lock_release_recursive>
 8005308:	4628      	mov	r0, r5
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	4629      	mov	r1, r5
 800530e:	4622      	mov	r2, r4
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff f9ec 	bl	80046ee <__swbuf_r>
 8005316:	4605      	mov	r5, r0
 8005318:	e7ed      	b.n	80052f6 <_putc_r+0x44>
	...

0800531c <_fstat_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	2300      	movs	r3, #0
 8005320:	4d06      	ldr	r5, [pc, #24]	@ (800533c <_fstat_r+0x20>)
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	602b      	str	r3, [r5, #0]
 800532a:	f7fc f947 	bl	80015bc <_fstat>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d102      	bne.n	8005338 <_fstat_r+0x1c>
 8005332:	682b      	ldr	r3, [r5, #0]
 8005334:	b103      	cbz	r3, 8005338 <_fstat_r+0x1c>
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	bd38      	pop	{r3, r4, r5, pc}
 800533a:	bf00      	nop
 800533c:	20000be0 	.word	0x20000be0

08005340 <_isatty_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	2300      	movs	r3, #0
 8005344:	4d05      	ldr	r5, [pc, #20]	@ (800535c <_isatty_r+0x1c>)
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	f7fc f945 	bl	80015da <_isatty>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_isatty_r+0x1a>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_isatty_r+0x1a>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20000be0 	.word	0x20000be0

08005360 <_sbrk_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	2300      	movs	r3, #0
 8005364:	4d05      	ldr	r5, [pc, #20]	@ (800537c <_sbrk_r+0x1c>)
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	f7fc f94c 	bl	8001608 <_sbrk>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_sbrk_r+0x1a>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_sbrk_r+0x1a>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	20000be0 	.word	0x20000be0

08005380 <memchr>:
 8005380:	4603      	mov	r3, r0
 8005382:	b510      	push	{r4, lr}
 8005384:	b2c9      	uxtb	r1, r1
 8005386:	4402      	add	r2, r0
 8005388:	4293      	cmp	r3, r2
 800538a:	4618      	mov	r0, r3
 800538c:	d101      	bne.n	8005392 <memchr+0x12>
 800538e:	2000      	movs	r0, #0
 8005390:	e003      	b.n	800539a <memchr+0x1a>
 8005392:	7804      	ldrb	r4, [r0, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	428c      	cmp	r4, r1
 8005398:	d1f6      	bne.n	8005388 <memchr+0x8>
 800539a:	bd10      	pop	{r4, pc}

0800539c <_init>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	bf00      	nop
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr

080053a8 <_fini>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr

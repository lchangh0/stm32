/*
 * spi1.c
 *
 *  Created on: Mar 4, 2025
 *      Author: user
 */

#include "spi1.h"

#define SPI_BUFFER_SIZE 10

uint8_t spiRx;

void InitSpi1Work()
{
	//HAL_SPI_Receive_IT(&hspi1, &spiRx, 1);
}


volatile uint8_t spi_rx_buff[128];
volatile uint8_t spi_rx_ridx;
volatile uint8_t spi_rx_widx;

static void PutRxByte(uint8_t rx)
{
	spi_rx_buff[spi_rx_widx] = rx;
	spi_rx_widx = (spi_rx_widx + 1) % sizeof(spi_rx_buff);
}

static uint8_t GetRxByte(uint8_t* rx)
{
	if (spi_rx_ridx != spi_rx_widx)
	{
		*rx = spi_rx_buff[spi_rx_ridx];
		spi_rx_ridx = (spi_rx_ridx + 1) % sizeof(spi_rx_buff);
		return 1;
	}
	else
		return 0;
}


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
    if (hspi->Instance == SPI1) {
    	PutRxByte(spiRx);
        HAL_SPI_Receive_IT(&hspi1, &spiRx, 1); // 계속 수신 대기
    }
}


void DoSpi1Work()
{
	//uint8_t rx;
	//if (GetRxByte(&rx))
	//{
	//	printf("%02X ", rx);
	//}

	uint8_t rx_buff[8] = {0};
	uint8_t ret = HAL_SPI_Receive(&hspi1, rx_buff, 8, 500);
	printf("Ret=%d, Data=", ret);

	for(int i = 0; i < sizeof(rx_buff); i++)
		printf("%02X ", rx_buff[i]);
	printf("\n");

}

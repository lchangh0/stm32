
lcd_st7789.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001fcc  08001fcc  00002fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002020  08002020  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002020  08002020  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002020  08002020  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002020  08002020  00003020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002024  08002024  00003024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002028  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c0  2000000c  08002034  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020cc  08002034  000040cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cad  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d0  00000000  00000000  0000cce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0000e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a4  00000000  00000000  0000ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f9d  00000000  00000000  0000f3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f42  00000000  00000000  00026399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d7e  00000000  00000000  000302db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b0  00000000  00000000  000b409c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000b634c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fb4 	.word	0x08001fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001fb4 	.word	0x08001fb4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc8d 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f812 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8ad 	bl	80002b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f849 	bl	80001f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f87f 	bl	8000264 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000166:	f000 fa25 	bl	80005b4 <ST7789_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
	  //ST7789_DrawImage(0, 0, 320, 240, (uint16_t *)cimg);
	  //HAL_Delay(500);
	  //ST7789_DrawImage(0, 0, 320, 240, (uint16_t *)img);
	  //HAL_Delay(500);

	  ST7789_Test();
 800016e:	f000 faff 	bl	8000770 <ST7789_Test>
	  HAL_Delay(500);
 8000172:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000176:	f000 fcdd 	bl	8000b34 <HAL_Delay>
	  ST7789_Test();
 800017a:	bf00      	nop
 800017c:	e7f7      	b.n	800016e <main+0x22>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f001 fee5 	bl	8001f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ac:	2300      	movs	r3, #0
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b0:	f107 0318 	add.w	r3, r7, #24
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 ff61 	bl	800107c <HAL_RCC_OscConfig>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001c0:	f000 f8c6 	bl	8000350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c4:	230f      	movs	r3, #15
 80001c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c8:	2300      	movs	r3, #0
 80001ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 f9cf 	bl	8001580 <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001e8:	f000 f8b2 	bl	8000350 <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	@ 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80001f8:	4b18      	ldr	r3, [pc, #96]	@ (800025c <MX_SPI1_Init+0x68>)
 80001fa:	4a19      	ldr	r2, [pc, #100]	@ (8000260 <MX_SPI1_Init+0x6c>)
 80001fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80001fe:	4b17      	ldr	r3, [pc, #92]	@ (800025c <MX_SPI1_Init+0x68>)
 8000200:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000206:	4b15      	ldr	r3, [pc, #84]	@ (800025c <MX_SPI1_Init+0x68>)
 8000208:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800020c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800020e:	4b13      	ldr	r3, [pc, #76]	@ (800025c <MX_SPI1_Init+0x68>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <MX_SPI1_Init+0x68>)
 8000216:	2200      	movs	r2, #0
 8000218:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800021a:	4b10      	ldr	r3, [pc, #64]	@ (800025c <MX_SPI1_Init+0x68>)
 800021c:	2200      	movs	r2, #0
 800021e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <MX_SPI1_Init+0x68>)
 8000222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000226:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <MX_SPI1_Init+0x68>)
 800022a:	2210      	movs	r2, #16
 800022c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800022e:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <MX_SPI1_Init+0x68>)
 8000230:	2200      	movs	r2, #0
 8000232:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <MX_SPI1_Init+0x68>)
 8000236:	2200      	movs	r2, #0
 8000238:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <MX_SPI1_Init+0x68>)
 800023c:	2200      	movs	r2, #0
 800023e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <MX_SPI1_Init+0x68>)
 8000242:	220a      	movs	r2, #10
 8000244:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000246:	4805      	ldr	r0, [pc, #20]	@ (800025c <MX_SPI1_Init+0x68>)
 8000248:	f001 fb28 	bl	800189c <HAL_SPI_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000252:	f000 f87d 	bl	8000350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000028 	.word	0x20000028
 8000260:	40013000 	.word	0x40013000

08000264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	@ (80002b4 <MX_USART1_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <MX_USART1_UART_Init+0x4c>)
 800029c:	f001 fd7f 	bl	8001d9e <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f853 	bl	8000350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000080 	.word	0x20000080
 80002b4:	40013800 	.word	0x40013800

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000348 <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000348 <MX_GPIO_Init+0x90>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a17      	ldr	r2, [pc, #92]	@ (8000348 <MX_GPIO_Init+0x90>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a11      	ldr	r2, [pc, #68]	@ (8000348 <MX_GPIO_Init+0x90>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800031a:	480c      	ldr	r0, [pc, #48]	@ (800034c <MX_GPIO_Init+0x94>)
 800031c:	f000 fe96 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000320:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2302      	movs	r3, #2
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	4804      	ldr	r0, [pc, #16]	@ (800034c <MX_GPIO_Init+0x94>)
 800033a:	f000 fd03 	bl	8000d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033e:	bf00      	nop
 8000340:	3720      	adds	r7, #32
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	40010c00 	.word	0x40010c00

08000350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000354:	b672      	cpsid	i
}
 8000356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <Error_Handler+0x8>

0800035c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
	uint16_t send_cmd = (0x00 << 8) | cmd;
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	b29b      	uxth	r3, r3
 800036a:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 800036c:	2200      	movs	r2, #0
 800036e:	2180      	movs	r1, #128	@ 0x80
 8000370:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <ST7789_WriteCommand+0x48>)
 8000372:	f000 fe6b 	bl	800104c <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800037c:	4809      	ldr	r0, [pc, #36]	@ (80003a4 <ST7789_WriteCommand+0x48>)
 800037e:	f000 fe65 	bl	800104c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, (uint8_t *)(&send_cmd), 1, HAL_MAX_DELAY);
 8000382:	f107 010e 	add.w	r1, r7, #14
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
 800038a:	2201      	movs	r2, #1
 800038c:	4806      	ldr	r0, [pc, #24]	@ (80003a8 <ST7789_WriteCommand+0x4c>)
 800038e:	f001 fb09 	bl	80019a4 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000392:	2201      	movs	r2, #1
 8000394:	2180      	movs	r1, #128	@ 0x80
 8000396:	4803      	ldr	r0, [pc, #12]	@ (80003a4 <ST7789_WriteCommand+0x48>)
 8000398:	f000 fe58 	bl	800104c <HAL_GPIO_WritePin>
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	20000028 	.word	0x20000028

080003ac <ST7789_WriteData>:
 */
// #define LENGTH 65535
#define LENGTH 4096
static uint16_t send_data[LENGTH];
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80003b6:	2200      	movs	r2, #0
 80003b8:	2180      	movs	r1, #128	@ 0x80
 80003ba:	4821      	ldr	r0, [pc, #132]	@ (8000440 <ST7789_WriteData+0x94>)
 80003bc:	f000 fe46 	bl	800104c <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c6:	481e      	ldr	r0, [pc, #120]	@ (8000440 <ST7789_WriteData+0x94>)
 80003c8:	f000 fe40 	bl	800104c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80003cc:	e02c      	b.n	8000428 <ST7789_WriteData+0x7c>
		uint16_t chunk_size = buff_size > LENGTH ? LENGTH : buff_size;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80003d4:	bf28      	it	cs
 80003d6:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 80003da:	817b      	strh	r3, [r7, #10]
		for (int i = 0 ; i < chunk_size ; i++) {
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	e00f      	b.n	8000402 <ST7789_WriteData+0x56>
			send_data[i] = (0x01 << 8) | buff[i];
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	b21b      	sxth	r3, r3
 80003ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f0:	b21b      	sxth	r3, r3
 80003f2:	b299      	uxth	r1, r3
 80003f4:	4a13      	ldr	r2, [pc, #76]	@ (8000444 <ST7789_WriteData+0x98>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0 ; i < chunk_size ; i++) {
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3301      	adds	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	897b      	ldrh	r3, [r7, #10]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	429a      	cmp	r2, r3
 8000408:	dbeb      	blt.n	80003e2 <ST7789_WriteData+0x36>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, (uint8_t *)send_data, chunk_size, HAL_MAX_DELAY);
 800040a:	897a      	ldrh	r2, [r7, #10]
 800040c:	f04f 33ff 	mov.w	r3, #4294967295
 8000410:	490c      	ldr	r1, [pc, #48]	@ (8000444 <ST7789_WriteData+0x98>)
 8000412:	480d      	ldr	r0, [pc, #52]	@ (8000448 <ST7789_WriteData+0x9c>)
 8000414:	f001 fac6 	bl	80019a4 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8000418:	897b      	ldrh	r3, [r7, #10]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000420:	897b      	ldrh	r3, [r7, #10]
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1cf      	bne.n	80003ce <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 800042e:	2201      	movs	r2, #1
 8000430:	2180      	movs	r1, #128	@ 0x80
 8000432:	4803      	ldr	r0, [pc, #12]	@ (8000440 <ST7789_WriteData+0x94>)
 8000434:	f000 fe0a 	bl	800104c <HAL_GPIO_WritePin>
}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40010c00 	.word	0x40010c00
 8000444:	200000c8 	.word	0x200000c8
 8000448:	20000028 	.word	0x20000028

0800044c <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
	uint16_t send_cmd = (0x01 << 8) | data;
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	b21b      	sxth	r3, r3
 800045a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800045e:	b21b      	sxth	r3, r3
 8000460:	b29b      	uxth	r3, r3
 8000462:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 8000464:	2200      	movs	r2, #0
 8000466:	2180      	movs	r1, #128	@ 0x80
 8000468:	480c      	ldr	r0, [pc, #48]	@ (800049c <ST7789_WriteSmallData+0x50>)
 800046a:	f000 fdef 	bl	800104c <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800046e:	2201      	movs	r2, #1
 8000470:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000474:	4809      	ldr	r0, [pc, #36]	@ (800049c <ST7789_WriteSmallData+0x50>)
 8000476:	f000 fde9 	bl	800104c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, (uint8_t *)(&send_cmd), 1, HAL_MAX_DELAY);
 800047a:	f107 010e 	add.w	r1, r7, #14
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	2201      	movs	r2, #1
 8000484:	4806      	ldr	r0, [pc, #24]	@ (80004a0 <ST7789_WriteSmallData+0x54>)
 8000486:	f001 fa8d 	bl	80019a4 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800048a:	2201      	movs	r2, #1
 800048c:	2180      	movs	r1, #128	@ 0x80
 800048e:	4803      	ldr	r0, [pc, #12]	@ (800049c <ST7789_WriteSmallData+0x50>)
 8000490:	f000 fddc 	bl	800104c <HAL_GPIO_WritePin>
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	20000028 	.word	0x20000028

080004a4 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80004ae:	2036      	movs	r0, #54	@ 0x36
 80004b0:	f7ff ff54 	bl	800035c <ST7789_WriteCommand>
	switch (m) {
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d81a      	bhi.n	80004f0 <ST7789_SetRotation+0x4c>
 80004ba:	a201      	add	r2, pc, #4	@ (adr r2, 80004c0 <ST7789_SetRotation+0x1c>)
 80004bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c0:	080004d1 	.word	0x080004d1
 80004c4:	080004d9 	.word	0x080004d9
 80004c8:	080004e1 	.word	0x080004e1
 80004cc:	080004e9 	.word	0x080004e9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80004d0:	20c0      	movs	r0, #192	@ 0xc0
 80004d2:	f7ff ffbb 	bl	800044c <ST7789_WriteSmallData>
		break;
 80004d6:	e00c      	b.n	80004f2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80004d8:	20a0      	movs	r0, #160	@ 0xa0
 80004da:	f7ff ffb7 	bl	800044c <ST7789_WriteSmallData>
		break;
 80004de:	e008      	b.n	80004f2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff ffb3 	bl	800044c <ST7789_WriteSmallData>
		break;
 80004e6:	e004      	b.n	80004f2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80004e8:	2060      	movs	r0, #96	@ 0x60
 80004ea:	f7ff ffaf 	bl	800044c <ST7789_WriteSmallData>
		break;
 80004ee:	e000      	b.n	80004f2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80004f0:	bf00      	nop
	}
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop

080004fc <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
 8000502:	4604      	mov	r4, r0
 8000504:	4608      	mov	r0, r1
 8000506:	4611      	mov	r1, r2
 8000508:	461a      	mov	r2, r3
 800050a:	4623      	mov	r3, r4
 800050c:	80fb      	strh	r3, [r7, #6]
 800050e:	4603      	mov	r3, r0
 8000510:	80bb      	strh	r3, [r7, #4]
 8000512:	460b      	mov	r3, r1
 8000514:	807b      	strh	r3, [r7, #2]
 8000516:	4613      	mov	r3, r2
 8000518:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800051a:	2200      	movs	r2, #0
 800051c:	2180      	movs	r1, #128	@ 0x80
 800051e:	4824      	ldr	r0, [pc, #144]	@ (80005b0 <ST7789_SetAddressWindow+0xb4>)
 8000520:	f000 fd94 	bl	800104c <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	82fb      	strh	r3, [r7, #22]
 8000528:	887b      	ldrh	r3, [r7, #2]
 800052a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800052c:	88bb      	ldrh	r3, [r7, #4]
 800052e:	827b      	strh	r3, [r7, #18]
 8000530:	883b      	ldrh	r3, [r7, #0]
 8000532:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000534:	202a      	movs	r0, #42	@ 0x2a
 8000536:	f7ff ff11 	bl	800035c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800053a:	8afb      	ldrh	r3, [r7, #22]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	b29b      	uxth	r3, r3
 8000540:	b2db      	uxtb	r3, r3
 8000542:	733b      	strb	r3, [r7, #12]
 8000544:	8afb      	ldrh	r3, [r7, #22]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	737b      	strb	r3, [r7, #13]
 800054a:	8abb      	ldrh	r3, [r7, #20]
 800054c:	0a1b      	lsrs	r3, r3, #8
 800054e:	b29b      	uxth	r3, r3
 8000550:	b2db      	uxtb	r3, r3
 8000552:	73bb      	strb	r3, [r7, #14]
 8000554:	8abb      	ldrh	r3, [r7, #20]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2104      	movs	r1, #4
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff23 	bl	80003ac <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000566:	202b      	movs	r0, #43	@ 0x2b
 8000568:	f7ff fef8 	bl	800035c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800056c:	8a7b      	ldrh	r3, [r7, #18]
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	b29b      	uxth	r3, r3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	723b      	strb	r3, [r7, #8]
 8000576:	8a7b      	ldrh	r3, [r7, #18]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	727b      	strb	r3, [r7, #9]
 800057c:	8a3b      	ldrh	r3, [r7, #16]
 800057e:	0a1b      	lsrs	r3, r3, #8
 8000580:	b29b      	uxth	r3, r3
 8000582:	b2db      	uxtb	r3, r3
 8000584:	72bb      	strb	r3, [r7, #10]
 8000586:	8a3b      	ldrh	r3, [r7, #16]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2104      	movs	r1, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff0a 	bl	80003ac <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000598:	202c      	movs	r0, #44	@ 0x2c
 800059a:	f7ff fedf 	bl	800035c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800059e:	2201      	movs	r2, #1
 80005a0:	2180      	movs	r1, #128	@ 0x80
 80005a2:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <ST7789_SetAddressWindow+0xb4>)
 80005a4:	f000 fd52 	bl	800104c <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	371c      	adds	r7, #28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b08b      	sub	sp, #44	@ 0x2c
 80005b8:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 80005ba:	2019      	movs	r0, #25
 80005bc:	f000 faba 	bl	8000b34 <HAL_Delay>
    ST7789_RST_Clr();
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c6:	4847      	ldr	r0, [pc, #284]	@ (80006e4 <ST7789_Init+0x130>)
 80005c8:	f000 fd40 	bl	800104c <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80005cc:	2019      	movs	r0, #25
 80005ce:	f000 fab1 	bl	8000b34 <HAL_Delay>
    ST7789_RST_Set();
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d8:	4842      	ldr	r0, [pc, #264]	@ (80006e4 <ST7789_Init+0x130>)
 80005da:	f000 fd37 	bl	800104c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80005de:	2032      	movs	r0, #50	@ 0x32
 80005e0:	f000 faa8 	bl	8000b34 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80005e4:	203a      	movs	r0, #58	@ 0x3a
 80005e6:	f7ff feb9 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80005ea:	2055      	movs	r0, #85	@ 0x55
 80005ec:	f7ff ff2e 	bl	800044c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80005f0:	20b2      	movs	r0, #178	@ 0xb2
 80005f2:	f7ff feb3 	bl	800035c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80005f6:	4a3c      	ldr	r2, [pc, #240]	@ (80006e8 <ST7789_Init+0x134>)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	6018      	str	r0, [r3, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2105      	movs	r1, #5
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fecd 	bl	80003ac <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff46 	bl	80004a4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000618:	20b7      	movs	r0, #183	@ 0xb7
 800061a:	f7ff fe9f 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800061e:	2035      	movs	r0, #53	@ 0x35
 8000620:	f7ff ff14 	bl	800044c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000624:	20bb      	movs	r0, #187	@ 0xbb
 8000626:	f7ff fe99 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800062a:	2019      	movs	r0, #25
 800062c:	f7ff ff0e 	bl	800044c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000630:	20c0      	movs	r0, #192	@ 0xc0
 8000632:	f7ff fe93 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000636:	202c      	movs	r0, #44	@ 0x2c
 8000638:	f7ff ff08 	bl	800044c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 800063c:	20c2      	movs	r0, #194	@ 0xc2
 800063e:	f7ff fe8d 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff ff02 	bl	800044c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000648:	20c3      	movs	r0, #195	@ 0xc3
 800064a:	f7ff fe87 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800064e:	2012      	movs	r0, #18
 8000650:	f7ff fefc 	bl	800044c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000654:	20c4      	movs	r0, #196	@ 0xc4
 8000656:	f7ff fe81 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800065a:	2020      	movs	r0, #32
 800065c:	f7ff fef6 	bl	800044c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000660:	20c6      	movs	r0, #198	@ 0xc6
 8000662:	f7ff fe7b 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000666:	200f      	movs	r0, #15
 8000668:	f7ff fef0 	bl	800044c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800066c:	20d0      	movs	r0, #208	@ 0xd0
 800066e:	f7ff fe75 	bl	800035c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000672:	20a4      	movs	r0, #164	@ 0xa4
 8000674:	f7ff feea 	bl	800044c <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000678:	20a1      	movs	r0, #161	@ 0xa1
 800067a:	f7ff fee7 	bl	800044c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800067e:	20e0      	movs	r0, #224	@ 0xe0
 8000680:	f7ff fe6c 	bl	800035c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000684:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <ST7789_Init+0x138>)
 8000686:	f107 0410 	add.w	r4, r7, #16
 800068a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800068c:	c407      	stmia	r4!, {r0, r1, r2}
 800068e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	210e      	movs	r1, #14
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fe88 	bl	80003ac <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800069c:	20e1      	movs	r0, #225	@ 0xe1
 800069e:	f7ff fe5d 	bl	800035c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <ST7789_Init+0x13c>)
 80006a4:	463c      	mov	r4, r7
 80006a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a8:	c407      	stmia	r4!, {r0, r1, r2}
 80006aa:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80006ac:	463b      	mov	r3, r7
 80006ae:	210e      	movs	r1, #14
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fe7b 	bl	80003ac <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80006b6:	2021      	movs	r0, #33	@ 0x21
 80006b8:	f7ff fe50 	bl	800035c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80006bc:	2011      	movs	r0, #17
 80006be:	f7ff fe4d 	bl	800035c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80006c2:	2013      	movs	r0, #19
 80006c4:	f7ff fe4a 	bl	800035c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80006c8:	2029      	movs	r0, #41	@ 0x29
 80006ca:	f7ff fe47 	bl	800035c <ST7789_WriteCommand>

	HAL_Delay(50);
 80006ce:	2032      	movs	r0, #50	@ 0x32
 80006d0:	f000 fa30 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 f80d 	bl	80006f4 <ST7789_Fill_Color>
}
 80006da:	bf00      	nop
 80006dc:	372c      	adds	r7, #44	@ 0x2c
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40010c00 	.word	0x40010c00
 80006e8:	08001fcc 	.word	0x08001fcc
 80006ec:	08001fd4 	.word	0x08001fd4
 80006f0:	08001fe4 	.word	0x08001fe4

080006f4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80006fe:	23ef      	movs	r3, #239	@ 0xef
 8000700:	f240 123f 	movw	r2, #319	@ 0x13f
 8000704:	2100      	movs	r1, #0
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff fef8 	bl	80004fc <ST7789_SetAddressWindow>
	ST7789_Select();
 800070c:	2200      	movs	r2, #0
 800070e:	2180      	movs	r1, #128	@ 0x80
 8000710:	4816      	ldr	r0, [pc, #88]	@ (800076c <ST7789_Fill_Color+0x78>)
 8000712:	f000 fc9b 	bl	800104c <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	81fb      	strh	r3, [r7, #14]
 800071a:	e019      	b.n	8000750 <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 800071c:	2300      	movs	r3, #0
 800071e:	81bb      	strh	r3, [r7, #12]
 8000720:	e010      	b.n	8000744 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	b29b      	uxth	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	723b      	strb	r3, [r7, #8]
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fe37 	bl	80003ac <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 800073e:	89bb      	ldrh	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	81bb      	strh	r3, [r7, #12]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	2bef      	cmp	r3, #239	@ 0xef
 8000748:	d9eb      	bls.n	8000722 <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 800074a:	89fb      	ldrh	r3, [r7, #14]
 800074c:	3301      	adds	r3, #1
 800074e:	81fb      	strh	r3, [r7, #14]
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000756:	d3e1      	bcc.n	800071c <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8000758:	2201      	movs	r2, #1
 800075a:	2180      	movs	r1, #128	@ 0x80
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <ST7789_Fill_Color+0x78>)
 800075e:	f000 fc75 	bl	800104c <HAL_GPIO_WritePin>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40010c00 	.word	0x40010c00

08000770 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	ST7789_Fill_Color(WHITE);
 8000774:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000778:	f7ff ffbc 	bl	80006f4 <ST7789_Fill_Color>
	HAL_Delay(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000780:	f000 f9d8 	bl	8000b34 <HAL_Delay>
	// ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
	// HAL_Delay(1000);
	ST7789_Fill_Color(CYAN);
 8000784:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8000788:	f7ff ffb4 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 800078c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000790:	f000 f9d0 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(RED);
 8000794:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000798:	f7ff ffac 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 800079c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a0:	f000 f9c8 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 80007a4:	201f      	movs	r0, #31
 80007a6:	f7ff ffa5 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80007aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ae:	f000 f9c1 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 80007b2:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80007b6:	f7ff ff9d 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80007ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007be:	f000 f9b9 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 80007c2:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80007c6:	f7ff ff95 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80007ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ce:	f000 f9b1 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 80007d2:	f64b 4040 	movw	r0, #48192	@ 0xbc40
 80007d6:	f7ff ff8d 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80007da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007de:	f000 f9a9 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 80007e2:	f240 10cf 	movw	r0, #463	@ 0x1cf
 80007e6:	f7ff ff85 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80007ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ee:	f000 f9a1 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 80007f2:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80007f6:	f7ff ff7d 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 80007fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007fe:	f000 f999 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 8000802:	f248 401f 	movw	r0, #33823	@ 0x841f
 8000806:	f7ff ff75 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080e:	f000 f991 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 8000812:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8000816:	f7ff ff6d 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 800081a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800081e:	f000 f989 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 8000822:	f642 3012 	movw	r0, #11026	@ 0x2b12
 8000826:	f7ff ff65 	bl	80006f4 <ST7789_Fill_Color>
    HAL_Delay(500);
 800082a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800082e:	f000 f981 	bl	8000b34 <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 8000832:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000836:	f7ff ff5d 	bl	80006f4 <ST7789_Fill_Color>
	HAL_Delay(500);
 800083a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800083e:	f000 f979 	bl	8000b34 <HAL_Delay>
	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
	HAL_Delay(3000);
#endif
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a14      	ldr	r2, [pc, #80]	@ (80008a4 <HAL_MspInit+0x5c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_MspInit+0x5c>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <HAL_MspInit+0x5c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_MspInit+0x5c>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800087e:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <HAL_MspInit+0x60>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <HAL_MspInit+0x60>)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010000 	.word	0x40010000

080008ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a15      	ldr	r2, [pc, #84]	@ (800091c <HAL_SPI_MspInit+0x70>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d123      	bne.n	8000914 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <HAL_SPI_MspInit+0x74>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a13      	ldr	r2, [pc, #76]	@ (8000920 <HAL_SPI_MspInit+0x74>)
 80008d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <HAL_SPI_MspInit+0x74>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <HAL_SPI_MspInit+0x74>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <HAL_SPI_MspInit+0x74>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <HAL_SPI_MspInit+0x74>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008fc:	23a0      	movs	r3, #160	@ 0xa0
 80008fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <HAL_SPI_MspInit+0x78>)
 8000910:	f000 fa18 	bl	8000d44 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40013000 	.word	0x40013000
 8000920:	40021000 	.word	0x40021000
 8000924:	40010800 	.word	0x40010800

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a1c      	ldr	r2, [pc, #112]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d131      	bne.n	80009ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a1a      	ldr	r2, [pc, #104]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a14      	ldr	r2, [pc, #80]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800097c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4619      	mov	r1, r3
 800098c:	480b      	ldr	r0, [pc, #44]	@ (80009bc <HAL_UART_MspInit+0x94>)
 800098e:	f000 f9d9 	bl	8000d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4619      	mov	r1, r3
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <HAL_UART_MspInit+0x94>)
 80009a8:	f000 f9cc 	bl	8000d44 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40013800 	.word	0x40013800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010800 	.word	0x40010800

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 f874 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff fff8 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2a:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a40:	4c09      	ldr	r4, [pc, #36]	@ (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f001 fa8d 	bl	8001f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fb7b 	bl	800014c <main>
  bx lr
 8000a56:	4770      	bx	lr
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a60:	08002028 	.word	0x08002028
  ldr r2, =_sbss
 8000a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a68:	200020cc 	.word	0x200020cc

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_Init+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_Init+0x28>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f92b 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fedc 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f935 	bl	8000d2a <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f90b 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	@ (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a03      	ldr	r2, [pc, #12]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200020c8 	.word	0x200020c8

08000b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	200020c8 	.word	0x200020c8

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff fff0 	bl	8000b20 <HAL_GetTick>
 8000b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d005      	beq.n	8000b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <HAL_Delay+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5a:	bf00      	nop
 8000b5c:	f7ff ffe0 	bl	8000b20 <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f7      	bhi.n	8000b5c <HAL_Delay+0x28>
  {
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	@ 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff90 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff49 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff5e 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff90 	bl	8000c34 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5f 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffb0 	bl	8000c98 <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b08b      	sub	sp, #44	@ 0x2c
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	e169      	b.n	800102c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8158 	bne.w	8001026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	4a9a      	ldr	r2, [pc, #616]	@ (8000fe4 <HAL_GPIO_Init+0x2a0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d05e      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000d80:	4a98      	ldr	r2, [pc, #608]	@ (8000fe4 <HAL_GPIO_Init+0x2a0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d875      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000d86:	4a98      	ldr	r2, [pc, #608]	@ (8000fe8 <HAL_GPIO_Init+0x2a4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d058      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000d8c:	4a96      	ldr	r2, [pc, #600]	@ (8000fe8 <HAL_GPIO_Init+0x2a4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d86f      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000d92:	4a96      	ldr	r2, [pc, #600]	@ (8000fec <HAL_GPIO_Init+0x2a8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d052      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000d98:	4a94      	ldr	r2, [pc, #592]	@ (8000fec <HAL_GPIO_Init+0x2a8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d869      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000d9e:	4a94      	ldr	r2, [pc, #592]	@ (8000ff0 <HAL_GPIO_Init+0x2ac>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d04c      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000da4:	4a92      	ldr	r2, [pc, #584]	@ (8000ff0 <HAL_GPIO_Init+0x2ac>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d863      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000daa:	4a92      	ldr	r2, [pc, #584]	@ (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d046      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000db0:	4a90      	ldr	r2, [pc, #576]	@ (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d85d      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000db6:	2b12      	cmp	r3, #18
 8000db8:	d82a      	bhi.n	8000e10 <HAL_GPIO_Init+0xcc>
 8000dba:	2b12      	cmp	r3, #18
 8000dbc:	d859      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc4 <HAL_GPIO_Init+0x80>)
 8000dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc4:	08000e3f 	.word	0x08000e3f
 8000dc8:	08000e19 	.word	0x08000e19
 8000dcc:	08000e2b 	.word	0x08000e2b
 8000dd0:	08000e6d 	.word	0x08000e6d
 8000dd4:	08000e73 	.word	0x08000e73
 8000dd8:	08000e73 	.word	0x08000e73
 8000ddc:	08000e73 	.word	0x08000e73
 8000de0:	08000e73 	.word	0x08000e73
 8000de4:	08000e73 	.word	0x08000e73
 8000de8:	08000e73 	.word	0x08000e73
 8000dec:	08000e73 	.word	0x08000e73
 8000df0:	08000e73 	.word	0x08000e73
 8000df4:	08000e73 	.word	0x08000e73
 8000df8:	08000e73 	.word	0x08000e73
 8000dfc:	08000e73 	.word	0x08000e73
 8000e00:	08000e73 	.word	0x08000e73
 8000e04:	08000e73 	.word	0x08000e73
 8000e08:	08000e21 	.word	0x08000e21
 8000e0c:	08000e35 	.word	0x08000e35
 8000e10:	4a79      	ldr	r2, [pc, #484]	@ (8000ff8 <HAL_GPIO_Init+0x2b4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e16:	e02c      	b.n	8000e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e029      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	3304      	adds	r3, #4
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e024      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	623b      	str	r3, [r7, #32]
          break;
 8000e32:	e01f      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	330c      	adds	r3, #12
 8000e3a:	623b      	str	r3, [r7, #32]
          break;
 8000e3c:	e01a      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e46:	2304      	movs	r3, #4
 8000e48:	623b      	str	r3, [r7, #32]
          break;
 8000e4a:	e013      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d105      	bne.n	8000e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e54:	2308      	movs	r3, #8
 8000e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	611a      	str	r2, [r3, #16]
          break;
 8000e5e:	e009      	b.n	8000e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e60:	2308      	movs	r3, #8
 8000e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	615a      	str	r2, [r3, #20]
          break;
 8000e6a:	e003      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
          break;
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          break;
 8000e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2bff      	cmp	r3, #255	@ 0xff
 8000e78:	d801      	bhi.n	8000e7e <HAL_GPIO_Init+0x13a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	e001      	b.n	8000e82 <HAL_GPIO_Init+0x13e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3304      	adds	r3, #4
 8000e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	2bff      	cmp	r3, #255	@ 0xff
 8000e88:	d802      	bhi.n	8000e90 <HAL_GPIO_Init+0x14c>
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x152>
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	3b08      	subs	r3, #8
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	6a39      	ldr	r1, [r7, #32]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 80b1 	beq.w	8001026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000edc:	4a48      	ldr	r2, [pc, #288]	@ (8001000 <HAL_GPIO_Init+0x2bc>)
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a40      	ldr	r2, [pc, #256]	@ (8001004 <HAL_GPIO_Init+0x2c0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d013      	beq.n	8000f30 <HAL_GPIO_Init+0x1ec>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001008 <HAL_GPIO_Init+0x2c4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00d      	beq.n	8000f2c <HAL_GPIO_Init+0x1e8>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3e      	ldr	r2, [pc, #248]	@ (800100c <HAL_GPIO_Init+0x2c8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x1e4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001010 <HAL_GPIO_Init+0x2cc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d101      	bne.n	8000f24 <HAL_GPIO_Init+0x1e0>
 8000f20:	2303      	movs	r3, #3
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f24:	2304      	movs	r3, #4
 8000f26:	e004      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f30:	2300      	movs	r3, #0
 8000f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f42:	492f      	ldr	r1, [pc, #188]	@ (8001000 <HAL_GPIO_Init+0x2bc>)
 8000f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	492c      	ldr	r1, [pc, #176]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4928      	ldr	r1, [pc, #160]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f84:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	4922      	ldr	r1, [pc, #136]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	60cb      	str	r3, [r1, #12]
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	491e      	ldr	r1, [pc, #120]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4918      	ldr	r1, [pc, #96]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	4914      	ldr	r1, [pc, #80]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d021      	beq.n	8001018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	490e      	ldr	r1, [pc, #56]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e021      	b.n	8001026 <HAL_GPIO_Init+0x2e2>
 8000fe2:	bf00      	nop
 8000fe4:	10320000 	.word	0x10320000
 8000fe8:	10310000 	.word	0x10310000
 8000fec:	10220000 	.word	0x10220000
 8000ff0:	10210000 	.word	0x10210000
 8000ff4:	10120000 	.word	0x10120000
 8000ff8:	10110000 	.word	0x10110000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00
 800100c:	40011000 	.word	0x40011000
 8001010:	40011400 	.word	0x40011400
 8001014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_GPIO_Init+0x304>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	43db      	mvns	r3, r3
 8001020:	4909      	ldr	r1, [pc, #36]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8001022:	4013      	ands	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	3301      	adds	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	f47f ae8e 	bne.w	8000d58 <HAL_GPIO_Init+0x14>
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	372c      	adds	r7, #44	@ 0x2c
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	611a      	str	r2, [r3, #16]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e272      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8087 	beq.w	80011aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800109c:	4b92      	ldr	r3, [pc, #584]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d00c      	beq.n	80010c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010a8:	4b8f      	ldr	r3, [pc, #572]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d112      	bne.n	80010da <HAL_RCC_OscConfig+0x5e>
 80010b4:	4b8c      	ldr	r3, [pc, #560]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c0:	d10b      	bne.n	80010da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c2:	4b89      	ldr	r3, [pc, #548]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d06c      	beq.n	80011a8 <HAL_RCC_OscConfig+0x12c>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d168      	bne.n	80011a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e24c      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x76>
 80010e4:	4b80      	ldr	r3, [pc, #512]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a7f      	ldr	r2, [pc, #508]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e02e      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x98>
 80010fa:	4b7b      	ldr	r3, [pc, #492]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a7a      	ldr	r2, [pc, #488]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b78      	ldr	r3, [pc, #480]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a77      	ldr	r2, [pc, #476]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e01d      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0xbc>
 800111e:	4b72      	ldr	r3, [pc, #456]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a71      	ldr	r2, [pc, #452]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b6f      	ldr	r3, [pc, #444]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6e      	ldr	r2, [pc, #440]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xd4>
 8001138:	4b6b      	ldr	r3, [pc, #428]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a6a      	ldr	r2, [pc, #424]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a67      	ldr	r2, [pc, #412]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fce2 	bl	8000b20 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fcde 	bl	8000b20 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	@ 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e200      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b5d      	ldr	r3, [pc, #372]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0xe4>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fcce 	bl	8000b20 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fcca 	bl	8000b20 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	@ 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1ec      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	4b53      	ldr	r3, [pc, #332]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x10c>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d063      	beq.n	800127e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b6:	4b4c      	ldr	r3, [pc, #304]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011c2:	4b49      	ldr	r3, [pc, #292]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d11c      	bne.n	8001208 <HAL_RCC_OscConfig+0x18c>
 80011ce:	4b46      	ldr	r3, [pc, #280]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x176>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d001      	beq.n	80011f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e1c0      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4939      	ldr	r1, [pc, #228]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	e03a      	b.n	800127e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001210:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <HAL_RCC_OscConfig+0x270>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7ff fc83 	bl	8000b20 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fc7f 	bl	8000b20 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1a1      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4927      	ldr	r1, [pc, #156]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <HAL_RCC_OscConfig+0x270>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fc62 	bl	8000b20 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc5e 	bl	8000b20 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e180      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d03a      	beq.n	8001300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d019      	beq.n	80012c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fc42 	bl	8000b20 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc3e 	bl	8000b20 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e160      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 face 	bl	8001860 <RCC_Delay>
 80012c4:	e01c      	b.n	8001300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_RCC_OscConfig+0x274>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc28 	bl	8000b20 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d2:	e00f      	b.n	80012f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc24 	bl	8000b20 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d908      	bls.n	80012f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e146      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	42420000 	.word	0x42420000
 80012f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	4b92      	ldr	r3, [pc, #584]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e9      	bne.n	80012d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a6 	beq.w	800145a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001312:	4b8b      	ldr	r3, [pc, #556]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10d      	bne.n	800133a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b88      	ldr	r3, [pc, #544]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a87      	ldr	r2, [pc, #540]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b85      	ldr	r3, [pc, #532]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b82      	ldr	r3, [pc, #520]	@ (8001544 <HAL_RCC_OscConfig+0x4c8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4b7f      	ldr	r3, [pc, #508]	@ (8001544 <HAL_RCC_OscConfig+0x4c8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a7e      	ldr	r2, [pc, #504]	@ (8001544 <HAL_RCC_OscConfig+0x4c8>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7ff fbe5 	bl	8000b20 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff fbe1 	bl	8000b20 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b64      	cmp	r3, #100	@ 0x64
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e103      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	4b75      	ldr	r3, [pc, #468]	@ (8001544 <HAL_RCC_OscConfig+0x4c8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x312>
 8001380:	4b6f      	ldr	r3, [pc, #444]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a6e      	ldr	r2, [pc, #440]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6213      	str	r3, [r2, #32]
 800138c:	e02d      	b.n	80013ea <HAL_RCC_OscConfig+0x36e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x334>
 8001396:	4b6a      	ldr	r3, [pc, #424]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4a69      	ldr	r2, [pc, #420]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6213      	str	r3, [r2, #32]
 80013a2:	4b67      	ldr	r3, [pc, #412]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a66      	ldr	r2, [pc, #408]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	e01c      	b.n	80013ea <HAL_RCC_OscConfig+0x36e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x356>
 80013b8:	4b61      	ldr	r3, [pc, #388]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a60      	ldr	r2, [pc, #384]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6213      	str	r3, [r2, #32]
 80013c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6213      	str	r3, [r2, #32]
 80013d0:	e00b      	b.n	80013ea <HAL_RCC_OscConfig+0x36e>
 80013d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6213      	str	r3, [r2, #32]
 80013de:	4b58      	ldr	r3, [pc, #352]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4a57      	ldr	r2, [pc, #348]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d015      	beq.n	800141e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb95 	bl	8000b20 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fb91 	bl	8000b20 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e0b1      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001410:	4b4b      	ldr	r3, [pc, #300]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0ee      	beq.n	80013fa <HAL_RCC_OscConfig+0x37e>
 800141c:	e014      	b.n	8001448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fb7f 	bl	8000b20 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fb7b 	bl	8000b20 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e09b      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143c:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ee      	bne.n	8001426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d105      	bne.n	800145a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144e:	4b3c      	ldr	r3, [pc, #240]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a3b      	ldr	r2, [pc, #236]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8087 	beq.w	8001572 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	d061      	beq.n	8001534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d146      	bne.n	8001506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <HAL_RCC_OscConfig+0x4cc>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb4f 	bl	8000b20 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb4b 	bl	8000b20 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e06d      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001498:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ac:	d108      	bne.n	80014c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ae:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	4921      	ldr	r1, [pc, #132]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a19      	ldr	r1, [r3, #32]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	430b      	orrs	r3, r1
 80014d2:	491b      	ldr	r1, [pc, #108]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_RCC_OscConfig+0x4cc>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fb1f 	bl	8000b20 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff fb1b 	bl	8000b20 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e03d      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x46a>
 8001504:	e035      	b.n	8001572 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_RCC_OscConfig+0x4cc>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fb08 	bl	8000b20 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff fb04 	bl	8000b20 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e026      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x498>
 8001532:	e01e      	b.n	8001572 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e019      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
 8001540:	40021000 	.word	0x40021000
 8001544:	40007000 	.word	0x40007000
 8001548:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_RCC_OscConfig+0x500>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	429a      	cmp	r2, r3
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0d0      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b6a      	ldr	r3, [pc, #424]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d910      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b67      	ldr	r3, [pc, #412]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4965      	ldr	r1, [pc, #404]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a58      	ldr	r2, [pc, #352]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a52      	ldr	r2, [pc, #328]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d040      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d115      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e073      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164e:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06b      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165e:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f023 0203 	bic.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4936      	ldr	r1, [pc, #216]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff fa56 	bl	8000b20 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff fa52 	bl	8000b20 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e053      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 020c 	and.w	r2, r3, #12
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d1eb      	bne.n	8001678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d210      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 0207 	bic.w	r2, r3, #7
 80016b6:	4922      	ldr	r1, [pc, #136]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800170e:	f000 f821 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490a      	ldr	r1, [pc, #40]	@ (8001748 <HAL_RCC_ClockConfig+0x1c8>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <HAL_RCC_ClockConfig+0x1cc>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1d0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f9b4 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40022000 	.word	0x40022000
 8001744:	40021000 	.word	0x40021000
 8001748:	08001ff4 	.word	0x08001ff4
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800176e:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b04      	cmp	r3, #4
 800177c:	d002      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x30>
 800177e:	2b08      	cmp	r3, #8
 8001780:	d003      	beq.n	800178a <HAL_RCC_GetSysClockFreq+0x36>
 8001782:	e027      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001786:	613b      	str	r3, [r7, #16]
      break;
 8001788:	e027      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	0c9b      	lsrs	r3, r3, #18
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d010      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a2:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0c5b      	lsrs	r3, r3, #17
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x98>)
 80017b6:	fb03 f202 	mul.w	r2, r3, r2
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e004      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	613b      	str	r3, [r7, #16]
      break;
 80017d2:	e002      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x98>)
 80017d6:	613b      	str	r3, [r7, #16]
      break;
 80017d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017da:	693b      	ldr	r3, [r7, #16]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	007a1200 	.word	0x007a1200
 80017f0:	0800200c 	.word	0x0800200c
 80017f4:	0800201c 	.word	0x0800201c
 80017f8:	003d0900 	.word	0x003d0900

080017fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001800:	4b02      	ldr	r3, [pc, #8]	@ (800180c <HAL_RCC_GetHCLKFreq+0x10>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000000 	.word	0x20000000

08001810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001814:	f7ff fff2 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 8001818:	4602      	mov	r2, r0
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	4903      	ldr	r1, [pc, #12]	@ (8001834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	08002004 	.word	0x08002004

08001838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800183c:	f7ff ffde 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 8001840:	4602      	mov	r2, r0
 8001842:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	0adb      	lsrs	r3, r3, #11
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	4903      	ldr	r1, [pc, #12]	@ (800185c <HAL_RCC_GetPCLK2Freq+0x24>)
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	08002004 	.word	0x08002004

08001860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <RCC_Delay+0x34>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <RCC_Delay+0x38>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0a5b      	lsrs	r3, r3, #9
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800187c:	bf00      	nop
  }
  while (Delay --);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e5a      	subs	r2, r3, #1
 8001882:	60fa      	str	r2, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f9      	bne.n	800187c <RCC_Delay+0x1c>
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	20000000 	.word	0x20000000
 8001898:	10624dd3 	.word	0x10624dd3

0800189c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e076      	b.n	800199c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d108      	bne.n	80018c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80018be:	d009      	beq.n	80018d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
 80018c6:	e005      	b.n	80018d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe ffdc 	bl	80008ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800190a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001958:	ea42 0103 	orr.w	r1, r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	0c1a      	lsrs	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f002 0204 	and.w	r2, r2, #4
 800197a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019b4:	f7ff f8b4 	bl	8000b20 <HAL_GetTick>
 80019b8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
 80019cc:	e12a      	b.n	8001c24 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HAL_SPI_Transmit+0x36>
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e122      	b.n	8001c24 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_SPI_Transmit+0x48>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e11b      	b.n	8001c24 <HAL_SPI_Transmit+0x280>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2203      	movs	r2, #3
 80019f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	88fa      	ldrh	r2, [r7, #6]
 8001a0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a3a:	d10f      	bne.n	8001a5c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a66:	2b40      	cmp	r3, #64	@ 0x40
 8001a68:	d007      	beq.n	8001a7a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a82:	d152      	bne.n	8001b2a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_SPI_Transmit+0xee>
 8001a8c:	8b7b      	ldrh	r3, [r7, #26]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d145      	bne.n	8001b1e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	1c9a      	adds	r2, r3, #2
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ab6:	e032      	b.n	8001b1e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d112      	bne.n	8001aec <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	881a      	ldrh	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	1c9a      	adds	r2, r3, #2
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001aea:	e018      	b.n	8001b1e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aec:	f7ff f818 	bl	8000b20 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d803      	bhi.n	8001b04 <HAL_SPI_Transmit+0x160>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b02:	d102      	bne.n	8001b0a <HAL_SPI_Transmit+0x166>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e082      	b.n	8001c24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1c7      	bne.n	8001ab8 <HAL_SPI_Transmit+0x114>
 8001b28:	e053      	b.n	8001bd2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_SPI_Transmit+0x194>
 8001b32:	8b7b      	ldrh	r3, [r7, #26]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d147      	bne.n	8001bc8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	330c      	adds	r3, #12
 8001b42:	7812      	ldrb	r2, [r2, #0]
 8001b44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b5e:	e033      	b.n	8001bc8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d113      	bne.n	8001b96 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	330c      	adds	r3, #12
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001b94:	e018      	b.n	8001bc8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b96:	f7fe ffc3 	bl	8000b20 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d803      	bhi.n	8001bae <HAL_SPI_Transmit+0x20a>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d102      	bne.n	8001bb4 <HAL_SPI_Transmit+0x210>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e02d      	b.n	8001c24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1c6      	bne.n	8001b60 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f8b0 	bl	8001d3c <SPI_EndRxTxTransaction>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
  }
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c3c:	f7fe ff70 	bl	8000b20 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c4c:	f7fe ff68 	bl	8000b20 <HAL_GetTick>
 8001c50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c52:	4b39      	ldr	r3, [pc, #228]	@ (8001d38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	0d1b      	lsrs	r3, r3, #20
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c62:	e054      	b.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d050      	beq.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c6c:	f7fe ff58 	bl	8000b20 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d902      	bls.n	8001c82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d13d      	bne.n	8001cfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001c90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c9a:	d111      	bne.n	8001cc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ca4:	d004      	beq.n	8001cb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cae:	d107      	bne.n	8001cc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cc8:	d10f      	bne.n	8001cea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ce8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e017      	b.n	8001d2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d19b      	bne.n	8001c64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2102      	movs	r1, #2
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff ff6a 	bl	8001c2c <SPI_WaitFlagStateUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	f043 0220 	orr.w	r2, r3, #32
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e013      	b.n	8001d96 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2200      	movs	r2, #0
 8001d76:	2180      	movs	r1, #128	@ 0x80
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff ff57 	bl	8001c2c <SPI_WaitFlagStateUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d88:	f043 0220 	orr.w	r2, r3, #32
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e000      	b.n	8001d96 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e042      	b.n	8001e36 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d106      	bne.n	8001dca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7fe fdaf 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2224      	movs	r2, #36	@ 0x24
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001de0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f82c 	bl	8001e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001df6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e7a:	f023 030c 	bic.w	r3, r3, #12
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f54 <UART_SetConfig+0x114>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ea8:	f7ff fcc6 	bl	8001838 <HAL_RCC_GetPCLK2Freq>
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	e002      	b.n	8001eb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001eb0:	f7ff fcae 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 8001eb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009a      	lsls	r2, r3, #2
 8001ec0:	441a      	add	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <UART_SetConfig+0x118>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	0119      	lsls	r1, r3, #4
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	009a      	lsls	r2, r3, #2
 8001ee0:	441a      	add	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <UART_SetConfig+0x118>)
 8001eee:	fba3 0302 	umull	r0, r3, r3, r2
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2064      	movs	r0, #100	@ 0x64
 8001ef6:	fb00 f303 	mul.w	r3, r0, r3
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	3332      	adds	r3, #50	@ 0x32
 8001f00:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <UART_SetConfig+0x118>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f0c:	4419      	add	r1, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009a      	lsls	r2, r3, #2
 8001f18:	441a      	add	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <UART_SetConfig+0x118>)
 8001f26:	fba3 0302 	umull	r0, r3, r3, r2
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2064      	movs	r0, #100	@ 0x64
 8001f2e:	fb00 f303 	mul.w	r3, r0, r3
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	3332      	adds	r3, #50	@ 0x32
 8001f38:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <UART_SetConfig+0x118>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	f003 020f 	and.w	r2, r3, #15
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	440a      	add	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40013800 	.word	0x40013800
 8001f58:	51eb851f 	.word	0x51eb851f

08001f5c <memset>:
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4402      	add	r2, r0
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d100      	bne.n	8001f66 <memset+0xa>
 8001f64:	4770      	bx	lr
 8001f66:	f803 1b01 	strb.w	r1, [r3], #1
 8001f6a:	e7f9      	b.n	8001f60 <memset+0x4>

08001f6c <__libc_init_array>:
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	2600      	movs	r6, #0
 8001f70:	4d0c      	ldr	r5, [pc, #48]	@ (8001fa4 <__libc_init_array+0x38>)
 8001f72:	4c0d      	ldr	r4, [pc, #52]	@ (8001fa8 <__libc_init_array+0x3c>)
 8001f74:	1b64      	subs	r4, r4, r5
 8001f76:	10a4      	asrs	r4, r4, #2
 8001f78:	42a6      	cmp	r6, r4
 8001f7a:	d109      	bne.n	8001f90 <__libc_init_array+0x24>
 8001f7c:	f000 f81a 	bl	8001fb4 <_init>
 8001f80:	2600      	movs	r6, #0
 8001f82:	4d0a      	ldr	r5, [pc, #40]	@ (8001fac <__libc_init_array+0x40>)
 8001f84:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb0 <__libc_init_array+0x44>)
 8001f86:	1b64      	subs	r4, r4, r5
 8001f88:	10a4      	asrs	r4, r4, #2
 8001f8a:	42a6      	cmp	r6, r4
 8001f8c:	d105      	bne.n	8001f9a <__libc_init_array+0x2e>
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
 8001f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f94:	4798      	blx	r3
 8001f96:	3601      	adds	r6, #1
 8001f98:	e7ee      	b.n	8001f78 <__libc_init_array+0xc>
 8001f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f9e:	4798      	blx	r3
 8001fa0:	3601      	adds	r6, #1
 8001fa2:	e7f2      	b.n	8001f8a <__libc_init_array+0x1e>
 8001fa4:	08002020 	.word	0x08002020
 8001fa8:	08002020 	.word	0x08002020
 8001fac:	08002020 	.word	0x08002020
 8001fb0:	08002024 	.word	0x08002024

08001fb4 <_init>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr

08001fc0 <_fini>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	bf00      	nop
 8001fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc6:	bc08      	pop	{r3}
 8001fc8:	469e      	mov	lr, r3
 8001fca:	4770      	bx	lr

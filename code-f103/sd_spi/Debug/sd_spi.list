
sd_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  080081e0  080081e0  000091e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800884c  0800884c  0000a080  2**0
                  CONTENTS
  4 .ARM          00000000  0800884c  0800884c  0000a080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800884c  0800884c  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008850  08008850  00009850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008854  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000251c  20000080  080088d4  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000259c  080088d4  0000a59c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbf6  00000000  00000000  0000a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002509  00000000  00000000  00016c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000191a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000990  00000000  00000000  00019e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019164  00000000  00000000  0001a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fe0  00000000  00000000  0003391c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000870ad  00000000  00000000  000448fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb9a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  000cb9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000cf4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080081c8 	.word	0x080081c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080081c8 	.word	0x080081c8

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2uiz>:
 8000718:	004a      	lsls	r2, r1, #1
 800071a:	d211      	bcs.n	8000740 <__aeabi_d2uiz+0x28>
 800071c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000720:	d211      	bcs.n	8000746 <__aeabi_d2uiz+0x2e>
 8000722:	d50d      	bpl.n	8000740 <__aeabi_d2uiz+0x28>
 8000724:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800072c:	d40e      	bmi.n	800074c <__aeabi_d2uiz+0x34>
 800072e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073a:	fa23 f002 	lsr.w	r0, r3, r2
 800073e:	4770      	bx	lr
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	4770      	bx	lr
 8000746:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074a:	d102      	bne.n	8000752 <__aeabi_d2uiz+0x3a>
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	4770      	bx	lr
 8000752:	f04f 0000 	mov.w	r0, #0
 8000756:	4770      	bx	lr

08000758 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000762:	4802      	ldr	r0, [pc, #8]	@ (800076c <SELECT+0x14>)
 8000764:	f001 fb7e 	bl	8001e64 <HAL_GPIO_WritePin>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40010c00 	.word	0x40010c00

08000770 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077a:	4802      	ldr	r0, [pc, #8]	@ (8000784 <DESELECT+0x14>)
 800077c:	f001 fb72 	bl	8001e64 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40010c00 	.word	0x40010c00

08000788 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000792:	bf00      	nop
 8000794:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <SPI_TxByte+0x30>)
 8000796:	f002 fafe 	bl	8002d96 <HAL_SPI_GetState>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d1f9      	bne.n	8000794 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <SPI_TxByte+0x30>)
 80007aa:	f002 f807 	bl	80027bc <HAL_SPI_Transmit>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000a0 	.word	0x200000a0

080007bc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80007c2:	23ff      	movs	r3, #255	@ 0xff
 80007c4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80007ca:	bf00      	nop
 80007cc:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <SPI_RxByte+0x38>)
 80007ce:	f002 fae2 	bl	8002d96 <HAL_SPI_GetState>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d1f9      	bne.n	80007cc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80007d8:	1dba      	adds	r2, r7, #6
 80007da:	1df9      	adds	r1, r7, #7
 80007dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2301      	movs	r3, #1
 80007e4:	4803      	ldr	r0, [pc, #12]	@ (80007f4 <SPI_RxByte+0x38>)
 80007e6:	f002 f92d 	bl	8002a44 <HAL_SPI_TransmitReceive>

  return data;
 80007ea:	79bb      	ldrb	r3, [r7, #6]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000a0 	.word	0x200000a0

080007f8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000800:	f7ff ffdc 	bl	80007bc <SPI_RxByte>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	701a      	strb	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <SD_ReadyWait+0x34>)
 800081c:	2232      	movs	r2, #50	@ 0x32
 800081e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000820:	f7ff ffcc 	bl	80007bc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000824:	f7ff ffca 	bl	80007bc <SPI_RxByte>
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2bff      	cmp	r3, #255	@ 0xff
 8000830:	d004      	beq.n	800083c <SD_ReadyWait+0x28>
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <SD_ReadyWait+0x34>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f3      	bne.n	8000824 <SD_ReadyWait+0x10>

  return res;
 800083c:	79fb      	ldrb	r3, [r7, #7]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20002212 	.word	0x20002212

0800084c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000852:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000856:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000858:	f7ff ff8a 	bl	8000770 <DESELECT>

  for(int i = 0; i < 10; i++)
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	e005      	b.n	800086e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000862:	20ff      	movs	r0, #255	@ 0xff
 8000864:	f7ff ff90 	bl	8000788 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	3301      	adds	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	2b09      	cmp	r3, #9
 8000872:	ddf6      	ble.n	8000862 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000874:	f7ff ff70 	bl	8000758 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000878:	2340      	movs	r3, #64	@ 0x40
 800087a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800088c:	2395      	movs	r3, #149	@ 0x95
 800088e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e009      	b.n	80008aa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff72 	bl	8000788 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3301      	adds	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	ddf2      	ble.n	8000896 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80008b0:	e002      	b.n	80008b8 <SD_PowerOn+0x6c>
  {
    Count--;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80008b8:	f7ff ff80 	bl	80007bc <SPI_RxByte>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d002      	beq.n	80008c8 <SD_PowerOn+0x7c>
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f4      	bne.n	80008b2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80008c8:	f7ff ff52 	bl	8000770 <DESELECT>
  SPI_TxByte(0XFF);
 80008cc:	20ff      	movs	r0, #255	@ 0xff
 80008ce:	f7ff ff5b 	bl	8000788 <SPI_TxByte>

  PowerFlag = 1;
 80008d2:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <SD_PowerOn+0x94>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000009d 	.word	0x2000009d

080008e4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <SD_PowerOff+0x14>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	2000009d 	.word	0x2000009d

080008fc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <SD_CheckPower+0x10>)
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	2000009d 	.word	0x2000009d

08000910 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <SD_RxDataBlock+0x68>)
 800091c:	220a      	movs	r2, #10
 800091e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000920:	f7ff ff4c 	bl	80007bc <SPI_RxByte>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	2bff      	cmp	r3, #255	@ 0xff
 800092c:	d104      	bne.n	8000938 <SD_RxDataBlock+0x28>
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <SD_RxDataBlock+0x68>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1f3      	bne.n	8000920 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2bfe      	cmp	r3, #254	@ 0xfe
 800093c:	d001      	beq.n	8000942 <SD_RxDataBlock+0x32>
    return FALSE;
 800093e:	2300      	movs	r3, #0
 8000940:	e016      	b.n	8000970 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff55 	bl	80007f8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff4f 	bl	80007f8 <SPI_RxBytePtr>
  } while(btr -= 2);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	3b02      	subs	r3, #2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1ed      	bne.n	8000942 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000966:	f7ff ff29 	bl	80007bc <SPI_RxByte>
  SPI_RxByte();
 800096a:	f7ff ff27 	bl	80007bc <SPI_RxByte>

  return TRUE;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20002211 	.word	0x20002211

0800097c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800098c:	f7ff ff42 	bl	8000814 <SD_ReadyWait>
 8000990:	4603      	mov	r3, r0
 8000992:	2bff      	cmp	r3, #255	@ 0xff
 8000994:	d001      	beq.n	800099a <SD_TxDataBlock+0x1e>
    return FALSE;
 8000996:	2300      	movs	r3, #0
 8000998:	e040      	b.n	8000a1c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fef3 	bl	8000788 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	2bfd      	cmp	r3, #253	@ 0xfd
 80009a6:	d031      	beq.n	8000a0c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fee7 	bl	8000788 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	607a      	str	r2, [r7, #4]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fee0 	bl	8000788 <SPI_TxByte>
    } while (--wc);
 80009c8:	7bbb      	ldrb	r3, [r7, #14]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	73bb      	strb	r3, [r7, #14]
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1eb      	bne.n	80009ac <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80009d4:	f7ff fef2 	bl	80007bc <SPI_RxByte>
    SPI_RxByte();
 80009d8:	f7ff fef0 	bl	80007bc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80009dc:	e00b      	b.n	80009f6 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80009de:	f7ff feed 	bl	80007bc <SPI_RxByte>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	f003 031f 	and.w	r3, r3, #31
 80009ec:	2b05      	cmp	r3, #5
 80009ee:	d006      	beq.n	80009fe <SD_TxDataBlock+0x82>
        break;

      i++;
 80009f0:	7b7b      	ldrb	r3, [r7, #13]
 80009f2:	3301      	adds	r3, #1
 80009f4:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80009f6:	7b7b      	ldrb	r3, [r7, #13]
 80009f8:	2b40      	cmp	r3, #64	@ 0x40
 80009fa:	d9f0      	bls.n	80009de <SD_TxDataBlock+0x62>
 80009fc:	e000      	b.n	8000a00 <SD_TxDataBlock+0x84>
        break;
 80009fe:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000a00:	bf00      	nop
 8000a02:	f7ff fedb 	bl	80007bc <SPI_RxByte>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0fa      	beq.n	8000a02 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	f003 031f 	and.w	r3, r3, #31
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d101      	bne.n	8000a1a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000a30:	f7ff fef0 	bl	8000814 <SD_ReadyWait>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2bff      	cmp	r3, #255	@ 0xff
 8000a38:	d001      	beq.n	8000a3e <SD_SendCmd+0x1a>
    return 0xFF;
 8000a3a:	23ff      	movs	r3, #255	@ 0xff
 8000a3c:	e040      	b.n	8000ac0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fea1 	bl	8000788 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	0e1b      	lsrs	r3, r3, #24
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe9b 	bl	8000788 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	0c1b      	lsrs	r3, r3, #16
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe95 	bl	8000788 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe8f 	bl	8000788 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fe8a 	bl	8000788 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b40      	cmp	r3, #64	@ 0x40
 8000a7c:	d101      	bne.n	8000a82 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000a7e:	2395      	movs	r3, #149	@ 0x95
 8000a80:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b48      	cmp	r3, #72	@ 0x48
 8000a86:	d101      	bne.n	8000a8c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000a88:	2387      	movs	r3, #135	@ 0x87
 8000a8a:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fe7a 	bl	8000788 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b4c      	cmp	r3, #76	@ 0x4c
 8000a98:	d101      	bne.n	8000a9e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000a9a:	f7ff fe8f 	bl	80007bc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000aa2:	f7ff fe8b 	bl	80007bc <SPI_RxByte>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000aaa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	da05      	bge.n	8000abe <SD_SendCmd+0x9a>
 8000ab2:	7bbb      	ldrb	r3, [r7, #14]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	73bb      	strb	r3, [r7, #14]
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f1      	bne.n	8000aa2 <SD_SendCmd+0x7e>

  return res;
 8000abe:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e0d5      	b.n	8000c88 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000adc:	4b6c      	ldr	r3, [pc, #432]	@ (8000c90 <SD_disk_initialize+0x1c8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <SD_disk_initialize+0x2a>
    return Stat;
 8000aea:	4b69      	ldr	r3, [pc, #420]	@ (8000c90 <SD_disk_initialize+0x1c8>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	e0ca      	b.n	8000c88 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000af2:	f7ff feab 	bl	800084c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000af6:	f7ff fe2f 	bl	8000758 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000afe:	2100      	movs	r1, #0
 8000b00:	2040      	movs	r0, #64	@ 0x40
 8000b02:	f7ff ff8f 	bl	8000a24 <SD_SendCmd>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	f040 80a5 	bne.w	8000c58 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000b0e:	4b61      	ldr	r3, [pc, #388]	@ (8000c94 <SD_disk_initialize+0x1cc>)
 8000b10:	2264      	movs	r2, #100	@ 0x64
 8000b12:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000b14:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000b18:	2048      	movs	r0, #72	@ 0x48
 8000b1a:	f7ff ff83 	bl	8000a24 <SD_SendCmd>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d158      	bne.n	8000bd6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e00c      	b.n	8000b44 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000b2a:	7bfc      	ldrb	r4, [r7, #15]
 8000b2c:	f7ff fe46 	bl	80007bc <SPI_RxByte>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	f104 0310 	add.w	r3, r4, #16
 8000b38:	443b      	add	r3, r7
 8000b3a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	3301      	adds	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d9ef      	bls.n	8000b2a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b4a:	7abb      	ldrb	r3, [r7, #10]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	f040 8083 	bne.w	8000c58 <SD_disk_initialize+0x190>
 8000b52:	7afb      	ldrb	r3, [r7, #11]
 8000b54:	2baa      	cmp	r3, #170	@ 0xaa
 8000b56:	d17f      	bne.n	8000c58 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2077      	movs	r0, #119	@ 0x77
 8000b5c:	f7ff ff62 	bl	8000a24 <SD_SendCmd>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d807      	bhi.n	8000b76 <SD_disk_initialize+0xae>
 8000b66:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000b6a:	2069      	movs	r0, #105	@ 0x69
 8000b6c:	f7ff ff5a 	bl	8000a24 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000b76:	4b47      	ldr	r3, [pc, #284]	@ (8000c94 <SD_disk_initialize+0x1cc>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1eb      	bne.n	8000b58 <SD_disk_initialize+0x90>
 8000b80:	e000      	b.n	8000b84 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000b82:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b84:	4b43      	ldr	r3, [pc, #268]	@ (8000c94 <SD_disk_initialize+0x1cc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d064      	beq.n	8000c58 <SD_disk_initialize+0x190>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	207a      	movs	r0, #122	@ 0x7a
 8000b92:	f7ff ff47 	bl	8000a24 <SD_SendCmd>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d15d      	bne.n	8000c58 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	e00c      	b.n	8000bbc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000ba2:	7bfc      	ldrb	r4, [r7, #15]
 8000ba4:	f7ff fe0a 	bl	80007bc <SPI_RxByte>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	f104 0310 	add.w	r3, r4, #16
 8000bb0:	443b      	add	r3, r7
 8000bb2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d9ef      	bls.n	8000ba2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000bc2:	7a3b      	ldrb	r3, [r7, #8]
 8000bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SD_disk_initialize+0x108>
 8000bcc:	2306      	movs	r3, #6
 8000bce:	e000      	b.n	8000bd2 <SD_disk_initialize+0x10a>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	73bb      	strb	r3, [r7, #14]
 8000bd4:	e040      	b.n	8000c58 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2077      	movs	r0, #119	@ 0x77
 8000bda:	f7ff ff23 	bl	8000a24 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d808      	bhi.n	8000bf6 <SD_disk_initialize+0x12e>
 8000be4:	2100      	movs	r1, #0
 8000be6:	2069      	movs	r0, #105	@ 0x69
 8000be8:	f7ff ff1c 	bl	8000a24 <SD_SendCmd>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d801      	bhi.n	8000bf6 <SD_disk_initialize+0x12e>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e000      	b.n	8000bf8 <SD_disk_initialize+0x130>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000bfa:	7bbb      	ldrb	r3, [r7, #14]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d10e      	bne.n	8000c1e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000c00:	2100      	movs	r1, #0
 8000c02:	2077      	movs	r0, #119	@ 0x77
 8000c04:	f7ff ff0e 	bl	8000a24 <SD_SendCmd>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d80e      	bhi.n	8000c2c <SD_disk_initialize+0x164>
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2069      	movs	r0, #105	@ 0x69
 8000c12:	f7ff ff07 	bl	8000a24 <SD_SendCmd>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000c1c:	e00d      	b.n	8000c3a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2041      	movs	r0, #65	@ 0x41
 8000c22:	f7ff feff 	bl	8000a24 <SD_SendCmd>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d005      	beq.n	8000c38 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <SD_disk_initialize+0x1cc>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1e1      	bne.n	8000bfa <SD_disk_initialize+0x132>
 8000c36:	e000      	b.n	8000c3a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000c38:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <SD_disk_initialize+0x1cc>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d007      	beq.n	8000c54 <SD_disk_initialize+0x18c>
 8000c44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c48:	2050      	movs	r0, #80	@ 0x50
 8000c4a:	f7ff feeb 	bl	8000a24 <SD_SendCmd>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000c58:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <SD_disk_initialize+0x1d0>)
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000c5e:	f7ff fd87 	bl	8000770 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000c62:	f7ff fdab 	bl	80007bc <SPI_RxByte>

  if (type)
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <SD_disk_initialize+0x1c8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f023 0301 	bic.w	r3, r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SD_disk_initialize+0x1c8>)
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e001      	b.n	8000c82 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000c7e:	f7ff fe31 	bl	80008e4 <SD_PowerOff>
  }

  return Stat;
 8000c82:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <SD_disk_initialize+0x1c8>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20002211 	.word	0x20002211
 8000c98:	2000009c 	.word	0x2000009c

08000c9c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e002      	b.n	8000cb6 <SD_disk_status+0x1a>

  return Stat;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <SD_disk_status+0x24>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000000 	.word	0x20000000

08000cc4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d102      	bne.n	8000ce0 <SD_disk_read+0x1c>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <SD_disk_read+0x20>
    return RES_PARERR;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	e051      	b.n	8000d88 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <SD_disk_read+0xcc>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e048      	b.n	8000d88 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000cf6:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <SD_disk_read+0xd0>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	025b      	lsls	r3, r3, #9
 8000d06:	607b      	str	r3, [r7, #4]

  SELECT();
 8000d08:	f7ff fd26 	bl	8000758 <SELECT>

  if (count == 1)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d111      	bne.n	8000d36 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2051      	movs	r0, #81	@ 0x51
 8000d16:	f7ff fe85 	bl	8000a24 <SD_SendCmd>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d129      	bne.n	8000d74 <SD_disk_read+0xb0>
 8000d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d24:	68b8      	ldr	r0, [r7, #8]
 8000d26:	f7ff fdf3 	bl	8000910 <SD_RxDataBlock>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d021      	beq.n	8000d74 <SD_disk_read+0xb0>
      count = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	e01e      	b.n	8000d74 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2052      	movs	r0, #82	@ 0x52
 8000d3a:	f7ff fe73 	bl	8000a24 <SD_SendCmd>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d117      	bne.n	8000d74 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000d44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d48:	68b8      	ldr	r0, [r7, #8]
 8000d4a:	f7ff fde1 	bl	8000910 <SD_RxDataBlock>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00a      	beq.n	8000d6a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d5a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1ed      	bne.n	8000d44 <SD_disk_read+0x80>
 8000d68:	e000      	b.n	8000d6c <SD_disk_read+0xa8>
          break;
 8000d6a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	204c      	movs	r0, #76	@ 0x4c
 8000d70:	f7ff fe58 	bl	8000a24 <SD_SendCmd>
    }
  }

  DESELECT();
 8000d74:	f7ff fcfc 	bl	8000770 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000d78:	f7ff fd20 	bl	80007bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf14      	ite	ne
 8000d82:	2301      	movne	r3, #1
 8000d84:	2300      	moveq	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	2000009c 	.word	0x2000009c

08000d98 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <SD_disk_write+0x1c>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <SD_disk_write+0x20>
    return RES_PARERR;
 8000db4:	2304      	movs	r3, #4
 8000db6:	e06b      	b.n	8000e90 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000db8:	4b37      	ldr	r3, [pc, #220]	@ (8000e98 <SD_disk_write+0x100>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e062      	b.n	8000e90 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000dca:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <SD_disk_write+0x100>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SD_disk_write+0x44>
    return RES_WRPRT;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e059      	b.n	8000e90 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e9c <SD_disk_write+0x104>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	025b      	lsls	r3, r3, #9
 8000dec:	607b      	str	r3, [r7, #4]

  SELECT();
 8000dee:	f7ff fcb3 	bl	8000758 <SELECT>

  if (count == 1)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d110      	bne.n	8000e1a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	2058      	movs	r0, #88	@ 0x58
 8000dfc:	f7ff fe12 	bl	8000a24 <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d13a      	bne.n	8000e7c <SD_disk_write+0xe4>
 8000e06:	21fe      	movs	r1, #254	@ 0xfe
 8000e08:	68b8      	ldr	r0, [r7, #8]
 8000e0a:	f7ff fdb7 	bl	800097c <SD_TxDataBlock>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d033      	beq.n	8000e7c <SD_disk_write+0xe4>
      count = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	e030      	b.n	8000e7c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <SD_disk_write+0x104>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000e26:	2100      	movs	r1, #0
 8000e28:	2077      	movs	r0, #119	@ 0x77
 8000e2a:	f7ff fdfb 	bl	8000a24 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	2057      	movs	r0, #87	@ 0x57
 8000e32:	f7ff fdf7 	bl	8000a24 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	2059      	movs	r0, #89	@ 0x59
 8000e3a:	f7ff fdf3 	bl	8000a24 <SD_SendCmd>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d11b      	bne.n	8000e7c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000e44:	21fc      	movs	r1, #252	@ 0xfc
 8000e46:	68b8      	ldr	r0, [r7, #8]
 8000e48:	f7ff fd98 	bl	800097c <SD_TxDataBlock>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00a      	beq.n	8000e68 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000e58:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1ee      	bne.n	8000e44 <SD_disk_write+0xac>
 8000e66:	e000      	b.n	8000e6a <SD_disk_write+0xd2>
          break;
 8000e68:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000e6a:	21fd      	movs	r1, #253	@ 0xfd
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fd85 	bl	800097c <SD_TxDataBlock>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <SD_disk_write+0xe4>
      {
        count = 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000e7c:	f7ff fc78 	bl	8000770 <DESELECT>
  SPI_RxByte();
 8000e80:	f7ff fc9c 	bl	80007bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	2000009c 	.word	0x2000009c

08000ea0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	603a      	str	r2, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	460b      	mov	r3, r1
 8000eae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e119      	b.n	80010f2 <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d129      	bne.n	8000f1e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d017      	beq.n	8000f02 <SD_disk_ioctl+0x62>
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	dc1f      	bgt.n	8000f16 <SD_disk_ioctl+0x76>
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <SD_disk_ioctl+0x40>
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d00b      	beq.n	8000ef6 <SD_disk_ioctl+0x56>
 8000ede:	e01a      	b.n	8000f16 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000ee0:	f7ff fd0c 	bl	80008fc <SD_CheckPower>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000eea:	f7ff fcfb 	bl	80008e4 <SD_PowerOff>
      res = RES_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ef4:	e0fb      	b.n	80010ee <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8000ef6:	f7ff fca9 	bl	800084c <SD_PowerOn>
      res = RES_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f00:	e0f5      	b.n	80010ee <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	1c5c      	adds	r4, r3, #1
 8000f06:	f7ff fcf9 	bl	80008fc <SD_CheckPower>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f14:	e0eb      	b.n	80010ee <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8000f16:	2304      	movs	r3, #4
 8000f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f1c:	e0e7      	b.n	80010ee <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000f1e:	4b77      	ldr	r3, [pc, #476]	@ (80010fc <SD_disk_ioctl+0x25c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e0e0      	b.n	80010f2 <SD_disk_ioctl+0x252>

    SELECT();
 8000f30:	f7ff fc12 	bl	8000758 <SELECT>

    switch (ctrl)
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	2b0d      	cmp	r3, #13
 8000f38:	f200 80ca 	bhi.w	80010d0 <SD_disk_ioctl+0x230>
 8000f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f44 <SD_disk_ioctl+0xa4>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	0800103b 	.word	0x0800103b
 8000f48:	08000f7d 	.word	0x08000f7d
 8000f4c:	0800102b 	.word	0x0800102b
 8000f50:	080010d1 	.word	0x080010d1
 8000f54:	080010d1 	.word	0x080010d1
 8000f58:	080010d1 	.word	0x080010d1
 8000f5c:	080010d1 	.word	0x080010d1
 8000f60:	080010d1 	.word	0x080010d1
 8000f64:	080010d1 	.word	0x080010d1
 8000f68:	080010d1 	.word	0x080010d1
 8000f6c:	080010d1 	.word	0x080010d1
 8000f70:	0800104d 	.word	0x0800104d
 8000f74:	08001071 	.word	0x08001071
 8000f78:	08001095 	.word	0x08001095
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2049      	movs	r0, #73	@ 0x49
 8000f80:	f7ff fd50 	bl	8000a24 <SD_SendCmd>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 80a6 	bne.w	80010d8 <SD_disk_ioctl+0x238>
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2110      	movs	r1, #16
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fcbc 	bl	8000910 <SD_RxDataBlock>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 809c 	beq.w	80010d8 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	099b      	lsrs	r3, r3, #6
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10d      	bne.n	8000fc6 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000faa:	7d7b      	ldrb	r3, [r7, #21]
 8000fac:	461a      	mov	r2, r3
 8000fae:	7d3b      	ldrb	r3, [r7, #20]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3301      	adds	r3, #1
 8000fba:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000fbc:	8bfb      	ldrh	r3, [r7, #30]
 8000fbe:	029a      	lsls	r2, r3, #10
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e02d      	b.n	8001022 <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000fc6:	7c7b      	ldrb	r3, [r7, #17]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	7dbb      	ldrb	r3, [r7, #22]
 8000fd0:	09db      	lsrs	r3, r3, #7
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	7d7b      	ldrb	r3, [r7, #21]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 0306 	and.w	r3, r3, #6
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000fee:	7d3b      	ldrb	r3, [r7, #20]
 8000ff0:	099b      	lsrs	r3, r3, #6
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	7cbb      	ldrb	r3, [r7, #18]
 8001002:	029b      	lsls	r3, r3, #10
 8001004:	b29b      	uxth	r3, r3
 8001006:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800100a:	b29b      	uxth	r3, r3
 800100c:	4413      	add	r3, r2
 800100e:	b29b      	uxth	r3, r3
 8001010:	3301      	adds	r3, #1
 8001012:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001014:	8bfa      	ldrh	r2, [r7, #30]
 8001016:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800101a:	3b09      	subs	r3, #9
 800101c:	409a      	lsls	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001028:	e056      	b.n	80010d8 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001030:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001038:	e055      	b.n	80010e6 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800103a:	f7ff fbeb 	bl	8000814 <SD_ReadyWait>
 800103e:	4603      	mov	r3, r0
 8001040:	2bff      	cmp	r3, #255	@ 0xff
 8001042:	d14b      	bne.n	80010dc <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800104a:	e047      	b.n	80010dc <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800104c:	2100      	movs	r1, #0
 800104e:	2049      	movs	r0, #73	@ 0x49
 8001050:	f7ff fce8 	bl	8000a24 <SD_SendCmd>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d142      	bne.n	80010e0 <SD_disk_ioctl+0x240>
 800105a:	2110      	movs	r1, #16
 800105c:	6a38      	ldr	r0, [r7, #32]
 800105e:	f7ff fc57 	bl	8000910 <SD_RxDataBlock>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d03b      	beq.n	80010e0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800106e:	e037      	b.n	80010e0 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001070:	2100      	movs	r1, #0
 8001072:	204a      	movs	r0, #74	@ 0x4a
 8001074:	f7ff fcd6 	bl	8000a24 <SD_SendCmd>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d132      	bne.n	80010e4 <SD_disk_ioctl+0x244>
 800107e:	2110      	movs	r1, #16
 8001080:	6a38      	ldr	r0, [r7, #32]
 8001082:	f7ff fc45 	bl	8000910 <SD_RxDataBlock>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d02b      	beq.n	80010e4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001092:	e027      	b.n	80010e4 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001094:	2100      	movs	r1, #0
 8001096:	207a      	movs	r0, #122	@ 0x7a
 8001098:	f7ff fcc4 	bl	8000a24 <SD_SendCmd>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d116      	bne.n	80010d0 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80010a8:	e00b      	b.n	80010c2 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80010aa:	6a3c      	ldr	r4, [r7, #32]
 80010ac:	1c63      	adds	r3, r4, #1
 80010ae:	623b      	str	r3, [r7, #32]
 80010b0:	f7ff fb84 	bl	80007bc <SPI_RxByte>
 80010b4:	4603      	mov	r3, r0
 80010b6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80010b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010bc:	3301      	adds	r3, #1
 80010be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80010c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d9ef      	bls.n	80010aa <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 80010d0:	2304      	movs	r3, #4
 80010d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010d6:	e006      	b.n	80010e6 <SD_disk_ioctl+0x246>
      break;
 80010d8:	bf00      	nop
 80010da:	e004      	b.n	80010e6 <SD_disk_ioctl+0x246>
      break;
 80010dc:	bf00      	nop
 80010de:	e002      	b.n	80010e6 <SD_disk_ioctl+0x246>
      break;
 80010e0:	bf00      	nop
 80010e2:	e000      	b.n	80010e6 <SD_disk_ioctl+0x246>
      break;
 80010e4:	bf00      	nop
    }

    DESELECT();
 80010e6:	f7ff fb43 	bl	8000770 <DESELECT>
    SPI_RxByte();
 80010ea:	f7ff fb67 	bl	80007bc <SPI_RxByte>
  }

  return res;
 80010ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	372c      	adds	r7, #44	@ 0x2c
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000

08001100 <_Error_Handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void _Error_Handler(char* file, int line)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	printf("Error on %s,%d\n", file, line);
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4803      	ldr	r0, [pc, #12]	@ (800111c <_Error_Handler+0x1c>)
 8001110:	f006 f984 	bl	800741c <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop

	__disable_irq();
	while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <_Error_Handler+0x18>
 800111c:	080081e0 	.word	0x080081e0

08001120 <__io_putchar>:
	{
	}
}

int __io_putchar(int ch)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF) != 0) {
 8001128:	1d39      	adds	r1, r7, #4
 800112a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800112e:	2201      	movs	r2, #1
 8001130:	4806      	ldr	r0, [pc, #24]	@ (800114c <__io_putchar+0x2c>)
 8001132:	f001 ff46 	bl	8002fc2 <HAL_UART_Transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <__io_putchar+0x22>
    return -1;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	e000      	b.n	8001144 <__io_putchar+0x24>
  }
  return ch;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200000f8 	.word	0x200000f8

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fbbc 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f8cc 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 f970 	bl	8001440 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001160:	f000 f90e 	bl	8001380 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001164:	f002 f902 	bl	800336c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8001168:	f000 f940 	bl	80013ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Start\n");
 800116c:	4853      	ldr	r0, [pc, #332]	@ (80012bc <main+0x16c>)
 800116e:	f006 f9bd 	bl	80074ec <puts>

  /* Mount SD Card */
    if(f_mount(&fs, "", 0) != FR_OK)
 8001172:	2200      	movs	r2, #0
 8001174:	4952      	ldr	r1, [pc, #328]	@ (80012c0 <main+0x170>)
 8001176:	4853      	ldr	r0, [pc, #332]	@ (80012c4 <main+0x174>)
 8001178:	f004 fdc6 	bl	8005d08 <f_mount>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <main+0x3a>
      _Error_Handler(__FILE__, __LINE__);
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	4850      	ldr	r0, [pc, #320]	@ (80012c8 <main+0x178>)
 8001186:	f7ff ffbb 	bl	8001100 <_Error_Handler>

    /* Open file to write */
    if(f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 800118a:	2213      	movs	r2, #19
 800118c:	494f      	ldr	r1, [pc, #316]	@ (80012cc <main+0x17c>)
 800118e:	4850      	ldr	r0, [pc, #320]	@ (80012d0 <main+0x180>)
 8001190:	f004 fe04 	bl	8005d9c <f_open>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <main+0x52>
      _Error_Handler(__FILE__, __LINE__);
 800119a:	2184      	movs	r1, #132	@ 0x84
 800119c:	484a      	ldr	r0, [pc, #296]	@ (80012c8 <main+0x178>)
 800119e:	f7ff ffaf 	bl	8001100 <_Error_Handler>

    /* Check free space */
    if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 80011a2:	4a4c      	ldr	r2, [pc, #304]	@ (80012d4 <main+0x184>)
 80011a4:	494c      	ldr	r1, [pc, #304]	@ (80012d8 <main+0x188>)
 80011a6:	4846      	ldr	r0, [pc, #280]	@ (80012c0 <main+0x170>)
 80011a8:	f005 fe26 	bl	8006df8 <f_getfree>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <main+0x6a>
      _Error_Handler(__FILE__, __LINE__);
 80011b2:	2188      	movs	r1, #136	@ 0x88
 80011b4:	4844      	ldr	r0, [pc, #272]	@ (80012c8 <main+0x178>)
 80011b6:	f7ff ffa3 	bl	8001100 <_Error_Handler>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80011ba:	4b46      	ldr	r3, [pc, #280]	@ (80012d4 <main+0x184>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	3b02      	subs	r3, #2
 80011c6:	4a43      	ldr	r2, [pc, #268]	@ (80012d4 <main+0x184>)
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011ce:	7892      	ldrb	r2, [r2, #2]
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fa25 	bl	8000624 <__aeabi_ui2d>
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b3f      	ldr	r3, [pc, #252]	@ (80012dc <main+0x18c>)
 80011e0:	f7fe ffb4 	bl	800014c <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fa94 	bl	8000718 <__aeabi_d2uiz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a3b      	ldr	r2, [pc, #236]	@ (80012e0 <main+0x190>)
 80011f4:	6013      	str	r3, [r2, #0]
    _free = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80011f6:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <main+0x184>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	461a      	mov	r2, r3
 8001202:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <main+0x188>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fa0a 	bl	8000624 <__aeabi_ui2d>
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <main+0x18c>)
 8001216:	f7fe ff99 	bl	800014c <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fa79 	bl	8000718 <__aeabi_d2uiz>
 8001226:	4603      	mov	r3, r0
 8001228:	4a2e      	ldr	r2, [pc, #184]	@ (80012e4 <main+0x194>)
 800122a:	6013      	str	r3, [r2, #0]

    /* Free space is less than 1kb */
    if(_free < 1)
 800122c:	4b2d      	ldr	r3, [pc, #180]	@ (80012e4 <main+0x194>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <main+0xec>
      _Error_Handler(__FILE__, __LINE__);
 8001234:	218f      	movs	r1, #143	@ 0x8f
 8001236:	4824      	ldr	r0, [pc, #144]	@ (80012c8 <main+0x178>)
 8001238:	f7ff ff62 	bl	8001100 <_Error_Handler>

    /* Writing text */
    f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 800123c:	4924      	ldr	r1, [pc, #144]	@ (80012d0 <main+0x180>)
 800123e:	482a      	ldr	r0, [pc, #168]	@ (80012e8 <main+0x198>)
 8001240:	f005 ff2f 	bl	80070a2 <f_puts>
    f_puts("Save the world!!!", &fil);
 8001244:	4922      	ldr	r1, [pc, #136]	@ (80012d0 <main+0x180>)
 8001246:	4829      	ldr	r0, [pc, #164]	@ (80012ec <main+0x19c>)
 8001248:	f005 ff2b 	bl	80070a2 <f_puts>

    /* Close file */
    if(f_close(&fil) != FR_OK)
 800124c:	4820      	ldr	r0, [pc, #128]	@ (80012d0 <main+0x180>)
 800124e:	f005 fda8 	bl	8006da2 <f_close>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <main+0x110>
      _Error_Handler(__FILE__, __LINE__);
 8001258:	2197      	movs	r1, #151	@ 0x97
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <main+0x178>)
 800125c:	f7ff ff50 	bl	8001100 <_Error_Handler>

    /* Open file to read */
    if(f_open(&fil, "first.txt", FA_READ) != FR_OK)
 8001260:	2201      	movs	r2, #1
 8001262:	491a      	ldr	r1, [pc, #104]	@ (80012cc <main+0x17c>)
 8001264:	481a      	ldr	r0, [pc, #104]	@ (80012d0 <main+0x180>)
 8001266:	f004 fd99 	bl	8005d9c <f_open>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <main+0x128>
      _Error_Handler(__FILE__, __LINE__);
 8001270:	219b      	movs	r1, #155	@ 0x9b
 8001272:	4815      	ldr	r0, [pc, #84]	@ (80012c8 <main+0x178>)
 8001274:	f7ff ff44 	bl	8001100 <_Error_Handler>

    while(f_gets(buffer, sizeof(buffer), &fil))
 8001278:	bf00      	nop
 800127a:	4a15      	ldr	r2, [pc, #84]	@ (80012d0 <main+0x180>)
 800127c:	2164      	movs	r1, #100	@ 0x64
 800127e:	481c      	ldr	r0, [pc, #112]	@ (80012f0 <main+0x1a0>)
 8001280:	f005 fe94 	bl	8006fac <f_gets>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f7      	bne.n	800127a <main+0x12a>
    {
      //printf("%s", buffer);
    }

    /* Close file */
    if(f_close(&fil) != FR_OK)
 800128a:	4811      	ldr	r0, [pc, #68]	@ (80012d0 <main+0x180>)
 800128c:	f005 fd89 	bl	8006da2 <f_close>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <main+0x14e>
      _Error_Handler(__FILE__, __LINE__);
 8001296:	21a4      	movs	r1, #164	@ 0xa4
 8001298:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <main+0x178>)
 800129a:	f7ff ff31 	bl	8001100 <_Error_Handler>

    /* Unmount SDCARD */
    if(f_mount(NULL, "", 1) != FR_OK)
 800129e:	2201      	movs	r2, #1
 80012a0:	4907      	ldr	r1, [pc, #28]	@ (80012c0 <main+0x170>)
 80012a2:	2000      	movs	r0, #0
 80012a4:	f004 fd30 	bl	8005d08 <f_mount>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <main+0x168>
      _Error_Handler(__FILE__, __LINE__);
 80012ae:	21a8      	movs	r1, #168	@ 0xa8
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <main+0x178>)
 80012b2:	f7ff ff25 	bl	8001100 <_Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <main+0x168>
 80012bc:	080081f0 	.word	0x080081f0
 80012c0:	080081f8 	.word	0x080081f8
 80012c4:	20000140 	.word	0x20000140
 80012c8:	080081fc 	.word	0x080081fc
 80012cc:	08008210 	.word	0x08008210
 80012d0:	20001174 	.word	0x20001174
 80012d4:	20001170 	.word	0x20001170
 80012d8:	200021a0 	.word	0x200021a0
 80012dc:	3fe00000 	.word	0x3fe00000
 80012e0:	200021a4 	.word	0x200021a4
 80012e4:	200021a8 	.word	0x200021a8
 80012e8:	0800821c 	.word	0x0800821c
 80012ec:	08008240 	.word	0x08008240
 80012f0:	200021ac 	.word	0x200021ac

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	@ 0x40
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	2228      	movs	r2, #40	@ 0x28
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f006 f9d2 	bl	80076ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800131a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800131e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001328:	2302      	movs	r3, #2
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001330:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001332:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fda9 	bl	8001e94 <HAL_RCC_OscConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001348:	f000 f8c6 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134c:	230f      	movs	r3, #15
 800134e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	2302      	movs	r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2102      	movs	r1, #2
 8001366:	4618      	mov	r0, r3
 8001368:	f001 f816 	bl	8002398 <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001372:	f000 f8b1 	bl	80014d8 <Error_Handler>
  }
}
 8001376:	bf00      	nop
 8001378:	3740      	adds	r7, #64	@ 0x40
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_SPI1_Init+0x64>)
 8001386:	4a18      	ldr	r2, [pc, #96]	@ (80013e8 <MX_SPI1_Init+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <MX_SPI1_Init+0x64>)
 800138c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_SPI1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_SPI1_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013b4:	2228      	movs	r2, #40	@ 0x28
 80013b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013cc:	220a      	movs	r2, #10
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_SPI1_Init+0x64>)
 80013d2:	f001 f96f 	bl	80026b4 <HAL_SPI_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013dc:	f000 f87c 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000a0 	.word	0x200000a0
 80013e8:	40013000 	.word	0x40013000

080013ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <MX_USART1_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_USART1_UART_Init+0x4c>)
 8001424:	f001 fd7d 	bl	8002f22 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800142e:	f000 f853 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200000f8 	.word	0x200000f8
 800143c:	40013800 	.word	0x40013800

08001440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_GPIO_Init+0x90>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <MX_GPIO_Init+0x90>)
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_GPIO_Init+0x90>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_GPIO_Init+0x90>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <MX_GPIO_Init+0x90>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MX_GPIO_Init+0x90>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <MX_GPIO_Init+0x90>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <MX_GPIO_Init+0x90>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_GPIO_Init+0x90>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014a2:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <MX_GPIO_Init+0x94>)
 80014a4:	f000 fcde 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4619      	mov	r1, r3
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <MX_GPIO_Init+0x94>)
 80014c2:	f000 fb4b 	bl	8001b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c6:	bf00      	nop
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010c00 	.word	0x40010c00

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_MspInit+0x5c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <HAL_MspInit+0x5c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_MspInit+0x5c>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_MspInit+0x5c>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_MspInit+0x5c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_MspInit+0x5c>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_MspInit+0x60>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <HAL_MspInit+0x60>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000

08001548 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1b      	ldr	r2, [pc, #108]	@ (80015d0 <HAL_SPI_MspInit+0x88>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d12f      	bne.n	80015c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <HAL_SPI_MspInit+0x8c>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <HAL_SPI_MspInit+0x8c>)
 800156e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_SPI_MspInit+0x8c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <HAL_SPI_MspInit+0x8c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <HAL_SPI_MspInit+0x8c>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_SPI_MspInit+0x8c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001598:	23a0      	movs	r3, #160	@ 0xa0
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	@ (80015d8 <HAL_SPI_MspInit+0x90>)
 80015ac:	f000 fad6 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b0:	2340      	movs	r3, #64	@ 0x40
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <HAL_SPI_MspInit+0x90>)
 80015c4:	f000 faca 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013000 	.word	0x40013000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010800 	.word	0x40010800

080015dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_UART_MspInit+0x8c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d131      	bne.n	8001660 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_UART_MspInit+0x90>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a1a      	ldr	r2, [pc, #104]	@ (800166c <HAL_UART_MspInit+0x90>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_UART_MspInit+0x90>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_UART_MspInit+0x90>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <HAL_UART_MspInit+0x90>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_UART_MspInit+0x90>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800162c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	480b      	ldr	r0, [pc, #44]	@ (8001670 <HAL_UART_MspInit+0x94>)
 8001642:	f000 fa8b 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <HAL_UART_MspInit+0x94>)
 800165c:	f000 fa7e 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40013800 	.word	0x40013800
 800166c:	40021000 	.word	0x40021000
 8001670:	40010800 	.word	0x40010800

08001674 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <SDTimer_Handler+0x3c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <SDTimer_Handler+0x1c>
    Timer1--;
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <SDTimer_Handler+0x3c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	3b01      	subs	r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <SDTimer_Handler+0x3c>)
 800168e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <SDTimer_Handler+0x40>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <SDTimer_Handler+0x34>
    Timer2--;
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SDTimer_Handler+0x40>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	3b01      	subs	r3, #1
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <SDTimer_Handler+0x40>)
 80016a6:	701a      	strb	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20002211 	.word	0x20002211
 80016b4:	20002212 	.word	0x20002212

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <MemManage_Handler+0x4>

080016d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <UsageFault_Handler+0x4>

080016e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <SysTick_Handler+0x30>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3301      	adds	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <SysTick_Handler+0x30>)
 8001714:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <SysTick_Handler+0x30>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b09      	cmp	r3, #9
 800171e:	d904      	bls.n	800172a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001720:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <SysTick_Handler+0x30>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001726:	f7ff ffa5 	bl	8001674 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172a:	f000 f917 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20002210 	.word	0x20002210

08001738 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e00a      	b.n	8001760 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800174a:	f3af 8000 	nop.w
 800174e:	4601      	mov	r1, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	b2ca      	uxtb	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf0      	blt.n	800174a <_read+0x12>
  }

  return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e009      	b.n	8001798 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fcc7 	bl	8001120 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf1      	blt.n	8001784 <_write+0x12>
  }
  return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_close>:

int _close(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017d0:	605a      	str	r2, [r3, #4]
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <_isatty>:

int _isatty(int file)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f005 ff84 	bl	8007748 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20005000 	.word	0x20005000
 800186c:	00000400 	.word	0x00000400
 8001870:	20002214 	.word	0x20002214
 8001874:	200025a0 	.word	0x200025a0

08001878 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001884:	f7ff fff8 	bl	8001878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001888:	480b      	ldr	r0, [pc, #44]	@ (80018b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800188a:	490c      	ldr	r1, [pc, #48]	@ (80018bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800188c:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a09      	ldr	r2, [pc, #36]	@ (80018c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018a0:	4c09      	ldr	r4, [pc, #36]	@ (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ae:	f005 ff51 	bl	8007754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b2:	f7ff fc4d 	bl	8001150 <main>
  bx lr
 80018b6:	4770      	bx	lr
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018c0:	08008854 	.word	0x08008854
  ldr r2, =_sbss
 80018c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018c8:	2000259c 	.word	0x2000259c

080018cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC1_2_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <HAL_Init+0x28>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	@ (80018f8 <HAL_Init+0x28>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 f907 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e6:	200f      	movs	r0, #15
 80018e8:	f000 f808 	bl	80018fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ec:	f7ff fdfa 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_InitTick+0x54>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_InitTick+0x58>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f911 	bl	8001b42 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f000 f8e7 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	@ (8001958 <HAL_InitTick+0x5c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000004 	.word	0x20000004
 8001954:	2000000c 	.word	0x2000000c
 8001958:	20000008 	.word	0x20000008

0800195c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_IncTick+0x1c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_IncTick+0x20>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a03      	ldr	r2, [pc, #12]	@ (800197c <HAL_IncTick+0x20>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	2000000c 	.word	0x2000000c
 800197c:	20002218 	.word	0x20002218

08001980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b02      	ldr	r3, [pc, #8]	@ (8001990 <HAL_GetTick+0x10>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20002218 	.word	0x20002218

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	@ (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff90 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff49 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff5e 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff90 	bl	8001a4c <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5f 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffb0 	bl	8001ab0 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b08b      	sub	sp, #44	@ 0x2c
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	e169      	b.n	8001e44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b70:	2201      	movs	r2, #1
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	f040 8158 	bne.w	8001e3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a9a      	ldr	r2, [pc, #616]	@ (8001dfc <HAL_GPIO_Init+0x2a0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d05e      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001b98:	4a98      	ldr	r2, [pc, #608]	@ (8001dfc <HAL_GPIO_Init+0x2a0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d875      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001b9e:	4a98      	ldr	r2, [pc, #608]	@ (8001e00 <HAL_GPIO_Init+0x2a4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d058      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001ba4:	4a96      	ldr	r2, [pc, #600]	@ (8001e00 <HAL_GPIO_Init+0x2a4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d86f      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001baa:	4a96      	ldr	r2, [pc, #600]	@ (8001e04 <HAL_GPIO_Init+0x2a8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d052      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001bb0:	4a94      	ldr	r2, [pc, #592]	@ (8001e04 <HAL_GPIO_Init+0x2a8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d869      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001bb6:	4a94      	ldr	r2, [pc, #592]	@ (8001e08 <HAL_GPIO_Init+0x2ac>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d04c      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001bbc:	4a92      	ldr	r2, [pc, #584]	@ (8001e08 <HAL_GPIO_Init+0x2ac>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d863      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001bc2:	4a92      	ldr	r2, [pc, #584]	@ (8001e0c <HAL_GPIO_Init+0x2b0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d046      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
 8001bc8:	4a90      	ldr	r2, [pc, #576]	@ (8001e0c <HAL_GPIO_Init+0x2b0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d85d      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001bce:	2b12      	cmp	r3, #18
 8001bd0:	d82a      	bhi.n	8001c28 <HAL_GPIO_Init+0xcc>
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d859      	bhi.n	8001c8a <HAL_GPIO_Init+0x12e>
 8001bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bdc <HAL_GPIO_Init+0x80>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001c57 	.word	0x08001c57
 8001be0:	08001c31 	.word	0x08001c31
 8001be4:	08001c43 	.word	0x08001c43
 8001be8:	08001c85 	.word	0x08001c85
 8001bec:	08001c8b 	.word	0x08001c8b
 8001bf0:	08001c8b 	.word	0x08001c8b
 8001bf4:	08001c8b 	.word	0x08001c8b
 8001bf8:	08001c8b 	.word	0x08001c8b
 8001bfc:	08001c8b 	.word	0x08001c8b
 8001c00:	08001c8b 	.word	0x08001c8b
 8001c04:	08001c8b 	.word	0x08001c8b
 8001c08:	08001c8b 	.word	0x08001c8b
 8001c0c:	08001c8b 	.word	0x08001c8b
 8001c10:	08001c8b 	.word	0x08001c8b
 8001c14:	08001c8b 	.word	0x08001c8b
 8001c18:	08001c8b 	.word	0x08001c8b
 8001c1c:	08001c8b 	.word	0x08001c8b
 8001c20:	08001c39 	.word	0x08001c39
 8001c24:	08001c4d 	.word	0x08001c4d
 8001c28:	4a79      	ldr	r2, [pc, #484]	@ (8001e10 <HAL_GPIO_Init+0x2b4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c2e:	e02c      	b.n	8001c8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	623b      	str	r3, [r7, #32]
          break;
 8001c36:	e029      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	623b      	str	r3, [r7, #32]
          break;
 8001c40:	e024      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	3308      	adds	r3, #8
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e01f      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	330c      	adds	r3, #12
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e01a      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e013      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	611a      	str	r2, [r3, #16]
          break;
 8001c76:	e009      	b.n	8001c8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	615a      	str	r2, [r3, #20]
          break;
 8001c82:	e003      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x130>
          break;
 8001c8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2bff      	cmp	r3, #255	@ 0xff
 8001c90:	d801      	bhi.n	8001c96 <HAL_GPIO_Init+0x13a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	e001      	b.n	8001c9a <HAL_GPIO_Init+0x13e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ca0:	d802      	bhi.n	8001ca8 <HAL_GPIO_Init+0x14c>
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x152>
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	3b08      	subs	r3, #8
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	210f      	movs	r1, #15
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	6a39      	ldr	r1, [r7, #32]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80b1 	beq.w	8001e3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e14 <HAL_GPIO_Init+0x2b8>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a4c      	ldr	r2, [pc, #304]	@ (8001e14 <HAL_GPIO_Init+0x2b8>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e14 <HAL_GPIO_Init+0x2b8>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf4:	4a48      	ldr	r2, [pc, #288]	@ (8001e18 <HAL_GPIO_Init+0x2bc>)
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a40      	ldr	r2, [pc, #256]	@ (8001e1c <HAL_GPIO_Init+0x2c0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_GPIO_Init+0x1ec>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3f      	ldr	r2, [pc, #252]	@ (8001e20 <HAL_GPIO_Init+0x2c4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00d      	beq.n	8001d44 <HAL_GPIO_Init+0x1e8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e24 <HAL_GPIO_Init+0x2c8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <HAL_GPIO_Init+0x1e4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3d      	ldr	r2, [pc, #244]	@ (8001e28 <HAL_GPIO_Init+0x2cc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_GPIO_Init+0x1e0>
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e006      	b.n	8001d4a <HAL_GPIO_Init+0x1ee>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e004      	b.n	8001d4a <HAL_GPIO_Init+0x1ee>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e002      	b.n	8001d4a <HAL_GPIO_Init+0x1ee>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_GPIO_Init+0x1ee>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4c:	f002 0203 	and.w	r2, r2, #3
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4093      	lsls	r3, r2
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d5a:	492f      	ldr	r1, [pc, #188]	@ (8001e18 <HAL_GPIO_Init+0x2bc>)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d74:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	492c      	ldr	r1, [pc, #176]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d82:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4928      	ldr	r1, [pc, #160]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d9c:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4922      	ldr	r1, [pc, #136]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	491e      	ldr	r1, [pc, #120]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4918      	ldr	r1, [pc, #96]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4914      	ldr	r1, [pc, #80]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d021      	beq.n	8001e30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dec:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	490e      	ldr	r1, [pc, #56]	@ (8001e2c <HAL_GPIO_Init+0x2d0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e021      	b.n	8001e3e <HAL_GPIO_Init+0x2e2>
 8001dfa:	bf00      	nop
 8001dfc:	10320000 	.word	0x10320000
 8001e00:	10310000 	.word	0x10310000
 8001e04:	10220000 	.word	0x10220000
 8001e08:	10210000 	.word	0x10210000
 8001e0c:	10120000 	.word	0x10120000
 8001e10:	10110000 	.word	0x10110000
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40010800 	.word	0x40010800
 8001e20:	40010c00 	.word	0x40010c00
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40011400 	.word	0x40011400
 8001e2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4909      	ldr	r1, [pc, #36]	@ (8001e60 <HAL_GPIO_Init+0x304>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	3301      	adds	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f47f ae8e 	bne.w	8001b70 <HAL_GPIO_Init+0x14>
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	372c      	adds	r7, #44	@ 0x2c
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e272      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8087 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb4:	4b92      	ldr	r3, [pc, #584]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d112      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	4b89      	ldr	r3, [pc, #548]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d06c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d168      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e24c      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x76>
 8001efc:	4b80      	ldr	r3, [pc, #512]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a7f      	ldr	r2, [pc, #508]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e02e      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b7b      	ldr	r3, [pc, #492]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7a      	ldr	r2, [pc, #488]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b78      	ldr	r3, [pc, #480]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a77      	ldr	r2, [pc, #476]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0xbc>
 8001f36:	4b72      	ldr	r3, [pc, #456]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a71      	ldr	r2, [pc, #452]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6e      	ldr	r2, [pc, #440]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f50:	4b6b      	ldr	r3, [pc, #428]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6a      	ldr	r2, [pc, #424]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b68      	ldr	r3, [pc, #416]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a67      	ldr	r2, [pc, #412]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fd06 	bl	8001980 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fd02 	bl	8001980 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	@ 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e200      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe4>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fcf2 	bl	8001980 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fcee 	bl	8001980 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	@ 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1ec      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b53      	ldr	r3, [pc, #332]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x10c>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fce:	4b4c      	ldr	r3, [pc, #304]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fda:	4b49      	ldr	r3, [pc, #292]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
 8001fe6:	4b46      	ldr	r3, [pc, #280]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1c0      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4939      	ldr	r1, [pc, #228]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <HAL_RCC_OscConfig+0x270>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fca7 	bl	8001980 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff fca3 	bl	8001980 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1a1      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b2a      	ldr	r3, [pc, #168]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4927      	ldr	r1, [pc, #156]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <HAL_RCC_OscConfig+0x270>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fc86 	bl	8001980 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff fc82 	bl	8001980 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e180      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03a      	beq.n	8002118 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d019      	beq.n	80020de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b17      	ldr	r3, [pc, #92]	@ (8002108 <HAL_RCC_OscConfig+0x274>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fc66 	bl	8001980 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fc62 	bl	8001980 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e160      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 face 	bl	8002678 <RCC_Delay>
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <HAL_RCC_OscConfig+0x274>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7ff fc4c 	bl	8001980 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ea:	e00f      	b.n	800210c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7ff fc48 	bl	8001980 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d908      	bls.n	800210c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e146      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	42420000 	.word	0x42420000
 8002108:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b92      	ldr	r3, [pc, #584]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e9      	bne.n	80020ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a6 	beq.w	8002272 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b8b      	ldr	r3, [pc, #556]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b88      	ldr	r3, [pc, #544]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a87      	ldr	r2, [pc, #540]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b85      	ldr	r3, [pc, #532]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b82      	ldr	r3, [pc, #520]	@ (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d118      	bne.n	8002190 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b7f      	ldr	r3, [pc, #508]	@ (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7e      	ldr	r2, [pc, #504]	@ (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7ff fc09 	bl	8001980 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7ff fc05 	bl	8001980 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b64      	cmp	r3, #100	@ 0x64
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e103      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b75      	ldr	r3, [pc, #468]	@ (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x312>
 8002198:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e02d      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x334>
 80021ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a69      	ldr	r2, [pc, #420]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b67      	ldr	r3, [pc, #412]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a66      	ldr	r2, [pc, #408]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	e01c      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x356>
 80021d0:	4b61      	ldr	r3, [pc, #388]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a60      	ldr	r2, [pc, #384]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e00b      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b58      	ldr	r3, [pc, #352]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a57      	ldr	r2, [pc, #348]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff fbb9 	bl	8001980 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff fbb5 	bl	8001980 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0b1      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	4b4b      	ldr	r3, [pc, #300]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ee      	beq.n	8002212 <HAL_RCC_OscConfig+0x37e>
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff fba3 	bl	8001980 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff fb9f 	bl	8001980 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e09b      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002254:	4b40      	ldr	r3, [pc, #256]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002266:	4b3c      	ldr	r3, [pc, #240]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a3b      	ldr	r2, [pc, #236]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8087 	beq.w	800238a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227c:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d061      	beq.n	800234c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d146      	bne.n	800231e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <HAL_RCC_OscConfig+0x4cc>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff fb73 	bl	8001980 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff fb6f 	bl	8001980 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e06d      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022c6:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4921      	ldr	r1, [pc, #132]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a19      	ldr	r1, [r3, #32]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	430b      	orrs	r3, r1
 80022ea:	491b      	ldr	r1, [pc, #108]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fb43 	bl	8001980 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff fb3f 	bl	8001980 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e03d      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x46a>
 800231c:	e035      	b.n	800238a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_RCC_OscConfig+0x4cc>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fb2c 	bl	8001980 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff fb28 	bl	8001980 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e026      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x498>
 800234a:	e01e      	b.n	800238a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e019      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_RCC_OscConfig+0x500>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	429a      	cmp	r2, r3
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0d0      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d910      	bls.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b67      	ldr	r3, [pc, #412]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4965      	ldr	r1, [pc, #404]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a58      	ldr	r2, [pc, #352]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a52      	ldr	r2, [pc, #328]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002416:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d040      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d115      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b41      	ldr	r3, [pc, #260]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e073      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b3d      	ldr	r3, [pc, #244]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06b      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b39      	ldr	r3, [pc, #228]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4936      	ldr	r1, [pc, #216]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7ff fa7a 	bl	8001980 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7ff fa76 	bl	8001980 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e053      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d210      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	4922      	ldr	r1, [pc, #136]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002512:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002526:	f000 f821 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	@ (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <HAL_RCC_ClockConfig+0x1cc>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_RCC_ClockConfig+0x1d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f9d8 	bl	80018fc <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000
 800255c:	40021000 	.word	0x40021000
 8002560:	0800829c 	.word	0x0800829c
 8002564:	20000004 	.word	0x20000004
 8002568:	20000008 	.word	0x20000008

0800256c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002586:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x94>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d002      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x30>
 8002596:	2b08      	cmp	r3, #8
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x36>
 800259a:	e027      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 800259e:	613b      	str	r3, [r7, #16]
      break;
 80025a0:	e027      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d010      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <HAL_RCC_GetSysClockFreq+0x94>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0c5b      	lsrs	r3, r3, #17
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	4a11      	ldr	r2, [pc, #68]	@ (800260c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ce:	fb03 f202 	mul.w	r2, r3, r2
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e004      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0c      	ldr	r2, [pc, #48]	@ (8002610 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	613b      	str	r3, [r7, #16]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ee:	613b      	str	r3, [r7, #16]
      break;
 80025f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f2:	693b      	ldr	r3, [r7, #16]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	007a1200 	.word	0x007a1200
 8002608:	080082b4 	.word	0x080082b4
 800260c:	080082c4 	.word	0x080082c4
 8002610:	003d0900 	.word	0x003d0900

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b02      	ldr	r3, [pc, #8]	@ (8002624 <HAL_RCC_GetHCLKFreq+0x10>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800262c:	f7ff fff2 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	@ (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	080082ac 	.word	0x080082ac

08002650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002654:	f7ff ffde 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0adb      	lsrs	r3, r3, #11
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4903      	ldr	r1, [pc, #12]	@ (8002674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	080082ac 	.word	0x080082ac

08002678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002680:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <RCC_Delay+0x34>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <RCC_Delay+0x38>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	0a5b      	lsrs	r3, r3, #9
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002694:	bf00      	nop
  }
  while (Delay --);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e5a      	subs	r2, r3, #1
 800269a:	60fa      	str	r2, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <RCC_Delay+0x1c>
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	20000004 	.word	0x20000004
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e076      	b.n	80027b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026d6:	d009      	beq.n	80026ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
 80026de:	e005      	b.n	80026ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe ff1e 	bl	8001548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002722:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002770:	ea42 0103 	orr.w	r1, r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002778:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	0c1a      	lsrs	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f002 0204 	and.w	r2, r2, #4
 8002792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027cc:	f7ff f8d8 	bl	8001980 <HAL_GetTick>
 80027d0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d001      	beq.n	80027e6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e12a      	b.n	8002a3c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_Transmit+0x36>
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e122      	b.n	8002a3c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_SPI_Transmit+0x48>
 8002800:	2302      	movs	r3, #2
 8002802:	e11b      	b.n	8002a3c <HAL_SPI_Transmit+0x280>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002852:	d10f      	bne.n	8002874 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002862:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002872:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287e:	2b40      	cmp	r3, #64	@ 0x40
 8002880:	d007      	beq.n	8002892 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800289a:	d152      	bne.n	8002942 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_SPI_Transmit+0xee>
 80028a4:	8b7b      	ldrh	r3, [r7, #26]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d145      	bne.n	8002936 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ce:	e032      	b.n	8002936 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d112      	bne.n	8002904 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	881a      	ldrh	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	1c9a      	adds	r2, r3, #2
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002902:	e018      	b.n	8002936 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002904:	f7ff f83c 	bl	8001980 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d803      	bhi.n	800291c <HAL_SPI_Transmit+0x160>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d102      	bne.n	8002922 <HAL_SPI_Transmit+0x166>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e082      	b.n	8002a3c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1c7      	bne.n	80028d0 <HAL_SPI_Transmit+0x114>
 8002940:	e053      	b.n	80029ea <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_Transmit+0x194>
 800294a:	8b7b      	ldrh	r3, [r7, #26]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d147      	bne.n	80029e0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	7812      	ldrb	r2, [r2, #0]
 800295c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002976:	e033      	b.n	80029e0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d113      	bne.n	80029ae <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80029ac:	e018      	b.n	80029e0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029ae:	f7fe ffe7 	bl	8001980 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d803      	bhi.n	80029c6 <HAL_SPI_Transmit+0x20a>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d102      	bne.n	80029cc <HAL_SPI_Transmit+0x210>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e02d      	b.n	8002a3c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1c6      	bne.n	8002978 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	6839      	ldr	r1, [r7, #0]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fa66 	bl	8002ec0 <SPI_EndRxTxTransaction>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	@ 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a52:	2301      	movs	r3, #1
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a56:	f7fe ff93 	bl	8001980 <HAL_GetTick>
 8002a5a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a62:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a6e:	7ffb      	ldrb	r3, [r7, #31]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d00c      	beq.n	8002a8e <HAL_SPI_TransmitReceive+0x4a>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a7a:	d106      	bne.n	8002a8a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <HAL_SPI_TransmitReceive+0x46>
 8002a84:	7ffb      	ldrb	r3, [r7, #31]
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d001      	beq.n	8002a8e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e17f      	b.n	8002d8e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x5c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x5c>
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e174      	b.n	8002d8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x6e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e16d      	b.n	8002d8e <HAL_SPI_TransmitReceive+0x34a>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d003      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	887a      	ldrh	r2, [r7, #2]
 8002ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0e:	2b40      	cmp	r3, #64	@ 0x40
 8002b10:	d007      	beq.n	8002b22 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b2a:	d17e      	bne.n	8002c2a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_SPI_TransmitReceive+0xf6>
 8002b34:	8afb      	ldrh	r3, [r7, #22]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d16c      	bne.n	8002c14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	881a      	ldrh	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	1c9a      	adds	r2, r3, #2
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b5e:	e059      	b.n	8002c14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x162>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <HAL_SPI_TransmitReceive+0x162>
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d113      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	1c9a      	adds	r2, r3, #2
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d119      	bne.n	8002be8 <HAL_SPI_TransmitReceive+0x1a4>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	1c9a      	adds	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002be4:	2301      	movs	r3, #1
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002be8:	f7fe feca 	bl	8001980 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d80d      	bhi.n	8002c14 <HAL_SPI_TransmitReceive+0x1d0>
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfe:	d009      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0bc      	b.n	8002d8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1a0      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x11c>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d19b      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x11c>
 8002c28:	e082      	b.n	8002d30 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x1f4>
 8002c32:	8afb      	ldrh	r3, [r7, #22]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d171      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	7812      	ldrb	r2, [r2, #0]
 8002c44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c5e:	e05d      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d11c      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x264>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d017      	beq.n	8002ca8 <HAL_SPI_TransmitReceive+0x264>
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d114      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d119      	bne.n	8002cea <HAL_SPI_TransmitReceive+0x2a6>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d014      	beq.n	8002cea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cea:	f7fe fe49 	bl	8001980 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d803      	bhi.n	8002d02 <HAL_SPI_TransmitReceive+0x2be>
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d102      	bne.n	8002d08 <HAL_SPI_TransmitReceive+0x2c4>
 8002d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e038      	b.n	8002d8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d19c      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x21c>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d197      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f8c3 	bl	8002ec0 <SPI_EndRxTxTransaction>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e01d      	b.n	8002d8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3728      	adds	r7, #40	@ 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002da4:	b2db      	uxtb	r3, r3
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dc0:	f7fe fdde 	bl	8001980 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4413      	add	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dd0:	f7fe fdd6 	bl	8001980 <HAL_GetTick>
 8002dd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dd6:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	015b      	lsls	r3, r3, #5
 8002ddc:	0d1b      	lsrs	r3, r3, #20
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de6:	e054      	b.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d050      	beq.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002df0:	f7fe fdc6 	bl	8001980 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d902      	bls.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d13d      	bne.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e1e:	d111      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e28:	d004      	beq.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e32:	d107      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4c:	d10f      	bne.n	8002e6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e017      	b.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d19b      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000004 	.word	0x20000004

08002ec0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff ff6a 	bl	8002db0 <SPI_WaitFlagStateUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee6:	f043 0220 	orr.w	r2, r3, #32
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e013      	b.n	8002f1a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	@ 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff ff57 	bl	8002db0 <SPI_WaitFlagStateUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e000      	b.n	8002f1a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e042      	b.n	8002fba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d106      	bne.n	8002f4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fe fb47 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2224      	movs	r2, #36	@ 0x24
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f972 	bl	8003250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b08a      	sub	sp, #40	@ 0x28
 8002fc6:	af02      	add	r7, sp, #8
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d175      	bne.n	80030ce <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_UART_Transmit+0x2c>
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06e      	b.n	80030d0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2221      	movs	r2, #33	@ 0x21
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003000:	f7fe fcbe 	bl	8001980 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	88fa      	ldrh	r2, [r7, #6]
 800300a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301a:	d108      	bne.n	800302e <HAL_UART_Transmit+0x6c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e003      	b.n	8003036 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003036:	e02e      	b.n	8003096 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2200      	movs	r2, #0
 8003040:	2180      	movs	r1, #128	@ 0x80
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f848 	bl	80030d8 <UART_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e03a      	b.n	80030d0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800306e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	3302      	adds	r3, #2
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	e007      	b.n	8003088 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1cb      	bne.n	8003038 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2200      	movs	r2, #0
 80030a8:	2140      	movs	r1, #64	@ 0x40
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f814 	bl	80030d8 <UART_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e006      	b.n	80030d0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e000      	b.n	80030d0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
  }
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e8:	e03b      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d037      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fe fc45 	bl	8001980 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <UART_WaitOnFlagUntilTimeout+0x30>
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e03a      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d023      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x8a>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b80      	cmp	r3, #128	@ 0x80
 800311e:	d020      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b40      	cmp	r3, #64	@ 0x40
 8003124:	d01d      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d116      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f81d 	bl	800318a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2208      	movs	r2, #8
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4013      	ands	r3, r2
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	429a      	cmp	r2, r3
 800317e:	d0b4      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318a:	b480      	push	{r7}
 800318c:	b095      	sub	sp, #84	@ 0x54
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	330c      	adds	r3, #12
 8003198:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80031b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e5      	bne.n	8003192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3314      	adds	r3, #20
 80031cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e5      	bne.n	80031c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d119      	bne.n	8003236 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	60bb      	str	r3, [r7, #8]
   return(result);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f023 0310 	bic.w	r3, r3, #16
 8003218:	647b      	str	r3, [r7, #68]	@ 0x44
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003222:	61ba      	str	r2, [r7, #24]
 8003224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6979      	ldr	r1, [r7, #20]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	613b      	str	r3, [r7, #16]
   return(result);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e5      	bne.n	8003202 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003244:	bf00      	nop
 8003246:	3754      	adds	r7, #84	@ 0x54
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
	...

08003250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800328a:	f023 030c 	bic.w	r3, r3, #12
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	430b      	orrs	r3, r1
 8003296:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003364 <UART_SetConfig+0x114>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d103      	bne.n	80032c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032b8:	f7ff f9ca 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	e002      	b.n	80032c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032c0:	f7ff f9b2 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80032c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	009a      	lsls	r2, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	4a22      	ldr	r2, [pc, #136]	@ (8003368 <UART_SetConfig+0x118>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	0119      	lsls	r1, r3, #4
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <UART_SetConfig+0x118>)
 80032fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2064      	movs	r0, #100	@ 0x64
 8003306:	fb00 f303 	mul.w	r3, r0, r3
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	3332      	adds	r3, #50	@ 0x32
 8003310:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <UART_SetConfig+0x118>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800331c:	4419      	add	r1, r3
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <UART_SetConfig+0x118>)
 8003336:	fba3 0302 	umull	r0, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2064      	movs	r0, #100	@ 0x64
 800333e:	fb00 f303 	mul.w	r3, r0, r3
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	3332      	adds	r3, #50	@ 0x32
 8003348:	4a07      	ldr	r2, [pc, #28]	@ (8003368 <UART_SetConfig+0x118>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	440a      	add	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40013800 	.word	0x40013800
 8003368:	51eb851f 	.word	0x51eb851f

0800336c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003370:	4904      	ldr	r1, [pc, #16]	@ (8003384 <MX_FATFS_Init+0x18>)
 8003372:	4805      	ldr	r0, [pc, #20]	@ (8003388 <MX_FATFS_Init+0x1c>)
 8003374:	f003 ff18 	bl	80071a8 <FATFS_LinkDriver>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	4b03      	ldr	r3, [pc, #12]	@ (800338c <MX_FATFS_Init+0x20>)
 800337e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20002220 	.word	0x20002220
 8003388:	20000010 	.word	0x20000010
 800338c:	2000221c 	.word	0x2000221c

08003390 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003394:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fb8c 	bl	8000ac8 <SD_disk_initialize>
 80033b0:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fc68 	bl	8000c9c <SD_disk_status>
 80033cc:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	4603      	mov	r3, r0
 80033e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80033e6:	7bf8      	ldrb	r0, [r7, #15]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	f7fd fc69 	bl	8000cc4 <SD_disk_read>
 80033f2:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	4603      	mov	r3, r0
 800340a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800340c:	7bf8      	ldrb	r0, [r7, #15]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	f7fd fcc0 	bl	8000d98 <SD_disk_write>
 8003418:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	4603      	mov	r3, r0
 800342a:	603a      	str	r2, [r7, #0]
 800342c:	71fb      	strb	r3, [r7, #7]
 800342e:	460b      	mov	r3, r1
 8003430:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003432:	79b9      	ldrb	r1, [r7, #6]
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fd31 	bl	8000ea0 <SD_disk_ioctl>
 800343e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	4a08      	ldr	r2, [pc, #32]	@ (8003478 <disk_status+0x30>)
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	79fa      	ldrb	r2, [r7, #7]
 8003460:	4905      	ldr	r1, [pc, #20]	@ (8003478 <disk_status+0x30>)
 8003462:	440a      	add	r2, r1
 8003464:	7a12      	ldrb	r2, [r2, #8]
 8003466:	4610      	mov	r0, r2
 8003468:	4798      	blx	r3
 800346a:	4603      	mov	r3, r0
 800346c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20002444 	.word	0x20002444

0800347c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <disk_initialize+0x48>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d111      	bne.n	80034b8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	4a0b      	ldr	r2, [pc, #44]	@ (80034c4 <disk_initialize+0x48>)
 8003498:	2101      	movs	r1, #1
 800349a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	4a09      	ldr	r2, [pc, #36]	@ (80034c4 <disk_initialize+0x48>)
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	79fa      	ldrb	r2, [r7, #7]
 80034aa:	4906      	ldr	r1, [pc, #24]	@ (80034c4 <disk_initialize+0x48>)
 80034ac:	440a      	add	r2, r1
 80034ae:	7a12      	ldrb	r2, [r2, #8]
 80034b0:	4610      	mov	r0, r2
 80034b2:	4798      	blx	r3
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20002444 	.word	0x20002444

080034c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <disk_read+0x3c>)
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	689c      	ldr	r4, [r3, #8]
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	4a07      	ldr	r2, [pc, #28]	@ (8003504 <disk_read+0x3c>)
 80034e8:	4413      	add	r3, r2
 80034ea:	7a18      	ldrb	r0, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	47a0      	blx	r4
 80034f4:	4603      	mov	r3, r0
 80034f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd90      	pop	{r4, r7, pc}
 8003502:	bf00      	nop
 8003504:	20002444 	.word	0x20002444

08003508 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <disk_write+0x3c>)
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	68dc      	ldr	r4, [r3, #12]
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <disk_write+0x3c>)
 8003528:	4413      	add	r3, r2
 800352a:	7a18      	ldrb	r0, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	47a0      	blx	r4
 8003534:	4603      	mov	r3, r0
 8003536:	75fb      	strb	r3, [r7, #23]
  return res;
 8003538:	7dfb      	ldrb	r3, [r7, #23]
}
 800353a:	4618      	mov	r0, r3
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd90      	pop	{r4, r7, pc}
 8003542:	bf00      	nop
 8003544:	20002444 	.word	0x20002444

08003548 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	603a      	str	r2, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
 8003554:	460b      	mov	r3, r1
 8003556:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <disk_ioctl+0x38>)
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	4906      	ldr	r1, [pc, #24]	@ (8003580 <disk_ioctl+0x38>)
 8003568:	440a      	add	r2, r1
 800356a:	7a10      	ldrb	r0, [r2, #8]
 800356c:	79b9      	ldrb	r1, [r7, #6]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4798      	blx	r3
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]
  return res;
 8003576:	7bfb      	ldrb	r3, [r7, #15]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20002444 	.word	0x20002444

08003584 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003598:	e007      	b.n	80035aa <mem_cpy+0x26>
		*d++ = *s++;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	1c53      	adds	r3, r2, #1
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	6179      	str	r1, [r7, #20]
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	1e5a      	subs	r2, r3, #1
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f2      	bne.n	800359a <mem_cpy+0x16>
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80035d0:	e005      	b.n	80035de <mem_set+0x1e>
		*d++ = (BYTE)val;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	617a      	str	r2, [r7, #20]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f4      	bne.n	80035d2 <mem_set+0x12>
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	@ 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800360c:	bf00      	nop
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	1e5a      	subs	r2, r3, #1
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <mem_cmp+0x40>
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	61fa      	str	r2, [r7, #28]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	4619      	mov	r1, r3
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	61ba      	str	r2, [r7, #24]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	1acb      	subs	r3, r1, r3
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ec      	beq.n	800360e <mem_cmp+0x1a>
	return r;
 8003634:	697b      	ldr	r3, [r7, #20]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	@ 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800364a:	e002      	b.n	8003652 <chk_chr+0x12>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3301      	adds	r3, #1
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <chk_chr+0x26>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4293      	cmp	r3, r2
 8003664:	d1f2      	bne.n	800364c <chk_chr+0xc>
	return *str;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	781b      	ldrb	r3, [r3, #0]
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e03b      	b.n	8003700 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8003688:	4931      	ldr	r1, [pc, #196]	@ (8003750 <chk_lock+0xdc>)
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02c      	beq.n	80036f6 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800369c:	492c      	ldr	r1, [pc, #176]	@ (8003750 <chk_lock+0xdc>)
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d120      	bne.n	80036fa <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80036b8:	4925      	ldr	r1, [pc, #148]	@ (8003750 <chk_lock+0xdc>)
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3304      	adds	r3, #4
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036d0:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d111      	bne.n	80036fa <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80036d6:	491e      	ldr	r1, [pc, #120]	@ (8003750 <chk_lock+0xdc>)
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3308      	adds	r3, #8
 80036e6:	881a      	ldrh	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036ee:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d102      	bne.n	80036fa <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80036f4:	e007      	b.n	8003706 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d9c0      	bls.n	8003688 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d109      	bne.n	8003720 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <chk_lock+0xa4>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d101      	bne.n	800371c <chk_lock+0xa8>
 8003718:	2300      	movs	r3, #0
 800371a:	e013      	b.n	8003744 <chk_lock+0xd0>
 800371c:	2312      	movs	r3, #18
 800371e:	e011      	b.n	8003744 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <chk_lock+0xca>
 8003726:	490a      	ldr	r1, [pc, #40]	@ (8003750 <chk_lock+0xdc>)
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	330a      	adds	r3, #10
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800373c:	d101      	bne.n	8003742 <chk_lock+0xce>
 800373e:	2310      	movs	r3, #16
 8003740:	e000      	b.n	8003744 <chk_lock+0xd0>
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2000222c 	.word	0x2000222c

08003754 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	e002      	b.n	8003766 <enq_lock+0x12>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3301      	adds	r3, #1
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d809      	bhi.n	8003780 <enq_lock+0x2c>
 800376c:	490a      	ldr	r1, [pc, #40]	@ (8003798 <enq_lock+0x44>)
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ef      	bne.n	8003760 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	2000222c 	.word	0x2000222c

0800379c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e02e      	b.n	800380a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80037ac:	4958      	ldr	r1, [pc, #352]	@ (8003910 <inc_lock+0x174>)
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d11d      	bne.n	8003804 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80037c8:	4951      	ldr	r1, [pc, #324]	@ (8003910 <inc_lock+0x174>)
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3304      	adds	r3, #4
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10e      	bne.n	8003804 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 80037e6:	494a      	ldr	r1, [pc, #296]	@ (8003910 <inc_lock+0x174>)
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	3308      	adds	r3, #8
 80037f6:	881a      	ldrh	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037fe:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8003800:	429a      	cmp	r2, r3
 8003802:	d006      	beq.n	8003812 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d9cd      	bls.n	80037ac <inc_lock+0x10>
 8003810:	e000      	b.n	8003814 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8003812:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d148      	bne.n	80038ac <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e002      	b.n	8003826 <inc_lock+0x8a>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d809      	bhi.n	8003840 <inc_lock+0xa4>
 800382c:	4938      	ldr	r1, [pc, #224]	@ (8003910 <inc_lock+0x174>)
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ef      	bne.n	8003820 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d101      	bne.n	800384a <inc_lock+0xae>
 8003846:	2300      	movs	r3, #0
 8003848:	e05d      	b.n	8003906 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	482f      	ldr	r0, [pc, #188]	@ (8003910 <inc_lock+0x174>)
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4403      	add	r3, r0
 8003860:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003868:	6899      	ldr	r1, [r3, #8]
 800386a:	4829      	ldr	r0, [pc, #164]	@ (8003910 <inc_lock+0x174>)
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4403      	add	r3, r0
 8003878:	3304      	adds	r3, #4
 800387a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003882:	88d8      	ldrh	r0, [r3, #6]
 8003884:	4922      	ldr	r1, [pc, #136]	@ (8003910 <inc_lock+0x174>)
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3308      	adds	r3, #8
 8003894:	4602      	mov	r2, r0
 8003896:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003898:	491d      	ldr	r1, [pc, #116]	@ (8003910 <inc_lock+0x174>)
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	330a      	adds	r3, #10
 80038a8:	2200      	movs	r2, #0
 80038aa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <inc_lock+0x130>
 80038b2:	4917      	ldr	r1, [pc, #92]	@ (8003910 <inc_lock+0x174>)
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	330a      	adds	r3, #10
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <inc_lock+0x130>
 80038c8:	2300      	movs	r3, #0
 80038ca:	e01c      	b.n	8003906 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <inc_lock+0x14e>
 80038d2:	490f      	ldr	r1, [pc, #60]	@ (8003910 <inc_lock+0x174>)
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	330a      	adds	r3, #10
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	b299      	uxth	r1, r3
 80038e8:	e001      	b.n	80038ee <inc_lock+0x152>
 80038ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038ee:	4808      	ldr	r0, [pc, #32]	@ (8003910 <inc_lock+0x174>)
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4403      	add	r3, r0
 80038fc:	330a      	adds	r3, #10
 80038fe:	460a      	mov	r2, r1
 8003900:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3301      	adds	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	2000222c 	.word	0x2000222c

08003914 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d82e      	bhi.n	8003986 <dec_lock+0x72>
		n = Files[i].ctr;
 8003928:	491b      	ldr	r1, [pc, #108]	@ (8003998 <dec_lock+0x84>)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	330a      	adds	r3, #10
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800393c:	89fb      	ldrh	r3, [r7, #14]
 800393e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003942:	d101      	bne.n	8003948 <dec_lock+0x34>
 8003944:	2300      	movs	r3, #0
 8003946:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003948:	89fb      	ldrh	r3, [r7, #14]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <dec_lock+0x40>
 800394e:	89fb      	ldrh	r3, [r7, #14]
 8003950:	3b01      	subs	r3, #1
 8003952:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003954:	4910      	ldr	r1, [pc, #64]	@ (8003998 <dec_lock+0x84>)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	330a      	adds	r3, #10
 8003964:	89fa      	ldrh	r2, [r7, #14]
 8003966:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <dec_lock+0x6c>
 800396e:	490a      	ldr	r1, [pc, #40]	@ (8003998 <dec_lock+0x84>)
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	737b      	strb	r3, [r7, #13]
 8003984:	e001      	b.n	800398a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003986:	2302      	movs	r3, #2
 8003988:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800398a:	7b7b      	ldrb	r3, [r7, #13]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	2000222c 	.word	0x2000222c

0800399c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e016      	b.n	80039d8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80039aa:	4910      	ldr	r1, [pc, #64]	@ (80039ec <clear_lock+0x50>)
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d108      	bne.n	80039d2 <clear_lock+0x36>
 80039c0:	490a      	ldr	r1, [pc, #40]	@ (80039ec <clear_lock+0x50>)
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3301      	adds	r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d9e5      	bls.n	80039aa <clear_lock+0xe>
	}
}
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	2000222c 	.word	0x2000222c

080039f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d040      	beq.n	8003a8a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a18:	7858      	ldrb	r0, [r3, #1]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	f7ff fd72 	bl	8003508 <disk_write>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <sync_window+0x40>
			res = FR_DISK_ERR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	e02c      	b.n	8003a8a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a36:	2200      	movs	r2, #0
 8003a38:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	1ad2      	subs	r2, r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d21b      	bcs.n	8003a8a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e012      	b.n	8003a84 <sync_window+0x94>
					wsect += fs->fsize;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4413      	add	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a72:	7858      	ldrb	r0, [r3, #1]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	2301      	movs	r3, #1
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	f7ff fd45 	bl	8003508 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d8e9      	bhi.n	8003a5e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d01e      	beq.n	8003aee <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff9d 	bl	80039f0 <sync_window>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d116      	bne.n	8003aee <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ac6:	7858      	ldrb	r0, [r3, #1]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	2301      	movs	r3, #1
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	f7ff fcfb 	bl	80034c8 <disk_read>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ae8:	461a      	mov	r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff75 	bl	80039f0 <sync_window>
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 80ad 	bne.w	8003c6c <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	f040 8098 	bne.w	8003c50 <sync_fs+0x158>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b26:	795b      	ldrb	r3, [r3, #5]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	f040 8091 	bne.w	8003c50 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b36:	895b      	ldrh	r3, [r3, #10]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	f7ff fd40 	bl	80035c0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2255      	movs	r2, #85	@ 0x55
 8003b44:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	22aa      	movs	r2, #170	@ 0xaa
 8003b4c:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2252      	movs	r2, #82	@ 0x52
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2252      	movs	r2, #82	@ 0x52
 8003b5a:	705a      	strb	r2, [r3, #1]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2261      	movs	r2, #97	@ 0x61
 8003b60:	709a      	strb	r2, [r3, #2]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2241      	movs	r2, #65	@ 0x41
 8003b66:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2272      	movs	r2, #114	@ 0x72
 8003b6c:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2272      	movs	r2, #114	@ 0x72
 8003b74:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2241      	movs	r2, #65	@ 0x41
 8003b7c:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2261      	movs	r2, #97	@ 0x61
 8003b84:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	0e1b      	lsrs	r3, r3, #24
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	0e1b      	lsrs	r3, r3, #24
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	3301      	adds	r3, #1
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c34:	7858      	ldrb	r0, [r3, #1]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	2301      	movs	r3, #1
 8003c42:	f7ff fc61 	bl	8003508 <disk_write>
			fs->fsi_flag = 0;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fc73 	bl	8003548 <disk_ioctl>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <sync_fs+0x174>
			res = FR_DISK_ERR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	3b02      	subs	r3, #2
 8003c84:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	3b02      	subs	r3, #2
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d301      	bcc.n	8003c9a <clust2sect+0x24>
 8003c96:	2300      	movs	r3, #0
 8003c98:	e00c      	b.n	8003cb4 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca0:	789b      	ldrb	r3, [r3, #2]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	fb03 f202 	mul.w	r2, r3, r2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	4413      	add	r3, r2
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d906      	bls.n	8003cdc <get_fat+0x1e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <get_fat+0x24>
		val = 1;	/* Internal error */
 8003cdc:	2301      	movs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e0e3      	b.n	8003eaa <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	f000 8097 	beq.w	8003e24 <get_fat+0x166>
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	f300 80cd 	bgt.w	8003e96 <get_fat+0x1d8>
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d002      	beq.n	8003d06 <get_fat+0x48>
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d05e      	beq.n	8003dc2 <get_fat+0x104>
 8003d04:	e0c7      	b.n	8003e96 <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d22:	895b      	ldrh	r3, [r3, #10]
 8003d24:	4619      	mov	r1, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff feaf 	bl	8003a94 <move_window>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 80af 	bne.w	8003e9c <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	60fa      	str	r2, [r7, #12]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d4a:	8952      	ldrh	r2, [r2, #10]
 8003d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d50:	fb01 f202 	mul.w	r2, r1, r2
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	5cd3      	ldrb	r3, [r2, r3]
 8003d5a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d62:	6a1a      	ldr	r2, [r3, #32]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d6a:	895b      	ldrh	r3, [r3, #10]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d74:	4413      	add	r3, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fe8b 	bl	8003a94 <move_window>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f040 808d 	bne.w	8003ea0 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8c:	895b      	ldrh	r3, [r3, #10]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d96:	fb01 f202 	mul.w	r2, r1, r2
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <get_fat+0xfa>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	e002      	b.n	8003dbe <get_fat+0x100>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	617b      	str	r3, [r7, #20]
			break;
 8003dc0:	e073      	b.n	8003eaa <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd0:	895b      	ldrh	r3, [r3, #10]
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dde:	4413      	add	r3, r2
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff fe56 	bl	8003a94 <move_window>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d15a      	bne.n	8003ea4 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003df8:	8952      	ldrh	r2, [r2, #10]
 8003dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dfe:	fb01 f202 	mul.w	r2, r1, r2
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4413      	add	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	b21b      	sxth	r3, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	617b      	str	r3, [r7, #20]
			break;
 8003e22:	e042      	b.n	8003eaa <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e32:	895b      	ldrh	r3, [r3, #10]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e40:	4413      	add	r3, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fe25 	bl	8003a94 <move_window>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d12b      	bne.n	8003ea8 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e5a:	8952      	ldrh	r2, [r2, #10]
 8003e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e60:	fb01 f202 	mul.w	r2, r1, r2
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	3303      	adds	r3, #3
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	061a      	lsls	r2, r3, #24
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	3302      	adds	r3, #2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	041b      	lsls	r3, r3, #16
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3301      	adds	r3, #1
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	4313      	orrs	r3, r2
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e92:	617b      	str	r3, [r7, #20]
			break;
 8003e94:	e009      	b.n	8003eaa <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e006      	b.n	8003eaa <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e9c:	bf00      	nop
 8003e9e:	e004      	b.n	8003eaa <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ea0:	bf00      	nop
 8003ea2:	e002      	b.n	8003eaa <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ea4:	bf00      	nop
 8003ea6:	e000      	b.n	8003eaa <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ea8:	bf00      	nop
		}
	}

	return val;
 8003eaa:	697b      	ldr	r3, [r7, #20]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d906      	bls.n	8003ed4 <put_fat+0x20>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d302      	bcc.n	8003eda <put_fat+0x26>
		res = FR_INT_ERR;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e13a      	b.n	8004150 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	f000 80d0 	beq.w	8004088 <put_fat+0x1d4>
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	f300 8127 	bgt.w	800413c <put_fat+0x288>
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d003      	beq.n	8003efa <put_fat+0x46>
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	f000 808f 	beq.w	8004016 <put_fat+0x162>
 8003ef8:	e120      	b.n	800413c <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4413      	add	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f16:	895b      	ldrh	r3, [r3, #10]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f20:	4413      	add	r3, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fdb5 	bl	8003a94 <move_window>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 8106 	bne.w	8004142 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	617a      	str	r2, [r7, #20]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f42:	8952      	ldrh	r2, [r2, #10]
 8003f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f48:	fb01 f202 	mul.w	r2, r1, r2
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <put_fat+0xc6>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b25b      	sxtb	r3, r3
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	b25a      	sxtb	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	e001      	b.n	8003f7e <put_fat+0xca>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f88:	2201      	movs	r2, #1
 8003f8a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f92:	6a1a      	ldr	r2, [r3, #32]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f9a:	895b      	ldrh	r3, [r3, #10]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff fd73 	bl	8003a94 <move_window>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003fb2:	7ffb      	ldrb	r3, [r7, #31]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 80c6 	bne.w	8004146 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc0:	895b      	ldrh	r3, [r3, #10]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fca:	fb01 f202 	mul.w	r2, r1, r2
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <put_fat+0x134>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e00e      	b.n	8004006 <put_fat+0x152>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	f023 030f 	bic.w	r3, r3, #15
 8003ff2:	b25a      	sxtb	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	b25b      	sxtb	r3, r3
 8004000:	4313      	orrs	r3, r2
 8004002:	b25b      	sxtb	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004010:	2201      	movs	r2, #1
 8004012:	711a      	strb	r2, [r3, #4]
			break;
 8004014:	e09c      	b.n	8004150 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004024:	895b      	ldrh	r3, [r3, #10]
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	b29b      	uxth	r3, r3
 800402a:	4619      	mov	r1, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004032:	4413      	add	r3, r2
 8004034:	4619      	mov	r1, r3
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff fd2c 	bl	8003a94 <move_window>
 800403c:	4603      	mov	r3, r0
 800403e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f040 8081 	bne.w	800414a <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004052:	8952      	ldrh	r2, [r2, #10]
 8004054:	fbb3 f1f2 	udiv	r1, r3, r2
 8004058:	fb01 f202 	mul.w	r2, r1, r2
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	b29b      	uxth	r3, r3
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	b29a      	uxth	r2, r3
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	3301      	adds	r3, #1
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004082:	2201      	movs	r2, #1
 8004084:	711a      	strb	r2, [r3, #4]
			break;
 8004086:	e063      	b.n	8004150 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408e:	6a1a      	ldr	r2, [r3, #32]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004096:	895b      	ldrh	r3, [r3, #10]
 8004098:	089b      	lsrs	r3, r3, #2
 800409a:	b29b      	uxth	r3, r3
 800409c:	4619      	mov	r1, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a4:	4413      	add	r3, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fcf3 	bl	8003a94 <move_window>
 80040ae:	4603      	mov	r3, r0
 80040b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040b2:	7ffb      	ldrb	r3, [r7, #31]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d14a      	bne.n	800414e <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040c2:	8952      	ldrh	r2, [r2, #10]
 80040c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80040c8:	fb01 f202 	mul.w	r2, r1, r2
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	3303      	adds	r3, #3
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	061a      	lsls	r2, r3, #24
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	3302      	adds	r3, #2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	041b      	lsls	r3, r3, #16
 80040e4:	431a      	orrs	r2, r3
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	3301      	adds	r3, #1
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	4313      	orrs	r3, r2
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	b29b      	uxth	r3, r3
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	b29a      	uxth	r2, r3
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	3301      	adds	r3, #1
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	0c1a      	lsrs	r2, r3, #16
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	3302      	adds	r3, #2
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	0e1a      	lsrs	r2, r3, #24
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	3303      	adds	r3, #3
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004136:	2201      	movs	r2, #1
 8004138:	711a      	strb	r2, [r3, #4]
			break;
 800413a:	e009      	b.n	8004150 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800413c:	2302      	movs	r3, #2
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e006      	b.n	8004150 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004142:	bf00      	nop
 8004144:	e004      	b.n	8004150 <put_fat+0x29c>
			if (res != FR_OK) break;
 8004146:	bf00      	nop
 8004148:	e002      	b.n	8004150 <put_fat+0x29c>
			if (res != FR_OK) break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <put_fat+0x29c>
			if (res != FR_OK) break;
 800414e:	bf00      	nop
		}
	}

	return res;
 8004150:	7ffb      	ldrb	r3, [r7, #31]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d906      	bls.n	8004178 <remove_chain+0x1e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <remove_chain+0x24>
		res = FR_INT_ERR;
 8004178:	2302      	movs	r3, #2
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	e049      	b.n	8004212 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004182:	e03b      	b.n	80041fc <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fd99 	bl	8003cbe <get_fat>
 800418c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d03b      	beq.n	800420c <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d102      	bne.n	80041a0 <remove_chain+0x46>
 800419a:	2302      	movs	r3, #2
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	e038      	b.n	8004212 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d102      	bne.n	80041ae <remove_chain+0x54>
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	e031      	b.n	8004212 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80041ae:	2200      	movs	r2, #0
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fe7e 	bl	8003eb4 <put_fat>
 80041b8:	4603      	mov	r3, r0
 80041ba:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d126      	bne.n	8004210 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d013      	beq.n	80041f8 <remove_chain+0x9e>
				fs->free_clust++;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	3301      	adds	r3, #1
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041e0:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e8:	795b      	ldrb	r3, [r3, #5]
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f6:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d3bc      	bcc.n	8004184 <remove_chain+0x2a>
 800420a:	e002      	b.n	8004212 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8004210:	bf00      	nop
		}
	}

	return res;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d006      	beq.n	800424a <create_chain+0x2e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	429a      	cmp	r2, r3
 8004248:	d31d      	bcc.n	8004286 <create_chain+0x6a>
 800424a:	2301      	movs	r3, #1
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e01a      	b.n	8004286 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fd33 	bl	8003cbe <get_fat>
 8004258:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d801      	bhi.n	8004264 <create_chain+0x48>
 8004260:	2301      	movs	r3, #1
 8004262:	e07f      	b.n	8004364 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d101      	bne.n	8004270 <create_chain+0x54>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	e079      	b.n	8004364 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	429a      	cmp	r2, r3
 800427c:	d201      	bcs.n	8004282 <create_chain+0x66>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	e070      	b.n	8004364 <create_chain+0x148>
		scl = clst;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	429a      	cmp	r2, r3
 800429c:	d307      	bcc.n	80042ae <create_chain+0x92>
			ncl = 2;
 800429e:	2302      	movs	r3, #2
 80042a0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d901      	bls.n	80042ae <create_chain+0x92>
 80042aa:	2300      	movs	r3, #0
 80042ac:	e05a      	b.n	8004364 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fd04 	bl	8003cbe <get_fat>
 80042b6:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d002      	beq.n	80042cc <create_chain+0xb0>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <create_chain+0xb4>
			return cs;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	e049      	b.n	8004364 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1d8      	bne.n	800428a <create_chain+0x6e>
 80042d8:	2300      	movs	r3, #0
 80042da:	e043      	b.n	8004364 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80042dc:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80042de:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fde5 	bl	8003eb4 <put_fat>
 80042ea:	4603      	mov	r3, r0
 80042ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <create_chain+0xec>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d006      	beq.n	8004308 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fdd8 	bl	8003eb4 <put_fat>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d121      	bne.n	8004352 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004314:	461a      	mov	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d01c      	beq.n	8004362 <create_chain+0x146>
			fs->free_clust--;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	3b01      	subs	r3, #1
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004338:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004340:	795b      	ldrb	r3, [r3, #5]
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434e:	715a      	strb	r2, [r3, #5]
 8004350:	e007      	b.n	8004362 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d102      	bne.n	800435e <create_chain+0x142>
 8004358:	f04f 33ff 	mov.w	r3, #4294967295
 800435c:	e000      	b.n	8004360 <create_chain+0x144>
 800435e:	2301      	movs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004362:	697b      	ldr	r3, [r7, #20]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	3304      	adds	r3, #4
 8004380:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438e:	895b      	ldrh	r3, [r3, #10]
 8004390:	461a      	mov	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	fbb3 f3f2 	udiv	r3, r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043a4:	7892      	ldrb	r2, [r2, #2]
 80043a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	613a      	str	r2, [r7, #16]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <clmt_clust+0x54>
 80043bc:	2300      	movs	r3, #0
 80043be:	e010      	b.n	80043e2 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d307      	bcc.n	80043d8 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	3304      	adds	r3, #4
 80043d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80043d6:	e7e9      	b.n	80043ac <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80043d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4413      	add	r3, r2
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004400:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d009      	beq.n	8004426 <dir_sdi+0x3a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	429a      	cmp	r2, r3
 8004424:	d301      	bcc.n	800442a <dir_sdi+0x3e>
		return FR_INT_ERR;
 8004426:	2302      	movs	r3, #2
 8004428:	e0aa      	b.n	8004580 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d110      	bne.n	8004452 <dir_sdi+0x66>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b03      	cmp	r3, #3
 8004440:	d107      	bne.n	8004452 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d115      	bne.n	8004484 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004464:	891b      	ldrh	r3, [r3, #8]
 8004466:	461a      	mov	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	4293      	cmp	r3, r2
 800446c:	d301      	bcc.n	8004472 <dir_sdi+0x86>
			return FR_INT_ERR;
 800446e:	2302      	movs	r3, #2
 8004470:	e086      	b.n	8004580 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	e043      	b.n	800450c <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004490:	895b      	ldrh	r3, [r3, #10]
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	b29b      	uxth	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044a4:	789b      	ldrb	r3, [r3, #2]
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80044ac:	e021      	b.n	80044f2 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6979      	ldr	r1, [r7, #20]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fc00 	bl	8003cbe <get_fat>
 80044be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d101      	bne.n	80044cc <dir_sdi+0xe0>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e059      	b.n	8004580 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d909      	bls.n	80044e6 <dir_sdi+0xfa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d301      	bcc.n	80044ea <dir_sdi+0xfe>
				return FR_INT_ERR;
 80044e6:	2302      	movs	r3, #2
 80044e8:	e04a      	b.n	8004580 <dir_sdi+0x194>
			idx -= ic;
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d2d9      	bcs.n	80044ae <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fbb6 	bl	8003c76 <clust2sect>
 800450a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004512:	461a      	mov	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <dir_sdi+0x136>
 800451e:	2302      	movs	r3, #2
 8004520:	e02e      	b.n	8004580 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452e:	895b      	ldrh	r3, [r3, #10]
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	b29b      	uxth	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	fbb3 f2f2 	udiv	r2, r3, r2
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004546:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800455e:	895b      	ldrh	r3, [r3, #10]
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	fbb3 f1f2 	udiv	r1, r3, r2
 800456c:	fb01 f202 	mul.w	r2, r1, r2
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	015b      	lsls	r3, r3, #5
 8004574:	4403      	add	r3, r0
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800457c:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004598:	88db      	ldrh	r3, [r3, #6]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <dir_next+0x2a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <dir_next+0x2e>
		return FR_NO_FILE;
 80045b2:	2304      	movs	r3, #4
 80045b4:	e12e      	b.n	8004814 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c2:	895b      	ldrh	r3, [r3, #10]
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80045d0:	fb01 f202 	mul.w	r2, r1, r2
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 80fa 	bne.w	80047d0 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	3301      	adds	r3, #1
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045ec:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004606:	891b      	ldrh	r3, [r3, #8]
 8004608:	461a      	mov	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4293      	cmp	r3, r2
 800460e:	f0c0 80df 	bcc.w	80047d0 <dir_next+0x248>
				return FR_NO_FILE;
 8004612:	2304      	movs	r3, #4
 8004614:	e0fe      	b.n	8004814 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004622:	895b      	ldrh	r3, [r3, #10]
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	b29b      	uxth	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800463c:	7892      	ldrb	r2, [r2, #2]
 800463e:	3a01      	subs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 80c4 	bne.w	80047d0 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7ff fb2f 	bl	8003cbe <get_fat>
 8004660:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d801      	bhi.n	800466c <dir_next+0xe4>
 8004668:	2302      	movs	r3, #2
 800466a:	e0d3      	b.n	8004814 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d101      	bne.n	8004678 <dir_next+0xf0>
 8004674:	2301      	movs	r3, #1
 8004676:	e0cd      	b.n	8004814 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	429a      	cmp	r2, r3
 800468a:	f0c0 808e 	bcc.w	80047aa <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <dir_next+0x110>
 8004694:	2304      	movs	r3, #4
 8004696:	e0bd      	b.n	8004814 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f7ff fdb6 	bl	800421c <create_chain>
 80046b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <dir_next+0x134>
 80046b8:	2307      	movs	r3, #7
 80046ba:	e0ab      	b.n	8004814 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <dir_next+0x13e>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e0a6      	b.n	8004814 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d101      	bne.n	80046d2 <dir_next+0x14a>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e0a0      	b.n	8004814 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff f988 	bl	80039f0 <sync_window>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <dir_next+0x162>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e094      	b.n	8004814 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004700:	895b      	ldrh	r3, [r3, #10]
 8004702:	461a      	mov	r2, r3
 8004704:	2100      	movs	r1, #0
 8004706:	f7fe ff5b 	bl	80035c0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004718:	681c      	ldr	r4, [r3, #0]
 800471a:	6979      	ldr	r1, [r7, #20]
 800471c:	4610      	mov	r0, r2
 800471e:	f7ff faaa 	bl	8003c76 <clust2sect>
 8004722:	4603      	mov	r3, r0
 8004724:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8004728:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e021      	b.n	8004774 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800473c:	2201      	movs	r2, #1
 800473e:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff f951 	bl	80039f0 <sync_window>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <dir_next+0x1d0>
 8004754:	2301      	movs	r3, #1
 8004756:	e05d      	b.n	8004814 <dir_next+0x28c>
						dp->fs->winsect++;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8004764:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004766:	3201      	adds	r2, #1
 8004768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800476c:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004780:	789b      	ldrb	r3, [r3, #2]
 8004782:	461a      	mov	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4293      	cmp	r3, r2
 8004788:	d3d2      	bcc.n	8004730 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004796:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1acb      	subs	r3, r1, r3
 80047a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047b0:	461a      	mov	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6979      	ldr	r1, [r7, #20]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fa58 	bl	8003c76 <clust2sect>
 80047c6:	4602      	mov	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047ce:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047da:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f2:	895b      	ldrh	r3, [r3, #10]
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004800:	fb01 f202 	mul.w	r2, r1, r2
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	015b      	lsls	r3, r3, #5
 8004808:	4403      	add	r3, r0
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004810:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	371c      	adds	r7, #28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd90      	pop	{r4, r7, pc}

0800481c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004826:	2100      	movs	r1, #0
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fddf 	bl	80043ec <dir_sdi>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d135      	bne.n	80048a4 <dir_alloc+0x88>
		n = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f7ff f920 	bl	8003a94 <move_window>
 8004854:	4603      	mov	r3, r0
 8004856:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d121      	bne.n	80048a2 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2be5      	cmp	r3, #229	@ 0xe5
 800486a:	d006      	beq.n	800487a <dir_alloc+0x5e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	3301      	adds	r3, #1
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d102      	bne.n	800488e <dir_alloc+0x72>
 8004888:	e00c      	b.n	80048a4 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800488e:	2101      	movs	r1, #1
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fe79 	bl	8004588 <dir_next>
 8004896:	4603      	mov	r3, r0
 8004898:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0cd      	beq.n	800483c <dir_alloc+0x20>
 80048a0:	e000      	b.n	80048a4 <dir_alloc+0x88>
			if (res != FR_OK) break;
 80048a2:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d101      	bne.n	80048ae <dir_alloc+0x92>
 80048aa:	2307      	movs	r3, #7
 80048ac:	73fb      	strb	r3, [r7, #15]
	return res;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	331b      	adds	r3, #27
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	b21a      	sxth	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	331a      	adds	r3, #26
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	b21b      	sxth	r3, r3
 80048d4:	4313      	orrs	r3, r2
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	b29b      	uxth	r3, r3
 80048da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d10f      	bne.n	8004908 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	3315      	adds	r3, #21
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	b21a      	sxth	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	3314      	adds	r3, #20
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b21b      	sxth	r3, r3
 80048fa:	4313      	orrs	r3, r2
 80048fc:	b21b      	sxth	r3, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

	return cl;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	331a      	adds	r3, #26
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	0a1b      	lsrs	r3, r3, #8
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	331b      	adds	r3, #27
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	0c1a      	lsrs	r2, r3, #16
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3314      	adds	r3, #20
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	0c1b      	lsrs	r3, r3, #16
 8004948:	b29b      	uxth	r3, r3
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3315      	adds	r3, #21
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004972:	1e5a      	subs	r2, r3, #1
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	2301      	movs	r3, #1
 8004986:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004988:	4a2b      	ldr	r2, [pc, #172]	@ (8004a38 <cmp_lfn+0xd8>)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4413      	add	r3, r2
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	4413      	add	r3, r2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	b21a      	sxth	r2, r3
 800499c:	4926      	ldr	r1, [pc, #152]	@ (8004a38 <cmp_lfn+0xd8>)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	440b      	add	r3, r1
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	4619      	mov	r1, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	440b      	add	r3, r1
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	b21b      	sxth	r3, r3
 80049ae:	4313      	orrs	r3, r2
 80049b0:	b21b      	sxth	r3, r3
 80049b2:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80049b4:	89fb      	ldrh	r3, [r7, #14]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d019      	beq.n	80049ee <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80049ba:	89bb      	ldrh	r3, [r7, #12]
 80049bc:	4618      	mov	r0, r3
 80049be:	f002 fc3d 	bl	800723c <ff_wtoupper>
 80049c2:	4603      	mov	r3, r0
 80049c4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80049ca:	d80e      	bhi.n	80049ea <cmp_lfn+0x8a>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	617a      	str	r2, [r7, #20]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f002 fc2e 	bl	800723c <ff_wtoupper>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d008      	beq.n	80049fc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80049ea:	2300      	movs	r3, #0
 80049ec:	e01f      	b.n	8004a2e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80049ee:	89bb      	ldrh	r3, [r7, #12]
 80049f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d001      	beq.n	80049fc <cmp_lfn+0x9c>
 80049f8:	2300      	movs	r3, #0
 80049fa:	e018      	b.n	8004a2e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3301      	adds	r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b0c      	cmp	r3, #12
 8004a06:	d9bf      	bls.n	8004988 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <cmp_lfn+0xcc>
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <cmp_lfn+0xcc>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <cmp_lfn+0xcc>
		return 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e000      	b.n	8004a2e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8004a2c:	2301      	movs	r3, #1
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	08008348 	.word	0x08008348

08004a3c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	@ 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	71fb      	strb	r3, [r7, #7]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	330d      	adds	r3, #13
 8004a56:	79ba      	ldrb	r2, [r7, #6]
 8004a58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	330b      	adds	r3, #11
 8004a5e:	220f      	movs	r2, #15
 8004a60:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	330c      	adds	r3, #12
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	331a      	adds	r3, #26
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	331b      	adds	r3, #27
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	1e5a      	subs	r2, r3, #1
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	82fb      	strh	r3, [r7, #22]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004a92:	8afb      	ldrh	r3, [r7, #22]
 8004a94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <fit_lfn+0x70>
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	61fa      	str	r2, [r7, #28]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004aac:	4a1c      	ldr	r2, [pc, #112]	@ (8004b20 <fit_lfn+0xe4>)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4413      	add	r3, r2
 8004aba:	8afa      	ldrh	r2, [r7, #22]
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	8afb      	ldrh	r3, [r7, #22]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	b299      	uxth	r1, r3
 8004ac6:	4a16      	ldr	r2, [pc, #88]	@ (8004b20 <fit_lfn+0xe4>)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	4413      	add	r3, r2
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	b2ca      	uxtb	r2, r1
 8004ad6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004ad8:	8afb      	ldrh	r3, [r7, #22]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <fit_lfn+0xa8>
 8004ade:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ae2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b0c      	cmp	r3, #12
 8004aee:	d9d0      	bls.n	8004a92 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004af0:	8afb      	ldrh	r3, [r7, #22]
 8004af2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d006      	beq.n	8004b08 <fit_lfn+0xcc>
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <fit_lfn+0xd4>
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	79fa      	ldrb	r2, [r7, #7]
 8004b14:	701a      	strb	r2, [r3, #0]
}
 8004b16:	bf00      	nop
 8004b18:	3724      	adds	r7, #36	@ 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr
 8004b20:	08008348 	.word	0x08008348

08004b24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08c      	sub	sp, #48	@ 0x30
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004b32:	220b      	movs	r2, #11
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7fe fd24 	bl	8003584 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d92b      	bls.n	8004b9a <gen_numname+0x76>
		sr = seq;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004b46:	e022      	b.n	8004b8e <gen_numname+0x6a>
			wc = *lfn++;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	1c9a      	adds	r2, r3, #2
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b56:	e017      	b.n	8004b88 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005a      	lsls	r2, r3, #1
 8004b5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004b66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <gen_numname+0x5e>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004b7c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004b80:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	3301      	adds	r3, #1
 8004b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	2b0f      	cmp	r3, #15
 8004b8c:	d9e4      	bls.n	8004b58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1d8      	bne.n	8004b48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004b9a:	2307      	movs	r3, #7
 8004b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3330      	adds	r3, #48	@ 0x30
 8004baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8004bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004bb2:	2b39      	cmp	r3, #57	@ 0x39
 8004bb4:	d904      	bls.n	8004bc0 <gen_numname+0x9c>
 8004bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004bba:	3307      	adds	r3, #7
 8004bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bc6:	3330      	adds	r3, #48	@ 0x30
 8004bc8:	443b      	add	r3, r7
 8004bca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004bce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1df      	bne.n	8004b9e <gen_numname+0x7a>
	ns[i] = '~';
 8004bde:	f107 0214 	add.w	r2, r7, #20
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	4413      	add	r3, r2
 8004be6:	227e      	movs	r2, #126	@ 0x7e
 8004be8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bee:	e002      	b.n	8004bf6 <gen_numname+0xd2>
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d205      	bcs.n	8004c0a <gen_numname+0xe6>
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	4413      	add	r3, r2
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d1f2      	bne.n	8004bf0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0c:	2b07      	cmp	r3, #7
 8004c0e:	d807      	bhi.n	8004c20 <gen_numname+0xfc>
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c16:	3330      	adds	r3, #48	@ 0x30
 8004c18:	443b      	add	r3, r7
 8004c1a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004c1e:	e000      	b.n	8004c22 <gen_numname+0xfe>
 8004c20:	2120      	movs	r1, #32
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	2b07      	cmp	r3, #7
 8004c34:	d9e9      	bls.n	8004c0a <gen_numname+0xe6>
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	3730      	adds	r7, #48	@ 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004c4c:	230b      	movs	r3, #11
 8004c4e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	0852      	lsrs	r2, r2, #1
 8004c56:	01db      	lsls	r3, r3, #7
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	6079      	str	r1, [r7, #4]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	73fb      	strb	r3, [r7, #15]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ed      	bne.n	8004c50 <sum_sfn+0x10>
	return sum;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004c88:	2100      	movs	r1, #0
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff fbae 	bl	80043ec <dir_sdi>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <dir_find+0x1e>
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	e0b8      	b.n	8004e10 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004c9e:	23ff      	movs	r3, #255	@ 0xff
 8004ca0:	753b      	strb	r3, [r7, #20]
 8004ca2:	7d3b      	ldrb	r3, [r7, #20]
 8004ca4:	757b      	strb	r3, [r7, #21]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cb0:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f7fe fee5 	bl	8003a94 <move_window>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 8097 	bne.w	8004e04 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ce6:	7dbb      	ldrb	r3, [r7, #22]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <dir_find+0x72>
 8004cec:	2304      	movs	r3, #4
 8004cee:	75fb      	strb	r3, [r7, #23]
 8004cf0:	e08d      	b.n	8004e0e <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	330b      	adds	r3, #11
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cfc:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004cfe:	7dbb      	ldrb	r3, [r7, #22]
 8004d00:	2be5      	cmp	r3, #229	@ 0xe5
 8004d02:	d007      	beq.n	8004d14 <dir_find+0x94>
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <dir_find+0xa6>
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b0f      	cmp	r3, #15
 8004d12:	d008      	beq.n	8004d26 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004d14:	23ff      	movs	r3, #255	@ 0xff
 8004d16:	757b      	strb	r3, [r7, #21]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d22:	849a      	strh	r2, [r3, #36]	@ 0x24
 8004d24:	e063      	b.n	8004dee <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d137      	bne.n	8004d9c <dir_find+0x11c>
				if (dp->lfn) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d05a      	beq.n	8004dee <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004d38:	7dbb      	ldrb	r3, [r7, #22]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d010      	beq.n	8004d64 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	7b5b      	ldrb	r3, [r3, #13]
 8004d46:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004d48:	7dbb      	ldrb	r3, [r7, #22]
 8004d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d4e:	75bb      	strb	r3, [r7, #22]
 8004d50:	7dbb      	ldrb	r3, [r7, #22]
 8004d52:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d5a:	88da      	ldrh	r2, [r3, #6]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d62:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004d64:	7dba      	ldrb	r2, [r7, #22]
 8004d66:	7d7b      	ldrb	r3, [r7, #21]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d114      	bne.n	8004d96 <dir_find+0x116>
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	330d      	adds	r3, #13
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	7d3a      	ldrb	r2, [r7, #20]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d10e      	bne.n	8004d96 <dir_find+0x116>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	6939      	ldr	r1, [r7, #16]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fdec 	bl	8004960 <cmp_lfn>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <dir_find+0x116>
 8004d8e:	7d7b      	ldrb	r3, [r7, #21]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e000      	b.n	8004d98 <dir_find+0x118>
 8004d96:	23ff      	movs	r3, #255	@ 0xff
 8004d98:	757b      	strb	r3, [r7, #21]
 8004d9a:	e028      	b.n	8004dee <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004d9c:	7d7b      	ldrb	r3, [r7, #21]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <dir_find+0x132>
 8004da2:	6938      	ldr	r0, [r7, #16]
 8004da4:	f7ff ff4c 	bl	8004c40 <sum_sfn>
 8004da8:	4603      	mov	r3, r0
 8004daa:	461a      	mov	r2, r3
 8004dac:	7d3b      	ldrb	r3, [r7, #20]
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d02a      	beq.n	8004e08 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	330b      	adds	r3, #11
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <dir_find+0x15e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	220b      	movs	r2, #11
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6938      	ldr	r0, [r7, #16]
 8004dd4:	f7fe fc0e 	bl	80035f4 <mem_cmp>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004dde:	23ff      	movs	r3, #255	@ 0xff
 8004de0:	757b      	strb	r3, [r7, #21]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dec:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004dee:	2100      	movs	r1, #0
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fbc9 	bl	8004588 <dir_next>
 8004df6:	4603      	mov	r3, r0
 8004df8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f43f af58 	beq.w	8004cb2 <dir_find+0x32>
 8004e02:	e004      	b.n	8004e0e <dir_find+0x18e>
		if (res != FR_OK) break;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004e0c:	bf00      	nop

	return res;
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	@ 0x30
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004e34:	f107 030c 	add.w	r3, r7, #12
 8004e38:	220c      	movs	r2, #12
 8004e3a:	6a39      	ldr	r1, [r7, #32]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe fba1 	bl	8003584 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03b      	beq.n	8004ec4 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	330b      	adds	r3, #11
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8004e60:	2301      	movs	r3, #1
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e64:	e013      	b.n	8004e8e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004e66:	f107 010c 	add.w	r1, r7, #12
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	6a38      	ldr	r0, [r7, #32]
 8004e70:	f7ff fe58 	bl	8004b24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff03 	bl	8004c80 <dir_find>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8004e80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e90:	2b63      	cmp	r3, #99	@ 0x63
 8004e92:	d9e8      	bls.n	8004e66 <dir_register+0x4e>
 8004e94:	e000      	b.n	8004e98 <dir_register+0x80>
			if (res != FR_OK) break;
 8004e96:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	2b64      	cmp	r3, #100	@ 0x64
 8004e9c:	d101      	bne.n	8004ea2 <dir_register+0x8a>
 8004e9e:	2307      	movs	r3, #7
 8004ea0:	e0d8      	b.n	8005054 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d002      	beq.n	8004eb0 <dir_register+0x98>
 8004eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004eae:	e0d1      	b.n	8005054 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	330b      	adds	r3, #11
 8004eb4:	7dfa      	ldrb	r2, [r7, #23]
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d014      	beq.n	8004ef8 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ed2:	e002      	b.n	8004eda <dir_register+0xc2>
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f5      	bne.n	8004ed4 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	3319      	adds	r3, #25
 8004eec:	4a5b      	ldr	r2, [pc, #364]	@ (800505c <dir_register+0x244>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	089b      	lsrs	r3, r3, #2
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef6:	e001      	b.n	8004efc <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004efc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fc8c 	bl	800481c <dir_alloc>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d15b      	bne.n	8004fca <dir_register+0x1b2>
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	3b01      	subs	r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d055      	beq.n	8004fca <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f24:	88db      	ldrh	r3, [r3, #6]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fa5c 	bl	80043ec <dir_sdi>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004f3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d143      	bne.n	8004fca <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fe78 	bl	8004c40 <sum_sfn>
 8004f50:	4603      	mov	r3, r0
 8004f52:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f7fe fd94 	bl	8003a94 <move_window>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8004f72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d126      	bne.n	8004fc8 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f80:	6a18      	ldr	r0, [r3, #32]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f88:	6959      	ldr	r1, [r3, #20]
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	7efb      	ldrb	r3, [r7, #27]
 8004f90:	f7ff fd54 	bl	8004a3c <fit_lfn>
				dp->fs->wflag = 1;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff faee 	bl	8004588 <dir_next>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8004fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <dir_register+0x1b2>
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1c6      	bne.n	8004f54 <dir_register+0x13c>
 8004fc6:	e000      	b.n	8004fca <dir_register+0x1b2>
				if (res != FR_OK) break;
 8004fc8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d13e      	bne.n	8005050 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f7fe fd55 	bl	8003a94 <move_window>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d12b      	bne.n	8005050 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	2220      	movs	r2, #32
 8005002:	2100      	movs	r1, #0
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe fadb 	bl	80035c0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005010:	6958      	ldr	r0, [r3, #20]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	220b      	movs	r2, #11
 800501c:	4619      	mov	r1, r3
 800501e:	f7fe fab1 	bl	8003584 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	330b      	adds	r3, #11
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	330c      	adds	r3, #12
 8005038:	f002 0218 	and.w	r2, r2, #24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800504c:	2201      	movs	r2, #1
 800504e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005050:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005054:	4618      	mov	r0, r3
 8005056:	3730      	adds	r7, #48	@ 0x30
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	4ec4ec4f 	.word	0x4ec4ec4f

08005060 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	@ 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	e002      	b.n	8005078 <create_name+0x18>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3301      	adds	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b2f      	cmp	r3, #47	@ 0x2f
 800507e:	d0f8      	beq.n	8005072 <create_name+0x12>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b5c      	cmp	r3, #92	@ 0x5c
 8005086:	d0f4      	beq.n	8005072 <create_name+0x12>
	lfn = dp->lfn;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	61ba      	str	r2, [r7, #24]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80050a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050aa:	2b1f      	cmp	r3, #31
 80050ac:	d92f      	bls.n	800510e <create_name+0xae>
 80050ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80050b2:	d02c      	beq.n	800510e <create_name+0xae>
 80050b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80050b8:	d029      	beq.n	800510e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80050be:	d901      	bls.n	80050c4 <create_name+0x64>
			return FR_INVALID_NAME;
 80050c0:	2306      	movs	r3, #6
 80050c2:	e186      	b.n	80053d2 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 80050c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80050ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050cc:	2101      	movs	r1, #1
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 f87a 	bl	80071c8 <ff_convert>
 80050d4:	4603      	mov	r3, r0
 80050d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80050d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <create_name+0x82>
 80050de:	2306      	movs	r3, #6
 80050e0:	e177      	b.n	80053d2 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80050e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80050e6:	d809      	bhi.n	80050fc <create_name+0x9c>
 80050e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050ea:	4619      	mov	r1, r3
 80050ec:	488e      	ldr	r0, [pc, #568]	@ (8005328 <create_name+0x2c8>)
 80050ee:	f7fe faa7 	bl	8003640 <chk_chr>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <create_name+0x9c>
			return FR_INVALID_NAME;
 80050f8:	2306      	movs	r3, #6
 80050fa:	e16a      	b.n	80053d2 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	617a      	str	r2, [r7, #20]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800510a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800510c:	e7c5      	b.n	800509a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	441a      	add	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005118:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800511a:	2b1f      	cmp	r3, #31
 800511c:	d801      	bhi.n	8005122 <create_name+0xc2>
 800511e:	2304      	movs	r3, #4
 8005120:	e000      	b.n	8005124 <create_name+0xc4>
 8005122:	2300      	movs	r3, #0
 8005124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8005128:	e011      	b.n	800514e <create_name+0xee>
		w = lfn[di - 1];
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005130:	3b01      	subs	r3, #1
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800513c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800513e:	2b20      	cmp	r3, #32
 8005140:	d002      	beq.n	8005148 <create_name+0xe8>
 8005142:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005144:	2b2e      	cmp	r3, #46	@ 0x2e
 8005146:	d106      	bne.n	8005156 <create_name+0xf6>
		di--;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	3b01      	subs	r3, #1
 800514c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ea      	bne.n	800512a <create_name+0xca>
 8005154:	e000      	b.n	8005158 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005156:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <create_name+0x102>
 800515e:	2306      	movs	r3, #6
 8005160:	e137      	b.n	80053d2 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	2200      	movs	r2, #0
 800516c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	220b      	movs	r2, #11
 8005178:	2120      	movs	r1, #32
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fa20 	bl	80035c0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005180:	2300      	movs	r3, #0
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	e002      	b.n	800518c <create_name+0x12c>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	3301      	adds	r3, #1
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	2b20      	cmp	r3, #32
 8005198:	d0f5      	beq.n	8005186 <create_name+0x126>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80051a6:	d0ee      	beq.n	8005186 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <create_name+0x162>
 80051ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051b2:	f043 0303 	orr.w	r3, r3, #3
 80051b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80051ba:	e002      	b.n	80051c2 <create_name+0x162>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	3b01      	subs	r3, #1
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d009      	beq.n	80051dc <create_name+0x17c>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80051ce:	3b01      	subs	r3, #1
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80051da:	d1ef      	bne.n	80051bc <create_name+0x15c>

	b = i = 0; ni = 8;
 80051dc:	2300      	movs	r3, #0
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80051e6:	2308      	movs	r3, #8
 80051e8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	61ba      	str	r2, [r7, #24]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80051fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8091 	beq.w	8005324 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005202:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005204:	2b20      	cmp	r3, #32
 8005206:	d006      	beq.n	8005216 <create_name+0x1b6>
 8005208:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800520a:	2b2e      	cmp	r3, #46	@ 0x2e
 800520c:	d10a      	bne.n	8005224 <create_name+0x1c4>
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	429a      	cmp	r2, r3
 8005214:	d006      	beq.n	8005224 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8005216:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800521a:	f043 0303 	orr.w	r3, r3, #3
 800521e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005222:	e07e      	b.n	8005322 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	429a      	cmp	r2, r3
 800522a:	d203      	bcs.n	8005234 <create_name+0x1d4>
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	429a      	cmp	r2, r3
 8005232:	d123      	bne.n	800527c <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b0b      	cmp	r3, #11
 8005238:	d106      	bne.n	8005248 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800523a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800523e:	f043 0303 	orr.w	r3, r3, #3
 8005242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005246:	e076      	b.n	8005336 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d005      	beq.n	800525c <create_name+0x1fc>
 8005250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005254:	f043 0303 	orr.w	r3, r3, #3
 8005258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	d867      	bhi.n	8005334 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	2308      	movs	r3, #8
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	230b      	movs	r3, #11
 800526e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005270:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800527a:	e052      	b.n	8005322 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800527c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800527e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005280:	d914      	bls.n	80052ac <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005282:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f001 ff9e 	bl	80071c8 <ff_convert>
 800528c:	4603      	mov	r3, r0
 800528e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005290:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <create_name+0x240>
 8005296:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005298:	3b80      	subs	r3, #128	@ 0x80
 800529a:	4a24      	ldr	r2, [pc, #144]	@ (800532c <create_name+0x2cc>)
 800529c:	5cd3      	ldrb	r3, [r2, r3]
 800529e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80052a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80052ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <create_name+0x262>
 80052b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052b4:	4619      	mov	r1, r3
 80052b6:	481e      	ldr	r0, [pc, #120]	@ (8005330 <create_name+0x2d0>)
 80052b8:	f7fe f9c2 	bl	8003640 <chk_chr>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80052c2:	235f      	movs	r3, #95	@ 0x5f
 80052c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80052c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052ca:	f043 0303 	orr.w	r3, r3, #3
 80052ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80052d2:	e01b      	b.n	800530c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80052d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d909      	bls.n	80052ee <create_name+0x28e>
 80052da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052dc:	2b5a      	cmp	r3, #90	@ 0x5a
 80052de:	d806      	bhi.n	80052ee <create_name+0x28e>
					b |= 2;
 80052e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80052ec:	e00e      	b.n	800530c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80052ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052f0:	2b60      	cmp	r3, #96	@ 0x60
 80052f2:	d90b      	bls.n	800530c <create_name+0x2ac>
 80052f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052f6:	2b7a      	cmp	r3, #122	@ 0x7a
 80052f8:	d808      	bhi.n	800530c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 80052fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005306:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005308:	3b20      	subs	r3, #32
 800530a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	1c59      	adds	r1, r3, #1
 8005318:	6239      	str	r1, [r7, #32]
 800531a:	4413      	add	r3, r2
 800531c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005322:	e762      	b.n	80051ea <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8005324:	bf00      	nop
 8005326:	e006      	b.n	8005336 <create_name+0x2d6>
 8005328:	08008254 	.word	0x08008254
 800532c:	080082c8 	.word	0x080082c8
 8005330:	08008260 	.word	0x08008260
			if (si > di) break;			/* No extension */
 8005334:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2be5      	cmp	r3, #229	@ 0xe5
 8005342:	d105      	bne.n	8005350 <create_name+0x2f0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2205      	movs	r2, #5
 800534e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b08      	cmp	r3, #8
 8005354:	d104      	bne.n	8005360 <create_name+0x300>
 8005356:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d005      	beq.n	8005378 <create_name+0x318>
 800536c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	2b03      	cmp	r3, #3
 8005376:	d105      	bne.n	8005384 <create_name+0x324>
		cf |= NS_LFN;
 8005378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d117      	bne.n	80053c0 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005390:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <create_name+0x348>
 800539c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80053a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053ac:	f003 030c 	and.w	r3, r3, #12
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d105      	bne.n	80053c0 <create_name+0x360>
 80053b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053b8:	f043 0308 	orr.w	r3, r3, #8
 80053bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	330b      	adds	r3, #11
 80053ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80053ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80053d0:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3728      	adds	r7, #40	@ 0x28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop

080053dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80053ec:	d003      	beq.n	80053f6 <follow_path+0x1a>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b5c      	cmp	r3, #92	@ 0x5c
 80053f4:	d102      	bne.n	80053fc <follow_path+0x20>
		path++;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005402:	461a      	mov	r2, r3
 8005404:	2300      	movs	r3, #0
 8005406:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b1f      	cmp	r3, #31
 800540e:	d80c      	bhi.n	800542a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8005410:	2100      	movs	r1, #0
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fe ffea 	bl	80043ec <dir_sdi>
 8005418:	4603      	mov	r3, r0
 800541a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005422:	461a      	mov	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	6153      	str	r3, [r2, #20]
 8005428:	e049      	b.n	80054be <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800542a:	463b      	mov	r3, r7
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fe16 	bl	8005060 <create_name>
 8005434:	4603      	mov	r3, r0
 8005436:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d13a      	bne.n	80054b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fc1e 	bl	8004c80 <dir_find>
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	7adb      	ldrb	r3, [r3, #11]
 8005452:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d12b      	bne.n	80054b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005460:	7bbb      	ldrb	r3, [r7, #14]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d126      	bne.n	80054b8 <follow_path+0xdc>
 800546a:	2305      	movs	r3, #5
 800546c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800546e:	e023      	b.n	80054b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005470:	7bbb      	ldrb	r3, [r7, #14]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d120      	bne.n	80054bc <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	330b      	adds	r3, #11
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8005492:	2305      	movs	r3, #5
 8005494:	73fb      	strb	r3, [r7, #15]
 8005496:	e012      	b.n	80054be <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fa08 	bl	80048b8 <ld_clust>
 80054a8:	4602      	mov	r2, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80054b2:	e7ba      	b.n	800542a <follow_path+0x4e>
			if (res != FR_OK) break;
 80054b4:	bf00      	nop
 80054b6:	e002      	b.n	80054be <follow_path+0xe2>
				break;
 80054b8:	bf00      	nop
 80054ba:	e000      	b.n	80054be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054bc:	bf00      	nop
		}
	}

	return res;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295
 80054d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d031      	beq.n	8005542 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e002      	b.n	80054ec <get_ldnumber+0x24>
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	3301      	adds	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b1f      	cmp	r3, #31
 80054f2:	d903      	bls.n	80054fc <get_ldnumber+0x34>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80054fa:	d1f4      	bne.n	80054e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b3a      	cmp	r3, #58	@ 0x3a
 8005502:	d11c      	bne.n	800553e <get_ldnumber+0x76>
			tp = *path;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	60fa      	str	r2, [r7, #12]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	3b30      	subs	r3, #48	@ 0x30
 8005514:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b09      	cmp	r3, #9
 800551a:	d80e      	bhi.n	800553a <get_ldnumber+0x72>
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	429a      	cmp	r2, r3
 8005522:	d10a      	bne.n	800553a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <get_ldnumber+0x72>
					vol = (int)i;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	3301      	adds	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	e002      	b.n	8005544 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005542:	693b      	ldr	r3, [r7, #16]
}
 8005544:	4618      	mov	r0, r3
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
	...

08005550 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005560:	2200      	movs	r2, #0
 8005562:	711a      	strb	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800556a:	461a      	mov	r2, r3
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7fe fa8d 	bl	8003a94 <move_window>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <check_fs+0x34>
		return 3;
 8005580:	2303      	movs	r3, #3
 8005582:	e04a      	b.n	800561a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800558a:	3301      	adds	r3, #1
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	b21a      	sxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005598:	b21b      	sxth	r3, r3
 800559a:	4313      	orrs	r3, r2
 800559c:	b21b      	sxth	r3, r3
 800559e:	4a21      	ldr	r2, [pc, #132]	@ (8005624 <check_fs+0xd4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d001      	beq.n	80055a8 <check_fs+0x58>
		return 2;
 80055a4:	2302      	movs	r3, #2
 80055a6:	e038      	b.n	800561a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3336      	adds	r3, #54	@ 0x36
 80055ac:	3303      	adds	r3, #3
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	061a      	lsls	r2, r3, #24
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3336      	adds	r3, #54	@ 0x36
 80055b6:	3302      	adds	r3, #2
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3336      	adds	r3, #54	@ 0x36
 80055c2:	3301      	adds	r3, #1
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	4313      	orrs	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055d6:	4a14      	ldr	r2, [pc, #80]	@ (8005628 <check_fs+0xd8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <check_fs+0x90>
		return 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	e01c      	b.n	800561a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3352      	adds	r3, #82	@ 0x52
 80055e4:	3303      	adds	r3, #3
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	061a      	lsls	r2, r3, #24
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3352      	adds	r3, #82	@ 0x52
 80055ee:	3302      	adds	r3, #2
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3352      	adds	r3, #82	@ 0x52
 80055fa:	3301      	adds	r3, #1
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	4313      	orrs	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8005608:	4313      	orrs	r3, r2
 800560a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800560e:	4a06      	ldr	r2, [pc, #24]	@ (8005628 <check_fs+0xd8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d101      	bne.n	8005618 <check_fs+0xc8>
		return 0;
 8005614:	2300      	movs	r3, #0
 8005616:	e000      	b.n	800561a <check_fs+0xca>

	return 1;
 8005618:	2301      	movs	r3, #1
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	ffffaa55 	.word	0xffffaa55
 8005628:	00544146 	.word	0x00544146

0800562c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b096      	sub	sp, #88	@ 0x58
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005640:	68b8      	ldr	r0, [r7, #8]
 8005642:	f7ff ff41 	bl	80054c8 <get_ldnumber>
 8005646:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800564a:	2b00      	cmp	r3, #0
 800564c:	da01      	bge.n	8005652 <find_volume+0x26>
 800564e:	230b      	movs	r3, #11
 8005650:	e311      	b.n	8005c76 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005652:	4a98      	ldr	r2, [pc, #608]	@ (80058b4 <find_volume+0x288>)
 8005654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <find_volume+0x3a>
 8005662:	230c      	movs	r3, #12
 8005664:	e307      	b.n	8005c76 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800566a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01c      	beq.n	80056b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	4618      	mov	r0, r3
 8005682:	f7fd fee1 	bl	8003448 <disk_status>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800568c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10c      	bne.n	80056b2 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <find_volume+0x82>
 800569e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80056aa:	230a      	movs	r3, #10
 80056ac:	e2e3      	b.n	8005c76 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80056ae:	2300      	movs	r3, #0
 80056b0:	e2e1      	b.n	8005c76 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80056bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fd fed3 	bl	800347c <disk_initialize>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80056dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80056e8:	2303      	movs	r3, #3
 80056ea:	e2c4      	b.n	8005c76 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <find_volume+0xd6>
 80056f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80056fe:	230a      	movs	r3, #10
 8005700:	e2b9      	b.n	8005c76 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005708:	7858      	ldrb	r0, [r3, #1]
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005710:	330a      	adds	r3, #10
 8005712:	461a      	mov	r2, r3
 8005714:	2102      	movs	r1, #2
 8005716:	f7fd ff17 	bl	8003548 <disk_ioctl>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10d      	bne.n	800573c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005726:	895b      	ldrh	r3, [r3, #10]
 8005728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800572c:	d306      	bcc.n	800573c <find_volume+0x110>
 800572e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005734:	895b      	ldrh	r3, [r3, #10]
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800573a:	d901      	bls.n	8005740 <find_volume+0x114>
 800573c:	2301      	movs	r3, #1
 800573e:	e29a      	b.n	8005c76 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005744:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005746:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005748:	f7ff ff02 	bl	8005550 <check_fs>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005752:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005756:	2b01      	cmp	r3, #1
 8005758:	d153      	bne.n	8005802 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800575a:	2300      	movs	r3, #0
 800575c:	643b      	str	r3, [r7, #64]	@ 0x40
 800575e:	e028      	b.n	80057b2 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800576a:	4413      	add	r3, r2
 800576c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	3304      	adds	r3, #4
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d012      	beq.n	800579e <find_volume+0x172>
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	330b      	adds	r3, #11
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	061a      	lsls	r2, r3, #24
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	330a      	adds	r3, #10
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	431a      	orrs	r2, r3
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	3309      	adds	r3, #9
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	4313      	orrs	r3, r2
 8005794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005796:	3208      	adds	r2, #8
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	431a      	orrs	r2, r3
 800579c:	e000      	b.n	80057a0 <find_volume+0x174>
 800579e:	2200      	movs	r2, #0
 80057a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	3358      	adds	r3, #88	@ 0x58
 80057a6:	443b      	add	r3, r7
 80057a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80057ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ae:	3301      	adds	r3, #1
 80057b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80057b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d9d3      	bls.n	8005760 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80057b8:	2300      	movs	r3, #0
 80057ba:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80057bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <find_volume+0x19c>
 80057c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c4:	3b01      	subs	r3, #1
 80057c6:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80057c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	3358      	adds	r3, #88	@ 0x58
 80057ce:	443b      	add	r3, r7
 80057d0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80057d4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80057d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <find_volume+0x1bc>
 80057dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057e0:	f7ff feb6 	bl	8005550 <check_fs>
 80057e4:	4603      	mov	r3, r0
 80057e6:	e000      	b.n	80057ea <find_volume+0x1be>
 80057e8:	2302      	movs	r3, #2
 80057ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80057ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <find_volume+0x1d6>
 80057f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057f8:	3301      	adds	r3, #1
 80057fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80057fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d9e2      	bls.n	80057c8 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005802:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005806:	2b03      	cmp	r3, #3
 8005808:	d101      	bne.n	800580e <find_volume+0x1e2>
 800580a:	2301      	movs	r3, #1
 800580c:	e233      	b.n	8005c76 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800580e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <find_volume+0x1ee>
 8005816:	230d      	movs	r3, #13
 8005818:	e22d      	b.n	8005c76 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	7b1b      	ldrb	r3, [r3, #12]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	b21a      	sxth	r2, r3
 8005822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005824:	7adb      	ldrb	r3, [r3, #11]
 8005826:	b21b      	sxth	r3, r3
 8005828:	4313      	orrs	r3, r2
 800582a:	b21a      	sxth	r2, r3
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005832:	895b      	ldrh	r3, [r3, #10]
 8005834:	b21b      	sxth	r3, r3
 8005836:	429a      	cmp	r2, r3
 8005838:	d001      	beq.n	800583e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800583a:	230d      	movs	r3, #13
 800583c:	e21b      	b.n	8005c76 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800583e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005840:	7ddb      	ldrb	r3, [r3, #23]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	b21a      	sxth	r2, r3
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	7d9b      	ldrb	r3, [r3, #22]
 800584a:	b21b      	sxth	r3, r3
 800584c:	4313      	orrs	r3, r2
 800584e:	b21b      	sxth	r3, r3
 8005850:	b29b      	uxth	r3, r3
 8005852:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d112      	bne.n	8005880 <find_volume+0x254>
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005860:	061a      	lsls	r2, r3, #24
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	431a      	orrs	r2, r3
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	4313      	orrs	r3, r2
 8005876:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005878:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800587c:	4313      	orrs	r3, r2
 800587e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8005880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005886:	461a      	mov	r2, r3
 8005888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800588a:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	7c1a      	ldrb	r2, [r3, #16]
 8005890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005896:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800589e:	78db      	ldrb	r3, [r3, #3]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d009      	beq.n	80058b8 <find_volume+0x28c>
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058aa:	78db      	ldrb	r3, [r3, #3]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d003      	beq.n	80058b8 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80058b0:	230d      	movs	r3, #13
 80058b2:	e1e0      	b.n	8005c76 <find_volume+0x64a>
 80058b4:	20002224 	.word	0x20002224
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80058b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058be:	78db      	ldrb	r3, [r3, #3]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c4:	fb02 f303 	mul.w	r3, r2, r3
 80058c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	7b5a      	ldrb	r2, [r3, #13]
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058d4:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058dc:	789b      	ldrb	r3, [r3, #2]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <find_volume+0x2d0>
 80058e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058e8:	789b      	ldrb	r3, [r3, #2]
 80058ea:	461a      	mov	r2, r3
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058f2:	789b      	ldrb	r3, [r3, #2]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 80058fc:	230d      	movs	r3, #13
 80058fe:	e1ba      	b.n	8005c76 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005902:	7c9b      	ldrb	r3, [r3, #18]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	b21a      	sxth	r2, r3
 8005908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590a:	7c5b      	ldrb	r3, [r3, #17]
 800590c:	b21b      	sxth	r3, r3
 800590e:	4313      	orrs	r3, r2
 8005910:	b21b      	sxth	r3, r3
 8005912:	b29a      	uxth	r2, r3
 8005914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800591a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800591c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005922:	891b      	ldrh	r3, [r3, #8]
 8005924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005926:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800592a:	8952      	ldrh	r2, [r2, #10]
 800592c:	0952      	lsrs	r2, r2, #5
 800592e:	b292      	uxth	r2, r2
 8005930:	fbb3 f1f2 	udiv	r1, r3, r2
 8005934:	fb01 f202 	mul.w	r2, r1, r2
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8005940:	230d      	movs	r3, #13
 8005942:	e198      	b.n	8005c76 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	7d1b      	ldrb	r3, [r3, #20]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	b21a      	sxth	r2, r3
 800594c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594e:	7cdb      	ldrb	r3, [r3, #19]
 8005950:	b21b      	sxth	r3, r3
 8005952:	4313      	orrs	r3, r2
 8005954:	b21b      	sxth	r3, r3
 8005956:	b29b      	uxth	r3, r3
 8005958:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800595a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595c:	2b00      	cmp	r3, #0
 800595e:	d112      	bne.n	8005986 <find_volume+0x35a>
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005966:	061a      	lsls	r2, r3, #24
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	431a      	orrs	r2, r3
 8005972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005974:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	4313      	orrs	r3, r2
 800597c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800597e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005982:	4313      	orrs	r3, r2
 8005984:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	7bdb      	ldrb	r3, [r3, #15]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	b21a      	sxth	r2, r3
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	7b9b      	ldrb	r3, [r3, #14]
 8005992:	b21b      	sxth	r3, r3
 8005994:	4313      	orrs	r3, r2
 8005996:	b21b      	sxth	r3, r3
 8005998:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800599a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <find_volume+0x378>
 80059a0:	230d      	movs	r3, #13
 80059a2:	e168      	b.n	8005c76 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80059a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80059a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a8:	4413      	add	r3, r2
 80059aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059b0:	8911      	ldrh	r1, [r2, #8]
 80059b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059b8:	8952      	ldrh	r2, [r2, #10]
 80059ba:	0952      	lsrs	r2, r2, #5
 80059bc:	b292      	uxth	r2, r2
 80059be:	fbb1 f2f2 	udiv	r2, r1, r2
 80059c2:	b292      	uxth	r2, r2
 80059c4:	4413      	add	r3, r2
 80059c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80059c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d201      	bcs.n	80059d4 <find_volume+0x3a8>
 80059d0:	230d      	movs	r3, #13
 80059d2:	e150      	b.n	8005c76 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80059d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059e0:	7892      	ldrb	r2, [r2, #2]
 80059e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <find_volume+0x3c6>
 80059ee:	230d      	movs	r3, #13
 80059f0:	e141      	b.n	8005c76 <find_volume+0x64a>
	fmt = FS_FAT12;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d902      	bls.n	8005a08 <find_volume+0x3dc>
 8005a02:	2302      	movs	r3, #2
 8005a04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d902      	bls.n	8005a18 <find_volume+0x3ec>
 8005a12:	2303      	movs	r3, #3
 8005a14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a22:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a2e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005a30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a34:	4413      	add	r3, r2
 8005a36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a3c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8005a3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a42:	4413      	add	r3, r2
 8005a44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a4a:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8005a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d124      	bne.n	8005a9e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a5a:	891b      	ldrh	r3, [r3, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <find_volume+0x438>
 8005a60:	230d      	movs	r3, #13
 8005a62:	e108      	b.n	8005c76 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a66:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005a6a:	061a      	lsls	r2, r3, #24
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	431a      	orrs	r2, r3
 8005a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a82:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8005a86:	4313      	orrs	r3, r2
 8005a88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a8e:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9c:	e02b      	b.n	8005af6 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa4:	891b      	ldrh	r3, [r3, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <find_volume+0x482>
 8005aaa:	230d      	movs	r3, #13
 8005aac:	e0e3      	b.n	8005c76 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab4:	6a1a      	ldr	r2, [r3, #32]
 8005ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab8:	4413      	add	r3, r2
 8005aba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005abc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ac0:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d105      	bne.n	8005ad6 <find_volume+0x4aa>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	e00e      	b.n	8005af4 <find_volume+0x4c8>
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	085a      	lsrs	r2, r3, #1
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005af4:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b04:	895b      	ldrh	r3, [r3, #10]
 8005b06:	4619      	mov	r1, r3
 8005b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0a:	440b      	add	r3, r1
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b10:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8005b14:	8949      	ldrh	r1, [r1, #10]
 8005b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d201      	bcs.n	8005b22 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8005b1e:	230d      	movs	r3, #13
 8005b20:	e0a9      	b.n	8005c76 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2e:	6113      	str	r3, [r2, #16]
 8005b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b3e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b46:	2280      	movs	r2, #128	@ 0x80
 8005b48:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005b4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d17a      	bne.n	8005c48 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	b21a      	sxth	r2, r3
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b62:	b21b      	sxth	r3, r3
 8005b64:	4313      	orrs	r3, r2
 8005b66:	b21b      	sxth	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d16d      	bne.n	8005c48 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b6e:	3301      	adds	r3, #1
 8005b70:	4619      	mov	r1, r3
 8005b72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b74:	f7fd ff8e 	bl	8003a94 <move_window>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d164      	bne.n	8005c48 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b84:	2200      	movs	r2, #0
 8005b86:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	b21a      	sxth	r2, r3
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005b98:	b21b      	sxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	4a38      	ldr	r2, [pc, #224]	@ (8005c80 <find_volume+0x654>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d151      	bne.n	8005c48 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	78db      	ldrb	r3, [r3, #3]
 8005ba8:	061a      	lsls	r2, r3, #24
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	789b      	ldrb	r3, [r3, #2]
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bbc:	7812      	ldrb	r2, [r2, #0]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	4a30      	ldr	r2, [pc, #192]	@ (8005c84 <find_volume+0x658>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d140      	bne.n	8005c48 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8005bcc:	061a      	lsls	r2, r3, #24
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	4313      	orrs	r3, r2
 8005be2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005be4:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8005be8:	4313      	orrs	r3, r2
 8005bea:	4a27      	ldr	r2, [pc, #156]	@ (8005c88 <find_volume+0x65c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d12b      	bne.n	8005c48 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8005bf6:	061a      	lsls	r2, r3, #24
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfa:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	431a      	orrs	r2, r3
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c04:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c0e:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8005c12:	4313      	orrs	r3, r2
 8005c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c1a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1e:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8005c22:	061a      	lsls	r2, r3, #24
 8005c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c26:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	4313      	orrs	r3, r2
 8005c38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c3a:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c46:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c54:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005c56:	4b0d      	ldr	r3, [pc, #52]	@ (8005c8c <find_volume+0x660>)
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c8c <find_volume+0x660>)
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <find_volume+0x660>)
 8005c64:	881a      	ldrh	r2, [r3, #0]
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c6c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005c6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c70:	f7fd fe94 	bl	800399c <clear_lock>
#endif

	return FR_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3758      	adds	r7, #88	@ 0x58
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	ffffaa55 	.word	0xffffaa55
 8005c84:	41615252 	.word	0x41615252
 8005c88:	61417272 	.word	0x61417272
 8005c8c:	20002228 	.word	0x20002228

08005c90 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d02a      	beq.n	8005cf8 <validate+0x68>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d024      	beq.n	8005cf8 <validate+0x68>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <validate+0x68>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ccc:	88da      	ldrh	r2, [r3, #6]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cd4:	889b      	ldrh	r3, [r3, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d10e      	bne.n	8005cf8 <validate+0x68>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fd fbad 	bl	8003448 <disk_status>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005cf8:	2309      	movs	r3, #9
 8005cfa:	e000      	b.n	8005cfe <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005d1a:	f107 0310 	add.w	r3, r7, #16
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fbd2 	bl	80054c8 <get_ldnumber>
 8005d24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	da01      	bge.n	8005d30 <f_mount+0x28>
 8005d2c:	230b      	movs	r3, #11
 8005d2e:	e02f      	b.n	8005d90 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005d30:	4a19      	ldr	r2, [pc, #100]	@ (8005d98 <f_mount+0x90>)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005d40:	69b8      	ldr	r0, [r7, #24]
 8005d42:	f7fd fe2b 	bl	800399c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d004      	beq.n	8005d60 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	490d      	ldr	r1, [pc, #52]	@ (8005d98 <f_mount+0x90>)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <f_mount+0x6e>
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d001      	beq.n	8005d7a <f_mount+0x72>
 8005d76:	2300      	movs	r3, #0
 8005d78:	e00a      	b.n	8005d90 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005d7a:	f107 0108 	add.w	r1, r7, #8
 8005d7e:	f107 030c 	add.w	r3, r7, #12
 8005d82:	2200      	movs	r2, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff fc51 	bl	800562c <find_volume>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20002224 	.word	0x20002224

08005d9c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005daa:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005dae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005db2:	f843 1c50 	str.w	r1, [r3, #-80]
 8005db6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005dba:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005dbe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005dc2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <f_open+0x32>
 8005dca:	2309      	movs	r3, #9
 8005dcc:	e2f3      	b.n	80063b6 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8005dce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005dd2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2300      	movs	r3, #0
 8005dde:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005de0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005de4:	461a      	mov	r2, r3
 8005de6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005dea:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005df6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005dfa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005dfe:	f023 0301 	bic.w	r3, r3, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	f107 0118 	add.w	r1, r7, #24
 8005e08:	3910      	subs	r1, #16
 8005e0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005e0e:	3b18      	subs	r3, #24
 8005e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff fc09 	bl	800562c <find_volume>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005e20:	f102 0217 	add.w	r2, r2, #23
 8005e24:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005e26:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005e2a:	f103 0317 	add.w	r3, r3, #23
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 82bb 	bne.w	80063ac <f_open+0x610>
		INIT_BUF(dj);
 8005e36:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f107 0318 	add.w	r3, r7, #24
 8005e40:	3b04      	subs	r3, #4
 8005e42:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 8005e46:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4bd3      	ldr	r3, [pc, #844]	@ (800619c <f_open+0x400>)
 8005e4e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e52:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005e56:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005e5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005e5e:	3b18      	subs	r3, #24
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff faba 	bl	80053dc <follow_path>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005e6e:	f102 0217 	add.w	r2, r2, #23
 8005e72:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8005e74:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005e78:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8005e7c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005e80:	f102 0210 	add.w	r2, r2, #16
 8005e84:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005e86:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005e8a:	f103 0317 	add.w	r3, r3, #23
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d124      	bne.n	8005ede <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8005e94:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005e98:	f103 0310 	add.w	r3, r3, #16
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <f_open+0x114>
				res = FR_INVALID_NAME;
 8005ea2:	2306      	movs	r3, #6
 8005ea4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005ea8:	f102 0217 	add.w	r2, r2, #23
 8005eac:	7013      	strb	r3, [r2, #0]
 8005eae:	e016      	b.n	8005ede <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005eb0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005eb4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	bf8c      	ite	hi
 8005ebc:	2301      	movhi	r3, #1
 8005ebe:	2300      	movls	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005ec8:	3b18      	subs	r3, #24
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fd fbd1 	bl	8003674 <chk_lock>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005ed8:	f102 0217 	add.w	r2, r2, #23
 8005edc:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005ede:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005ee2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005ee6:	f003 031c 	and.w	r3, r3, #28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 813c 	beq.w	8006168 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8005ef0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005ef4:	f103 0317 	add.w	r3, r3, #23
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d02e      	beq.n	8005f5c <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005efe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f02:	f103 0317 	add.w	r3, r3, #23
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d112      	bne.n	8005f32 <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005f0c:	f7fd fc22 	bl	8003754 <enq_lock>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <f_open+0x18a>
 8005f16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f1a:	3b18      	subs	r3, #24
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe ff7b 	bl	8004e18 <dir_register>
 8005f22:	4603      	mov	r3, r0
 8005f24:	e000      	b.n	8005f28 <f_open+0x18c>
 8005f26:	2312      	movs	r3, #18
 8005f28:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005f2c:	f102 0217 	add.w	r2, r2, #23
 8005f30:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005f32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005f36:	461a      	mov	r2, r3
 8005f38:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005f3c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005f40:	f043 0308 	orr.w	r3, r3, #8
 8005f44:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8005f48:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005f4c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8005f50:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005f54:	f102 0210 	add.w	r2, r2, #16
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e01f      	b.n	8005f9c <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005f5c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f60:	f103 0310 	add.w	r3, r3, #16
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	330b      	adds	r3, #11
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f003 0311 	and.w	r3, r3, #17
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d006      	beq.n	8005f80 <f_open+0x1e4>
					res = FR_DENIED;
 8005f72:	2307      	movs	r3, #7
 8005f74:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005f78:	f102 0217 	add.w	r2, r2, #23
 8005f7c:	7013      	strb	r3, [r2, #0]
 8005f7e:	e00d      	b.n	8005f9c <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005f80:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005f84:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <f_open+0x200>
						res = FR_EXIST;
 8005f90:	2308      	movs	r3, #8
 8005f92:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005f96:	f102 0217 	add.w	r2, r2, #23
 8005f9a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005f9c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005fa0:	f103 0317 	add.w	r3, r3, #23
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 8113 	bne.w	80061d2 <f_open+0x436>
 8005fac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fb0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 810a 	beq.w	80061d2 <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 8005fbe:	f7fd f9e7 	bl	8003390 <get_fattime>
 8005fc2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005fc6:	f103 030c 	add.w	r3, r3, #12
 8005fca:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005fcc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005fd0:	f103 0310 	add.w	r3, r3, #16
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330e      	adds	r3, #14
 8005fd8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005fdc:	f102 020c 	add.w	r2, r2, #12
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005fea:	f103 030c 	add.w	r3, r3, #12
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	0a1b      	lsrs	r3, r3, #8
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005ffa:	f103 0310 	add.w	r3, r3, #16
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330f      	adds	r3, #15
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800600a:	f103 030c 	add.w	r3, r3, #12
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	0c1a      	lsrs	r2, r3, #16
 8006012:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006016:	f103 0310 	add.w	r3, r3, #16
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3310      	adds	r3, #16
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006026:	f103 030c 	add.w	r3, r3, #12
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	0e1a      	lsrs	r2, r3, #24
 800602e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006032:	f103 0310 	add.w	r3, r3, #16
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3311      	adds	r3, #17
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800603e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006042:	f103 0310 	add.w	r3, r3, #16
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330b      	adds	r3, #11
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800604e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006052:	f103 0310 	add.w	r3, r3, #16
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	331c      	adds	r3, #28
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006062:	f103 0310 	add.w	r3, r3, #16
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	331d      	adds	r3, #29
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006072:	f103 0310 	add.w	r3, r3, #16
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	331e      	adds	r3, #30
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006082:	f103 0310 	add.w	r3, r3, #16
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	331f      	adds	r3, #31
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800608e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006092:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006096:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800609a:	f102 0210 	add.w	r2, r2, #16
 800609e:	6811      	ldr	r1, [r2, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fc09 	bl	80048b8 <ld_clust>
 80060a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80060aa:	f103 0308 	add.w	r3, r3, #8
 80060ae:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80060b0:	2100      	movs	r1, #0
 80060b2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80060b6:	f103 0310 	add.w	r3, r3, #16
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	f7fe fc2a 	bl	8004914 <st_clust>
				dj.fs->wflag = 1;
 80060c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060c4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80060c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060cc:	2201      	movs	r2, #1
 80060ce:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80060d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80060d4:	f103 0308 	add.w	r3, r3, #8
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d079      	beq.n	80061d2 <f_open+0x436>
					dw = dj.fs->winsect;
 80060de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060e2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80060e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ec:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80060f0:	f102 020c 	add.w	r2, r2, #12
 80060f4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80060f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060fa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80060fe:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006102:	f102 0208 	add.w	r2, r2, #8
 8006106:	6811      	ldr	r1, [r2, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f7fe f826 	bl	800415a <remove_chain>
 800610e:	4603      	mov	r3, r0
 8006110:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006114:	f102 0217 	add.w	r2, r2, #23
 8006118:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800611a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800611e:	f103 0317 	add.w	r3, r3, #23
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d154      	bne.n	80061d2 <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006128:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800612c:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 8006130:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006134:	f103 0308 	add.w	r3, r3, #8
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3b01      	subs	r3, #1
 800613c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006140:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8006142:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006146:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800614a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800614e:	f102 020c 	add.w	r2, r2, #12
 8006152:	6811      	ldr	r1, [r2, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f7fd fc9d 	bl	8003a94 <move_window>
 800615a:	4603      	mov	r3, r0
 800615c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006160:	f102 0217 	add.w	r2, r2, #23
 8006164:	7013      	strb	r3, [r2, #0]
 8006166:	e034      	b.n	80061d2 <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006168:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800616c:	f103 0317 	add.w	r3, r3, #23
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d12d      	bne.n	80061d2 <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006176:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800617a:	f103 0310 	add.w	r3, r3, #16
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330b      	adds	r3, #11
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	d009      	beq.n	80061a0 <f_open+0x404>
					res = FR_NO_FILE;
 800618c:	2304      	movs	r3, #4
 800618e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006192:	f102 0217 	add.w	r2, r2, #23
 8006196:	7013      	strb	r3, [r2, #0]
 8006198:	e01b      	b.n	80061d2 <f_open+0x436>
 800619a:	bf00      	nop
 800619c:	20002244 	.word	0x20002244
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80061a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061a4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d010      	beq.n	80061d2 <f_open+0x436>
 80061b0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061b4:	f103 0310 	add.w	r3, r3, #16
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330b      	adds	r3, #11
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <f_open+0x436>
						res = FR_DENIED;
 80061c6:	2307      	movs	r3, #7
 80061c8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80061cc:	f102 0217 	add.w	r2, r2, #23
 80061d0:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80061d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061d6:	f103 0317 	add.w	r3, r3, #23
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d155      	bne.n	800628c <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80061e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061e4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <f_open+0x46a>
				mode |= FA__WRITTEN;
 80061f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061f4:	461a      	mov	r2, r3
 80061f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061fa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80061fe:	f043 0320 	orr.w	r3, r3, #32
 8006202:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006206:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800620a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800620e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006218:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800621c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006220:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8006222:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006226:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800622a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800622e:	461a      	mov	r2, r3
 8006230:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006234:	f103 0310 	add.w	r3, r3, #16
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800623c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006240:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006244:	2b01      	cmp	r3, #1
 8006246:	bf8c      	ite	hi
 8006248:	2301      	movhi	r3, #1
 800624a:	2300      	movls	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006254:	3b18      	subs	r3, #24
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f7fd fa9f 	bl	800379c <inc_lock>
 800625e:	4602      	mov	r2, r0
 8006260:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006264:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800626c:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800626e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006272:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	2b00      	cmp	r3, #0
 800627e:	d105      	bne.n	800628c <f_open+0x4f0>
 8006280:	2302      	movs	r3, #2
 8006282:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006286:	f102 0217 	add.w	r2, r2, #23
 800628a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800628c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006290:	f103 0317 	add.w	r3, r3, #23
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 8088 	bne.w	80063ac <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 800629c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062a0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80062a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062a8:	461a      	mov	r2, r3
 80062aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062ae:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80062b2:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80062b4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062b8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80062bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c0:	2200      	movs	r2, #0
 80062c2:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80062c4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062c8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80062cc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80062d0:	f102 0210 	add.w	r2, r2, #16
 80062d4:	6811      	ldr	r1, [r2, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe faee 	bl	80048b8 <ld_clust>
 80062dc:	4602      	mov	r2, r0
 80062de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062e2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80062e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ea:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80062ec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062f0:	f103 0310 	add.w	r3, r3, #16
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	331f      	adds	r3, #31
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	061a      	lsls	r2, r3, #24
 80062fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006300:	f103 0310 	add.w	r3, r3, #16
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	331e      	adds	r3, #30
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	041b      	lsls	r3, r3, #16
 800630c:	431a      	orrs	r2, r3
 800630e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006312:	f103 0310 	add.w	r3, r3, #16
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	331d      	adds	r3, #29
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	4313      	orrs	r3, r2
 8006320:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006324:	f102 0210 	add.w	r2, r2, #16
 8006328:	6812      	ldr	r2, [r2, #0]
 800632a:	321c      	adds	r2, #28
 800632c:	7812      	ldrb	r2, [r2, #0]
 800632e:	4313      	orrs	r3, r2
 8006330:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006334:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006338:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800633c:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800633e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006342:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800634a:	461a      	mov	r2, r3
 800634c:	2300      	movs	r3, #0
 800634e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8006350:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006354:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800635c:	461a      	mov	r2, r3
 800635e:	2300      	movs	r3, #0
 8006360:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006362:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006366:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800636a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800636e:	461a      	mov	r2, r3
 8006370:	2300      	movs	r3, #0
 8006372:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006374:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006378:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800637c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006380:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006384:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006388:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800638a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800638e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800639c:	88da      	ldrh	r2, [r3, #6]
 800639e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063a2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80063a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063aa:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80063ac:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80063b0:	f103 0317 	add.w	r3, r3, #23
 80063b4:	781b      	ldrb	r3, [r3, #0]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop

080063c4 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	@ 0x30
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff fc57 	bl	8005c90 <validate>
 80063e2:	4603      	mov	r3, r0
 80063e4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80063e6:	7ffb      	ldrb	r3, [r7, #31]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <f_read+0x2c>
 80063ec:	7ffb      	ldrb	r3, [r7, #31]
 80063ee:	e1cd      	b.n	800678c <f_read+0x3c8>
	if (fp->err)								/* Check error */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063f6:	79db      	ldrb	r3, [r3, #7]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006402:	79db      	ldrb	r3, [r3, #7]
 8006404:	e1c2      	b.n	800678c <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800640c:	799b      	ldrb	r3, [r3, #6]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006416:	2307      	movs	r3, #7
 8006418:	e1b8      	b.n	800678c <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	429a      	cmp	r2, r3
 8006434:	f240 81a5 	bls.w	8006782 <f_read+0x3be>
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800643c:	e1a1      	b.n	8006782 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006452:	8952      	ldrh	r2, [r2, #10]
 8006454:	fbb3 f1f2 	udiv	r1, r3, r2
 8006458:	fb01 f202 	mul.w	r2, r1, r2
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 8140 	bne.w	80066e4 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006478:	8952      	ldrh	r2, [r2, #10]
 800647a:	fbb3 f3f2 	udiv	r3, r3, r2
 800647e:	b2da      	uxtb	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800648c:	789b      	ldrb	r3, [r3, #2]
 800648e:	3b01      	subs	r3, #1
 8006490:	b2db      	uxtb	r3, r3
 8006492:	4013      	ands	r3, r2
 8006494:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d143      	bne.n	8006524 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d105      	bne.n	80064b4 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b2:	e01c      	b.n	80064ee <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4619      	mov	r1, r3
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7fd ff4e 	bl	800436c <clmt_clust>
 80064d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80064d2:	e00c      	b.n	80064ee <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f7fd fbe9 	bl	8003cbe <get_fat>
 80064ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80064ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d806      	bhi.n	8006502 <f_read+0x13e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064fa:	2202      	movs	r2, #2
 80064fc:	71da      	strb	r2, [r3, #7]
 80064fe:	2302      	movs	r3, #2
 8006500:	e144      	b.n	800678c <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d106      	bne.n	8006518 <f_read+0x154>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006510:	2201      	movs	r2, #1
 8006512:	71da      	strb	r2, [r3, #7]
 8006514:	2301      	movs	r3, #1
 8006516:	e139      	b.n	800678c <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800651e:	461a      	mov	r2, r3
 8006520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006522:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f7fd fb9d 	bl	8003c76 <clust2sect>
 800653c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <f_read+0x18e>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800654a:	2202      	movs	r2, #2
 800654c:	71da      	strb	r2, [r3, #7]
 800654e:	2302      	movs	r3, #2
 8006550:	e11c      	b.n	800678c <f_read+0x3c8>
			sect += csect;
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4413      	add	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006566:	895b      	ldrh	r3, [r3, #10]
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	d066      	beq.n	8006646 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006578:	7dfa      	ldrb	r2, [r7, #23]
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	4413      	add	r3, r2
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800658a:	7892      	ldrb	r2, [r2, #2]
 800658c:	4293      	cmp	r3, r2
 800658e:	d90a      	bls.n	80065a6 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800659c:	789b      	ldrb	r3, [r3, #2]
 800659e:	461a      	mov	r2, r3
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065b2:	7858      	ldrb	r0, [r3, #1]
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	6a39      	ldr	r1, [r7, #32]
 80065ba:	f7fc ff85 	bl	80034c8 <disk_read>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d006      	beq.n	80065d2 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ca:	2201      	movs	r2, #1
 80065cc:	71da      	strb	r2, [r3, #7]
 80065ce:	2301      	movs	r3, #1
 80065d0:	e0dc      	b.n	800678c <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065d8:	799b      	ldrb	r3, [r3, #6]
 80065da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d024      	beq.n	800662c <f_read+0x268>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d91b      	bls.n	800662c <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065fa:	699a      	ldr	r2, [r3, #24]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800660c:	8952      	ldrh	r2, [r2, #10]
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	6a3a      	ldr	r2, [r7, #32]
 8006614:	18d0      	adds	r0, r2, r3
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006624:	895b      	ldrh	r3, [r3, #10]
 8006626:	461a      	mov	r2, r3
 8006628:	f7fc ffac 	bl	8003584 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006638:	895b      	ldrh	r3, [r3, #10]
 800663a:	461a      	mov	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 8006644:	e085      	b.n	8006752 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	429a      	cmp	r2, r3
 8006652:	d041      	beq.n	80066d8 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800665a:	799b      	ldrb	r3, [r3, #6]
 800665c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d023      	beq.n	80066ac <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006670:	7858      	ldrb	r0, [r3, #1]
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	2301      	movs	r3, #1
 800667e:	f7fc ff43 	bl	8003508 <disk_write>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800668e:	2201      	movs	r2, #1
 8006690:	71da      	strb	r2, [r3, #7]
 8006692:	2301      	movs	r3, #1
 8006694:	e07a      	b.n	800678c <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800669c:	799b      	ldrb	r3, [r3, #6]
 800669e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066aa:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b8:	7858      	ldrb	r0, [r3, #1]
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	2301      	movs	r3, #1
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	f7fc ff02 	bl	80034c8 <disk_read>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d006      	beq.n	80066d8 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066d0:	2201      	movs	r2, #1
 80066d2:	71da      	strb	r2, [r3, #7]
 80066d4:	2301      	movs	r3, #1
 80066d6:	e059      	b.n	800678c <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066de:	461a      	mov	r2, r3
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066f0:	895b      	ldrh	r3, [r3, #10]
 80066f2:	4618      	mov	r0, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006708:	8952      	ldrh	r2, [r2, #10]
 800670a:	fbb3 f1f2 	udiv	r1, r3, r2
 800670e:	fb01 f202 	mul.w	r2, r1, r2
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	1ac3      	subs	r3, r0, r3
 8006716:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 8006718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d901      	bls.n	8006724 <f_read+0x360>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006738:	8952      	ldrh	r2, [r2, #10]
 800673a:	fbb3 f1f2 	udiv	r1, r3, r2
 800673e:	fb01 f202 	mul.w	r2, r1, r2
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800674a:	4619      	mov	r1, r3
 800674c:	6a38      	ldr	r0, [r7, #32]
 800674e:	f7fc ff19 	bl	8003584 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006752:	6a3a      	ldr	r2, [r7, #32]
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	4413      	add	r3, r2
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	4413      	add	r3, r2
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800676c:	6093      	str	r3, [r2, #8]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006774:	441a      	add	r2, r3
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f47f ae5a 	bne.w	800643e <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3730      	adds	r7, #48	@ 0x30
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	@ 0x28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fa6f 	bl	8005c90 <validate>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <f_write+0x2c>
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	e21e      	b.n	8006bfe <f_write+0x46a>
	if (fp->err)							/* Check error */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c6:	79db      	ldrb	r3, [r3, #7]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d2:	79db      	ldrb	r3, [r3, #7]
 80067d4:	e213      	b.n	8006bfe <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067dc:	799b      	ldrb	r3, [r3, #6]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80067e6:	2307      	movs	r3, #7
 80067e8:	e209      	b.n	8006bfe <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	441a      	add	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	429a      	cmp	r2, r3
 8006800:	f080 81d9 	bcs.w	8006bb6 <f_write+0x422>
 8006804:	2300      	movs	r3, #0
 8006806:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006808:	e1d5      	b.n	8006bb6 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800681e:	8952      	ldrh	r2, [r2, #10]
 8006820:	fbb3 f1f2 	udiv	r1, r3, r2
 8006824:	fb01 f202 	mul.w	r2, r1, r2
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 8169 	bne.w	8006b02 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006844:	8952      	ldrh	r2, [r2, #10]
 8006846:	fbb3 f3f2 	udiv	r3, r3, r2
 800684a:	b2da      	uxtb	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006858:	789b      	ldrb	r3, [r3, #2]
 800685a:	3b01      	subs	r3, #1
 800685c:	b2db      	uxtb	r3, r3
 800685e:	4013      	ands	r3, r2
 8006860:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006862:	7dbb      	ldrb	r3, [r7, #22]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d15f      	bne.n	8006928 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d111      	bne.n	8006898 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	d126      	bne.n	80068d2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f7fd fcc4 	bl	800421c <create_chain>
 8006894:	6278      	str	r0, [r7, #36]	@ 0x24
 8006896:	e01c      	b.n	80068d2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d009      	beq.n	80068b8 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	4619      	mov	r1, r3
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7fd fd5c 	bl	800436c <clmt_clust>
 80068b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80068b6:	e00c      	b.n	80068d2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7fd fca6 	bl	800421c <create_chain>
 80068d0:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8173 	beq.w	8006bc0 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d106      	bne.n	80068ee <f_write+0x15a>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e6:	2202      	movs	r2, #2
 80068e8:	71da      	strb	r2, [r3, #7]
 80068ea:	2302      	movs	r3, #2
 80068ec:	e187      	b.n	8006bfe <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d106      	bne.n	8006904 <f_write+0x170>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fc:	2201      	movs	r2, #1
 80068fe:	71da      	strb	r2, [r3, #7]
 8006900:	2301      	movs	r3, #1
 8006902:	e17c      	b.n	8006bfe <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800690a:	461a      	mov	r2, r3
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d105      	bne.n	8006928 <f_write+0x194>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006922:	461a      	mov	r2, r3
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800692e:	799b      	ldrb	r3, [r3, #6]
 8006930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d023      	beq.n	8006980 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006944:	7858      	ldrb	r0, [r3, #1]
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	2301      	movs	r3, #1
 8006952:	f7fc fdd9 	bl	8003508 <disk_write>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d006      	beq.n	800696a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006962:	2201      	movs	r2, #1
 8006964:	71da      	strb	r2, [r3, #7]
 8006966:	2301      	movs	r3, #1
 8006968:	e149      	b.n	8006bfe <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006970:	799b      	ldrb	r3, [r3, #6]
 8006972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006976:	b2da      	uxtb	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800697e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f7fd f96f 	bl	8003c76 <clust2sect>
 8006998:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <f_write+0x21a>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a6:	2202      	movs	r2, #2
 80069a8:	71da      	strb	r2, [r3, #7]
 80069aa:	2302      	movs	r3, #2
 80069ac:	e127      	b.n	8006bfe <f_write+0x46a>
			sect += csect;
 80069ae:	7dbb      	ldrb	r3, [r7, #22]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4413      	add	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069c2:	895b      	ldrh	r3, [r3, #10]
 80069c4:	461a      	mov	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069cc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d069      	beq.n	8006aa8 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80069d4:	7dba      	ldrb	r2, [r7, #22]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069e6:	7892      	ldrb	r2, [r2, #2]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d90a      	bls.n	8006a02 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f8:	789b      	ldrb	r3, [r3, #2]
 80069fa:	461a      	mov	r2, r3
 80069fc:	7dbb      	ldrb	r3, [r7, #22]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a0e:	7858      	ldrb	r0, [r3, #1]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	69b9      	ldr	r1, [r7, #24]
 8006a16:	f7fc fd77 	bl	8003508 <disk_write>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d006      	beq.n	8006a2e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a26:	2201      	movs	r2, #1
 8006a28:	71da      	strb	r2, [r3, #7]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e0e7      	b.n	8006bfe <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d926      	bls.n	8006a8e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a5a:	8952      	ldrh	r2, [r2, #10]
 8006a5c:	fb02 f303 	mul.w	r3, r2, r3
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	18d1      	adds	r1, r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a70:	895b      	ldrh	r3, [r3, #10]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f7fc fd86 	bl	8003584 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7e:	799b      	ldrb	r3, [r3, #6]
 8006a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a8c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a9a:	895b      	ldrh	r3, [r3, #10]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	fb02 f303 	mul.w	r3, r2, r3
 8006aa4:	623b      	str	r3, [r7, #32]
				continue;
 8006aa6:	e06e      	b.n	8006b86 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d01f      	beq.n	8006af6 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d215      	bcs.n	8006af6 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad6:	7858      	ldrb	r0, [r3, #1]
 8006ad8:	68f9      	ldr	r1, [r7, #12]
 8006ada:	2301      	movs	r3, #1
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	f7fc fcf3 	bl	80034c8 <disk_read>
 8006ae2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d006      	beq.n	8006af6 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aee:	2201      	movs	r2, #1
 8006af0:	71da      	strb	r2, [r3, #7]
 8006af2:	2301      	movs	r3, #1
 8006af4:	e083      	b.n	8006bfe <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006afc:	461a      	mov	r2, r3
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b0e:	895b      	ldrh	r3, [r3, #10]
 8006b10:	4618      	mov	r0, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b26:	8952      	ldrh	r2, [r2, #10]
 8006b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b2c:	fb01 f202 	mul.w	r2, r1, r2
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	1ac3      	subs	r3, r0, r3
 8006b34:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006b36:	6a3a      	ldr	r2, [r7, #32]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d901      	bls.n	8006b42 <f_write+0x3ae>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b56:	8952      	ldrh	r2, [r2, #10]
 8006b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b5c:	fb01 f202 	mul.w	r2, r1, r2
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	6a3a      	ldr	r2, [r7, #32]
 8006b68:	69b9      	ldr	r1, [r7, #24]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fc fd0a 	bl	8003584 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b76:	799b      	ldrb	r3, [r3, #6]
 8006b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b84:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	4413      	add	r3, r2
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ba0:	6093      	str	r3, [r2, #8]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	441a      	add	r2, r3
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f47f ae26 	bne.w	800680a <f_write+0x76>
 8006bbe:	e000      	b.n	8006bc2 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006bc0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d907      	bls.n	8006be6 <f_write+0x452>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006be4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bec:	799b      	ldrb	r3, [r3, #6]
 8006bee:	f043 0320 	orr.w	r3, r3, #32
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bfa:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3728      	adds	r7, #40	@ 0x28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff f83e 	bl	8005c90 <validate>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 80bc 	bne.w	8006d98 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c26:	799b      	ldrb	r3, [r3, #6]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80b3 	beq.w	8006d98 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c38:	799b      	ldrb	r3, [r3, #6]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01e      	beq.n	8006c80 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c4e:	7858      	ldrb	r0, [r3, #1]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f7fc fc54 	bl	8003508 <disk_write>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006c66:	2301      	movs	r3, #1
 8006c68:	e097      	b.n	8006d9a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c70:	799b      	ldrb	r3, [r3, #6]
 8006c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c7e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f7fc fefe 	bl	8003a94 <move_window>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d17a      	bne.n	8006d98 <f_sync+0x192>
				dir = fp->dir_ptr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	330b      	adds	r3, #11
 8006cb0:	781a      	ldrb	r2, [r3, #0]
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	330b      	adds	r3, #11
 8006cb6:	f042 0220 	orr.w	r2, r2, #32
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	331c      	adds	r3, #28
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	0a1b      	lsrs	r3, r3, #8
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	331d      	adds	r3, #29
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	0c1a      	lsrs	r2, r3, #16
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	331e      	adds	r3, #30
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	0e1a      	lsrs	r2, r3, #24
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	331f      	adds	r3, #31
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6938      	ldr	r0, [r7, #16]
 8006d14:	f7fd fdfe 	bl	8004914 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006d18:	f7fc fb3a 	bl	8003390 <get_fattime>
 8006d1c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	3316      	adds	r3, #22
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	0a1b      	lsrs	r3, r3, #8
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	3317      	adds	r3, #23
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	0c1a      	lsrs	r2, r3, #16
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	3318      	adds	r3, #24
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	0e1a      	lsrs	r2, r3, #24
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	3319      	adds	r3, #25
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3312      	adds	r3, #18
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	3313      	adds	r3, #19
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d66:	799b      	ldrb	r3, [r3, #6]
 8006d68:	f023 0320 	bic.w	r3, r3, #32
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d74:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d82:	2201      	movs	r2, #1
 8006d84:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fc feb2 	bl	8003af8 <sync_fs>
 8006d94:	4603      	mov	r3, r0
 8006d96:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff ff2b 	bl	8006c06 <f_sync>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d119      	bne.n	8006dee <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fe ff68 	bl	8005c90 <validate>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d111      	bne.n	8006dee <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fc fd9e 	bl	8003914 <dec_lock>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006de8:	461a      	mov	r2, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08e      	sub	sp, #56	@ 0x38
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006e04:	f107 030c 	add.w	r3, r7, #12
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7fe fc0d 	bl	800562c <find_volume>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8006e1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f040 80bc 	bne.w	8006fa0 <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	3b02      	subs	r3, #2
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d806      	bhi.n	8006e4c <f_getfree+0x54>
			*nclst = fs->free_clust;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e0a9      	b.n	8006fa0 <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 8006e5a:	7efb      	ldrb	r3, [r7, #27]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d126      	bne.n	8006eae <f_getfree+0xb6>
				clst = 2;
 8006e60:	2302      	movs	r3, #2
 8006e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8006e64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e66:	69f8      	ldr	r0, [r7, #28]
 8006e68:	f7fc ff29 	bl	8003cbe <get_fat>
 8006e6c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d103      	bne.n	8006e7e <f_getfree+0x86>
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006e7c:	e07c      	b.n	8006f78 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d103      	bne.n	8006e8c <f_getfree+0x94>
 8006e84:	2302      	movs	r3, #2
 8006e86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006e8a:	e075      	b.n	8006f78 <f_getfree+0x180>
					if (stat == 0) n++;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <f_getfree+0xa0>
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	3301      	adds	r3, #1
 8006e96:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d3db      	bcc.n	8006e64 <f_getfree+0x6c>
 8006eac:	e064      	b.n	8006f78 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d114      	bne.n	8006efa <f_getfree+0x102>
						res = move_window(fs, sect++);
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	69f8      	ldr	r0, [r7, #28]
 8006eda:	f7fc fddb 	bl	8003a94 <move_window>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 8006ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d144      	bne.n	8006f76 <f_getfree+0x17e>
						p = fs->win.d8;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ef6:	895b      	ldrh	r3, [r3, #10]
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 8006efa:	7efb      	ldrb	r3, [r7, #27]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d115      	bne.n	8006f2c <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	3301      	adds	r3, #1
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	b21a      	sxth	r2, r3
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b21b      	sxth	r3, r3
 8006f10:	4313      	orrs	r3, r2
 8006f12:	b21b      	sxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <f_getfree+0x126>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	3302      	adds	r3, #2
 8006f22:	623b      	str	r3, [r7, #32]
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	3b02      	subs	r3, #2
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f2a:	e01d      	b.n	8006f68 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	3303      	adds	r3, #3
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	061a      	lsls	r2, r3, #24
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	3302      	adds	r3, #2
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	3301      	adds	r3, #1
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	4313      	orrs	r3, r2
 8006f48:	6a3a      	ldr	r2, [r7, #32]
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <f_getfree+0x164>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	3301      	adds	r3, #1
 8006f5a:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	623b      	str	r3, [r7, #32]
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	3b04      	subs	r3, #4
 8006f66:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 8006f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1aa      	bne.n	8006eca <f_getfree+0xd2>
 8006f74:	e000      	b.n	8006f78 <f_getfree+0x180>
						if (res != FR_OK) break;
 8006f76:	bf00      	nop
			}
			fs->free_clust = n;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8a:	795b      	ldrb	r3, [r3, #5]
 8006f8c:	f043 0301 	orr.w	r3, r3, #1
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f98:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f9e:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006fa0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3738      	adds	r7, #56	@ 0x38
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006fc0:	e01c      	b.n	8006ffc <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006fc2:	f107 0310 	add.w	r3, r7, #16
 8006fc6:	f107 0114 	add.w	r1, r7, #20
 8006fca:	2201      	movs	r2, #1
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff f9f9 	bl	80063c4 <f_read>
		if (rc != 1) break;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d117      	bne.n	8007008 <f_gets+0x5c>
		c = s[0];
 8006fd8:	7d3b      	ldrb	r3, [r7, #20]
 8006fda:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b0d      	cmp	r3, #13
 8006fe0:	d00b      	beq.n	8006ffa <f_gets+0x4e>
		*p++ = c;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	61ba      	str	r2, [r7, #24]
 8006fe8:	7dfa      	ldrb	r2, [r7, #23]
 8006fea:	701a      	strb	r2, [r3, #0]
		n++;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	2b0a      	cmp	r3, #10
 8006ff6:	d009      	beq.n	800700c <f_gets+0x60>
 8006ff8:	e000      	b.n	8006ffc <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006ffa:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	429a      	cmp	r2, r3
 8007004:	dbdd      	blt.n	8006fc2 <f_gets+0x16>
 8007006:	e002      	b.n	800700e <f_gets+0x62>
		if (rc != 1) break;
 8007008:	bf00      	nop
 800700a:	e000      	b.n	800700e <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800700c:	bf00      	nop
	}
	*p = 0;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <f_gets+0x72>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	e000      	b.n	8007020 <f_gets+0x74>
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	2b0a      	cmp	r3, #10
 8007038:	d103      	bne.n	8007042 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800703a:	210d      	movs	r1, #13
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fff3 	bl	8007028 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	db25      	blt.n	800709a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	60fa      	str	r2, [r7, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b3c      	cmp	r3, #60	@ 0x3c
 8007060:	dd12      	ble.n	8007088 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f103 010c 	add.w	r1, r3, #12
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	f107 0308 	add.w	r3, r7, #8
 8007072:	f7ff fb8f 	bl	8006794 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	429a      	cmp	r2, r3
 800707c:	d101      	bne.n	8007082 <putc_bfd+0x5a>
 800707e:	2300      	movs	r3, #0
 8007080:	e001      	b.n	8007086 <putc_bfd+0x5e>
 8007082:	f04f 33ff 	mov.w	r3, #4294967295
 8007086:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	609a      	str	r2, [r3, #8]
 8007098:	e000      	b.n	800709c <putc_bfd+0x74>
	if (i < 0) return;
 800709a:	bf00      	nop
}
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80070a2:	b590      	push	{r4, r7, lr}
 80070a4:	b097      	sub	sp, #92	@ 0x5c
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80070b8:	e009      	b.n	80070ce <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	f107 030c 	add.w	r3, r7, #12
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ffad 	bl	8007028 <putc_bfd>
	while (*str)			/* Put the string */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f1      	bne.n	80070ba <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	db15      	blt.n	8007108 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	461c      	mov	r4, r3
 80070e2:	f107 0208 	add.w	r2, r7, #8
 80070e6:	f107 030c 	add.w	r3, r7, #12
 80070ea:	f103 010c 	add.w	r1, r3, #12
 80070ee:	4613      	mov	r3, r2
 80070f0:	4622      	mov	r2, r4
 80070f2:	f7ff fb4f 	bl	8006794 <f_write>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d105      	bne.n	8007108 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	4293      	cmp	r3, r2
 8007102:	d101      	bne.n	8007108 <f_puts+0x66>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	e001      	b.n	800710c <f_puts+0x6a>
	return EOF;
 8007108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800710c:	4618      	mov	r0, r3
 800710e:	375c      	adds	r7, #92	@ 0x5c
 8007110:	46bd      	mov	sp, r7
 8007112:	bd90      	pop	{r4, r7, pc}

08007114 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800712a:	4b1e      	ldr	r3, [pc, #120]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 800712c:	7a5b      	ldrb	r3, [r3, #9]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	d831      	bhi.n	8007198 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007134:	4b1b      	ldr	r3, [pc, #108]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 8007136:	7a5b      	ldrb	r3, [r3, #9]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	4b19      	ldr	r3, [pc, #100]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 800713e:	2100      	movs	r1, #0
 8007140:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007142:	4b18      	ldr	r3, [pc, #96]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 8007144:	7a5b      	ldrb	r3, [r3, #9]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007152:	4b14      	ldr	r3, [pc, #80]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 8007154:	7a5b      	ldrb	r3, [r3, #9]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	4b12      	ldr	r3, [pc, #72]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 800715c:	4413      	add	r3, r2
 800715e:	79fa      	ldrb	r2, [r7, #7]
 8007160:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007162:	4b10      	ldr	r3, [pc, #64]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 8007164:	7a5b      	ldrb	r3, [r3, #9]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	b2d1      	uxtb	r1, r2
 800716c:	4a0d      	ldr	r2, [pc, #52]	@ (80071a4 <FATFS_LinkDriverEx+0x90>)
 800716e:	7251      	strb	r1, [r2, #9]
 8007170:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007172:	7dbb      	ldrb	r3, [r7, #22]
 8007174:	3330      	adds	r3, #48	@ 0x30
 8007176:	b2da      	uxtb	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	3301      	adds	r3, #1
 8007180:	223a      	movs	r2, #58	@ 0x3a
 8007182:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3302      	adds	r3, #2
 8007188:	222f      	movs	r2, #47	@ 0x2f
 800718a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	3303      	adds	r3, #3
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
}
 800719a:	4618      	mov	r0, r3
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	20002444 	.word	0x20002444

080071a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80071b2:	2200      	movs	r2, #0
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff ffac 	bl	8007114 <FATFS_LinkDriverEx>
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	6039      	str	r1, [r7, #0]
 80071d2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80071d8:	d802      	bhi.n	80071e0 <ff_convert+0x18>
		c = chr;
 80071da:	88fb      	ldrh	r3, [r7, #6]
 80071dc:	81fb      	strh	r3, [r7, #14]
 80071de:	e025      	b.n	800722c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	2bff      	cmp	r3, #255	@ 0xff
 80071ea:	d805      	bhi.n	80071f8 <ff_convert+0x30>
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	3b80      	subs	r3, #128	@ 0x80
 80071f0:	4a11      	ldr	r2, [pc, #68]	@ (8007238 <ff_convert+0x70>)
 80071f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f6:	e000      	b.n	80071fa <ff_convert+0x32>
 80071f8:	2300      	movs	r3, #0
 80071fa:	81fb      	strh	r3, [r7, #14]
 80071fc:	e016      	b.n	800722c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80071fe:	2300      	movs	r3, #0
 8007200:	81fb      	strh	r3, [r7, #14]
 8007202:	e009      	b.n	8007218 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007204:	89fb      	ldrh	r3, [r7, #14]
 8007206:	4a0c      	ldr	r2, [pc, #48]	@ (8007238 <ff_convert+0x70>)
 8007208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800720c:	88fa      	ldrh	r2, [r7, #6]
 800720e:	429a      	cmp	r2, r3
 8007210:	d006      	beq.n	8007220 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007212:	89fb      	ldrh	r3, [r7, #14]
 8007214:	3301      	adds	r3, #1
 8007216:	81fb      	strh	r3, [r7, #14]
 8007218:	89fb      	ldrh	r3, [r7, #14]
 800721a:	2b7f      	cmp	r3, #127	@ 0x7f
 800721c:	d9f2      	bls.n	8007204 <ff_convert+0x3c>
 800721e:	e000      	b.n	8007222 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007220:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007222:	89fb      	ldrh	r3, [r7, #14]
 8007224:	3380      	adds	r3, #128	@ 0x80
 8007226:	b29b      	uxth	r3, r3
 8007228:	b2db      	uxtb	r3, r3
 800722a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800722c:	89fb      	ldrh	r3, [r7, #14]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr
 8007238:	08008358 	.word	0x08008358

0800723c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e002      	b.n	8007252 <ff_wtoupper+0x16>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3301      	adds	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	4a0f      	ldr	r2, [pc, #60]	@ (8007290 <ff_wtoupper+0x54>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d006      	beq.n	800726c <ff_wtoupper+0x30>
 800725e:	4a0c      	ldr	r2, [pc, #48]	@ (8007290 <ff_wtoupper+0x54>)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007266:	88fa      	ldrh	r2, [r7, #6]
 8007268:	429a      	cmp	r2, r3
 800726a:	d1ef      	bne.n	800724c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800726c:	4a08      	ldr	r2, [pc, #32]	@ (8007290 <ff_wtoupper+0x54>)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <ff_wtoupper+0x46>
 8007278:	4a06      	ldr	r2, [pc, #24]	@ (8007294 <ff_wtoupper+0x58>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007280:	e000      	b.n	8007284 <ff_wtoupper+0x48>
 8007282:	88fb      	ldrh	r3, [r7, #6]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	08008458 	.word	0x08008458
 8007294:	08008638 	.word	0x08008638

08007298 <std>:
 8007298:	2300      	movs	r3, #0
 800729a:	b510      	push	{r4, lr}
 800729c:	4604      	mov	r4, r0
 800729e:	e9c0 3300 	strd	r3, r3, [r0]
 80072a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072a6:	6083      	str	r3, [r0, #8]
 80072a8:	8181      	strh	r1, [r0, #12]
 80072aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80072ac:	81c2      	strh	r2, [r0, #14]
 80072ae:	6183      	str	r3, [r0, #24]
 80072b0:	4619      	mov	r1, r3
 80072b2:	2208      	movs	r2, #8
 80072b4:	305c      	adds	r0, #92	@ 0x5c
 80072b6:	f000 f9f9 	bl	80076ac <memset>
 80072ba:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <std+0x58>)
 80072bc:	6224      	str	r4, [r4, #32]
 80072be:	6263      	str	r3, [r4, #36]	@ 0x24
 80072c0:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <std+0x5c>)
 80072c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072c4:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <std+0x60>)
 80072c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072c8:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <std+0x64>)
 80072ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80072cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007300 <std+0x68>)
 80072ce:	429c      	cmp	r4, r3
 80072d0:	d006      	beq.n	80072e0 <std+0x48>
 80072d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072d6:	4294      	cmp	r4, r2
 80072d8:	d002      	beq.n	80072e0 <std+0x48>
 80072da:	33d0      	adds	r3, #208	@ 0xd0
 80072dc:	429c      	cmp	r4, r3
 80072de:	d105      	bne.n	80072ec <std+0x54>
 80072e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e8:	f000 ba58 	b.w	800779c <__retarget_lock_init_recursive>
 80072ec:	bd10      	pop	{r4, pc}
 80072ee:	bf00      	nop
 80072f0:	080074fd 	.word	0x080074fd
 80072f4:	0800751f 	.word	0x0800751f
 80072f8:	08007557 	.word	0x08007557
 80072fc:	0800757b 	.word	0x0800757b
 8007300:	20002450 	.word	0x20002450

08007304 <stdio_exit_handler>:
 8007304:	4a02      	ldr	r2, [pc, #8]	@ (8007310 <stdio_exit_handler+0xc>)
 8007306:	4903      	ldr	r1, [pc, #12]	@ (8007314 <stdio_exit_handler+0x10>)
 8007308:	4803      	ldr	r0, [pc, #12]	@ (8007318 <stdio_exit_handler+0x14>)
 800730a:	f000 b869 	b.w	80073e0 <_fwalk_sglue>
 800730e:	bf00      	nop
 8007310:	20000024 	.word	0x20000024
 8007314:	08008035 	.word	0x08008035
 8007318:	20000034 	.word	0x20000034

0800731c <cleanup_stdio>:
 800731c:	6841      	ldr	r1, [r0, #4]
 800731e:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <cleanup_stdio+0x34>)
 8007320:	b510      	push	{r4, lr}
 8007322:	4299      	cmp	r1, r3
 8007324:	4604      	mov	r4, r0
 8007326:	d001      	beq.n	800732c <cleanup_stdio+0x10>
 8007328:	f000 fe84 	bl	8008034 <_fflush_r>
 800732c:	68a1      	ldr	r1, [r4, #8]
 800732e:	4b09      	ldr	r3, [pc, #36]	@ (8007354 <cleanup_stdio+0x38>)
 8007330:	4299      	cmp	r1, r3
 8007332:	d002      	beq.n	800733a <cleanup_stdio+0x1e>
 8007334:	4620      	mov	r0, r4
 8007336:	f000 fe7d 	bl	8008034 <_fflush_r>
 800733a:	68e1      	ldr	r1, [r4, #12]
 800733c:	4b06      	ldr	r3, [pc, #24]	@ (8007358 <cleanup_stdio+0x3c>)
 800733e:	4299      	cmp	r1, r3
 8007340:	d004      	beq.n	800734c <cleanup_stdio+0x30>
 8007342:	4620      	mov	r0, r4
 8007344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007348:	f000 be74 	b.w	8008034 <_fflush_r>
 800734c:	bd10      	pop	{r4, pc}
 800734e:	bf00      	nop
 8007350:	20002450 	.word	0x20002450
 8007354:	200024b8 	.word	0x200024b8
 8007358:	20002520 	.word	0x20002520

0800735c <global_stdio_init.part.0>:
 800735c:	b510      	push	{r4, lr}
 800735e:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <global_stdio_init.part.0+0x30>)
 8007360:	4c0b      	ldr	r4, [pc, #44]	@ (8007390 <global_stdio_init.part.0+0x34>)
 8007362:	4a0c      	ldr	r2, [pc, #48]	@ (8007394 <global_stdio_init.part.0+0x38>)
 8007364:	4620      	mov	r0, r4
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	2104      	movs	r1, #4
 800736a:	2200      	movs	r2, #0
 800736c:	f7ff ff94 	bl	8007298 <std>
 8007370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007374:	2201      	movs	r2, #1
 8007376:	2109      	movs	r1, #9
 8007378:	f7ff ff8e 	bl	8007298 <std>
 800737c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007380:	2202      	movs	r2, #2
 8007382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007386:	2112      	movs	r1, #18
 8007388:	f7ff bf86 	b.w	8007298 <std>
 800738c:	20002588 	.word	0x20002588
 8007390:	20002450 	.word	0x20002450
 8007394:	08007305 	.word	0x08007305

08007398 <__sfp_lock_acquire>:
 8007398:	4801      	ldr	r0, [pc, #4]	@ (80073a0 <__sfp_lock_acquire+0x8>)
 800739a:	f000 ba00 	b.w	800779e <__retarget_lock_acquire_recursive>
 800739e:	bf00      	nop
 80073a0:	20002591 	.word	0x20002591

080073a4 <__sfp_lock_release>:
 80073a4:	4801      	ldr	r0, [pc, #4]	@ (80073ac <__sfp_lock_release+0x8>)
 80073a6:	f000 b9fb 	b.w	80077a0 <__retarget_lock_release_recursive>
 80073aa:	bf00      	nop
 80073ac:	20002591 	.word	0x20002591

080073b0 <__sinit>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	4604      	mov	r4, r0
 80073b4:	f7ff fff0 	bl	8007398 <__sfp_lock_acquire>
 80073b8:	6a23      	ldr	r3, [r4, #32]
 80073ba:	b11b      	cbz	r3, 80073c4 <__sinit+0x14>
 80073bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c0:	f7ff bff0 	b.w	80073a4 <__sfp_lock_release>
 80073c4:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <__sinit+0x28>)
 80073c6:	6223      	str	r3, [r4, #32]
 80073c8:	4b04      	ldr	r3, [pc, #16]	@ (80073dc <__sinit+0x2c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f5      	bne.n	80073bc <__sinit+0xc>
 80073d0:	f7ff ffc4 	bl	800735c <global_stdio_init.part.0>
 80073d4:	e7f2      	b.n	80073bc <__sinit+0xc>
 80073d6:	bf00      	nop
 80073d8:	0800731d 	.word	0x0800731d
 80073dc:	20002588 	.word	0x20002588

080073e0 <_fwalk_sglue>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4607      	mov	r7, r0
 80073e6:	4688      	mov	r8, r1
 80073e8:	4614      	mov	r4, r2
 80073ea:	2600      	movs	r6, #0
 80073ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073f0:	f1b9 0901 	subs.w	r9, r9, #1
 80073f4:	d505      	bpl.n	8007402 <_fwalk_sglue+0x22>
 80073f6:	6824      	ldr	r4, [r4, #0]
 80073f8:	2c00      	cmp	r4, #0
 80073fa:	d1f7      	bne.n	80073ec <_fwalk_sglue+0xc>
 80073fc:	4630      	mov	r0, r6
 80073fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d907      	bls.n	8007418 <_fwalk_sglue+0x38>
 8007408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800740c:	3301      	adds	r3, #1
 800740e:	d003      	beq.n	8007418 <_fwalk_sglue+0x38>
 8007410:	4629      	mov	r1, r5
 8007412:	4638      	mov	r0, r7
 8007414:	47c0      	blx	r8
 8007416:	4306      	orrs	r6, r0
 8007418:	3568      	adds	r5, #104	@ 0x68
 800741a:	e7e9      	b.n	80073f0 <_fwalk_sglue+0x10>

0800741c <iprintf>:
 800741c:	b40f      	push	{r0, r1, r2, r3}
 800741e:	b507      	push	{r0, r1, r2, lr}
 8007420:	4906      	ldr	r1, [pc, #24]	@ (800743c <iprintf+0x20>)
 8007422:	ab04      	add	r3, sp, #16
 8007424:	6808      	ldr	r0, [r1, #0]
 8007426:	f853 2b04 	ldr.w	r2, [r3], #4
 800742a:	6881      	ldr	r1, [r0, #8]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	f000 fad7 	bl	80079e0 <_vfiprintf_r>
 8007432:	b003      	add	sp, #12
 8007434:	f85d eb04 	ldr.w	lr, [sp], #4
 8007438:	b004      	add	sp, #16
 800743a:	4770      	bx	lr
 800743c:	20000030 	.word	0x20000030

08007440 <_puts_r>:
 8007440:	6a03      	ldr	r3, [r0, #32]
 8007442:	b570      	push	{r4, r5, r6, lr}
 8007444:	4605      	mov	r5, r0
 8007446:	460e      	mov	r6, r1
 8007448:	6884      	ldr	r4, [r0, #8]
 800744a:	b90b      	cbnz	r3, 8007450 <_puts_r+0x10>
 800744c:	f7ff ffb0 	bl	80073b0 <__sinit>
 8007450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007452:	07db      	lsls	r3, r3, #31
 8007454:	d405      	bmi.n	8007462 <_puts_r+0x22>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	0598      	lsls	r0, r3, #22
 800745a:	d402      	bmi.n	8007462 <_puts_r+0x22>
 800745c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800745e:	f000 f99e 	bl	800779e <__retarget_lock_acquire_recursive>
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	0719      	lsls	r1, r3, #28
 8007466:	d502      	bpl.n	800746e <_puts_r+0x2e>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d135      	bne.n	80074da <_puts_r+0x9a>
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f8c5 	bl	8007600 <__swsetup_r>
 8007476:	b380      	cbz	r0, 80074da <_puts_r+0x9a>
 8007478:	f04f 35ff 	mov.w	r5, #4294967295
 800747c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800747e:	07da      	lsls	r2, r3, #31
 8007480:	d405      	bmi.n	800748e <_puts_r+0x4e>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	059b      	lsls	r3, r3, #22
 8007486:	d402      	bmi.n	800748e <_puts_r+0x4e>
 8007488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800748a:	f000 f989 	bl	80077a0 <__retarget_lock_release_recursive>
 800748e:	4628      	mov	r0, r5
 8007490:	bd70      	pop	{r4, r5, r6, pc}
 8007492:	2b00      	cmp	r3, #0
 8007494:	da04      	bge.n	80074a0 <_puts_r+0x60>
 8007496:	69a2      	ldr	r2, [r4, #24]
 8007498:	429a      	cmp	r2, r3
 800749a:	dc17      	bgt.n	80074cc <_puts_r+0x8c>
 800749c:	290a      	cmp	r1, #10
 800749e:	d015      	beq.n	80074cc <_puts_r+0x8c>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	6022      	str	r2, [r4, #0]
 80074a6:	7019      	strb	r1, [r3, #0]
 80074a8:	68a3      	ldr	r3, [r4, #8]
 80074aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074ae:	3b01      	subs	r3, #1
 80074b0:	60a3      	str	r3, [r4, #8]
 80074b2:	2900      	cmp	r1, #0
 80074b4:	d1ed      	bne.n	8007492 <_puts_r+0x52>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da11      	bge.n	80074de <_puts_r+0x9e>
 80074ba:	4622      	mov	r2, r4
 80074bc:	210a      	movs	r1, #10
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 f85f 	bl	8007582 <__swbuf_r>
 80074c4:	3001      	adds	r0, #1
 80074c6:	d0d7      	beq.n	8007478 <_puts_r+0x38>
 80074c8:	250a      	movs	r5, #10
 80074ca:	e7d7      	b.n	800747c <_puts_r+0x3c>
 80074cc:	4622      	mov	r2, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f857 	bl	8007582 <__swbuf_r>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d1e7      	bne.n	80074a8 <_puts_r+0x68>
 80074d8:	e7ce      	b.n	8007478 <_puts_r+0x38>
 80074da:	3e01      	subs	r6, #1
 80074dc:	e7e4      	b.n	80074a8 <_puts_r+0x68>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	220a      	movs	r2, #10
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	e7ee      	b.n	80074c8 <_puts_r+0x88>
	...

080074ec <puts>:
 80074ec:	4b02      	ldr	r3, [pc, #8]	@ (80074f8 <puts+0xc>)
 80074ee:	4601      	mov	r1, r0
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	f7ff bfa5 	b.w	8007440 <_puts_r>
 80074f6:	bf00      	nop
 80074f8:	20000030 	.word	0x20000030

080074fc <__sread>:
 80074fc:	b510      	push	{r4, lr}
 80074fe:	460c      	mov	r4, r1
 8007500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007504:	f000 f8fc 	bl	8007700 <_read_r>
 8007508:	2800      	cmp	r0, #0
 800750a:	bfab      	itete	ge
 800750c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800750e:	89a3      	ldrhlt	r3, [r4, #12]
 8007510:	181b      	addge	r3, r3, r0
 8007512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007516:	bfac      	ite	ge
 8007518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800751a:	81a3      	strhlt	r3, [r4, #12]
 800751c:	bd10      	pop	{r4, pc}

0800751e <__swrite>:
 800751e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007522:	461f      	mov	r7, r3
 8007524:	898b      	ldrh	r3, [r1, #12]
 8007526:	4605      	mov	r5, r0
 8007528:	05db      	lsls	r3, r3, #23
 800752a:	460c      	mov	r4, r1
 800752c:	4616      	mov	r6, r2
 800752e:	d505      	bpl.n	800753c <__swrite+0x1e>
 8007530:	2302      	movs	r3, #2
 8007532:	2200      	movs	r2, #0
 8007534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007538:	f000 f8d0 	bl	80076dc <_lseek_r>
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	4632      	mov	r2, r6
 8007540:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	4628      	mov	r0, r5
 8007548:	463b      	mov	r3, r7
 800754a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007552:	f000 b8e7 	b.w	8007724 <_write_r>

08007556 <__sseek>:
 8007556:	b510      	push	{r4, lr}
 8007558:	460c      	mov	r4, r1
 800755a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755e:	f000 f8bd 	bl	80076dc <_lseek_r>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	bf15      	itete	ne
 8007568:	6560      	strne	r0, [r4, #84]	@ 0x54
 800756a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800756e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007572:	81a3      	strheq	r3, [r4, #12]
 8007574:	bf18      	it	ne
 8007576:	81a3      	strhne	r3, [r4, #12]
 8007578:	bd10      	pop	{r4, pc}

0800757a <__sclose>:
 800757a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757e:	f000 b89d 	b.w	80076bc <_close_r>

08007582 <__swbuf_r>:
 8007582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007584:	460e      	mov	r6, r1
 8007586:	4614      	mov	r4, r2
 8007588:	4605      	mov	r5, r0
 800758a:	b118      	cbz	r0, 8007594 <__swbuf_r+0x12>
 800758c:	6a03      	ldr	r3, [r0, #32]
 800758e:	b90b      	cbnz	r3, 8007594 <__swbuf_r+0x12>
 8007590:	f7ff ff0e 	bl	80073b0 <__sinit>
 8007594:	69a3      	ldr	r3, [r4, #24]
 8007596:	60a3      	str	r3, [r4, #8]
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	071a      	lsls	r2, r3, #28
 800759c:	d501      	bpl.n	80075a2 <__swbuf_r+0x20>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	b943      	cbnz	r3, 80075b4 <__swbuf_r+0x32>
 80075a2:	4621      	mov	r1, r4
 80075a4:	4628      	mov	r0, r5
 80075a6:	f000 f82b 	bl	8007600 <__swsetup_r>
 80075aa:	b118      	cbz	r0, 80075b4 <__swbuf_r+0x32>
 80075ac:	f04f 37ff 	mov.w	r7, #4294967295
 80075b0:	4638      	mov	r0, r7
 80075b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	6922      	ldr	r2, [r4, #16]
 80075b8:	b2f6      	uxtb	r6, r6
 80075ba:	1a98      	subs	r0, r3, r2
 80075bc:	6963      	ldr	r3, [r4, #20]
 80075be:	4637      	mov	r7, r6
 80075c0:	4283      	cmp	r3, r0
 80075c2:	dc05      	bgt.n	80075d0 <__swbuf_r+0x4e>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 fd34 	bl	8008034 <_fflush_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1ed      	bne.n	80075ac <__swbuf_r+0x2a>
 80075d0:	68a3      	ldr	r3, [r4, #8]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	60a3      	str	r3, [r4, #8]
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	701e      	strb	r6, [r3, #0]
 80075de:	6962      	ldr	r2, [r4, #20]
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d004      	beq.n	80075f0 <__swbuf_r+0x6e>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	07db      	lsls	r3, r3, #31
 80075ea:	d5e1      	bpl.n	80075b0 <__swbuf_r+0x2e>
 80075ec:	2e0a      	cmp	r6, #10
 80075ee:	d1df      	bne.n	80075b0 <__swbuf_r+0x2e>
 80075f0:	4621      	mov	r1, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 fd1e 	bl	8008034 <_fflush_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d0d9      	beq.n	80075b0 <__swbuf_r+0x2e>
 80075fc:	e7d6      	b.n	80075ac <__swbuf_r+0x2a>
	...

08007600 <__swsetup_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4b29      	ldr	r3, [pc, #164]	@ (80076a8 <__swsetup_r+0xa8>)
 8007604:	4605      	mov	r5, r0
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	460c      	mov	r4, r1
 800760a:	b118      	cbz	r0, 8007614 <__swsetup_r+0x14>
 800760c:	6a03      	ldr	r3, [r0, #32]
 800760e:	b90b      	cbnz	r3, 8007614 <__swsetup_r+0x14>
 8007610:	f7ff fece 	bl	80073b0 <__sinit>
 8007614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007618:	0719      	lsls	r1, r3, #28
 800761a:	d422      	bmi.n	8007662 <__swsetup_r+0x62>
 800761c:	06da      	lsls	r2, r3, #27
 800761e:	d407      	bmi.n	8007630 <__swsetup_r+0x30>
 8007620:	2209      	movs	r2, #9
 8007622:	602a      	str	r2, [r5, #0]
 8007624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	e033      	b.n	8007698 <__swsetup_r+0x98>
 8007630:	0758      	lsls	r0, r3, #29
 8007632:	d512      	bpl.n	800765a <__swsetup_r+0x5a>
 8007634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007636:	b141      	cbz	r1, 800764a <__swsetup_r+0x4a>
 8007638:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800763c:	4299      	cmp	r1, r3
 800763e:	d002      	beq.n	8007646 <__swsetup_r+0x46>
 8007640:	4628      	mov	r0, r5
 8007642:	f000 f8af 	bl	80077a4 <_free_r>
 8007646:	2300      	movs	r3, #0
 8007648:	6363      	str	r3, [r4, #52]	@ 0x34
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	2300      	movs	r3, #0
 8007654:	6063      	str	r3, [r4, #4]
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	f043 0308 	orr.w	r3, r3, #8
 8007660:	81a3      	strh	r3, [r4, #12]
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	b94b      	cbnz	r3, 800767a <__swsetup_r+0x7a>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800766c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007670:	d003      	beq.n	800767a <__swsetup_r+0x7a>
 8007672:	4621      	mov	r1, r4
 8007674:	4628      	mov	r0, r5
 8007676:	f000 fd2a 	bl	80080ce <__smakebuf_r>
 800767a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800767e:	f013 0201 	ands.w	r2, r3, #1
 8007682:	d00a      	beq.n	800769a <__swsetup_r+0x9a>
 8007684:	2200      	movs	r2, #0
 8007686:	60a2      	str	r2, [r4, #8]
 8007688:	6962      	ldr	r2, [r4, #20]
 800768a:	4252      	negs	r2, r2
 800768c:	61a2      	str	r2, [r4, #24]
 800768e:	6922      	ldr	r2, [r4, #16]
 8007690:	b942      	cbnz	r2, 80076a4 <__swsetup_r+0xa4>
 8007692:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007696:	d1c5      	bne.n	8007624 <__swsetup_r+0x24>
 8007698:	bd38      	pop	{r3, r4, r5, pc}
 800769a:	0799      	lsls	r1, r3, #30
 800769c:	bf58      	it	pl
 800769e:	6962      	ldrpl	r2, [r4, #20]
 80076a0:	60a2      	str	r2, [r4, #8]
 80076a2:	e7f4      	b.n	800768e <__swsetup_r+0x8e>
 80076a4:	2000      	movs	r0, #0
 80076a6:	e7f7      	b.n	8007698 <__swsetup_r+0x98>
 80076a8:	20000030 	.word	0x20000030

080076ac <memset>:
 80076ac:	4603      	mov	r3, r0
 80076ae:	4402      	add	r2, r0
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d100      	bne.n	80076b6 <memset+0xa>
 80076b4:	4770      	bx	lr
 80076b6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ba:	e7f9      	b.n	80076b0 <memset+0x4>

080076bc <_close_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	2300      	movs	r3, #0
 80076c0:	4d05      	ldr	r5, [pc, #20]	@ (80076d8 <_close_r+0x1c>)
 80076c2:	4604      	mov	r4, r0
 80076c4:	4608      	mov	r0, r1
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	f7fa f86f 	bl	80017aa <_close>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_close_r+0x1a>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_close_r+0x1a>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	2000258c 	.word	0x2000258c

080076dc <_lseek_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	2200      	movs	r2, #0
 80076e6:	4d05      	ldr	r5, [pc, #20]	@ (80076fc <_lseek_r+0x20>)
 80076e8:	602a      	str	r2, [r5, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f7fa f881 	bl	80017f2 <_lseek>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_lseek_r+0x1e>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_lseek_r+0x1e>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	2000258c 	.word	0x2000258c

08007700 <_read_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	2200      	movs	r2, #0
 800770a:	4d05      	ldr	r5, [pc, #20]	@ (8007720 <_read_r+0x20>)
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f7fa f812 	bl	8001738 <_read>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_read_r+0x1e>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_read_r+0x1e>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	2000258c 	.word	0x2000258c

08007724 <_write_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	4611      	mov	r1, r2
 800772c:	2200      	movs	r2, #0
 800772e:	4d05      	ldr	r5, [pc, #20]	@ (8007744 <_write_r+0x20>)
 8007730:	602a      	str	r2, [r5, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	f7fa f81d 	bl	8001772 <_write>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_write_r+0x1e>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_write_r+0x1e>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	2000258c 	.word	0x2000258c

08007748 <__errno>:
 8007748:	4b01      	ldr	r3, [pc, #4]	@ (8007750 <__errno+0x8>)
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	20000030 	.word	0x20000030

08007754 <__libc_init_array>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	2600      	movs	r6, #0
 8007758:	4d0c      	ldr	r5, [pc, #48]	@ (800778c <__libc_init_array+0x38>)
 800775a:	4c0d      	ldr	r4, [pc, #52]	@ (8007790 <__libc_init_array+0x3c>)
 800775c:	1b64      	subs	r4, r4, r5
 800775e:	10a4      	asrs	r4, r4, #2
 8007760:	42a6      	cmp	r6, r4
 8007762:	d109      	bne.n	8007778 <__libc_init_array+0x24>
 8007764:	f000 fd30 	bl	80081c8 <_init>
 8007768:	2600      	movs	r6, #0
 800776a:	4d0a      	ldr	r5, [pc, #40]	@ (8007794 <__libc_init_array+0x40>)
 800776c:	4c0a      	ldr	r4, [pc, #40]	@ (8007798 <__libc_init_array+0x44>)
 800776e:	1b64      	subs	r4, r4, r5
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	42a6      	cmp	r6, r4
 8007774:	d105      	bne.n	8007782 <__libc_init_array+0x2e>
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	f855 3b04 	ldr.w	r3, [r5], #4
 800777c:	4798      	blx	r3
 800777e:	3601      	adds	r6, #1
 8007780:	e7ee      	b.n	8007760 <__libc_init_array+0xc>
 8007782:	f855 3b04 	ldr.w	r3, [r5], #4
 8007786:	4798      	blx	r3
 8007788:	3601      	adds	r6, #1
 800778a:	e7f2      	b.n	8007772 <__libc_init_array+0x1e>
 800778c:	0800884c 	.word	0x0800884c
 8007790:	0800884c 	.word	0x0800884c
 8007794:	0800884c 	.word	0x0800884c
 8007798:	08008850 	.word	0x08008850

0800779c <__retarget_lock_init_recursive>:
 800779c:	4770      	bx	lr

0800779e <__retarget_lock_acquire_recursive>:
 800779e:	4770      	bx	lr

080077a0 <__retarget_lock_release_recursive>:
 80077a0:	4770      	bx	lr
	...

080077a4 <_free_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4605      	mov	r5, r0
 80077a8:	2900      	cmp	r1, #0
 80077aa:	d040      	beq.n	800782e <_free_r+0x8a>
 80077ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b0:	1f0c      	subs	r4, r1, #4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	bfb8      	it	lt
 80077b6:	18e4      	addlt	r4, r4, r3
 80077b8:	f000 f8de 	bl	8007978 <__malloc_lock>
 80077bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007830 <_free_r+0x8c>)
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	b933      	cbnz	r3, 80077d0 <_free_r+0x2c>
 80077c2:	6063      	str	r3, [r4, #4]
 80077c4:	6014      	str	r4, [r2, #0]
 80077c6:	4628      	mov	r0, r5
 80077c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077cc:	f000 b8da 	b.w	8007984 <__malloc_unlock>
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	d908      	bls.n	80077e6 <_free_r+0x42>
 80077d4:	6820      	ldr	r0, [r4, #0]
 80077d6:	1821      	adds	r1, r4, r0
 80077d8:	428b      	cmp	r3, r1
 80077da:	bf01      	itttt	eq
 80077dc:	6819      	ldreq	r1, [r3, #0]
 80077de:	685b      	ldreq	r3, [r3, #4]
 80077e0:	1809      	addeq	r1, r1, r0
 80077e2:	6021      	streq	r1, [r4, #0]
 80077e4:	e7ed      	b.n	80077c2 <_free_r+0x1e>
 80077e6:	461a      	mov	r2, r3
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	b10b      	cbz	r3, 80077f0 <_free_r+0x4c>
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	d9fa      	bls.n	80077e6 <_free_r+0x42>
 80077f0:	6811      	ldr	r1, [r2, #0]
 80077f2:	1850      	adds	r0, r2, r1
 80077f4:	42a0      	cmp	r0, r4
 80077f6:	d10b      	bne.n	8007810 <_free_r+0x6c>
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	4401      	add	r1, r0
 80077fc:	1850      	adds	r0, r2, r1
 80077fe:	4283      	cmp	r3, r0
 8007800:	6011      	str	r1, [r2, #0]
 8007802:	d1e0      	bne.n	80077c6 <_free_r+0x22>
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4408      	add	r0, r1
 800780a:	6010      	str	r0, [r2, #0]
 800780c:	6053      	str	r3, [r2, #4]
 800780e:	e7da      	b.n	80077c6 <_free_r+0x22>
 8007810:	d902      	bls.n	8007818 <_free_r+0x74>
 8007812:	230c      	movs	r3, #12
 8007814:	602b      	str	r3, [r5, #0]
 8007816:	e7d6      	b.n	80077c6 <_free_r+0x22>
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	1821      	adds	r1, r4, r0
 800781c:	428b      	cmp	r3, r1
 800781e:	bf01      	itttt	eq
 8007820:	6819      	ldreq	r1, [r3, #0]
 8007822:	685b      	ldreq	r3, [r3, #4]
 8007824:	1809      	addeq	r1, r1, r0
 8007826:	6021      	streq	r1, [r4, #0]
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	6054      	str	r4, [r2, #4]
 800782c:	e7cb      	b.n	80077c6 <_free_r+0x22>
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	20002598 	.word	0x20002598

08007834 <sbrk_aligned>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	4e0f      	ldr	r6, [pc, #60]	@ (8007874 <sbrk_aligned+0x40>)
 8007838:	460c      	mov	r4, r1
 800783a:	6831      	ldr	r1, [r6, #0]
 800783c:	4605      	mov	r5, r0
 800783e:	b911      	cbnz	r1, 8007846 <sbrk_aligned+0x12>
 8007840:	f000 fca4 	bl	800818c <_sbrk_r>
 8007844:	6030      	str	r0, [r6, #0]
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	f000 fc9f 	bl	800818c <_sbrk_r>
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	d103      	bne.n	800785a <sbrk_aligned+0x26>
 8007852:	f04f 34ff 	mov.w	r4, #4294967295
 8007856:	4620      	mov	r0, r4
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	1cc4      	adds	r4, r0, #3
 800785c:	f024 0403 	bic.w	r4, r4, #3
 8007860:	42a0      	cmp	r0, r4
 8007862:	d0f8      	beq.n	8007856 <sbrk_aligned+0x22>
 8007864:	1a21      	subs	r1, r4, r0
 8007866:	4628      	mov	r0, r5
 8007868:	f000 fc90 	bl	800818c <_sbrk_r>
 800786c:	3001      	adds	r0, #1
 800786e:	d1f2      	bne.n	8007856 <sbrk_aligned+0x22>
 8007870:	e7ef      	b.n	8007852 <sbrk_aligned+0x1e>
 8007872:	bf00      	nop
 8007874:	20002594 	.word	0x20002594

08007878 <_malloc_r>:
 8007878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787c:	1ccd      	adds	r5, r1, #3
 800787e:	f025 0503 	bic.w	r5, r5, #3
 8007882:	3508      	adds	r5, #8
 8007884:	2d0c      	cmp	r5, #12
 8007886:	bf38      	it	cc
 8007888:	250c      	movcc	r5, #12
 800788a:	2d00      	cmp	r5, #0
 800788c:	4606      	mov	r6, r0
 800788e:	db01      	blt.n	8007894 <_malloc_r+0x1c>
 8007890:	42a9      	cmp	r1, r5
 8007892:	d904      	bls.n	800789e <_malloc_r+0x26>
 8007894:	230c      	movs	r3, #12
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	2000      	movs	r0, #0
 800789a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007974 <_malloc_r+0xfc>
 80078a2:	f000 f869 	bl	8007978 <__malloc_lock>
 80078a6:	f8d8 3000 	ldr.w	r3, [r8]
 80078aa:	461c      	mov	r4, r3
 80078ac:	bb44      	cbnz	r4, 8007900 <_malloc_r+0x88>
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff ffbf 	bl	8007834 <sbrk_aligned>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	4604      	mov	r4, r0
 80078ba:	d158      	bne.n	800796e <_malloc_r+0xf6>
 80078bc:	f8d8 4000 	ldr.w	r4, [r8]
 80078c0:	4627      	mov	r7, r4
 80078c2:	2f00      	cmp	r7, #0
 80078c4:	d143      	bne.n	800794e <_malloc_r+0xd6>
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	d04b      	beq.n	8007962 <_malloc_r+0xea>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	4639      	mov	r1, r7
 80078ce:	4630      	mov	r0, r6
 80078d0:	eb04 0903 	add.w	r9, r4, r3
 80078d4:	f000 fc5a 	bl	800818c <_sbrk_r>
 80078d8:	4581      	cmp	r9, r0
 80078da:	d142      	bne.n	8007962 <_malloc_r+0xea>
 80078dc:	6821      	ldr	r1, [r4, #0]
 80078de:	4630      	mov	r0, r6
 80078e0:	1a6d      	subs	r5, r5, r1
 80078e2:	4629      	mov	r1, r5
 80078e4:	f7ff ffa6 	bl	8007834 <sbrk_aligned>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d03a      	beq.n	8007962 <_malloc_r+0xea>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	442b      	add	r3, r5
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	f8d8 3000 	ldr.w	r3, [r8]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	bb62      	cbnz	r2, 8007954 <_malloc_r+0xdc>
 80078fa:	f8c8 7000 	str.w	r7, [r8]
 80078fe:	e00f      	b.n	8007920 <_malloc_r+0xa8>
 8007900:	6822      	ldr	r2, [r4, #0]
 8007902:	1b52      	subs	r2, r2, r5
 8007904:	d420      	bmi.n	8007948 <_malloc_r+0xd0>
 8007906:	2a0b      	cmp	r2, #11
 8007908:	d917      	bls.n	800793a <_malloc_r+0xc2>
 800790a:	1961      	adds	r1, r4, r5
 800790c:	42a3      	cmp	r3, r4
 800790e:	6025      	str	r5, [r4, #0]
 8007910:	bf18      	it	ne
 8007912:	6059      	strne	r1, [r3, #4]
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	bf08      	it	eq
 8007918:	f8c8 1000 	streq.w	r1, [r8]
 800791c:	5162      	str	r2, [r4, r5]
 800791e:	604b      	str	r3, [r1, #4]
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f82f 	bl	8007984 <__malloc_unlock>
 8007926:	f104 000b 	add.w	r0, r4, #11
 800792a:	1d23      	adds	r3, r4, #4
 800792c:	f020 0007 	bic.w	r0, r0, #7
 8007930:	1ac2      	subs	r2, r0, r3
 8007932:	bf1c      	itt	ne
 8007934:	1a1b      	subne	r3, r3, r0
 8007936:	50a3      	strne	r3, [r4, r2]
 8007938:	e7af      	b.n	800789a <_malloc_r+0x22>
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	42a3      	cmp	r3, r4
 800793e:	bf0c      	ite	eq
 8007940:	f8c8 2000 	streq.w	r2, [r8]
 8007944:	605a      	strne	r2, [r3, #4]
 8007946:	e7eb      	b.n	8007920 <_malloc_r+0xa8>
 8007948:	4623      	mov	r3, r4
 800794a:	6864      	ldr	r4, [r4, #4]
 800794c:	e7ae      	b.n	80078ac <_malloc_r+0x34>
 800794e:	463c      	mov	r4, r7
 8007950:	687f      	ldr	r7, [r7, #4]
 8007952:	e7b6      	b.n	80078c2 <_malloc_r+0x4a>
 8007954:	461a      	mov	r2, r3
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	42a3      	cmp	r3, r4
 800795a:	d1fb      	bne.n	8007954 <_malloc_r+0xdc>
 800795c:	2300      	movs	r3, #0
 800795e:	6053      	str	r3, [r2, #4]
 8007960:	e7de      	b.n	8007920 <_malloc_r+0xa8>
 8007962:	230c      	movs	r3, #12
 8007964:	4630      	mov	r0, r6
 8007966:	6033      	str	r3, [r6, #0]
 8007968:	f000 f80c 	bl	8007984 <__malloc_unlock>
 800796c:	e794      	b.n	8007898 <_malloc_r+0x20>
 800796e:	6005      	str	r5, [r0, #0]
 8007970:	e7d6      	b.n	8007920 <_malloc_r+0xa8>
 8007972:	bf00      	nop
 8007974:	20002598 	.word	0x20002598

08007978 <__malloc_lock>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__malloc_lock+0x8>)
 800797a:	f7ff bf10 	b.w	800779e <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	20002590 	.word	0x20002590

08007984 <__malloc_unlock>:
 8007984:	4801      	ldr	r0, [pc, #4]	@ (800798c <__malloc_unlock+0x8>)
 8007986:	f7ff bf0b 	b.w	80077a0 <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	20002590 	.word	0x20002590

08007990 <__sfputc_r>:
 8007990:	6893      	ldr	r3, [r2, #8]
 8007992:	b410      	push	{r4}
 8007994:	3b01      	subs	r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	6093      	str	r3, [r2, #8]
 800799a:	da07      	bge.n	80079ac <__sfputc_r+0x1c>
 800799c:	6994      	ldr	r4, [r2, #24]
 800799e:	42a3      	cmp	r3, r4
 80079a0:	db01      	blt.n	80079a6 <__sfputc_r+0x16>
 80079a2:	290a      	cmp	r1, #10
 80079a4:	d102      	bne.n	80079ac <__sfputc_r+0x1c>
 80079a6:	bc10      	pop	{r4}
 80079a8:	f7ff bdeb 	b.w	8007582 <__swbuf_r>
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	1c58      	adds	r0, r3, #1
 80079b0:	6010      	str	r0, [r2, #0]
 80079b2:	7019      	strb	r1, [r3, #0]
 80079b4:	4608      	mov	r0, r1
 80079b6:	bc10      	pop	{r4}
 80079b8:	4770      	bx	lr

080079ba <__sfputs_r>:
 80079ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079bc:	4606      	mov	r6, r0
 80079be:	460f      	mov	r7, r1
 80079c0:	4614      	mov	r4, r2
 80079c2:	18d5      	adds	r5, r2, r3
 80079c4:	42ac      	cmp	r4, r5
 80079c6:	d101      	bne.n	80079cc <__sfputs_r+0x12>
 80079c8:	2000      	movs	r0, #0
 80079ca:	e007      	b.n	80079dc <__sfputs_r+0x22>
 80079cc:	463a      	mov	r2, r7
 80079ce:	4630      	mov	r0, r6
 80079d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d4:	f7ff ffdc 	bl	8007990 <__sfputc_r>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d1f3      	bne.n	80079c4 <__sfputs_r+0xa>
 80079dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079e0 <_vfiprintf_r>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	460d      	mov	r5, r1
 80079e6:	4614      	mov	r4, r2
 80079e8:	4698      	mov	r8, r3
 80079ea:	4606      	mov	r6, r0
 80079ec:	b09d      	sub	sp, #116	@ 0x74
 80079ee:	b118      	cbz	r0, 80079f8 <_vfiprintf_r+0x18>
 80079f0:	6a03      	ldr	r3, [r0, #32]
 80079f2:	b90b      	cbnz	r3, 80079f8 <_vfiprintf_r+0x18>
 80079f4:	f7ff fcdc 	bl	80073b0 <__sinit>
 80079f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079fa:	07d9      	lsls	r1, r3, #31
 80079fc:	d405      	bmi.n	8007a0a <_vfiprintf_r+0x2a>
 80079fe:	89ab      	ldrh	r3, [r5, #12]
 8007a00:	059a      	lsls	r2, r3, #22
 8007a02:	d402      	bmi.n	8007a0a <_vfiprintf_r+0x2a>
 8007a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a06:	f7ff feca 	bl	800779e <__retarget_lock_acquire_recursive>
 8007a0a:	89ab      	ldrh	r3, [r5, #12]
 8007a0c:	071b      	lsls	r3, r3, #28
 8007a0e:	d501      	bpl.n	8007a14 <_vfiprintf_r+0x34>
 8007a10:	692b      	ldr	r3, [r5, #16]
 8007a12:	b99b      	cbnz	r3, 8007a3c <_vfiprintf_r+0x5c>
 8007a14:	4629      	mov	r1, r5
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff fdf2 	bl	8007600 <__swsetup_r>
 8007a1c:	b170      	cbz	r0, 8007a3c <_vfiprintf_r+0x5c>
 8007a1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a20:	07dc      	lsls	r4, r3, #31
 8007a22:	d504      	bpl.n	8007a2e <_vfiprintf_r+0x4e>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295
 8007a28:	b01d      	add	sp, #116	@ 0x74
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	89ab      	ldrh	r3, [r5, #12]
 8007a30:	0598      	lsls	r0, r3, #22
 8007a32:	d4f7      	bmi.n	8007a24 <_vfiprintf_r+0x44>
 8007a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a36:	f7ff feb3 	bl	80077a0 <__retarget_lock_release_recursive>
 8007a3a:	e7f3      	b.n	8007a24 <_vfiprintf_r+0x44>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a40:	2320      	movs	r3, #32
 8007a42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a46:	2330      	movs	r3, #48	@ 0x30
 8007a48:	f04f 0901 	mov.w	r9, #1
 8007a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a50:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007bfc <_vfiprintf_r+0x21c>
 8007a54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a58:	4623      	mov	r3, r4
 8007a5a:	469a      	mov	sl, r3
 8007a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a60:	b10a      	cbz	r2, 8007a66 <_vfiprintf_r+0x86>
 8007a62:	2a25      	cmp	r2, #37	@ 0x25
 8007a64:	d1f9      	bne.n	8007a5a <_vfiprintf_r+0x7a>
 8007a66:	ebba 0b04 	subs.w	fp, sl, r4
 8007a6a:	d00b      	beq.n	8007a84 <_vfiprintf_r+0xa4>
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	4622      	mov	r2, r4
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7ff ffa1 	bl	80079ba <__sfputs_r>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f000 80a7 	beq.w	8007bcc <_vfiprintf_r+0x1ec>
 8007a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a80:	445a      	add	r2, fp
 8007a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a84:	f89a 3000 	ldrb.w	r3, [sl]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 809f 	beq.w	8007bcc <_vfiprintf_r+0x1ec>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f04f 32ff 	mov.w	r2, #4294967295
 8007a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a98:	f10a 0a01 	add.w	sl, sl, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	9307      	str	r3, [sp, #28]
 8007aa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007aa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa6:	4654      	mov	r4, sl
 8007aa8:	2205      	movs	r2, #5
 8007aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aae:	4853      	ldr	r0, [pc, #332]	@ (8007bfc <_vfiprintf_r+0x21c>)
 8007ab0:	f000 fb7c 	bl	80081ac <memchr>
 8007ab4:	9a04      	ldr	r2, [sp, #16]
 8007ab6:	b9d8      	cbnz	r0, 8007af0 <_vfiprintf_r+0x110>
 8007ab8:	06d1      	lsls	r1, r2, #27
 8007aba:	bf44      	itt	mi
 8007abc:	2320      	movmi	r3, #32
 8007abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ac2:	0713      	lsls	r3, r2, #28
 8007ac4:	bf44      	itt	mi
 8007ac6:	232b      	movmi	r3, #43	@ 0x2b
 8007ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007acc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad2:	d015      	beq.n	8007b00 <_vfiprintf_r+0x120>
 8007ad4:	4654      	mov	r4, sl
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f04f 0c0a 	mov.w	ip, #10
 8007adc:	9a07      	ldr	r2, [sp, #28]
 8007ade:	4621      	mov	r1, r4
 8007ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae4:	3b30      	subs	r3, #48	@ 0x30
 8007ae6:	2b09      	cmp	r3, #9
 8007ae8:	d94b      	bls.n	8007b82 <_vfiprintf_r+0x1a2>
 8007aea:	b1b0      	cbz	r0, 8007b1a <_vfiprintf_r+0x13a>
 8007aec:	9207      	str	r2, [sp, #28]
 8007aee:	e014      	b.n	8007b1a <_vfiprintf_r+0x13a>
 8007af0:	eba0 0308 	sub.w	r3, r0, r8
 8007af4:	fa09 f303 	lsl.w	r3, r9, r3
 8007af8:	4313      	orrs	r3, r2
 8007afa:	46a2      	mov	sl, r4
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	e7d2      	b.n	8007aa6 <_vfiprintf_r+0xc6>
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	1d19      	adds	r1, r3, #4
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	9103      	str	r1, [sp, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bfbb      	ittet	lt
 8007b0c:	425b      	neglt	r3, r3
 8007b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b12:	9307      	strge	r3, [sp, #28]
 8007b14:	9307      	strlt	r3, [sp, #28]
 8007b16:	bfb8      	it	lt
 8007b18:	9204      	strlt	r2, [sp, #16]
 8007b1a:	7823      	ldrb	r3, [r4, #0]
 8007b1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b1e:	d10a      	bne.n	8007b36 <_vfiprintf_r+0x156>
 8007b20:	7863      	ldrb	r3, [r4, #1]
 8007b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b24:	d132      	bne.n	8007b8c <_vfiprintf_r+0x1ac>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	3402      	adds	r4, #2
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	9203      	str	r2, [sp, #12]
 8007b30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007c00 <_vfiprintf_r+0x220>
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	4650      	mov	r0, sl
 8007b3e:	7821      	ldrb	r1, [r4, #0]
 8007b40:	f000 fb34 	bl	80081ac <memchr>
 8007b44:	b138      	cbz	r0, 8007b56 <_vfiprintf_r+0x176>
 8007b46:	2240      	movs	r2, #64	@ 0x40
 8007b48:	9b04      	ldr	r3, [sp, #16]
 8007b4a:	eba0 000a 	sub.w	r0, r0, sl
 8007b4e:	4082      	lsls	r2, r0
 8007b50:	4313      	orrs	r3, r2
 8007b52:	3401      	adds	r4, #1
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5a:	2206      	movs	r2, #6
 8007b5c:	4829      	ldr	r0, [pc, #164]	@ (8007c04 <_vfiprintf_r+0x224>)
 8007b5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b62:	f000 fb23 	bl	80081ac <memchr>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d03f      	beq.n	8007bea <_vfiprintf_r+0x20a>
 8007b6a:	4b27      	ldr	r3, [pc, #156]	@ (8007c08 <_vfiprintf_r+0x228>)
 8007b6c:	bb1b      	cbnz	r3, 8007bb6 <_vfiprintf_r+0x1d6>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	3307      	adds	r3, #7
 8007b72:	f023 0307 	bic.w	r3, r3, #7
 8007b76:	3308      	adds	r3, #8
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7c:	443b      	add	r3, r7
 8007b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b80:	e76a      	b.n	8007a58 <_vfiprintf_r+0x78>
 8007b82:	460c      	mov	r4, r1
 8007b84:	2001      	movs	r0, #1
 8007b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b8a:	e7a8      	b.n	8007ade <_vfiprintf_r+0xfe>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f04f 0c0a 	mov.w	ip, #10
 8007b92:	4619      	mov	r1, r3
 8007b94:	3401      	adds	r4, #1
 8007b96:	9305      	str	r3, [sp, #20]
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b9e:	3a30      	subs	r2, #48	@ 0x30
 8007ba0:	2a09      	cmp	r2, #9
 8007ba2:	d903      	bls.n	8007bac <_vfiprintf_r+0x1cc>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0c6      	beq.n	8007b36 <_vfiprintf_r+0x156>
 8007ba8:	9105      	str	r1, [sp, #20]
 8007baa:	e7c4      	b.n	8007b36 <_vfiprintf_r+0x156>
 8007bac:	4604      	mov	r4, r0
 8007bae:	2301      	movs	r3, #1
 8007bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb4:	e7f0      	b.n	8007b98 <_vfiprintf_r+0x1b8>
 8007bb6:	ab03      	add	r3, sp, #12
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	462a      	mov	r2, r5
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4b13      	ldr	r3, [pc, #76]	@ (8007c0c <_vfiprintf_r+0x22c>)
 8007bc0:	a904      	add	r1, sp, #16
 8007bc2:	f3af 8000 	nop.w
 8007bc6:	4607      	mov	r7, r0
 8007bc8:	1c78      	adds	r0, r7, #1
 8007bca:	d1d6      	bne.n	8007b7a <_vfiprintf_r+0x19a>
 8007bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bce:	07d9      	lsls	r1, r3, #31
 8007bd0:	d405      	bmi.n	8007bde <_vfiprintf_r+0x1fe>
 8007bd2:	89ab      	ldrh	r3, [r5, #12]
 8007bd4:	059a      	lsls	r2, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_vfiprintf_r+0x1fe>
 8007bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bda:	f7ff fde1 	bl	80077a0 <__retarget_lock_release_recursive>
 8007bde:	89ab      	ldrh	r3, [r5, #12]
 8007be0:	065b      	lsls	r3, r3, #25
 8007be2:	f53f af1f 	bmi.w	8007a24 <_vfiprintf_r+0x44>
 8007be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007be8:	e71e      	b.n	8007a28 <_vfiprintf_r+0x48>
 8007bea:	ab03      	add	r3, sp, #12
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	462a      	mov	r2, r5
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	4b06      	ldr	r3, [pc, #24]	@ (8007c0c <_vfiprintf_r+0x22c>)
 8007bf4:	a904      	add	r1, sp, #16
 8007bf6:	f000 f87d 	bl	8007cf4 <_printf_i>
 8007bfa:	e7e4      	b.n	8007bc6 <_vfiprintf_r+0x1e6>
 8007bfc:	08008818 	.word	0x08008818
 8007c00:	0800881e 	.word	0x0800881e
 8007c04:	08008822 	.word	0x08008822
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	080079bb 	.word	0x080079bb

08007c10 <_printf_common>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	4616      	mov	r6, r2
 8007c16:	4698      	mov	r8, r3
 8007c18:	688a      	ldr	r2, [r1, #8]
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	bfb8      	it	lt
 8007c22:	4613      	movlt	r3, r2
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c30:	b10a      	cbz	r2, 8007c36 <_printf_common+0x26>
 8007c32:	3301      	adds	r3, #1
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	0699      	lsls	r1, r3, #26
 8007c3a:	bf42      	ittt	mi
 8007c3c:	6833      	ldrmi	r3, [r6, #0]
 8007c3e:	3302      	addmi	r3, #2
 8007c40:	6033      	strmi	r3, [r6, #0]
 8007c42:	6825      	ldr	r5, [r4, #0]
 8007c44:	f015 0506 	ands.w	r5, r5, #6
 8007c48:	d106      	bne.n	8007c58 <_printf_common+0x48>
 8007c4a:	f104 0a19 	add.w	sl, r4, #25
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	6832      	ldr	r2, [r6, #0]
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	dc2b      	bgt.n	8007cb0 <_printf_common+0xa0>
 8007c58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c5c:	6822      	ldr	r2, [r4, #0]
 8007c5e:	3b00      	subs	r3, #0
 8007c60:	bf18      	it	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	0692      	lsls	r2, r2, #26
 8007c66:	d430      	bmi.n	8007cca <_printf_common+0xba>
 8007c68:	4641      	mov	r1, r8
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c70:	47c8      	blx	r9
 8007c72:	3001      	adds	r0, #1
 8007c74:	d023      	beq.n	8007cbe <_printf_common+0xae>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	6922      	ldr	r2, [r4, #16]
 8007c7a:	f003 0306 	and.w	r3, r3, #6
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	bf14      	ite	ne
 8007c82:	2500      	movne	r5, #0
 8007c84:	6833      	ldreq	r3, [r6, #0]
 8007c86:	f04f 0600 	mov.w	r6, #0
 8007c8a:	bf08      	it	eq
 8007c8c:	68e5      	ldreq	r5, [r4, #12]
 8007c8e:	f104 041a 	add.w	r4, r4, #26
 8007c92:	bf08      	it	eq
 8007c94:	1aed      	subeq	r5, r5, r3
 8007c96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007c9a:	bf08      	it	eq
 8007c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	bfc4      	itt	gt
 8007ca4:	1a9b      	subgt	r3, r3, r2
 8007ca6:	18ed      	addgt	r5, r5, r3
 8007ca8:	42b5      	cmp	r5, r6
 8007caa:	d11a      	bne.n	8007ce2 <_printf_common+0xd2>
 8007cac:	2000      	movs	r0, #0
 8007cae:	e008      	b.n	8007cc2 <_printf_common+0xb2>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	47c8      	blx	r9
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d103      	bne.n	8007cc6 <_printf_common+0xb6>
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc6:	3501      	adds	r5, #1
 8007cc8:	e7c1      	b.n	8007c4e <_printf_common+0x3e>
 8007cca:	2030      	movs	r0, #48	@ 0x30
 8007ccc:	18e1      	adds	r1, r4, r3
 8007cce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cd8:	4422      	add	r2, r4
 8007cda:	3302      	adds	r3, #2
 8007cdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ce0:	e7c2      	b.n	8007c68 <_printf_common+0x58>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4641      	mov	r1, r8
 8007ce8:	4638      	mov	r0, r7
 8007cea:	47c8      	blx	r9
 8007cec:	3001      	adds	r0, #1
 8007cee:	d0e6      	beq.n	8007cbe <_printf_common+0xae>
 8007cf0:	3601      	adds	r6, #1
 8007cf2:	e7d9      	b.n	8007ca8 <_printf_common+0x98>

08007cf4 <_printf_i>:
 8007cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	7e0f      	ldrb	r7, [r1, #24]
 8007cfa:	4691      	mov	r9, r2
 8007cfc:	2f78      	cmp	r7, #120	@ 0x78
 8007cfe:	4680      	mov	r8, r0
 8007d00:	460c      	mov	r4, r1
 8007d02:	469a      	mov	sl, r3
 8007d04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d0a:	d807      	bhi.n	8007d1c <_printf_i+0x28>
 8007d0c:	2f62      	cmp	r7, #98	@ 0x62
 8007d0e:	d80a      	bhi.n	8007d26 <_printf_i+0x32>
 8007d10:	2f00      	cmp	r7, #0
 8007d12:	f000 80d3 	beq.w	8007ebc <_printf_i+0x1c8>
 8007d16:	2f58      	cmp	r7, #88	@ 0x58
 8007d18:	f000 80ba 	beq.w	8007e90 <_printf_i+0x19c>
 8007d1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d24:	e03a      	b.n	8007d9c <_printf_i+0xa8>
 8007d26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d2a:	2b15      	cmp	r3, #21
 8007d2c:	d8f6      	bhi.n	8007d1c <_printf_i+0x28>
 8007d2e:	a101      	add	r1, pc, #4	@ (adr r1, 8007d34 <_printf_i+0x40>)
 8007d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d34:	08007d8d 	.word	0x08007d8d
 8007d38:	08007da1 	.word	0x08007da1
 8007d3c:	08007d1d 	.word	0x08007d1d
 8007d40:	08007d1d 	.word	0x08007d1d
 8007d44:	08007d1d 	.word	0x08007d1d
 8007d48:	08007d1d 	.word	0x08007d1d
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007d1d 	.word	0x08007d1d
 8007d54:	08007d1d 	.word	0x08007d1d
 8007d58:	08007d1d 	.word	0x08007d1d
 8007d5c:	08007d1d 	.word	0x08007d1d
 8007d60:	08007ea3 	.word	0x08007ea3
 8007d64:	08007dcb 	.word	0x08007dcb
 8007d68:	08007e5d 	.word	0x08007e5d
 8007d6c:	08007d1d 	.word	0x08007d1d
 8007d70:	08007d1d 	.word	0x08007d1d
 8007d74:	08007ec5 	.word	0x08007ec5
 8007d78:	08007d1d 	.word	0x08007d1d
 8007d7c:	08007dcb 	.word	0x08007dcb
 8007d80:	08007d1d 	.word	0x08007d1d
 8007d84:	08007d1d 	.word	0x08007d1d
 8007d88:	08007e65 	.word	0x08007e65
 8007d8c:	6833      	ldr	r3, [r6, #0]
 8007d8e:	1d1a      	adds	r2, r3, #4
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6032      	str	r2, [r6, #0]
 8007d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e09e      	b.n	8007ede <_printf_i+0x1ea>
 8007da0:	6833      	ldr	r3, [r6, #0]
 8007da2:	6820      	ldr	r0, [r4, #0]
 8007da4:	1d19      	adds	r1, r3, #4
 8007da6:	6031      	str	r1, [r6, #0]
 8007da8:	0606      	lsls	r6, r0, #24
 8007daa:	d501      	bpl.n	8007db0 <_printf_i+0xbc>
 8007dac:	681d      	ldr	r5, [r3, #0]
 8007dae:	e003      	b.n	8007db8 <_printf_i+0xc4>
 8007db0:	0645      	lsls	r5, r0, #25
 8007db2:	d5fb      	bpl.n	8007dac <_printf_i+0xb8>
 8007db4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	da03      	bge.n	8007dc4 <_printf_i+0xd0>
 8007dbc:	232d      	movs	r3, #45	@ 0x2d
 8007dbe:	426d      	negs	r5, r5
 8007dc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dc4:	230a      	movs	r3, #10
 8007dc6:	4859      	ldr	r0, [pc, #356]	@ (8007f2c <_printf_i+0x238>)
 8007dc8:	e011      	b.n	8007dee <_printf_i+0xfa>
 8007dca:	6821      	ldr	r1, [r4, #0]
 8007dcc:	6833      	ldr	r3, [r6, #0]
 8007dce:	0608      	lsls	r0, r1, #24
 8007dd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dd4:	d402      	bmi.n	8007ddc <_printf_i+0xe8>
 8007dd6:	0649      	lsls	r1, r1, #25
 8007dd8:	bf48      	it	mi
 8007dda:	b2ad      	uxthmi	r5, r5
 8007ddc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	bf14      	ite	ne
 8007de2:	230a      	movne	r3, #10
 8007de4:	2308      	moveq	r3, #8
 8007de6:	4851      	ldr	r0, [pc, #324]	@ (8007f2c <_printf_i+0x238>)
 8007de8:	2100      	movs	r1, #0
 8007dea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007dee:	6866      	ldr	r6, [r4, #4]
 8007df0:	2e00      	cmp	r6, #0
 8007df2:	bfa8      	it	ge
 8007df4:	6821      	ldrge	r1, [r4, #0]
 8007df6:	60a6      	str	r6, [r4, #8]
 8007df8:	bfa4      	itt	ge
 8007dfa:	f021 0104 	bicge.w	r1, r1, #4
 8007dfe:	6021      	strge	r1, [r4, #0]
 8007e00:	b90d      	cbnz	r5, 8007e06 <_printf_i+0x112>
 8007e02:	2e00      	cmp	r6, #0
 8007e04:	d04b      	beq.n	8007e9e <_printf_i+0x1aa>
 8007e06:	4616      	mov	r6, r2
 8007e08:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e0c:	fb03 5711 	mls	r7, r3, r1, r5
 8007e10:	5dc7      	ldrb	r7, [r0, r7]
 8007e12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e16:	462f      	mov	r7, r5
 8007e18:	42bb      	cmp	r3, r7
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	d9f4      	bls.n	8007e08 <_printf_i+0x114>
 8007e1e:	2b08      	cmp	r3, #8
 8007e20:	d10b      	bne.n	8007e3a <_printf_i+0x146>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	07df      	lsls	r7, r3, #31
 8007e26:	d508      	bpl.n	8007e3a <_printf_i+0x146>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	6861      	ldr	r1, [r4, #4]
 8007e2c:	4299      	cmp	r1, r3
 8007e2e:	bfde      	ittt	le
 8007e30:	2330      	movle	r3, #48	@ 0x30
 8007e32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e3a:	1b92      	subs	r2, r2, r6
 8007e3c:	6122      	str	r2, [r4, #16]
 8007e3e:	464b      	mov	r3, r9
 8007e40:	4621      	mov	r1, r4
 8007e42:	4640      	mov	r0, r8
 8007e44:	f8cd a000 	str.w	sl, [sp]
 8007e48:	aa03      	add	r2, sp, #12
 8007e4a:	f7ff fee1 	bl	8007c10 <_printf_common>
 8007e4e:	3001      	adds	r0, #1
 8007e50:	d14a      	bne.n	8007ee8 <_printf_i+0x1f4>
 8007e52:	f04f 30ff 	mov.w	r0, #4294967295
 8007e56:	b004      	add	sp, #16
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	f043 0320 	orr.w	r3, r3, #32
 8007e62:	6023      	str	r3, [r4, #0]
 8007e64:	2778      	movs	r7, #120	@ 0x78
 8007e66:	4832      	ldr	r0, [pc, #200]	@ (8007f30 <_printf_i+0x23c>)
 8007e68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	6831      	ldr	r1, [r6, #0]
 8007e70:	061f      	lsls	r7, r3, #24
 8007e72:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e76:	d402      	bmi.n	8007e7e <_printf_i+0x18a>
 8007e78:	065f      	lsls	r7, r3, #25
 8007e7a:	bf48      	it	mi
 8007e7c:	b2ad      	uxthmi	r5, r5
 8007e7e:	6031      	str	r1, [r6, #0]
 8007e80:	07d9      	lsls	r1, r3, #31
 8007e82:	bf44      	itt	mi
 8007e84:	f043 0320 	orrmi.w	r3, r3, #32
 8007e88:	6023      	strmi	r3, [r4, #0]
 8007e8a:	b11d      	cbz	r5, 8007e94 <_printf_i+0x1a0>
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	e7ab      	b.n	8007de8 <_printf_i+0xf4>
 8007e90:	4826      	ldr	r0, [pc, #152]	@ (8007f2c <_printf_i+0x238>)
 8007e92:	e7e9      	b.n	8007e68 <_printf_i+0x174>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	f023 0320 	bic.w	r3, r3, #32
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	e7f6      	b.n	8007e8c <_printf_i+0x198>
 8007e9e:	4616      	mov	r6, r2
 8007ea0:	e7bd      	b.n	8007e1e <_printf_i+0x12a>
 8007ea2:	6833      	ldr	r3, [r6, #0]
 8007ea4:	6825      	ldr	r5, [r4, #0]
 8007ea6:	1d18      	adds	r0, r3, #4
 8007ea8:	6961      	ldr	r1, [r4, #20]
 8007eaa:	6030      	str	r0, [r6, #0]
 8007eac:	062e      	lsls	r6, r5, #24
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	d501      	bpl.n	8007eb6 <_printf_i+0x1c2>
 8007eb2:	6019      	str	r1, [r3, #0]
 8007eb4:	e002      	b.n	8007ebc <_printf_i+0x1c8>
 8007eb6:	0668      	lsls	r0, r5, #25
 8007eb8:	d5fb      	bpl.n	8007eb2 <_printf_i+0x1be>
 8007eba:	8019      	strh	r1, [r3, #0]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4616      	mov	r6, r2
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	e7bc      	b.n	8007e3e <_printf_i+0x14a>
 8007ec4:	6833      	ldr	r3, [r6, #0]
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	1d1a      	adds	r2, r3, #4
 8007eca:	6032      	str	r2, [r6, #0]
 8007ecc:	681e      	ldr	r6, [r3, #0]
 8007ece:	6862      	ldr	r2, [r4, #4]
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 f96b 	bl	80081ac <memchr>
 8007ed6:	b108      	cbz	r0, 8007edc <_printf_i+0x1e8>
 8007ed8:	1b80      	subs	r0, r0, r6
 8007eda:	6060      	str	r0, [r4, #4]
 8007edc:	6863      	ldr	r3, [r4, #4]
 8007ede:	6123      	str	r3, [r4, #16]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ee6:	e7aa      	b.n	8007e3e <_printf_i+0x14a>
 8007ee8:	4632      	mov	r2, r6
 8007eea:	4649      	mov	r1, r9
 8007eec:	4640      	mov	r0, r8
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	47d0      	blx	sl
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	d0ad      	beq.n	8007e52 <_printf_i+0x15e>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	079b      	lsls	r3, r3, #30
 8007efa:	d413      	bmi.n	8007f24 <_printf_i+0x230>
 8007efc:	68e0      	ldr	r0, [r4, #12]
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	4298      	cmp	r0, r3
 8007f02:	bfb8      	it	lt
 8007f04:	4618      	movlt	r0, r3
 8007f06:	e7a6      	b.n	8007e56 <_printf_i+0x162>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	4632      	mov	r2, r6
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	4640      	mov	r0, r8
 8007f10:	47d0      	blx	sl
 8007f12:	3001      	adds	r0, #1
 8007f14:	d09d      	beq.n	8007e52 <_printf_i+0x15e>
 8007f16:	3501      	adds	r5, #1
 8007f18:	68e3      	ldr	r3, [r4, #12]
 8007f1a:	9903      	ldr	r1, [sp, #12]
 8007f1c:	1a5b      	subs	r3, r3, r1
 8007f1e:	42ab      	cmp	r3, r5
 8007f20:	dcf2      	bgt.n	8007f08 <_printf_i+0x214>
 8007f22:	e7eb      	b.n	8007efc <_printf_i+0x208>
 8007f24:	2500      	movs	r5, #0
 8007f26:	f104 0619 	add.w	r6, r4, #25
 8007f2a:	e7f5      	b.n	8007f18 <_printf_i+0x224>
 8007f2c:	08008829 	.word	0x08008829
 8007f30:	0800883a 	.word	0x0800883a

08007f34 <__sflush_r>:
 8007f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	0716      	lsls	r6, r2, #28
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	d454      	bmi.n	8007fec <__sflush_r+0xb8>
 8007f42:	684b      	ldr	r3, [r1, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dc02      	bgt.n	8007f4e <__sflush_r+0x1a>
 8007f48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	dd48      	ble.n	8007fe0 <__sflush_r+0xac>
 8007f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	d045      	beq.n	8007fe0 <__sflush_r+0xac>
 8007f54:	2300      	movs	r3, #0
 8007f56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f5a:	682f      	ldr	r7, [r5, #0]
 8007f5c:	6a21      	ldr	r1, [r4, #32]
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	d030      	beq.n	8007fc4 <__sflush_r+0x90>
 8007f62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	0759      	lsls	r1, r3, #29
 8007f68:	d505      	bpl.n	8007f76 <__sflush_r+0x42>
 8007f6a:	6863      	ldr	r3, [r4, #4]
 8007f6c:	1ad2      	subs	r2, r2, r3
 8007f6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f70:	b10b      	cbz	r3, 8007f76 <__sflush_r+0x42>
 8007f72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f74:	1ad2      	subs	r2, r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	4628      	mov	r0, r5
 8007f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f7c:	6a21      	ldr	r1, [r4, #32]
 8007f7e:	47b0      	blx	r6
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	d106      	bne.n	8007f94 <__sflush_r+0x60>
 8007f86:	6829      	ldr	r1, [r5, #0]
 8007f88:	291d      	cmp	r1, #29
 8007f8a:	d82b      	bhi.n	8007fe4 <__sflush_r+0xb0>
 8007f8c:	4a28      	ldr	r2, [pc, #160]	@ (8008030 <__sflush_r+0xfc>)
 8007f8e:	410a      	asrs	r2, r1
 8007f90:	07d6      	lsls	r6, r2, #31
 8007f92:	d427      	bmi.n	8007fe4 <__sflush_r+0xb0>
 8007f94:	2200      	movs	r2, #0
 8007f96:	6062      	str	r2, [r4, #4]
 8007f98:	6922      	ldr	r2, [r4, #16]
 8007f9a:	04d9      	lsls	r1, r3, #19
 8007f9c:	6022      	str	r2, [r4, #0]
 8007f9e:	d504      	bpl.n	8007faa <__sflush_r+0x76>
 8007fa0:	1c42      	adds	r2, r0, #1
 8007fa2:	d101      	bne.n	8007fa8 <__sflush_r+0x74>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b903      	cbnz	r3, 8007faa <__sflush_r+0x76>
 8007fa8:	6560      	str	r0, [r4, #84]	@ 0x54
 8007faa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fac:	602f      	str	r7, [r5, #0]
 8007fae:	b1b9      	cbz	r1, 8007fe0 <__sflush_r+0xac>
 8007fb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fb4:	4299      	cmp	r1, r3
 8007fb6:	d002      	beq.n	8007fbe <__sflush_r+0x8a>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f7ff fbf3 	bl	80077a4 <_free_r>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fc2:	e00d      	b.n	8007fe0 <__sflush_r+0xac>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b0      	blx	r6
 8007fca:	4602      	mov	r2, r0
 8007fcc:	1c50      	adds	r0, r2, #1
 8007fce:	d1c9      	bne.n	8007f64 <__sflush_r+0x30>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c6      	beq.n	8007f64 <__sflush_r+0x30>
 8007fd6:	2b1d      	cmp	r3, #29
 8007fd8:	d001      	beq.n	8007fde <__sflush_r+0xaa>
 8007fda:	2b16      	cmp	r3, #22
 8007fdc:	d11d      	bne.n	800801a <__sflush_r+0xe6>
 8007fde:	602f      	str	r7, [r5, #0]
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	e021      	b.n	8008028 <__sflush_r+0xf4>
 8007fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe8:	b21b      	sxth	r3, r3
 8007fea:	e01a      	b.n	8008022 <__sflush_r+0xee>
 8007fec:	690f      	ldr	r7, [r1, #16]
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	d0f6      	beq.n	8007fe0 <__sflush_r+0xac>
 8007ff2:	0793      	lsls	r3, r2, #30
 8007ff4:	bf18      	it	ne
 8007ff6:	2300      	movne	r3, #0
 8007ff8:	680e      	ldr	r6, [r1, #0]
 8007ffa:	bf08      	it	eq
 8007ffc:	694b      	ldreq	r3, [r1, #20]
 8007ffe:	1bf6      	subs	r6, r6, r7
 8008000:	600f      	str	r7, [r1, #0]
 8008002:	608b      	str	r3, [r1, #8]
 8008004:	2e00      	cmp	r6, #0
 8008006:	ddeb      	ble.n	8007fe0 <__sflush_r+0xac>
 8008008:	4633      	mov	r3, r6
 800800a:	463a      	mov	r2, r7
 800800c:	4628      	mov	r0, r5
 800800e:	6a21      	ldr	r1, [r4, #32]
 8008010:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008014:	47e0      	blx	ip
 8008016:	2800      	cmp	r0, #0
 8008018:	dc07      	bgt.n	800802a <__sflush_r+0xf6>
 800801a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008022:	f04f 30ff 	mov.w	r0, #4294967295
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800802a:	4407      	add	r7, r0
 800802c:	1a36      	subs	r6, r6, r0
 800802e:	e7e9      	b.n	8008004 <__sflush_r+0xd0>
 8008030:	dfbffffe 	.word	0xdfbffffe

08008034 <_fflush_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	690b      	ldr	r3, [r1, #16]
 8008038:	4605      	mov	r5, r0
 800803a:	460c      	mov	r4, r1
 800803c:	b913      	cbnz	r3, 8008044 <_fflush_r+0x10>
 800803e:	2500      	movs	r5, #0
 8008040:	4628      	mov	r0, r5
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	b118      	cbz	r0, 800804e <_fflush_r+0x1a>
 8008046:	6a03      	ldr	r3, [r0, #32]
 8008048:	b90b      	cbnz	r3, 800804e <_fflush_r+0x1a>
 800804a:	f7ff f9b1 	bl	80073b0 <__sinit>
 800804e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0f3      	beq.n	800803e <_fflush_r+0xa>
 8008056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008058:	07d0      	lsls	r0, r2, #31
 800805a:	d404      	bmi.n	8008066 <_fflush_r+0x32>
 800805c:	0599      	lsls	r1, r3, #22
 800805e:	d402      	bmi.n	8008066 <_fflush_r+0x32>
 8008060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008062:	f7ff fb9c 	bl	800779e <__retarget_lock_acquire_recursive>
 8008066:	4628      	mov	r0, r5
 8008068:	4621      	mov	r1, r4
 800806a:	f7ff ff63 	bl	8007f34 <__sflush_r>
 800806e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008070:	4605      	mov	r5, r0
 8008072:	07da      	lsls	r2, r3, #31
 8008074:	d4e4      	bmi.n	8008040 <_fflush_r+0xc>
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	059b      	lsls	r3, r3, #22
 800807a:	d4e1      	bmi.n	8008040 <_fflush_r+0xc>
 800807c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800807e:	f7ff fb8f 	bl	80077a0 <__retarget_lock_release_recursive>
 8008082:	e7dd      	b.n	8008040 <_fflush_r+0xc>

08008084 <__swhatbuf_r>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	460c      	mov	r4, r1
 8008088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800808c:	4615      	mov	r5, r2
 800808e:	2900      	cmp	r1, #0
 8008090:	461e      	mov	r6, r3
 8008092:	b096      	sub	sp, #88	@ 0x58
 8008094:	da0c      	bge.n	80080b0 <__swhatbuf_r+0x2c>
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	2100      	movs	r1, #0
 800809a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800809e:	bf14      	ite	ne
 80080a0:	2340      	movne	r3, #64	@ 0x40
 80080a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080a6:	2000      	movs	r0, #0
 80080a8:	6031      	str	r1, [r6, #0]
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	b016      	add	sp, #88	@ 0x58
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	466a      	mov	r2, sp
 80080b2:	f000 f849 	bl	8008148 <_fstat_r>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	dbed      	blt.n	8008096 <__swhatbuf_r+0x12>
 80080ba:	9901      	ldr	r1, [sp, #4]
 80080bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080c4:	4259      	negs	r1, r3
 80080c6:	4159      	adcs	r1, r3
 80080c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080cc:	e7eb      	b.n	80080a6 <__swhatbuf_r+0x22>

080080ce <__smakebuf_r>:
 80080ce:	898b      	ldrh	r3, [r1, #12]
 80080d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d2:	079d      	lsls	r5, r3, #30
 80080d4:	4606      	mov	r6, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	d507      	bpl.n	80080ea <__smakebuf_r+0x1c>
 80080da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	2301      	movs	r3, #1
 80080e4:	6163      	str	r3, [r4, #20]
 80080e6:	b003      	add	sp, #12
 80080e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ea:	466a      	mov	r2, sp
 80080ec:	ab01      	add	r3, sp, #4
 80080ee:	f7ff ffc9 	bl	8008084 <__swhatbuf_r>
 80080f2:	9f00      	ldr	r7, [sp, #0]
 80080f4:	4605      	mov	r5, r0
 80080f6:	4639      	mov	r1, r7
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff fbbd 	bl	8007878 <_malloc_r>
 80080fe:	b948      	cbnz	r0, 8008114 <__smakebuf_r+0x46>
 8008100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008104:	059a      	lsls	r2, r3, #22
 8008106:	d4ee      	bmi.n	80080e6 <__smakebuf_r+0x18>
 8008108:	f023 0303 	bic.w	r3, r3, #3
 800810c:	f043 0302 	orr.w	r3, r3, #2
 8008110:	81a3      	strh	r3, [r4, #12]
 8008112:	e7e2      	b.n	80080da <__smakebuf_r+0xc>
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800811a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811e:	81a3      	strh	r3, [r4, #12]
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	6020      	str	r0, [r4, #0]
 8008124:	b15b      	cbz	r3, 800813e <__smakebuf_r+0x70>
 8008126:	4630      	mov	r0, r6
 8008128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800812c:	f000 f81e 	bl	800816c <_isatty_r>
 8008130:	b128      	cbz	r0, 800813e <__smakebuf_r+0x70>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	f023 0303 	bic.w	r3, r3, #3
 8008138:	f043 0301 	orr.w	r3, r3, #1
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	431d      	orrs	r5, r3
 8008142:	81a5      	strh	r5, [r4, #12]
 8008144:	e7cf      	b.n	80080e6 <__smakebuf_r+0x18>
	...

08008148 <_fstat_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	2300      	movs	r3, #0
 800814c:	4d06      	ldr	r5, [pc, #24]	@ (8008168 <_fstat_r+0x20>)
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	4611      	mov	r1, r2
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	f7f9 fb33 	bl	80017c0 <_fstat>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d102      	bne.n	8008164 <_fstat_r+0x1c>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	b103      	cbz	r3, 8008164 <_fstat_r+0x1c>
 8008162:	6023      	str	r3, [r4, #0]
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	bf00      	nop
 8008168:	2000258c 	.word	0x2000258c

0800816c <_isatty_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	2300      	movs	r3, #0
 8008170:	4d05      	ldr	r5, [pc, #20]	@ (8008188 <_isatty_r+0x1c>)
 8008172:	4604      	mov	r4, r0
 8008174:	4608      	mov	r0, r1
 8008176:	602b      	str	r3, [r5, #0]
 8008178:	f7f9 fb31 	bl	80017de <_isatty>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_isatty_r+0x1a>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_isatty_r+0x1a>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	2000258c 	.word	0x2000258c

0800818c <_sbrk_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	2300      	movs	r3, #0
 8008190:	4d05      	ldr	r5, [pc, #20]	@ (80081a8 <_sbrk_r+0x1c>)
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 fb38 	bl	800180c <_sbrk>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_sbrk_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_sbrk_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	2000258c 	.word	0x2000258c

080081ac <memchr>:
 80081ac:	4603      	mov	r3, r0
 80081ae:	b510      	push	{r4, lr}
 80081b0:	b2c9      	uxtb	r1, r1
 80081b2:	4402      	add	r2, r0
 80081b4:	4293      	cmp	r3, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	d101      	bne.n	80081be <memchr+0x12>
 80081ba:	2000      	movs	r0, #0
 80081bc:	e003      	b.n	80081c6 <memchr+0x1a>
 80081be:	7804      	ldrb	r4, [r0, #0]
 80081c0:	3301      	adds	r3, #1
 80081c2:	428c      	cmp	r4, r1
 80081c4:	d1f6      	bne.n	80081b4 <memchr+0x8>
 80081c6:	bd10      	pop	{r4, pc}

080081c8 <_init>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr

080081d4 <_fini>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr

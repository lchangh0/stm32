
rtc_ds1307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080034dc  080034dc  000044dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035dc  080035dc  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080035dc  080035dc  000045dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e4  080035e4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e4  080035e4  000045e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035e8  080035e8  000045e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080035ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08003648  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003648  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a27  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183c  00000000  00000000  0000eaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  000102e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000792  00000000  00000000  00010ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001724e  00000000  00000000  00011432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c17f  00000000  00000000  00028680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849ed  00000000  00000000  000347ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b91ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd8  00000000  00000000  000b9230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000bbf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034c4 	.word	0x080034c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080034c4 	.word	0x080034c4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8000164:	4a04      	ldr	r2, [pc, #16]	@ (8000178 <DS1307_Init+0x1c>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800016a:	2000      	movs	r0, #0
 800016c:	f000 f806 	bl	800017c <DS1307_SetClockHalt>
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	20000078 	.word	0x20000078

0800017c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <DS1307_SetClockHalt+0x14>
 800018c:	2380      	movs	r3, #128	@ 0x80
 800018e:	e000      	b.n	8000192 <DS1307_SetClockHalt+0x16>
 8000190:	2300      	movs	r3, #0
 8000192:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000194:	2000      	movs	r0, #0
 8000196:	f000 f831 	bl	80001fc <DS1307_GetRegByte>
 800019a:	4603      	mov	r3, r0
 800019c:	b25b      	sxtb	r3, r3
 800019e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80001a2:	b25a      	sxtb	r2, r3
 80001a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80001a8:	4313      	orrs	r3, r2
 80001aa:	b25b      	sxtb	r3, r3
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	4619      	mov	r1, r3
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 f805 	bl	80001c0 <DS1307_SetRegByte>
}
 80001b6:	bf00      	nop
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
	...

080001c0 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	460a      	mov	r2, r1
 80001ca:	71fb      	strb	r3, [r7, #7]
 80001cc:	4613      	mov	r3, r2
 80001ce:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	733b      	strb	r3, [r7, #12]
 80001d4:	79bb      	ldrb	r3, [r7, #6]
 80001d6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80001d8:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <DS1307_SetRegByte+0x38>)
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f107 020c 	add.w	r2, r7, #12
 80001e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2302      	movs	r3, #2
 80001e8:	21d0      	movs	r1, #208	@ 0xd0
 80001ea:	f000 ff97 	bl	800111c <HAL_I2C_Master_Transmit>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000078 	.word	0x20000078

080001fc <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af02      	add	r7, sp, #8
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <DS1307_GetRegByte+0x40>)
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	1dfa      	adds	r2, r7, #7
 800020c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	21d0      	movs	r1, #208	@ 0xd0
 8000216:	f000 ff81 	bl	800111c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800021a:	4b08      	ldr	r3, [pc, #32]	@ (800023c <DS1307_GetRegByte+0x40>)
 800021c:	6818      	ldr	r0, [r3, #0]
 800021e:	f107 020f 	add.w	r2, r7, #15
 8000222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2301      	movs	r3, #1
 800022a:	21d0      	movs	r1, #208	@ 0xd0
 800022c:	f001 f874 	bl	8001318 <HAL_I2C_Master_Receive>
	return val;
 8000230:	7bfb      	ldrb	r3, [r7, #15]
}
 8000232:	4618      	mov	r0, r3
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000078 	.word	0x20000078

08000240 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8000244:	2003      	movs	r0, #3
 8000246:	f7ff ffd9 	bl	80001fc <DS1307_GetRegByte>
 800024a:	4603      	mov	r3, r0
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f877 	bl	8000340 <DS1307_DecodeBCD>
 8000252:	4603      	mov	r3, r0
}
 8000254:	4618      	mov	r0, r3
 8000256:	bd80      	pop	{r7, pc}

08000258 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 800025c:	2004      	movs	r0, #4
 800025e:	f7ff ffcd 	bl	80001fc <DS1307_GetRegByte>
 8000262:	4603      	mov	r3, r0
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f86b 	bl	8000340 <DS1307_DecodeBCD>
 800026a:	4603      	mov	r3, r0
}
 800026c:	4618      	mov	r0, r3
 800026e:	bd80      	pop	{r7, pc}

08000270 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8000274:	2005      	movs	r0, #5
 8000276:	f7ff ffc1 	bl	80001fc <DS1307_GetRegByte>
 800027a:	4603      	mov	r3, r0
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f85f 	bl	8000340 <DS1307_DecodeBCD>
 8000282:	4603      	mov	r3, r0
}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}

08000288 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800028e:	2010      	movs	r0, #16
 8000290:	f7ff ffb4 	bl	80001fc <DS1307_GetRegByte>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	4413      	add	r3, r2
 800029c:	461a      	mov	r2, r3
 800029e:	0091      	lsls	r1, r2, #2
 80002a0:	461a      	mov	r2, r3
 80002a2:	460b      	mov	r3, r1
 80002a4:	4413      	add	r3, r2
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80002aa:	2006      	movs	r0, #6
 80002ac:	f7ff ffa6 	bl	80001fc <DS1307_GetRegByte>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f844 	bl	8000340 <DS1307_DecodeBCD>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	88fb      	ldrh	r3, [r7, #6]
 80002be:	4413      	add	r3, r2
 80002c0:	b29b      	uxth	r3, r3
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80002ca:	b580      	push	{r7, lr}
 80002cc:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80002ce:	2002      	movs	r0, #2
 80002d0:	f7ff ff94 	bl	80001fc <DS1307_GetRegByte>
 80002d4:	4603      	mov	r3, r0
 80002d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f82f 	bl	8000340 <DS1307_DecodeBCD>
 80002e2:	4603      	mov	r3, r0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80002ec:	2001      	movs	r0, #1
 80002ee:	f7ff ff85 	bl	80001fc <DS1307_GetRegByte>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f823 	bl	8000340 <DS1307_DecodeBCD>
 80002fa:	4603      	mov	r3, r0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	bd80      	pop	{r7, pc}

08000300 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ff79 	bl	80001fc <DS1307_GetRegByte>
 800030a:	4603      	mov	r3, r0
 800030c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000310:	b2db      	uxtb	r3, r3
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f814 	bl	8000340 <DS1307_DecodeBCD>
 8000318:	4603      	mov	r3, r0
}
 800031a:	4618      	mov	r0, r3
 800031c:	bd80      	pop	{r7, pc}

0800031e <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 800031e:	b580      	push	{r7, lr}
 8000320:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 8000322:	2008      	movs	r0, #8
 8000324:	f7ff ff6a 	bl	80001fc <DS1307_GetRegByte>
 8000328:	4603      	mov	r3, r0
 800032a:	b25b      	sxtb	r3, r3
}
 800032c:	4618      	mov	r0, r3
 800032e:	bd80      	pop	{r7, pc}

08000330 <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 8000334:	2009      	movs	r0, #9
 8000336:	f7ff ff61 	bl	80001fc <DS1307_GetRegByte>
 800033a:	4603      	mov	r3, r0
}
 800033c:	4618      	mov	r0, r3
 800033e:	bd80      	pop	{r7, pc}

08000340 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	091b      	lsrs	r3, r3, #4
 800034e:	b2db      	uxtb	r3, r3
 8000350:	461a      	mov	r2, r3
 8000352:	0092      	lsls	r2, r2, #2
 8000354:	4413      	add	r3, r2
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	b2da      	uxtb	r2, r3
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f003 030f 	and.w	r3, r3, #15
 8000360:	b2db      	uxtb	r3, r3
 8000362:	4413      	add	r3, r2
 8000364:	b2db      	uxtb	r3, r3
}
 8000366:	4618      	mov	r0, r3
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000374:	b0ac      	sub	sp, #176	@ 0xb0
 8000376:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fa9e 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f888 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 f91a 	bl	80005b8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000384:	f000 f8c0 	bl	8000508 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000388:	f000 f8ec 	bl	8000564 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 800038c:	4b3c      	ldr	r3, [pc, #240]	@ (8000480 <main+0x110>)
 800038e:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000392:	461d      	mov	r5, r3
 8000394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000398:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800039c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DS1307_Init(&hi2c2);
 80003a0:	4838      	ldr	r0, [pc, #224]	@ (8000484 <main+0x114>)
 80003a2:	f7ff fedb 	bl	800015c <DS1307_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* Get current date and time. */
	uint8_t date = DS1307_GetDate();
 80003a6:	f7ff ff57 	bl	8000258 <DS1307_GetDate>
 80003aa:	4603      	mov	r3, r0
 80003ac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t month = DS1307_GetMonth();
 80003b0:	f7ff ff5e 	bl	8000270 <DS1307_GetMonth>
 80003b4:	4603      	mov	r3, r0
 80003b6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	uint16_t year = DS1307_GetYear();
 80003ba:	f7ff ff65 	bl	8000288 <DS1307_GetYear>
 80003be:	4603      	mov	r3, r0
 80003c0:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	uint8_t dow = DS1307_GetDayOfWeek();
 80003c4:	f7ff ff3c 	bl	8000240 <DS1307_GetDayOfWeek>
 80003c8:	4603      	mov	r3, r0
 80003ca:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	uint8_t hour = DS1307_GetHour();
 80003ce:	f7ff ff7c 	bl	80002ca <DS1307_GetHour>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	uint8_t minute = DS1307_GetMinute();
 80003d8:	f7ff ff86 	bl	80002e8 <DS1307_GetMinute>
 80003dc:	4603      	mov	r3, r0
 80003de:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
	uint8_t second = DS1307_GetSecond();
 80003e2:	f7ff ff8d 	bl	8000300 <DS1307_GetSecond>
 80003e6:	4603      	mov	r3, r0
 80003e8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
	int8_t zone_hr = DS1307_GetTimeZoneHour();
 80003ec:	f7ff ff97 	bl	800031e <DS1307_GetTimeZoneHour>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	uint8_t zone_min = DS1307_GetTimeZoneMin();
 80003f6:	f7ff ff9b 	bl	8000330 <DS1307_GetTimeZoneMin>
 80003fa:	4603      	mov	r3, r0
 80003fc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
	char buffer[100] = { 0 };
 8000400:	2300      	movs	r3, #0
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	f107 0308 	add.w	r3, r7, #8
 8000408:	2260      	movs	r2, #96	@ 0x60
 800040a:	2100      	movs	r1, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f002 fbc9 	bl	8002ba4 <memset>
	sprintf(buffer, "ISO8601 FORMAT: %04d-%02d-%02dT%02d:%02d:%02d%+03d:%02d  %s\n",
 8000412:	f8b7 e08c 	ldrh.w	lr, [r7, #140]	@ 0x8c
 8000416:	f897 808e 	ldrb.w	r8, [r7, #142]	@ 0x8e
 800041a:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800041e:	f897 108a 	ldrb.w	r1, [r7, #138]	@ 0x8a
 8000422:	f897 0089 	ldrb.w	r0, [r7, #137]	@ 0x89
 8000426:	f897 4088 	ldrb.w	r4, [r7, #136]	@ 0x88
 800042a:	f997 5087 	ldrsb.w	r5, [r7, #135]	@ 0x87
 800042e:	f897 6086 	ldrb.w	r6, [r7, #134]	@ 0x86
 8000432:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	3390      	adds	r3, #144	@ 0x90
 800043a:	443b      	add	r3, r7
 800043c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000440:	f107 0c04 	add.w	ip, r7, #4
 8000444:	9306      	str	r3, [sp, #24]
 8000446:	9605      	str	r6, [sp, #20]
 8000448:	9504      	str	r5, [sp, #16]
 800044a:	9403      	str	r4, [sp, #12]
 800044c:	9002      	str	r0, [sp, #8]
 800044e:	9101      	str	r1, [sp, #4]
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	4643      	mov	r3, r8
 8000454:	4672      	mov	r2, lr
 8000456:	490c      	ldr	r1, [pc, #48]	@ (8000488 <main+0x118>)
 8000458:	4660      	mov	r0, ip
 800045a:	f002 fb83 	bl	8002b64 <siprintf>
			year, month, date, hour, minute, second, zone_hr, zone_min, DAYS_OF_WEEK[dow]);

	/* May show warning below. Ignore and proceed. */
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe73 	bl	800014c <strlen>
 8000466:	4603      	mov	r3, r0
 8000468:	b29a      	uxth	r2, r3
 800046a:	1d39      	adds	r1, r7, #4
 800046c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000470:	4806      	ldr	r0, [pc, #24]	@ (800048c <main+0x11c>)
 8000472:	f002 f9a3 	bl	80027bc <HAL_UART_Transmit>
	HAL_Delay(250);
 8000476:	20fa      	movs	r0, #250	@ 0xfa
 8000478:	f000 fa80 	bl	800097c <HAL_Delay>
  {
 800047c:	bf00      	nop
 800047e:	e792      	b.n	80003a6 <main+0x36>
 8000480:	08003560 	.word	0x08003560
 8000484:	2000007c 	.word	0x2000007c
 8000488:	080034dc 	.word	0x080034dc
 800048c:	200000d0 	.word	0x200000d0

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b090      	sub	sp, #64	@ 0x40
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	2228      	movs	r2, #40	@ 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fb80 	bl	8002ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b6:	2301      	movs	r3, #1
 80004b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ba:	2310      	movs	r3, #16
 80004bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004be:	2300      	movs	r3, #0
 80004c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0318 	add.w	r3, r7, #24
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fd18 	bl	8001efc <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004d2:	f000 f89f 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	230f      	movs	r3, #15
 80004d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 ff86 	bl	8002400 <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004fa:	f000 f88b 	bl	8000614 <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3740      	adds	r7, #64	@ 0x40
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <MX_I2C2_Init+0x50>)
 800050e:	4a13      	ldr	r2, [pc, #76]	@ (800055c <MX_I2C2_Init+0x54>)
 8000510:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_I2C2_Init+0x50>)
 8000514:	4a12      	ldr	r2, [pc, #72]	@ (8000560 <MX_I2C2_Init+0x58>)
 8000516:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_I2C2_Init+0x50>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <MX_I2C2_Init+0x50>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_I2C2_Init+0x50>)
 8000526:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800052a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <MX_I2C2_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_I2C2_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <MX_I2C2_Init+0x50>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_I2C2_Init+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000544:	4804      	ldr	r0, [pc, #16]	@ (8000558 <MX_I2C2_Init+0x50>)
 8000546:	f000 fca5 	bl	8000e94 <HAL_I2C_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000550:	f000 f860 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000007c 	.word	0x2000007c
 800055c:	40005800 	.word	0x40005800
 8000560:	000186a0 	.word	0x000186a0

08000564 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <MX_USART1_UART_Init+0x50>)
 800056c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800056e:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800057c:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 800058a:	220c      	movs	r2, #12
 800058c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058e:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <MX_USART1_UART_Init+0x4c>)
 800059c:	f002 f8be 	bl	800271c <HAL_UART_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005a6:	f000 f835 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200000d0 	.word	0x200000d0
 80005b4:	40013800 	.word	0x40013800

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a13      	ldr	r2, [pc, #76]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005c4:	f043 0320 	orr.w	r3, r3, #32
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0308 	and.w	r3, r3, #8
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a07      	ldr	r2, [pc, #28]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <MX_GPIO_Init+0x58>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <Error_Handler+0x8>

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <HAL_MspInit+0x5c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a14      	ldr	r2, [pc, #80]	@ (800067c <HAL_MspInit+0x5c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <HAL_MspInit+0x5c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0e      	ldr	r2, [pc, #56]	@ (800067c <HAL_MspInit+0x5c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <HAL_MspInit+0x60>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <HAL_MspInit+0x60>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000

08000684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a16      	ldr	r2, [pc, #88]	@ (80006f8 <HAL_I2C_MspInit+0x74>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d124      	bne.n	80006ee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_I2C_MspInit+0x78>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <HAL_I2C_MspInit+0x78>)
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_I2C_MspInit+0x78>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c2:	2312      	movs	r3, #18
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	480b      	ldr	r0, [pc, #44]	@ (8000700 <HAL_I2C_MspInit+0x7c>)
 80006d2:	f000 fa5b 	bl	8000b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_I2C_MspInit+0x78>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_I2C_MspInit+0x78>)
 80006dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_I2C_MspInit+0x78>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80006ee:	bf00      	nop
 80006f0:	3720      	adds	r7, #32
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40005800 	.word	0x40005800
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010c00 	.word	0x40010c00

08000704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <HAL_UART_MspInit+0x8c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d131      	bne.n	8000788 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <HAL_UART_MspInit+0x90>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <HAL_UART_MspInit+0x90>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <HAL_UART_MspInit+0x90>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <HAL_UART_MspInit+0x90>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <HAL_UART_MspInit+0x90>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_UART_MspInit+0x90>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000754:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000758:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	4619      	mov	r1, r3
 8000768:	480b      	ldr	r0, [pc, #44]	@ (8000798 <HAL_UART_MspInit+0x94>)
 800076a:	f000 fa0f 	bl	8000b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800076e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <HAL_UART_MspInit+0x94>)
 8000784:	f000 fa02 	bl	8000b8c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40013800 	.word	0x40013800
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <NMI_Handler+0x4>

080007a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <MemManage_Handler+0x4>

080007b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f8aa 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f002 f9c6 	bl	8002bb4 <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20005000 	.word	0x20005000
 8000854:	00000400 	.word	0x00000400
 8000858:	20000118 	.word	0x20000118
 800085c:	20000268 	.word	0x20000268

08000860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800086c:	f7ff fff8 	bl	8000860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000872:	490c      	ldr	r1, [pc, #48]	@ (80008a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000874:	4a0c      	ldr	r2, [pc, #48]	@ (80008a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000888:	4c09      	ldr	r4, [pc, #36]	@ (80008b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000896:	f002 f993 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089a:	f7ff fd69 	bl	8000370 <main>
  bx lr
 800089e:	4770      	bx	lr
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008a8:	080035ec 	.word	0x080035ec
  ldr r2, =_sbss
 80008ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008b0:	20000268 	.word	0x20000268

080008b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_2_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <HAL_Init+0x28>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a07      	ldr	r2, [pc, #28]	@ (80008e0 <HAL_Init+0x28>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 f92b 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ce:	200f      	movs	r0, #15
 80008d0:	f000 f808 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d4:	f7ff fea4 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_InitTick+0x54>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <HAL_InitTick+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f935 	bl	8000b72 <HAL_SYSTICK_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00e      	b.n	8000930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80a      	bhi.n	800092e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f000 f90b 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <HAL_InitTick+0x5c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000000 	.word	0x20000000
 800093c:	20000008 	.word	0x20000008
 8000940:	20000004 	.word	0x20000004

08000944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_IncTick+0x1c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_IncTick+0x20>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a03      	ldr	r2, [pc, #12]	@ (8000964 <HAL_IncTick+0x20>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000008 	.word	0x20000008
 8000964:	2000011c 	.word	0x2000011c

08000968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b02      	ldr	r3, [pc, #8]	@ (8000978 <HAL_GetTick+0x10>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	2000011c 	.word	0x2000011c

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff fff0 	bl	8000968 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <HAL_Delay+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a2:	bf00      	nop
 80009a4:	f7ff ffe0 	bl	8000968 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	@ (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	@ (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	@ 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	@ 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff90 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff49 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff5e 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff90 	bl	8000a7c <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5f 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffb0 	bl	8000ae0 <SysTick_Config>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b08b      	sub	sp, #44	@ 0x2c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	e169      	b.n	8000e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f040 8158 	bne.w	8000e6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	4a9a      	ldr	r2, [pc, #616]	@ (8000e2c <HAL_GPIO_Init+0x2a0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d05e      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bc8:	4a98      	ldr	r2, [pc, #608]	@ (8000e2c <HAL_GPIO_Init+0x2a0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d875      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bce:	4a98      	ldr	r2, [pc, #608]	@ (8000e30 <HAL_GPIO_Init+0x2a4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d058      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a96      	ldr	r2, [pc, #600]	@ (8000e30 <HAL_GPIO_Init+0x2a4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d86f      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bda:	4a96      	ldr	r2, [pc, #600]	@ (8000e34 <HAL_GPIO_Init+0x2a8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d052      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000be0:	4a94      	ldr	r2, [pc, #592]	@ (8000e34 <HAL_GPIO_Init+0x2a8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d869      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000be6:	4a94      	ldr	r2, [pc, #592]	@ (8000e38 <HAL_GPIO_Init+0x2ac>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d04c      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bec:	4a92      	ldr	r2, [pc, #584]	@ (8000e38 <HAL_GPIO_Init+0x2ac>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d863      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bf2:	4a92      	ldr	r2, [pc, #584]	@ (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d046      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bf8:	4a90      	ldr	r2, [pc, #576]	@ (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d85d      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d82a      	bhi.n	8000c58 <HAL_GPIO_Init+0xcc>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d859      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000c06:	a201      	add	r2, pc, #4	@ (adr r2, 8000c0c <HAL_GPIO_Init+0x80>)
 8000c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0c:	08000c87 	.word	0x08000c87
 8000c10:	08000c61 	.word	0x08000c61
 8000c14:	08000c73 	.word	0x08000c73
 8000c18:	08000cb5 	.word	0x08000cb5
 8000c1c:	08000cbb 	.word	0x08000cbb
 8000c20:	08000cbb 	.word	0x08000cbb
 8000c24:	08000cbb 	.word	0x08000cbb
 8000c28:	08000cbb 	.word	0x08000cbb
 8000c2c:	08000cbb 	.word	0x08000cbb
 8000c30:	08000cbb 	.word	0x08000cbb
 8000c34:	08000cbb 	.word	0x08000cbb
 8000c38:	08000cbb 	.word	0x08000cbb
 8000c3c:	08000cbb 	.word	0x08000cbb
 8000c40:	08000cbb 	.word	0x08000cbb
 8000c44:	08000cbb 	.word	0x08000cbb
 8000c48:	08000cbb 	.word	0x08000cbb
 8000c4c:	08000cbb 	.word	0x08000cbb
 8000c50:	08000c69 	.word	0x08000c69
 8000c54:	08000c7d 	.word	0x08000c7d
 8000c58:	4a79      	ldr	r2, [pc, #484]	@ (8000e40 <HAL_GPIO_Init+0x2b4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c5e:	e02c      	b.n	8000cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	623b      	str	r3, [r7, #32]
          break;
 8000c66:	e029      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	623b      	str	r3, [r7, #32]
          break;
 8000c70:	e024      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	3308      	adds	r3, #8
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e01f      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	330c      	adds	r3, #12
 8000c82:	623b      	str	r3, [r7, #32]
          break;
 8000c84:	e01a      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e013      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d105      	bne.n	8000ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	611a      	str	r2, [r3, #16]
          break;
 8000ca6:	e009      	b.n	8000cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	615a      	str	r2, [r3, #20]
          break;
 8000cb2:	e003      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
          break;
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          break;
 8000cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2bff      	cmp	r3, #255	@ 0xff
 8000cc0:	d801      	bhi.n	8000cc6 <HAL_GPIO_Init+0x13a>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	e001      	b.n	8000cca <HAL_GPIO_Init+0x13e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2bff      	cmp	r3, #255	@ 0xff
 8000cd0:	d802      	bhi.n	8000cd8 <HAL_GPIO_Init+0x14c>
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0x152>
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	3b08      	subs	r3, #8
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	401a      	ands	r2, r3
 8000cf0:	6a39      	ldr	r1, [r7, #32]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 80b1 	beq.w	8000e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a4c      	ldr	r2, [pc, #304]	@ (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b4a      	ldr	r3, [pc, #296]	@ (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d24:	4a48      	ldr	r2, [pc, #288]	@ (8000e48 <HAL_GPIO_Init+0x2bc>)
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a40      	ldr	r2, [pc, #256]	@ (8000e4c <HAL_GPIO_Init+0x2c0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d013      	beq.n	8000d78 <HAL_GPIO_Init+0x1ec>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a3f      	ldr	r2, [pc, #252]	@ (8000e50 <HAL_GPIO_Init+0x2c4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d00d      	beq.n	8000d74 <HAL_GPIO_Init+0x1e8>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e54 <HAL_GPIO_Init+0x2c8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d007      	beq.n	8000d70 <HAL_GPIO_Init+0x1e4>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a3d      	ldr	r2, [pc, #244]	@ (8000e58 <HAL_GPIO_Init+0x2cc>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d101      	bne.n	8000d6c <HAL_GPIO_Init+0x1e0>
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e006      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	e004      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d70:	2302      	movs	r3, #2
 8000d72:	e002      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d7c:	f002 0203 	and.w	r2, r2, #3
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	4093      	lsls	r3, r2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8a:	492f      	ldr	r1, [pc, #188]	@ (8000e48 <HAL_GPIO_Init+0x2bc>)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	492c      	ldr	r1, [pc, #176]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	608b      	str	r3, [r1, #8]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4928      	ldr	r1, [pc, #160]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dcc:	4b23      	ldr	r3, [pc, #140]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	4922      	ldr	r1, [pc, #136]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60cb      	str	r3, [r1, #12]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dda:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	491e      	ldr	r1, [pc, #120]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d006      	beq.n	8000e02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df4:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4918      	ldr	r1, [pc, #96]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	604b      	str	r3, [r1, #4]
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4914      	ldr	r1, [pc, #80]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d021      	beq.n	8000e60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	490e      	ldr	r1, [pc, #56]	@ (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
 8000e28:	e021      	b.n	8000e6e <HAL_GPIO_Init+0x2e2>
 8000e2a:	bf00      	nop
 8000e2c:	10320000 	.word	0x10320000
 8000e30:	10310000 	.word	0x10310000
 8000e34:	10220000 	.word	0x10220000
 8000e38:	10210000 	.word	0x10210000
 8000e3c:	10120000 	.word	0x10120000
 8000e40:	10110000 	.word	0x10110000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	40010c00 	.word	0x40010c00
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40011400 	.word	0x40011400
 8000e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <HAL_GPIO_Init+0x304>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4909      	ldr	r1, [pc, #36]	@ (8000e90 <HAL_GPIO_Init+0x304>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e70:	3301      	adds	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f47f ae8e 	bne.w	8000ba0 <HAL_GPIO_Init+0x14>
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	372c      	adds	r7, #44	@ 0x2c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40010400 	.word	0x40010400

08000e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e12b      	b.n	80010fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d106      	bne.n	8000ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fbe2 	bl	8000684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2224      	movs	r2, #36	@ 0x24
 8000ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0201 	bic.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ee6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ef8:	f001 fbca 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8000efc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4a81      	ldr	r2, [pc, #516]	@ (8001108 <HAL_I2C_Init+0x274>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d807      	bhi.n	8000f18 <HAL_I2C_Init+0x84>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a80      	ldr	r2, [pc, #512]	@ (800110c <HAL_I2C_Init+0x278>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	bf94      	ite	ls
 8000f10:	2301      	movls	r3, #1
 8000f12:	2300      	movhi	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	e006      	b.n	8000f26 <HAL_I2C_Init+0x92>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4a7d      	ldr	r2, [pc, #500]	@ (8001110 <HAL_I2C_Init+0x27c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	bf94      	ite	ls
 8000f20:	2301      	movls	r3, #1
 8000f22:	2300      	movhi	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e0e7      	b.n	80010fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4a78      	ldr	r2, [pc, #480]	@ (8001114 <HAL_I2C_Init+0x280>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9b      	lsrs	r3, r3, #18
 8000f38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001108 <HAL_I2C_Init+0x274>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d802      	bhi.n	8000f68 <HAL_I2C_Init+0xd4>
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3301      	adds	r3, #1
 8000f66:	e009      	b.n	8000f7c <HAL_I2C_Init+0xe8>
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	4a69      	ldr	r2, [pc, #420]	@ (8001118 <HAL_I2C_Init+0x284>)
 8000f74:	fba2 2303 	umull	r2, r3, r2, r3
 8000f78:	099b      	lsrs	r3, r3, #6
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	495c      	ldr	r1, [pc, #368]	@ (8001108 <HAL_I2C_Init+0x274>)
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d819      	bhi.n	8000fd0 <HAL_I2C_Init+0x13c>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1e59      	subs	r1, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000faa:	1c59      	adds	r1, r3, #1
 8000fac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000fb0:	400b      	ands	r3, r1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00a      	beq.n	8000fcc <HAL_I2C_Init+0x138>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1e59      	subs	r1, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fca:	e051      	b.n	8001070 <HAL_I2C_Init+0x1dc>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e04f      	b.n	8001070 <HAL_I2C_Init+0x1dc>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d111      	bne.n	8000ffc <HAL_I2C_Init+0x168>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	440b      	add	r3, r1
 8000fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fea:	3301      	adds	r3, #1
 8000fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf0c      	ite	eq
 8000ff4:	2301      	moveq	r3, #1
 8000ff6:	2300      	movne	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	e012      	b.n	8001022 <HAL_I2C_Init+0x18e>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1e58      	subs	r0, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6859      	ldr	r1, [r3, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	0099      	lsls	r1, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001012:	3301      	adds	r3, #1
 8001014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_I2C_Init+0x196>
 8001026:	2301      	movs	r3, #1
 8001028:	e022      	b.n	8001070 <HAL_I2C_Init+0x1dc>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10e      	bne.n	8001050 <HAL_I2C_Init+0x1bc>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1e58      	subs	r0, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6859      	ldr	r1, [r3, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	440b      	add	r3, r1
 8001040:	fbb0 f3f3 	udiv	r3, r0, r3
 8001044:	3301      	adds	r3, #1
 8001046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800104e:	e00f      	b.n	8001070 <HAL_I2C_Init+0x1dc>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1e58      	subs	r0, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6859      	ldr	r1, [r3, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	0099      	lsls	r1, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	fbb0 f3f3 	udiv	r3, r0, r3
 8001066:	3301      	adds	r3, #1
 8001068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	6809      	ldr	r1, [r1, #0]
 8001074:	4313      	orrs	r3, r2
 8001076:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69da      	ldr	r2, [r3, #28]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800109e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6911      	ldr	r1, [r2, #16]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68d2      	ldr	r2, [r2, #12]
 80010aa:	4311      	orrs	r1, r2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2220      	movs	r2, #32
 80010ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	000186a0 	.word	0x000186a0
 800110c:	001e847f 	.word	0x001e847f
 8001110:	003d08ff 	.word	0x003d08ff
 8001114:	431bde83 	.word	0x431bde83
 8001118:	10624dd3 	.word	0x10624dd3

0800111c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af02      	add	r7, sp, #8
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	461a      	mov	r2, r3
 8001128:	460b      	mov	r3, r1
 800112a:	817b      	strh	r3, [r7, #10]
 800112c:	4613      	mov	r3, r2
 800112e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff fc1a 	bl	8000968 <HAL_GetTick>
 8001134:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b20      	cmp	r3, #32
 8001140:	f040 80e0 	bne.w	8001304 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2319      	movs	r3, #25
 800114a:	2201      	movs	r2, #1
 800114c:	4970      	ldr	r1, [pc, #448]	@ (8001310 <HAL_I2C_Master_Transmit+0x1f4>)
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 fc9e 	bl	8001a90 <I2C_WaitOnFlagUntilTimeout>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800115a:	2302      	movs	r3, #2
 800115c:	e0d3      	b.n	8001306 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_I2C_Master_Transmit+0x50>
 8001168:	2302      	movs	r3, #2
 800116a:	e0cc      	b.n	8001306 <HAL_I2C_Master_Transmit+0x1ea>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b01      	cmp	r3, #1
 8001180:	d007      	beq.n	8001192 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2221      	movs	r2, #33	@ 0x21
 80011a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2210      	movs	r2, #16
 80011ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	893a      	ldrh	r2, [r7, #8]
 80011c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4a50      	ldr	r2, [pc, #320]	@ (8001314 <HAL_I2C_Master_Transmit+0x1f8>)
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011d4:	8979      	ldrh	r1, [r7, #10]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	6a3a      	ldr	r2, [r7, #32]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 fb08 	bl	80017f0 <I2C_MasterRequestWrite>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e08d      	b.n	8001306 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001200:	e066      	b.n	80012d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	6a39      	ldr	r1, [r7, #32]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 fd5c 	bl	8001cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00d      	beq.n	800122e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	2b04      	cmp	r3, #4
 8001218:	d107      	bne.n	800122a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001228:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e06b      	b.n	8001306 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001248:	b29b      	uxth	r3, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	b29a      	uxth	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001256:	3b01      	subs	r3, #1
 8001258:	b29a      	uxth	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b04      	cmp	r3, #4
 800126a:	d11b      	bne.n	80012a4 <HAL_I2C_Master_Transmit+0x188>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001270:	2b00      	cmp	r3, #0
 8001272:	d017      	beq.n	80012a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800128e:	b29b      	uxth	r3, r3
 8001290:	3b01      	subs	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800129c:	3b01      	subs	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	6a39      	ldr	r1, [r7, #32]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fd53 	bl	8001d54 <I2C_WaitOnBTFFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00d      	beq.n	80012d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d107      	bne.n	80012cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e01a      	b.n	8001306 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d194      	bne.n	8001202 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2220      	movs	r2, #32
 80012ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	e000      	b.n	8001306 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001304:	2302      	movs	r3, #2
  }
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	00100002 	.word	0x00100002
 8001314:	ffff0000 	.word	0xffff0000

08001318 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	461a      	mov	r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	817b      	strh	r3, [r7, #10]
 8001328:	4613      	mov	r3, r2
 800132a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff fb1a 	bl	8000968 <HAL_GetTick>
 8001334:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b20      	cmp	r3, #32
 8001340:	f040 824b 	bne.w	80017da <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2319      	movs	r3, #25
 800134a:	2201      	movs	r2, #1
 800134c:	497f      	ldr	r1, [pc, #508]	@ (800154c <HAL_I2C_Master_Receive+0x234>)
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 fb9e 	bl	8001a90 <I2C_WaitOnFlagUntilTimeout>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	e23e      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_I2C_Master_Receive+0x54>
 8001368:	2302      	movs	r3, #2
 800136a:	e237      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b01      	cmp	r3, #1
 8001380:	d007      	beq.n	8001392 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2222      	movs	r2, #34	@ 0x22
 80013a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2210      	movs	r2, #16
 80013ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	893a      	ldrh	r2, [r7, #8]
 80013c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4a5f      	ldr	r2, [pc, #380]	@ (8001550 <HAL_I2C_Master_Receive+0x238>)
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013d4:	8979      	ldrh	r1, [r7, #10]
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fa8a 	bl	80018f4 <I2C_MasterRequestRead>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1f8      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d113      	bne.n	800141a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e1cc      	b.n	80017b4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800141e:	2b01      	cmp	r3, #1
 8001420:	d11e      	bne.n	8001460 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001430:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001432:	b672      	cpsid	i
}
 8001434:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800145a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800145c:	b662      	cpsie	i
}
 800145e:	e035      	b.n	80014cc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001464:	2b02      	cmp	r3, #2
 8001466:	d11e      	bne.n	80014a6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001476:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014a2:	b662      	cpsie	i
}
 80014a4:	e012      	b.n	80014cc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80014b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80014cc:	e172      	b.n	80017b4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	f200 811f 	bhi.w	8001716 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d123      	bne.n	8001528 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 fc7d 	bl	8001de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e173      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800151c:	b29b      	uxth	r3, r3
 800151e:	3b01      	subs	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001526:	e145      	b.n	80017b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152c:	2b02      	cmp	r3, #2
 800152e:	d152      	bne.n	80015d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001536:	2200      	movs	r2, #0
 8001538:	4906      	ldr	r1, [pc, #24]	@ (8001554 <HAL_I2C_Master_Receive+0x23c>)
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 faa8 	bl	8001a90 <I2C_WaitOnFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e148      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
 800154a:	bf00      	nop
 800154c:	00100002 	.word	0x00100002
 8001550:	ffff0000 	.word	0xffff0000
 8001554:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800156a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001588:	3b01      	subs	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800159e:	b662      	cpsie	i
}
 80015a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015be:	3b01      	subs	r3, #1
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80015d4:	e0ee      	b.n	80017b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015dc:	2200      	movs	r2, #0
 80015de:	4981      	ldr	r1, [pc, #516]	@ (80017e4 <HAL_I2C_Master_Receive+0x4cc>)
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fa55 	bl	8001a90 <I2C_WaitOnFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0f5      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001620:	3b01      	subs	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162c:	b29b      	uxth	r3, r3
 800162e:	3b01      	subs	r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001636:	4b6c      	ldr	r3, [pc, #432]	@ (80017e8 <HAL_I2C_Master_Receive+0x4d0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	4a6b      	ldr	r2, [pc, #428]	@ (80017ec <HAL_I2C_Master_Receive+0x4d4>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0a1a      	lsrs	r2, r3, #8
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00da      	lsls	r2, r3, #3
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	3b01      	subs	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d118      	bne.n	800168e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800167e:	b662      	cpsie	i
}
 8001680:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0a6      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b04      	cmp	r3, #4
 800169a:	d1d9      	bne.n	8001650 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016de:	b662      	cpsie	i
}
 80016e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001714:	e04e      	b.n	80017b4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001718:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 fb62 	bl	8001de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e058      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b04      	cmp	r3, #4
 8001768:	d124      	bne.n	80017b4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176e:	2b03      	cmp	r3, #3
 8001770:	d107      	bne.n	8001782 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001780:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f47f ae88 	bne.w	80014ce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2220      	movs	r2, #32
 80017c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80017da:	2302      	movs	r3, #2
  }
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	00010004 	.word	0x00010004
 80017e8:	20000000 	.word	0x20000000
 80017ec:	14f8b589 	.word	0x14f8b589

080017f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	460b      	mov	r3, r1
 80017fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d006      	beq.n	800181a <I2C_MasterRequestWrite+0x2a>
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d003      	beq.n	800181a <I2C_MasterRequestWrite+0x2a>
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001818:	d108      	bne.n	800182c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e00b      	b.n	8001844 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001830:	2b12      	cmp	r3, #18
 8001832:	d107      	bne.n	8001844 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001842:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f91d 	bl	8001a90 <I2C_WaitOnFlagUntilTimeout>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800186a:	d103      	bne.n	8001874 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001872:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e035      	b.n	80018e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001880:	d108      	bne.n	8001894 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	e01b      	b.n	80018cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	11db      	asrs	r3, r3, #7
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f003 0306 	and.w	r3, r3, #6
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f063 030f 	orn	r3, r3, #15
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	490e      	ldr	r1, [pc, #56]	@ (80018ec <I2C_MasterRequestWrite+0xfc>)
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f966 	bl	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e010      	b.n	80018e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4907      	ldr	r1, [pc, #28]	@ (80018f0 <I2C_MasterRequestWrite+0x100>)
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f956 	bl	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	00010008 	.word	0x00010008
 80018f0:	00010002 	.word	0x00010002

080018f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	460b      	mov	r3, r1
 8001902:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001908:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001918:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d006      	beq.n	800192e <I2C_MasterRequestRead+0x3a>
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d003      	beq.n	800192e <I2C_MasterRequestRead+0x3a>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800192c:	d108      	bne.n	8001940 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e00b      	b.n	8001958 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001944:	2b11      	cmp	r3, #17
 8001946:	d107      	bne.n	8001958 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001956:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f893 	bl	8001a90 <I2C_WaitOnFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800197e:	d103      	bne.n	8001988 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001986:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e079      	b.n	8001a80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001994:	d108      	bne.n	80019a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	e05f      	b.n	8001a68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019a8:	897b      	ldrh	r3, [r7, #10]
 80019aa:	11db      	asrs	r3, r3, #7
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f003 0306 	and.w	r3, r3, #6
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f063 030f 	orn	r3, r3, #15
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4930      	ldr	r1, [pc, #192]	@ (8001a88 <I2C_MasterRequestRead+0x194>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f8dc 	bl	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e054      	b.n	8001a80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4929      	ldr	r1, [pc, #164]	@ (8001a8c <I2C_MasterRequestRead+0x198>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f8cc 	bl	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e044      	b.n	8001a80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f831 	bl	8001a90 <I2C_WaitOnFlagUntilTimeout>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00d      	beq.n	8001a50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a42:	d103      	bne.n	8001a4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a4a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e017      	b.n	8001a80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a50:	897b      	ldrh	r3, [r7, #10]
 8001a52:	11db      	asrs	r3, r3, #7
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f003 0306 	and.w	r3, r3, #6
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f063 030e 	orn	r3, r3, #14
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4907      	ldr	r1, [pc, #28]	@ (8001a8c <I2C_MasterRequestRead+0x198>)
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f888 	bl	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	00010008 	.word	0x00010008
 8001a8c:	00010002 	.word	0x00010002

08001a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa0:	e048      	b.n	8001b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d044      	beq.n	8001b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aaa:	f7fe ff5d 	bl	8000968 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d302      	bcc.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d139      	bne.n	8001b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10d      	bne.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	e00c      	b.n	8001b00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	43da      	mvns	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	4013      	ands	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d116      	bne.n	8001b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	f043 0220 	orr.w	r2, r3, #32
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e023      	b.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10d      	bne.n	8001b5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	43da      	mvns	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	e00c      	b.n	8001b74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4013      	ands	r3, r2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d093      	beq.n	8001aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b92:	e071      	b.n	8001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba2:	d123      	bne.n	8001bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f043 0204 	orr.w	r2, r3, #4
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e067      	b.n	8001cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d041      	beq.n	8001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf4:	f7fe feb8 	bl	8000968 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d302      	bcc.n	8001c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d136      	bne.n	8001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10c      	bne.n	8001c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf14      	ite	ne
 8001c26:	2301      	movne	r3, #1
 8001c28:	2300      	moveq	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	e00b      	b.n	8001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	43da      	mvns	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d016      	beq.n	8001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e021      	b.n	8001cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10c      	bne.n	8001c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e00b      	b.n	8001cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f47f af6d 	bne.w	8001b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd0:	e034      	b.n	8001d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f8e3 	bl	8001e9e <I2C_IsAcknowledgeFailed>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e034      	b.n	8001d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d028      	beq.n	8001d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cea:	f7fe fe3d 	bl	8000968 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d302      	bcc.n	8001d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11d      	bne.n	8001d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0a:	2b80      	cmp	r3, #128	@ 0x80
 8001d0c:	d016      	beq.n	8001d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e007      	b.n	8001d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d46:	2b80      	cmp	r3, #128	@ 0x80
 8001d48:	d1c3      	bne.n	8001cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d60:	e034      	b.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f89b 	bl	8001e9e <I2C_IsAcknowledgeFailed>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e034      	b.n	8001ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d028      	beq.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7a:	f7fe fdf5 	bl	8000968 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d11d      	bne.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d016      	beq.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f043 0220 	orr.w	r2, r3, #32
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e007      	b.n	8001ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d1c3      	bne.n	8001d62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001df0:	e049      	b.n	8001e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d119      	bne.n	8001e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0210 	mvn.w	r2, #16
 8001e08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e030      	b.n	8001e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e34:	f7fe fd98 	bl	8000968 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d302      	bcc.n	8001e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11d      	bne.n	8001e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e54:	2b40      	cmp	r3, #64	@ 0x40
 8001e56:	d016      	beq.n	8001e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f043 0220 	orr.w	r2, r3, #32
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e007      	b.n	8001e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e90:	2b40      	cmp	r3, #64	@ 0x40
 8001e92:	d1ae      	bne.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb4:	d11b      	bne.n	8001eee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ebe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f043 0204 	orr.w	r2, r3, #4
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e272      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8087 	beq.w	800202a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f1c:	4b92      	ldr	r3, [pc, #584]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d00c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f28:	4b8f      	ldr	r3, [pc, #572]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d112      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5e>
 8001f34:	4b8c      	ldr	r3, [pc, #560]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f40:	d10b      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f42:	4b89      	ldr	r3, [pc, #548]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d06c      	beq.n	8002028 <HAL_RCC_OscConfig+0x12c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d168      	bne.n	8002028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e24c      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x76>
 8001f64:	4b80      	ldr	r3, [pc, #512]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a7f      	ldr	r2, [pc, #508]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	e02e      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x98>
 8001f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7a      	ldr	r2, [pc, #488]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b78      	ldr	r3, [pc, #480]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a77      	ldr	r2, [pc, #476]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e01d      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xbc>
 8001f9e:	4b72      	ldr	r3, [pc, #456]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a71      	ldr	r2, [pc, #452]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b6f      	ldr	r3, [pc, #444]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6e      	ldr	r2, [pc, #440]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0xd4>
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b68      	ldr	r3, [pc, #416]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a67      	ldr	r2, [pc, #412]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fcc6 	bl	8000968 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7fe fcc2 	bl	8000968 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	@ 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e200      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe4>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe fcb2 	bl	8000968 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7fe fcae 	bl	8000968 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1ec      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	4b53      	ldr	r3, [pc, #332]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x10c>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d063      	beq.n	80020fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002036:	4b4c      	ldr	r3, [pc, #304]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d11c      	bne.n	8002088 <HAL_RCC_OscConfig+0x18c>
 800204e:	4b46      	ldr	r3, [pc, #280]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d116      	bne.n	8002088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x176>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e1c0      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4939      	ldr	r1, [pc, #228]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	e03a      	b.n	80020fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe fc67 	bl	8000968 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209e:	f7fe fc63 	bl	8000968 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e1a1      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4927      	ldr	r1, [pc, #156]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <HAL_RCC_OscConfig+0x270>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fc46 	bl	8000968 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7fe fc42 	bl	8000968 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e180      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d03a      	beq.n	8002180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d019      	beq.n	8002146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <HAL_RCC_OscConfig+0x274>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7fe fc26 	bl	8000968 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002120:	f7fe fc22 	bl	8000968 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e160      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002132:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <HAL_RCC_OscConfig+0x26c>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800213e:	2001      	movs	r0, #1
 8002140:	f000 face 	bl	80026e0 <RCC_Delay>
 8002144:	e01c      	b.n	8002180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <HAL_RCC_OscConfig+0x274>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7fe fc0c 	bl	8000968 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002152:	e00f      	b.n	8002174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe fc08 	bl	8000968 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d908      	bls.n	8002174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e146      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	42420000 	.word	0x42420000
 8002170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	4b92      	ldr	r3, [pc, #584]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e9      	bne.n	8002154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a6 	beq.w	80022da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002192:	4b8b      	ldr	r3, [pc, #556]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10d      	bne.n	80021ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b88      	ldr	r3, [pc, #544]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a87      	ldr	r2, [pc, #540]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	61d3      	str	r3, [r2, #28]
 80021aa:	4b85      	ldr	r3, [pc, #532]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b82      	ldr	r3, [pc, #520]	@ (80023c4 <HAL_RCC_OscConfig+0x4c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d118      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c6:	4b7f      	ldr	r3, [pc, #508]	@ (80023c4 <HAL_RCC_OscConfig+0x4c8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7e      	ldr	r2, [pc, #504]	@ (80023c4 <HAL_RCC_OscConfig+0x4c8>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d2:	f7fe fbc9 	bl	8000968 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7fe fbc5 	bl	8000968 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b64      	cmp	r3, #100	@ 0x64
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e103      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b75      	ldr	r3, [pc, #468]	@ (80023c4 <HAL_RCC_OscConfig+0x4c8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x312>
 8002200:	4b6f      	ldr	r3, [pc, #444]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a6e      	ldr	r2, [pc, #440]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	e02d      	b.n	800226a <HAL_RCC_OscConfig+0x36e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x334>
 8002216:	4b6a      	ldr	r3, [pc, #424]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a69      	ldr	r2, [pc, #420]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6213      	str	r3, [r2, #32]
 8002222:	4b67      	ldr	r3, [pc, #412]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a66      	ldr	r2, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	e01c      	b.n	800226a <HAL_RCC_OscConfig+0x36e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d10c      	bne.n	8002252 <HAL_RCC_OscConfig+0x356>
 8002238:	4b61      	ldr	r3, [pc, #388]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4a60      	ldr	r2, [pc, #384]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6213      	str	r3, [r2, #32]
 8002244:	4b5e      	ldr	r3, [pc, #376]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a5d      	ldr	r2, [pc, #372]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e00b      	b.n	800226a <HAL_RCC_OscConfig+0x36e>
 8002252:	4b5b      	ldr	r3, [pc, #364]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a5a      	ldr	r2, [pc, #360]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	4b58      	ldr	r3, [pc, #352]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a57      	ldr	r2, [pc, #348]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d015      	beq.n	800229e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7fe fb79 	bl	8000968 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe fb75 	bl	8000968 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e0b1      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002290:	4b4b      	ldr	r3, [pc, #300]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ee      	beq.n	800227a <HAL_RCC_OscConfig+0x37e>
 800229c:	e014      	b.n	80022c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7fe fb63 	bl	8000968 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fb5f 	bl	8000968 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e09b      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022bc:	4b40      	ldr	r3, [pc, #256]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1ee      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d105      	bne.n	80022da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ce:	4b3c      	ldr	r3, [pc, #240]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4a3b      	ldr	r2, [pc, #236]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8087 	beq.w	80023f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e4:	4b36      	ldr	r3, [pc, #216]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d061      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d146      	bne.n	8002386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f8:	4b33      	ldr	r3, [pc, #204]	@ (80023c8 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fb33 	bl	8000968 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7fe fb2f 	bl	8000968 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e06d      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002318:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800232c:	d108      	bne.n	8002340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800232e:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4921      	ldr	r1, [pc, #132]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a19      	ldr	r1, [r3, #32]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	430b      	orrs	r3, r1
 8002352:	491b      	ldr	r1, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <HAL_RCC_OscConfig+0x4cc>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe fb03 	bl	8000968 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7fe faff 	bl	8000968 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e03d      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x46a>
 8002384:	e035      	b.n	80023f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <HAL_RCC_OscConfig+0x4cc>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe faec 	bl	8000968 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fae8 	bl	8000968 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e026      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x498>
 80023b2:	e01e      	b.n	80023f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e019      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
 80023c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCC_OscConfig+0x500>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0d0      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b6a      	ldr	r3, [pc, #424]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b67      	ldr	r3, [pc, #412]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4965      	ldr	r1, [pc, #404]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a58      	ldr	r2, [pc, #352]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002466:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a52      	ldr	r2, [pc, #328]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800247e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d040      	beq.n	8002520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d115      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024be:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e073      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06b      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024de:	4b39      	ldr	r3, [pc, #228]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4936      	ldr	r1, [pc, #216]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f0:	f7fe fa3a 	bl	8000968 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	e00a      	b.n	800250e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7fe fa36 	bl	8000968 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e053      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 020c 	and.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d1eb      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002520:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d210      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4922      	ldr	r1, [pc, #136]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f821 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8002592:	4602      	mov	r2, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490a      	ldr	r1, [pc, #40]	@ (80025c8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <HAL_RCC_ClockConfig+0x1cc>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_RCC_ClockConfig+0x1d0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe f998 	bl	80008e4 <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40021000 	.word	0x40021000
 80025c8:	0800357c 	.word	0x0800357c
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x94>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d002      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x30>
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d003      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x36>
 8002602:	e027      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_RCC_GetSysClockFreq+0x98>)
 8002606:	613b      	str	r3, [r7, #16]
      break;
 8002608:	e027      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	0c9b      	lsrs	r3, r3, #18
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	4a17      	ldr	r2, [pc, #92]	@ (8002670 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d010      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x94>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	0c5b      	lsrs	r3, r3, #17
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	4a11      	ldr	r2, [pc, #68]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xa0>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <HAL_RCC_GetSysClockFreq+0x98>)
 8002636:	fb03 f202 	mul.w	r2, r3, r2
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e004      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0c      	ldr	r2, [pc, #48]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	613b      	str	r3, [r7, #16]
      break;
 8002652:	e002      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_GetSysClockFreq+0x98>)
 8002656:	613b      	str	r3, [r7, #16]
      break;
 8002658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265a:	693b      	ldr	r3, [r7, #16]
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	007a1200 	.word	0x007a1200
 8002670:	08003594 	.word	0x08003594
 8002674:	080035a4 	.word	0x080035a4
 8002678:	003d0900 	.word	0x003d0900

0800267c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002680:	4b02      	ldr	r3, [pc, #8]	@ (800268c <HAL_RCC_GetHCLKFreq+0x10>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	20000000 	.word	0x20000000

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002694:	f7ff fff2 	bl	800267c <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4903      	ldr	r1, [pc, #12]	@ (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	0800358c 	.word	0x0800358c

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026bc:	f7ff ffde 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0adb      	lsrs	r3, r3, #11
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	@ (80026dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	0800358c 	.word	0x0800358c

080026e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <RCC_Delay+0x34>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <RCC_Delay+0x38>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0a5b      	lsrs	r3, r3, #9
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026fc:	bf00      	nop
  }
  while (Delay --);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	60fa      	str	r2, [r7, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f9      	bne.n	80026fc <RCC_Delay+0x1c>
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000000 	.word	0x20000000
 8002718:	10624dd3 	.word	0x10624dd3

0800271c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e042      	b.n	80027b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fd ffde 	bl	8000704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	@ 0x24
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800275e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f971 	bl	8002a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d175      	bne.n	80028c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_UART_Transmit+0x2c>
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e06e      	b.n	80028ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2221      	movs	r2, #33	@ 0x21
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027fa:	f7fe f8b5 	bl	8000968 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002814:	d108      	bne.n	8002828 <HAL_UART_Transmit+0x6c>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d104      	bne.n	8002828 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e003      	b.n	8002830 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002830:	e02e      	b.n	8002890 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	2180      	movs	r1, #128	@ 0x80
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f848 	bl	80028d2 <UART_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e03a      	b.n	80028ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10b      	bne.n	8002872 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3302      	adds	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	e007      	b.n	8002882 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3301      	adds	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1cb      	bne.n	8002832 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2140      	movs	r1, #64	@ 0x40
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f814 	bl	80028d2 <UART_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e006      	b.n	80028ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e000      	b.n	80028ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
  }
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e2:	e03b      	b.n	800295c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ea:	d037      	beq.n	800295c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ec:	f7fe f83c 	bl	8000968 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	6a3a      	ldr	r2, [r7, #32]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d302      	bcc.n	8002902 <UART_WaitOnFlagUntilTimeout+0x30>
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e03a      	b.n	800297c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d023      	beq.n	800295c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b80      	cmp	r3, #128	@ 0x80
 8002918:	d020      	beq.n	800295c <UART_WaitOnFlagUntilTimeout+0x8a>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b40      	cmp	r3, #64	@ 0x40
 800291e:	d01d      	beq.n	800295c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b08      	cmp	r3, #8
 800292c:	d116      	bne.n	800295c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f81d 	bl	8002984 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2208      	movs	r2, #8
 800294e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e00f      	b.n	800297c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4013      	ands	r3, r2
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	429a      	cmp	r2, r3
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	429a      	cmp	r2, r3
 8002978:	d0b4      	beq.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b095      	sub	sp, #84	@ 0x54
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80029ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e5      	bne.n	800298c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3314      	adds	r3, #20
 80029c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	e853 3f00 	ldrex	r3, [r3]
 80029ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029e8:	e841 2300 	strex	r3, r2, [r1]
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e5      	bne.n	80029c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d119      	bne.n	8002a30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	330c      	adds	r3, #12
 8002a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	e853 3f00 	ldrex	r3, [r3]
 8002a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f023 0310 	bic.w	r3, r3, #16
 8002a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a1c:	61ba      	str	r2, [r7, #24]
 8002a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	e841 2300 	strex	r3, r2, [r1]
 8002a28:	613b      	str	r3, [r7, #16]
   return(result);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e5      	bne.n	80029fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a3e:	bf00      	nop
 8002a40:	3754      	adds	r7, #84	@ 0x54
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a82:	f023 030c 	bic.w	r3, r3, #12
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8002b5c <UART_SetConfig+0x114>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d103      	bne.n	8002ab8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ab0:	f7ff fe02 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	e002      	b.n	8002abe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ab8:	f7ff fdea 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8002abc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	441a      	add	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <UART_SetConfig+0x118>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	0119      	lsls	r1, r3, #4
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009a      	lsls	r2, r3, #2
 8002ae8:	441a      	add	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <UART_SetConfig+0x118>)
 8002af6:	fba3 0302 	umull	r0, r3, r3, r2
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2064      	movs	r0, #100	@ 0x64
 8002afe:	fb00 f303 	mul.w	r3, r0, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	3332      	adds	r3, #50	@ 0x32
 8002b08:	4a15      	ldr	r2, [pc, #84]	@ (8002b60 <UART_SetConfig+0x118>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b14:	4419      	add	r1, r3
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009a      	lsls	r2, r3, #2
 8002b20:	441a      	add	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <UART_SetConfig+0x118>)
 8002b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2064      	movs	r0, #100	@ 0x64
 8002b36:	fb00 f303 	mul.w	r3, r0, r3
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	3332      	adds	r3, #50	@ 0x32
 8002b40:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <UART_SetConfig+0x118>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	f003 020f 	and.w	r2, r3, #15
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	440a      	add	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	51eb851f 	.word	0x51eb851f

08002b64 <siprintf>:
 8002b64:	b40e      	push	{r1, r2, r3}
 8002b66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b6a:	b500      	push	{lr}
 8002b6c:	b09c      	sub	sp, #112	@ 0x70
 8002b6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b70:	9002      	str	r0, [sp, #8]
 8002b72:	9006      	str	r0, [sp, #24]
 8002b74:	9107      	str	r1, [sp, #28]
 8002b76:	9104      	str	r1, [sp, #16]
 8002b78:	4808      	ldr	r0, [pc, #32]	@ (8002b9c <siprintf+0x38>)
 8002b7a:	4909      	ldr	r1, [pc, #36]	@ (8002ba0 <siprintf+0x3c>)
 8002b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b80:	9105      	str	r1, [sp, #20]
 8002b82:	6800      	ldr	r0, [r0, #0]
 8002b84:	a902      	add	r1, sp, #8
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	f000 f992 	bl	8002eb0 <_svfiprintf_r>
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	9b02      	ldr	r3, [sp, #8]
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	b01c      	add	sp, #112	@ 0x70
 8002b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b98:	b003      	add	sp, #12
 8002b9a:	4770      	bx	lr
 8002b9c:	2000000c 	.word	0x2000000c
 8002ba0:	ffff0208 	.word	0xffff0208

08002ba4 <memset>:
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4402      	add	r2, r0
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d100      	bne.n	8002bae <memset+0xa>
 8002bac:	4770      	bx	lr
 8002bae:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb2:	e7f9      	b.n	8002ba8 <memset+0x4>

08002bb4 <__errno>:
 8002bb4:	4b01      	ldr	r3, [pc, #4]	@ (8002bbc <__errno+0x8>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2000000c 	.word	0x2000000c

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	4d0c      	ldr	r5, [pc, #48]	@ (8002bf8 <__libc_init_array+0x38>)
 8002bc6:	4c0d      	ldr	r4, [pc, #52]	@ (8002bfc <__libc_init_array+0x3c>)
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	f000 fc78 	bl	80034c4 <_init>
 8002bd4:	2600      	movs	r6, #0
 8002bd6:	4d0a      	ldr	r5, [pc, #40]	@ (8002c00 <__libc_init_array+0x40>)
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c04 <__libc_init_array+0x44>)
 8002bda:	1b64      	subs	r4, r4, r5
 8002bdc:	10a4      	asrs	r4, r4, #2
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	080035e4 	.word	0x080035e4
 8002bfc:	080035e4 	.word	0x080035e4
 8002c00:	080035e4 	.word	0x080035e4
 8002c04:	080035e8 	.word	0x080035e8

08002c08 <__retarget_lock_acquire_recursive>:
 8002c08:	4770      	bx	lr

08002c0a <__retarget_lock_release_recursive>:
 8002c0a:	4770      	bx	lr

08002c0c <_free_r>:
 8002c0c:	b538      	push	{r3, r4, r5, lr}
 8002c0e:	4605      	mov	r5, r0
 8002c10:	2900      	cmp	r1, #0
 8002c12:	d040      	beq.n	8002c96 <_free_r+0x8a>
 8002c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c18:	1f0c      	subs	r4, r1, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bfb8      	it	lt
 8002c1e:	18e4      	addlt	r4, r4, r3
 8002c20:	f000 f8de 	bl	8002de0 <__malloc_lock>
 8002c24:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <_free_r+0x8c>)
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	b933      	cbnz	r3, 8002c38 <_free_r+0x2c>
 8002c2a:	6063      	str	r3, [r4, #4]
 8002c2c:	6014      	str	r4, [r2, #0]
 8002c2e:	4628      	mov	r0, r5
 8002c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c34:	f000 b8da 	b.w	8002dec <__malloc_unlock>
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d908      	bls.n	8002c4e <_free_r+0x42>
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	1821      	adds	r1, r4, r0
 8002c40:	428b      	cmp	r3, r1
 8002c42:	bf01      	itttt	eq
 8002c44:	6819      	ldreq	r1, [r3, #0]
 8002c46:	685b      	ldreq	r3, [r3, #4]
 8002c48:	1809      	addeq	r1, r1, r0
 8002c4a:	6021      	streq	r1, [r4, #0]
 8002c4c:	e7ed      	b.n	8002c2a <_free_r+0x1e>
 8002c4e:	461a      	mov	r2, r3
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	b10b      	cbz	r3, 8002c58 <_free_r+0x4c>
 8002c54:	42a3      	cmp	r3, r4
 8002c56:	d9fa      	bls.n	8002c4e <_free_r+0x42>
 8002c58:	6811      	ldr	r1, [r2, #0]
 8002c5a:	1850      	adds	r0, r2, r1
 8002c5c:	42a0      	cmp	r0, r4
 8002c5e:	d10b      	bne.n	8002c78 <_free_r+0x6c>
 8002c60:	6820      	ldr	r0, [r4, #0]
 8002c62:	4401      	add	r1, r0
 8002c64:	1850      	adds	r0, r2, r1
 8002c66:	4283      	cmp	r3, r0
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	d1e0      	bne.n	8002c2e <_free_r+0x22>
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4408      	add	r0, r1
 8002c72:	6010      	str	r0, [r2, #0]
 8002c74:	6053      	str	r3, [r2, #4]
 8002c76:	e7da      	b.n	8002c2e <_free_r+0x22>
 8002c78:	d902      	bls.n	8002c80 <_free_r+0x74>
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	602b      	str	r3, [r5, #0]
 8002c7e:	e7d6      	b.n	8002c2e <_free_r+0x22>
 8002c80:	6820      	ldr	r0, [r4, #0]
 8002c82:	1821      	adds	r1, r4, r0
 8002c84:	428b      	cmp	r3, r1
 8002c86:	bf01      	itttt	eq
 8002c88:	6819      	ldreq	r1, [r3, #0]
 8002c8a:	685b      	ldreq	r3, [r3, #4]
 8002c8c:	1809      	addeq	r1, r1, r0
 8002c8e:	6021      	streq	r1, [r4, #0]
 8002c90:	6063      	str	r3, [r4, #4]
 8002c92:	6054      	str	r4, [r2, #4]
 8002c94:	e7cb      	b.n	8002c2e <_free_r+0x22>
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	20000264 	.word	0x20000264

08002c9c <sbrk_aligned>:
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8002cdc <sbrk_aligned+0x40>)
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	6831      	ldr	r1, [r6, #0]
 8002ca4:	4605      	mov	r5, r0
 8002ca6:	b911      	cbnz	r1, 8002cae <sbrk_aligned+0x12>
 8002ca8:	f000 fbaa 	bl	8003400 <_sbrk_r>
 8002cac:	6030      	str	r0, [r6, #0]
 8002cae:	4621      	mov	r1, r4
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f000 fba5 	bl	8003400 <_sbrk_r>
 8002cb6:	1c43      	adds	r3, r0, #1
 8002cb8:	d103      	bne.n	8002cc2 <sbrk_aligned+0x26>
 8002cba:	f04f 34ff 	mov.w	r4, #4294967295
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
 8002cc2:	1cc4      	adds	r4, r0, #3
 8002cc4:	f024 0403 	bic.w	r4, r4, #3
 8002cc8:	42a0      	cmp	r0, r4
 8002cca:	d0f8      	beq.n	8002cbe <sbrk_aligned+0x22>
 8002ccc:	1a21      	subs	r1, r4, r0
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f000 fb96 	bl	8003400 <_sbrk_r>
 8002cd4:	3001      	adds	r0, #1
 8002cd6:	d1f2      	bne.n	8002cbe <sbrk_aligned+0x22>
 8002cd8:	e7ef      	b.n	8002cba <sbrk_aligned+0x1e>
 8002cda:	bf00      	nop
 8002cdc:	20000260 	.word	0x20000260

08002ce0 <_malloc_r>:
 8002ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ce4:	1ccd      	adds	r5, r1, #3
 8002ce6:	f025 0503 	bic.w	r5, r5, #3
 8002cea:	3508      	adds	r5, #8
 8002cec:	2d0c      	cmp	r5, #12
 8002cee:	bf38      	it	cc
 8002cf0:	250c      	movcc	r5, #12
 8002cf2:	2d00      	cmp	r5, #0
 8002cf4:	4606      	mov	r6, r0
 8002cf6:	db01      	blt.n	8002cfc <_malloc_r+0x1c>
 8002cf8:	42a9      	cmp	r1, r5
 8002cfa:	d904      	bls.n	8002d06 <_malloc_r+0x26>
 8002cfc:	230c      	movs	r3, #12
 8002cfe:	6033      	str	r3, [r6, #0]
 8002d00:	2000      	movs	r0, #0
 8002d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ddc <_malloc_r+0xfc>
 8002d0a:	f000 f869 	bl	8002de0 <__malloc_lock>
 8002d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002d12:	461c      	mov	r4, r3
 8002d14:	bb44      	cbnz	r4, 8002d68 <_malloc_r+0x88>
 8002d16:	4629      	mov	r1, r5
 8002d18:	4630      	mov	r0, r6
 8002d1a:	f7ff ffbf 	bl	8002c9c <sbrk_aligned>
 8002d1e:	1c43      	adds	r3, r0, #1
 8002d20:	4604      	mov	r4, r0
 8002d22:	d158      	bne.n	8002dd6 <_malloc_r+0xf6>
 8002d24:	f8d8 4000 	ldr.w	r4, [r8]
 8002d28:	4627      	mov	r7, r4
 8002d2a:	2f00      	cmp	r7, #0
 8002d2c:	d143      	bne.n	8002db6 <_malloc_r+0xd6>
 8002d2e:	2c00      	cmp	r4, #0
 8002d30:	d04b      	beq.n	8002dca <_malloc_r+0xea>
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	4639      	mov	r1, r7
 8002d36:	4630      	mov	r0, r6
 8002d38:	eb04 0903 	add.w	r9, r4, r3
 8002d3c:	f000 fb60 	bl	8003400 <_sbrk_r>
 8002d40:	4581      	cmp	r9, r0
 8002d42:	d142      	bne.n	8002dca <_malloc_r+0xea>
 8002d44:	6821      	ldr	r1, [r4, #0]
 8002d46:	4630      	mov	r0, r6
 8002d48:	1a6d      	subs	r5, r5, r1
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	f7ff ffa6 	bl	8002c9c <sbrk_aligned>
 8002d50:	3001      	adds	r0, #1
 8002d52:	d03a      	beq.n	8002dca <_malloc_r+0xea>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	442b      	add	r3, r5
 8002d58:	6023      	str	r3, [r4, #0]
 8002d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	bb62      	cbnz	r2, 8002dbc <_malloc_r+0xdc>
 8002d62:	f8c8 7000 	str.w	r7, [r8]
 8002d66:	e00f      	b.n	8002d88 <_malloc_r+0xa8>
 8002d68:	6822      	ldr	r2, [r4, #0]
 8002d6a:	1b52      	subs	r2, r2, r5
 8002d6c:	d420      	bmi.n	8002db0 <_malloc_r+0xd0>
 8002d6e:	2a0b      	cmp	r2, #11
 8002d70:	d917      	bls.n	8002da2 <_malloc_r+0xc2>
 8002d72:	1961      	adds	r1, r4, r5
 8002d74:	42a3      	cmp	r3, r4
 8002d76:	6025      	str	r5, [r4, #0]
 8002d78:	bf18      	it	ne
 8002d7a:	6059      	strne	r1, [r3, #4]
 8002d7c:	6863      	ldr	r3, [r4, #4]
 8002d7e:	bf08      	it	eq
 8002d80:	f8c8 1000 	streq.w	r1, [r8]
 8002d84:	5162      	str	r2, [r4, r5]
 8002d86:	604b      	str	r3, [r1, #4]
 8002d88:	4630      	mov	r0, r6
 8002d8a:	f000 f82f 	bl	8002dec <__malloc_unlock>
 8002d8e:	f104 000b 	add.w	r0, r4, #11
 8002d92:	1d23      	adds	r3, r4, #4
 8002d94:	f020 0007 	bic.w	r0, r0, #7
 8002d98:	1ac2      	subs	r2, r0, r3
 8002d9a:	bf1c      	itt	ne
 8002d9c:	1a1b      	subne	r3, r3, r0
 8002d9e:	50a3      	strne	r3, [r4, r2]
 8002da0:	e7af      	b.n	8002d02 <_malloc_r+0x22>
 8002da2:	6862      	ldr	r2, [r4, #4]
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	bf0c      	ite	eq
 8002da8:	f8c8 2000 	streq.w	r2, [r8]
 8002dac:	605a      	strne	r2, [r3, #4]
 8002dae:	e7eb      	b.n	8002d88 <_malloc_r+0xa8>
 8002db0:	4623      	mov	r3, r4
 8002db2:	6864      	ldr	r4, [r4, #4]
 8002db4:	e7ae      	b.n	8002d14 <_malloc_r+0x34>
 8002db6:	463c      	mov	r4, r7
 8002db8:	687f      	ldr	r7, [r7, #4]
 8002dba:	e7b6      	b.n	8002d2a <_malloc_r+0x4a>
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	d1fb      	bne.n	8002dbc <_malloc_r+0xdc>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6053      	str	r3, [r2, #4]
 8002dc8:	e7de      	b.n	8002d88 <_malloc_r+0xa8>
 8002dca:	230c      	movs	r3, #12
 8002dcc:	4630      	mov	r0, r6
 8002dce:	6033      	str	r3, [r6, #0]
 8002dd0:	f000 f80c 	bl	8002dec <__malloc_unlock>
 8002dd4:	e794      	b.n	8002d00 <_malloc_r+0x20>
 8002dd6:	6005      	str	r5, [r0, #0]
 8002dd8:	e7d6      	b.n	8002d88 <_malloc_r+0xa8>
 8002dda:	bf00      	nop
 8002ddc:	20000264 	.word	0x20000264

08002de0 <__malloc_lock>:
 8002de0:	4801      	ldr	r0, [pc, #4]	@ (8002de8 <__malloc_lock+0x8>)
 8002de2:	f7ff bf11 	b.w	8002c08 <__retarget_lock_acquire_recursive>
 8002de6:	bf00      	nop
 8002de8:	2000025c 	.word	0x2000025c

08002dec <__malloc_unlock>:
 8002dec:	4801      	ldr	r0, [pc, #4]	@ (8002df4 <__malloc_unlock+0x8>)
 8002dee:	f7ff bf0c 	b.w	8002c0a <__retarget_lock_release_recursive>
 8002df2:	bf00      	nop
 8002df4:	2000025c 	.word	0x2000025c

08002df8 <__ssputs_r>:
 8002df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dfc:	461f      	mov	r7, r3
 8002dfe:	688e      	ldr	r6, [r1, #8]
 8002e00:	4682      	mov	sl, r0
 8002e02:	42be      	cmp	r6, r7
 8002e04:	460c      	mov	r4, r1
 8002e06:	4690      	mov	r8, r2
 8002e08:	680b      	ldr	r3, [r1, #0]
 8002e0a:	d82d      	bhi.n	8002e68 <__ssputs_r+0x70>
 8002e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e14:	d026      	beq.n	8002e64 <__ssputs_r+0x6c>
 8002e16:	6965      	ldr	r5, [r4, #20]
 8002e18:	6909      	ldr	r1, [r1, #16]
 8002e1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e1e:	eba3 0901 	sub.w	r9, r3, r1
 8002e22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e26:	1c7b      	adds	r3, r7, #1
 8002e28:	444b      	add	r3, r9
 8002e2a:	106d      	asrs	r5, r5, #1
 8002e2c:	429d      	cmp	r5, r3
 8002e2e:	bf38      	it	cc
 8002e30:	461d      	movcc	r5, r3
 8002e32:	0553      	lsls	r3, r2, #21
 8002e34:	d527      	bpl.n	8002e86 <__ssputs_r+0x8e>
 8002e36:	4629      	mov	r1, r5
 8002e38:	f7ff ff52 	bl	8002ce0 <_malloc_r>
 8002e3c:	4606      	mov	r6, r0
 8002e3e:	b360      	cbz	r0, 8002e9a <__ssputs_r+0xa2>
 8002e40:	464a      	mov	r2, r9
 8002e42:	6921      	ldr	r1, [r4, #16]
 8002e44:	f000 fafa 	bl	800343c <memcpy>
 8002e48:	89a3      	ldrh	r3, [r4, #12]
 8002e4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e52:	81a3      	strh	r3, [r4, #12]
 8002e54:	6126      	str	r6, [r4, #16]
 8002e56:	444e      	add	r6, r9
 8002e58:	6026      	str	r6, [r4, #0]
 8002e5a:	463e      	mov	r6, r7
 8002e5c:	6165      	str	r5, [r4, #20]
 8002e5e:	eba5 0509 	sub.w	r5, r5, r9
 8002e62:	60a5      	str	r5, [r4, #8]
 8002e64:	42be      	cmp	r6, r7
 8002e66:	d900      	bls.n	8002e6a <__ssputs_r+0x72>
 8002e68:	463e      	mov	r6, r7
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	f000 faac 	bl	80033cc <memmove>
 8002e74:	2000      	movs	r0, #0
 8002e76:	68a3      	ldr	r3, [r4, #8]
 8002e78:	1b9b      	subs	r3, r3, r6
 8002e7a:	60a3      	str	r3, [r4, #8]
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	4433      	add	r3, r6
 8002e80:	6023      	str	r3, [r4, #0]
 8002e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e86:	462a      	mov	r2, r5
 8002e88:	f000 fae6 	bl	8003458 <_realloc_r>
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d1e0      	bne.n	8002e54 <__ssputs_r+0x5c>
 8002e92:	4650      	mov	r0, sl
 8002e94:	6921      	ldr	r1, [r4, #16]
 8002e96:	f7ff feb9 	bl	8002c0c <_free_r>
 8002e9a:	230c      	movs	r3, #12
 8002e9c:	f8ca 3000 	str.w	r3, [sl]
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eaa:	81a3      	strh	r3, [r4, #12]
 8002eac:	e7e9      	b.n	8002e82 <__ssputs_r+0x8a>
	...

08002eb0 <_svfiprintf_r>:
 8002eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb4:	4698      	mov	r8, r3
 8002eb6:	898b      	ldrh	r3, [r1, #12]
 8002eb8:	4607      	mov	r7, r0
 8002eba:	061b      	lsls	r3, r3, #24
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	4614      	mov	r4, r2
 8002ec0:	b09d      	sub	sp, #116	@ 0x74
 8002ec2:	d510      	bpl.n	8002ee6 <_svfiprintf_r+0x36>
 8002ec4:	690b      	ldr	r3, [r1, #16]
 8002ec6:	b973      	cbnz	r3, 8002ee6 <_svfiprintf_r+0x36>
 8002ec8:	2140      	movs	r1, #64	@ 0x40
 8002eca:	f7ff ff09 	bl	8002ce0 <_malloc_r>
 8002ece:	6028      	str	r0, [r5, #0]
 8002ed0:	6128      	str	r0, [r5, #16]
 8002ed2:	b930      	cbnz	r0, 8002ee2 <_svfiprintf_r+0x32>
 8002ed4:	230c      	movs	r3, #12
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	b01d      	add	sp, #116	@ 0x74
 8002ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee2:	2340      	movs	r3, #64	@ 0x40
 8002ee4:	616b      	str	r3, [r5, #20]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eea:	2320      	movs	r3, #32
 8002eec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ef0:	2330      	movs	r3, #48	@ 0x30
 8002ef2:	f04f 0901 	mov.w	r9, #1
 8002ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002efa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003094 <_svfiprintf_r+0x1e4>
 8002efe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f02:	4623      	mov	r3, r4
 8002f04:	469a      	mov	sl, r3
 8002f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f0a:	b10a      	cbz	r2, 8002f10 <_svfiprintf_r+0x60>
 8002f0c:	2a25      	cmp	r2, #37	@ 0x25
 8002f0e:	d1f9      	bne.n	8002f04 <_svfiprintf_r+0x54>
 8002f10:	ebba 0b04 	subs.w	fp, sl, r4
 8002f14:	d00b      	beq.n	8002f2e <_svfiprintf_r+0x7e>
 8002f16:	465b      	mov	r3, fp
 8002f18:	4622      	mov	r2, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	4638      	mov	r0, r7
 8002f1e:	f7ff ff6b 	bl	8002df8 <__ssputs_r>
 8002f22:	3001      	adds	r0, #1
 8002f24:	f000 80a7 	beq.w	8003076 <_svfiprintf_r+0x1c6>
 8002f28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f2a:	445a      	add	r2, fp
 8002f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 809f 	beq.w	8003076 <_svfiprintf_r+0x1c6>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f42:	f10a 0a01 	add.w	sl, sl, #1
 8002f46:	9304      	str	r3, [sp, #16]
 8002f48:	9307      	str	r3, [sp, #28]
 8002f4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f50:	4654      	mov	r4, sl
 8002f52:	2205      	movs	r2, #5
 8002f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f58:	484e      	ldr	r0, [pc, #312]	@ (8003094 <_svfiprintf_r+0x1e4>)
 8002f5a:	f000 fa61 	bl	8003420 <memchr>
 8002f5e:	9a04      	ldr	r2, [sp, #16]
 8002f60:	b9d8      	cbnz	r0, 8002f9a <_svfiprintf_r+0xea>
 8002f62:	06d0      	lsls	r0, r2, #27
 8002f64:	bf44      	itt	mi
 8002f66:	2320      	movmi	r3, #32
 8002f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f6c:	0711      	lsls	r1, r2, #28
 8002f6e:	bf44      	itt	mi
 8002f70:	232b      	movmi	r3, #43	@ 0x2b
 8002f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f76:	f89a 3000 	ldrb.w	r3, [sl]
 8002f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f7c:	d015      	beq.n	8002faa <_svfiprintf_r+0xfa>
 8002f7e:	4654      	mov	r4, sl
 8002f80:	2000      	movs	r0, #0
 8002f82:	f04f 0c0a 	mov.w	ip, #10
 8002f86:	9a07      	ldr	r2, [sp, #28]
 8002f88:	4621      	mov	r1, r4
 8002f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f8e:	3b30      	subs	r3, #48	@ 0x30
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	d94b      	bls.n	800302c <_svfiprintf_r+0x17c>
 8002f94:	b1b0      	cbz	r0, 8002fc4 <_svfiprintf_r+0x114>
 8002f96:	9207      	str	r2, [sp, #28]
 8002f98:	e014      	b.n	8002fc4 <_svfiprintf_r+0x114>
 8002f9a:	eba0 0308 	sub.w	r3, r0, r8
 8002f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	46a2      	mov	sl, r4
 8002fa6:	9304      	str	r3, [sp, #16]
 8002fa8:	e7d2      	b.n	8002f50 <_svfiprintf_r+0xa0>
 8002faa:	9b03      	ldr	r3, [sp, #12]
 8002fac:	1d19      	adds	r1, r3, #4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	9103      	str	r1, [sp, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bfbb      	ittet	lt
 8002fb6:	425b      	neglt	r3, r3
 8002fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8002fbc:	9307      	strge	r3, [sp, #28]
 8002fbe:	9307      	strlt	r3, [sp, #28]
 8002fc0:	bfb8      	it	lt
 8002fc2:	9204      	strlt	r2, [sp, #16]
 8002fc4:	7823      	ldrb	r3, [r4, #0]
 8002fc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fc8:	d10a      	bne.n	8002fe0 <_svfiprintf_r+0x130>
 8002fca:	7863      	ldrb	r3, [r4, #1]
 8002fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fce:	d132      	bne.n	8003036 <_svfiprintf_r+0x186>
 8002fd0:	9b03      	ldr	r3, [sp, #12]
 8002fd2:	3402      	adds	r4, #2
 8002fd4:	1d1a      	adds	r2, r3, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	9203      	str	r2, [sp, #12]
 8002fda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fde:	9305      	str	r3, [sp, #20]
 8002fe0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003098 <_svfiprintf_r+0x1e8>
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	4650      	mov	r0, sl
 8002fe8:	7821      	ldrb	r1, [r4, #0]
 8002fea:	f000 fa19 	bl	8003420 <memchr>
 8002fee:	b138      	cbz	r0, 8003000 <_svfiprintf_r+0x150>
 8002ff0:	2240      	movs	r2, #64	@ 0x40
 8002ff2:	9b04      	ldr	r3, [sp, #16]
 8002ff4:	eba0 000a 	sub.w	r0, r0, sl
 8002ff8:	4082      	lsls	r2, r0
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	3401      	adds	r4, #1
 8002ffe:	9304      	str	r3, [sp, #16]
 8003000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003004:	2206      	movs	r2, #6
 8003006:	4825      	ldr	r0, [pc, #148]	@ (800309c <_svfiprintf_r+0x1ec>)
 8003008:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800300c:	f000 fa08 	bl	8003420 <memchr>
 8003010:	2800      	cmp	r0, #0
 8003012:	d036      	beq.n	8003082 <_svfiprintf_r+0x1d2>
 8003014:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <_svfiprintf_r+0x1f0>)
 8003016:	bb1b      	cbnz	r3, 8003060 <_svfiprintf_r+0x1b0>
 8003018:	9b03      	ldr	r3, [sp, #12]
 800301a:	3307      	adds	r3, #7
 800301c:	f023 0307 	bic.w	r3, r3, #7
 8003020:	3308      	adds	r3, #8
 8003022:	9303      	str	r3, [sp, #12]
 8003024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003026:	4433      	add	r3, r6
 8003028:	9309      	str	r3, [sp, #36]	@ 0x24
 800302a:	e76a      	b.n	8002f02 <_svfiprintf_r+0x52>
 800302c:	460c      	mov	r4, r1
 800302e:	2001      	movs	r0, #1
 8003030:	fb0c 3202 	mla	r2, ip, r2, r3
 8003034:	e7a8      	b.n	8002f88 <_svfiprintf_r+0xd8>
 8003036:	2300      	movs	r3, #0
 8003038:	f04f 0c0a 	mov.w	ip, #10
 800303c:	4619      	mov	r1, r3
 800303e:	3401      	adds	r4, #1
 8003040:	9305      	str	r3, [sp, #20]
 8003042:	4620      	mov	r0, r4
 8003044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003048:	3a30      	subs	r2, #48	@ 0x30
 800304a:	2a09      	cmp	r2, #9
 800304c:	d903      	bls.n	8003056 <_svfiprintf_r+0x1a6>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0c6      	beq.n	8002fe0 <_svfiprintf_r+0x130>
 8003052:	9105      	str	r1, [sp, #20]
 8003054:	e7c4      	b.n	8002fe0 <_svfiprintf_r+0x130>
 8003056:	4604      	mov	r4, r0
 8003058:	2301      	movs	r3, #1
 800305a:	fb0c 2101 	mla	r1, ip, r1, r2
 800305e:	e7f0      	b.n	8003042 <_svfiprintf_r+0x192>
 8003060:	ab03      	add	r3, sp, #12
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	462a      	mov	r2, r5
 8003066:	4638      	mov	r0, r7
 8003068:	4b0e      	ldr	r3, [pc, #56]	@ (80030a4 <_svfiprintf_r+0x1f4>)
 800306a:	a904      	add	r1, sp, #16
 800306c:	f3af 8000 	nop.w
 8003070:	1c42      	adds	r2, r0, #1
 8003072:	4606      	mov	r6, r0
 8003074:	d1d6      	bne.n	8003024 <_svfiprintf_r+0x174>
 8003076:	89ab      	ldrh	r3, [r5, #12]
 8003078:	065b      	lsls	r3, r3, #25
 800307a:	f53f af2d 	bmi.w	8002ed8 <_svfiprintf_r+0x28>
 800307e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003080:	e72c      	b.n	8002edc <_svfiprintf_r+0x2c>
 8003082:	ab03      	add	r3, sp, #12
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	462a      	mov	r2, r5
 8003088:	4638      	mov	r0, r7
 800308a:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <_svfiprintf_r+0x1f4>)
 800308c:	a904      	add	r1, sp, #16
 800308e:	f000 f87d 	bl	800318c <_printf_i>
 8003092:	e7ed      	b.n	8003070 <_svfiprintf_r+0x1c0>
 8003094:	080035a6 	.word	0x080035a6
 8003098:	080035ac 	.word	0x080035ac
 800309c:	080035b0 	.word	0x080035b0
 80030a0:	00000000 	.word	0x00000000
 80030a4:	08002df9 	.word	0x08002df9

080030a8 <_printf_common>:
 80030a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ac:	4616      	mov	r6, r2
 80030ae:	4698      	mov	r8, r3
 80030b0:	688a      	ldr	r2, [r1, #8]
 80030b2:	690b      	ldr	r3, [r1, #16]
 80030b4:	4607      	mov	r7, r0
 80030b6:	4293      	cmp	r3, r2
 80030b8:	bfb8      	it	lt
 80030ba:	4613      	movlt	r3, r2
 80030bc:	6033      	str	r3, [r6, #0]
 80030be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030c2:	460c      	mov	r4, r1
 80030c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030c8:	b10a      	cbz	r2, 80030ce <_printf_common+0x26>
 80030ca:	3301      	adds	r3, #1
 80030cc:	6033      	str	r3, [r6, #0]
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	0699      	lsls	r1, r3, #26
 80030d2:	bf42      	ittt	mi
 80030d4:	6833      	ldrmi	r3, [r6, #0]
 80030d6:	3302      	addmi	r3, #2
 80030d8:	6033      	strmi	r3, [r6, #0]
 80030da:	6825      	ldr	r5, [r4, #0]
 80030dc:	f015 0506 	ands.w	r5, r5, #6
 80030e0:	d106      	bne.n	80030f0 <_printf_common+0x48>
 80030e2:	f104 0a19 	add.w	sl, r4, #25
 80030e6:	68e3      	ldr	r3, [r4, #12]
 80030e8:	6832      	ldr	r2, [r6, #0]
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	42ab      	cmp	r3, r5
 80030ee:	dc2b      	bgt.n	8003148 <_printf_common+0xa0>
 80030f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	3b00      	subs	r3, #0
 80030f8:	bf18      	it	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	0692      	lsls	r2, r2, #26
 80030fe:	d430      	bmi.n	8003162 <_printf_common+0xba>
 8003100:	4641      	mov	r1, r8
 8003102:	4638      	mov	r0, r7
 8003104:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003108:	47c8      	blx	r9
 800310a:	3001      	adds	r0, #1
 800310c:	d023      	beq.n	8003156 <_printf_common+0xae>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	6922      	ldr	r2, [r4, #16]
 8003112:	f003 0306 	and.w	r3, r3, #6
 8003116:	2b04      	cmp	r3, #4
 8003118:	bf14      	ite	ne
 800311a:	2500      	movne	r5, #0
 800311c:	6833      	ldreq	r3, [r6, #0]
 800311e:	f04f 0600 	mov.w	r6, #0
 8003122:	bf08      	it	eq
 8003124:	68e5      	ldreq	r5, [r4, #12]
 8003126:	f104 041a 	add.w	r4, r4, #26
 800312a:	bf08      	it	eq
 800312c:	1aed      	subeq	r5, r5, r3
 800312e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003132:	bf08      	it	eq
 8003134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003138:	4293      	cmp	r3, r2
 800313a:	bfc4      	itt	gt
 800313c:	1a9b      	subgt	r3, r3, r2
 800313e:	18ed      	addgt	r5, r5, r3
 8003140:	42b5      	cmp	r5, r6
 8003142:	d11a      	bne.n	800317a <_printf_common+0xd2>
 8003144:	2000      	movs	r0, #0
 8003146:	e008      	b.n	800315a <_printf_common+0xb2>
 8003148:	2301      	movs	r3, #1
 800314a:	4652      	mov	r2, sl
 800314c:	4641      	mov	r1, r8
 800314e:	4638      	mov	r0, r7
 8003150:	47c8      	blx	r9
 8003152:	3001      	adds	r0, #1
 8003154:	d103      	bne.n	800315e <_printf_common+0xb6>
 8003156:	f04f 30ff 	mov.w	r0, #4294967295
 800315a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800315e:	3501      	adds	r5, #1
 8003160:	e7c1      	b.n	80030e6 <_printf_common+0x3e>
 8003162:	2030      	movs	r0, #48	@ 0x30
 8003164:	18e1      	adds	r1, r4, r3
 8003166:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003170:	4422      	add	r2, r4
 8003172:	3302      	adds	r3, #2
 8003174:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003178:	e7c2      	b.n	8003100 <_printf_common+0x58>
 800317a:	2301      	movs	r3, #1
 800317c:	4622      	mov	r2, r4
 800317e:	4641      	mov	r1, r8
 8003180:	4638      	mov	r0, r7
 8003182:	47c8      	blx	r9
 8003184:	3001      	adds	r0, #1
 8003186:	d0e6      	beq.n	8003156 <_printf_common+0xae>
 8003188:	3601      	adds	r6, #1
 800318a:	e7d9      	b.n	8003140 <_printf_common+0x98>

0800318c <_printf_i>:
 800318c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003190:	7e0f      	ldrb	r7, [r1, #24]
 8003192:	4691      	mov	r9, r2
 8003194:	2f78      	cmp	r7, #120	@ 0x78
 8003196:	4680      	mov	r8, r0
 8003198:	460c      	mov	r4, r1
 800319a:	469a      	mov	sl, r3
 800319c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800319e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031a2:	d807      	bhi.n	80031b4 <_printf_i+0x28>
 80031a4:	2f62      	cmp	r7, #98	@ 0x62
 80031a6:	d80a      	bhi.n	80031be <_printf_i+0x32>
 80031a8:	2f00      	cmp	r7, #0
 80031aa:	f000 80d3 	beq.w	8003354 <_printf_i+0x1c8>
 80031ae:	2f58      	cmp	r7, #88	@ 0x58
 80031b0:	f000 80ba 	beq.w	8003328 <_printf_i+0x19c>
 80031b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031bc:	e03a      	b.n	8003234 <_printf_i+0xa8>
 80031be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031c2:	2b15      	cmp	r3, #21
 80031c4:	d8f6      	bhi.n	80031b4 <_printf_i+0x28>
 80031c6:	a101      	add	r1, pc, #4	@ (adr r1, 80031cc <_printf_i+0x40>)
 80031c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031cc:	08003225 	.word	0x08003225
 80031d0:	08003239 	.word	0x08003239
 80031d4:	080031b5 	.word	0x080031b5
 80031d8:	080031b5 	.word	0x080031b5
 80031dc:	080031b5 	.word	0x080031b5
 80031e0:	080031b5 	.word	0x080031b5
 80031e4:	08003239 	.word	0x08003239
 80031e8:	080031b5 	.word	0x080031b5
 80031ec:	080031b5 	.word	0x080031b5
 80031f0:	080031b5 	.word	0x080031b5
 80031f4:	080031b5 	.word	0x080031b5
 80031f8:	0800333b 	.word	0x0800333b
 80031fc:	08003263 	.word	0x08003263
 8003200:	080032f5 	.word	0x080032f5
 8003204:	080031b5 	.word	0x080031b5
 8003208:	080031b5 	.word	0x080031b5
 800320c:	0800335d 	.word	0x0800335d
 8003210:	080031b5 	.word	0x080031b5
 8003214:	08003263 	.word	0x08003263
 8003218:	080031b5 	.word	0x080031b5
 800321c:	080031b5 	.word	0x080031b5
 8003220:	080032fd 	.word	0x080032fd
 8003224:	6833      	ldr	r3, [r6, #0]
 8003226:	1d1a      	adds	r2, r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6032      	str	r2, [r6, #0]
 800322c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003230:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003234:	2301      	movs	r3, #1
 8003236:	e09e      	b.n	8003376 <_printf_i+0x1ea>
 8003238:	6833      	ldr	r3, [r6, #0]
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	1d19      	adds	r1, r3, #4
 800323e:	6031      	str	r1, [r6, #0]
 8003240:	0606      	lsls	r6, r0, #24
 8003242:	d501      	bpl.n	8003248 <_printf_i+0xbc>
 8003244:	681d      	ldr	r5, [r3, #0]
 8003246:	e003      	b.n	8003250 <_printf_i+0xc4>
 8003248:	0645      	lsls	r5, r0, #25
 800324a:	d5fb      	bpl.n	8003244 <_printf_i+0xb8>
 800324c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003250:	2d00      	cmp	r5, #0
 8003252:	da03      	bge.n	800325c <_printf_i+0xd0>
 8003254:	232d      	movs	r3, #45	@ 0x2d
 8003256:	426d      	negs	r5, r5
 8003258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800325c:	230a      	movs	r3, #10
 800325e:	4859      	ldr	r0, [pc, #356]	@ (80033c4 <_printf_i+0x238>)
 8003260:	e011      	b.n	8003286 <_printf_i+0xfa>
 8003262:	6821      	ldr	r1, [r4, #0]
 8003264:	6833      	ldr	r3, [r6, #0]
 8003266:	0608      	lsls	r0, r1, #24
 8003268:	f853 5b04 	ldr.w	r5, [r3], #4
 800326c:	d402      	bmi.n	8003274 <_printf_i+0xe8>
 800326e:	0649      	lsls	r1, r1, #25
 8003270:	bf48      	it	mi
 8003272:	b2ad      	uxthmi	r5, r5
 8003274:	2f6f      	cmp	r7, #111	@ 0x6f
 8003276:	6033      	str	r3, [r6, #0]
 8003278:	bf14      	ite	ne
 800327a:	230a      	movne	r3, #10
 800327c:	2308      	moveq	r3, #8
 800327e:	4851      	ldr	r0, [pc, #324]	@ (80033c4 <_printf_i+0x238>)
 8003280:	2100      	movs	r1, #0
 8003282:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003286:	6866      	ldr	r6, [r4, #4]
 8003288:	2e00      	cmp	r6, #0
 800328a:	bfa8      	it	ge
 800328c:	6821      	ldrge	r1, [r4, #0]
 800328e:	60a6      	str	r6, [r4, #8]
 8003290:	bfa4      	itt	ge
 8003292:	f021 0104 	bicge.w	r1, r1, #4
 8003296:	6021      	strge	r1, [r4, #0]
 8003298:	b90d      	cbnz	r5, 800329e <_printf_i+0x112>
 800329a:	2e00      	cmp	r6, #0
 800329c:	d04b      	beq.n	8003336 <_printf_i+0x1aa>
 800329e:	4616      	mov	r6, r2
 80032a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80032a4:	fb03 5711 	mls	r7, r3, r1, r5
 80032a8:	5dc7      	ldrb	r7, [r0, r7]
 80032aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032ae:	462f      	mov	r7, r5
 80032b0:	42bb      	cmp	r3, r7
 80032b2:	460d      	mov	r5, r1
 80032b4:	d9f4      	bls.n	80032a0 <_printf_i+0x114>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d10b      	bne.n	80032d2 <_printf_i+0x146>
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	07df      	lsls	r7, r3, #31
 80032be:	d508      	bpl.n	80032d2 <_printf_i+0x146>
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	6861      	ldr	r1, [r4, #4]
 80032c4:	4299      	cmp	r1, r3
 80032c6:	bfde      	ittt	le
 80032c8:	2330      	movle	r3, #48	@ 0x30
 80032ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032d2:	1b92      	subs	r2, r2, r6
 80032d4:	6122      	str	r2, [r4, #16]
 80032d6:	464b      	mov	r3, r9
 80032d8:	4621      	mov	r1, r4
 80032da:	4640      	mov	r0, r8
 80032dc:	f8cd a000 	str.w	sl, [sp]
 80032e0:	aa03      	add	r2, sp, #12
 80032e2:	f7ff fee1 	bl	80030a8 <_printf_common>
 80032e6:	3001      	adds	r0, #1
 80032e8:	d14a      	bne.n	8003380 <_printf_i+0x1f4>
 80032ea:	f04f 30ff 	mov.w	r0, #4294967295
 80032ee:	b004      	add	sp, #16
 80032f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	f043 0320 	orr.w	r3, r3, #32
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	2778      	movs	r7, #120	@ 0x78
 80032fe:	4832      	ldr	r0, [pc, #200]	@ (80033c8 <_printf_i+0x23c>)
 8003300:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	6831      	ldr	r1, [r6, #0]
 8003308:	061f      	lsls	r7, r3, #24
 800330a:	f851 5b04 	ldr.w	r5, [r1], #4
 800330e:	d402      	bmi.n	8003316 <_printf_i+0x18a>
 8003310:	065f      	lsls	r7, r3, #25
 8003312:	bf48      	it	mi
 8003314:	b2ad      	uxthmi	r5, r5
 8003316:	6031      	str	r1, [r6, #0]
 8003318:	07d9      	lsls	r1, r3, #31
 800331a:	bf44      	itt	mi
 800331c:	f043 0320 	orrmi.w	r3, r3, #32
 8003320:	6023      	strmi	r3, [r4, #0]
 8003322:	b11d      	cbz	r5, 800332c <_printf_i+0x1a0>
 8003324:	2310      	movs	r3, #16
 8003326:	e7ab      	b.n	8003280 <_printf_i+0xf4>
 8003328:	4826      	ldr	r0, [pc, #152]	@ (80033c4 <_printf_i+0x238>)
 800332a:	e7e9      	b.n	8003300 <_printf_i+0x174>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	f023 0320 	bic.w	r3, r3, #32
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	e7f6      	b.n	8003324 <_printf_i+0x198>
 8003336:	4616      	mov	r6, r2
 8003338:	e7bd      	b.n	80032b6 <_printf_i+0x12a>
 800333a:	6833      	ldr	r3, [r6, #0]
 800333c:	6825      	ldr	r5, [r4, #0]
 800333e:	1d18      	adds	r0, r3, #4
 8003340:	6961      	ldr	r1, [r4, #20]
 8003342:	6030      	str	r0, [r6, #0]
 8003344:	062e      	lsls	r6, r5, #24
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	d501      	bpl.n	800334e <_printf_i+0x1c2>
 800334a:	6019      	str	r1, [r3, #0]
 800334c:	e002      	b.n	8003354 <_printf_i+0x1c8>
 800334e:	0668      	lsls	r0, r5, #25
 8003350:	d5fb      	bpl.n	800334a <_printf_i+0x1be>
 8003352:	8019      	strh	r1, [r3, #0]
 8003354:	2300      	movs	r3, #0
 8003356:	4616      	mov	r6, r2
 8003358:	6123      	str	r3, [r4, #16]
 800335a:	e7bc      	b.n	80032d6 <_printf_i+0x14a>
 800335c:	6833      	ldr	r3, [r6, #0]
 800335e:	2100      	movs	r1, #0
 8003360:	1d1a      	adds	r2, r3, #4
 8003362:	6032      	str	r2, [r6, #0]
 8003364:	681e      	ldr	r6, [r3, #0]
 8003366:	6862      	ldr	r2, [r4, #4]
 8003368:	4630      	mov	r0, r6
 800336a:	f000 f859 	bl	8003420 <memchr>
 800336e:	b108      	cbz	r0, 8003374 <_printf_i+0x1e8>
 8003370:	1b80      	subs	r0, r0, r6
 8003372:	6060      	str	r0, [r4, #4]
 8003374:	6863      	ldr	r3, [r4, #4]
 8003376:	6123      	str	r3, [r4, #16]
 8003378:	2300      	movs	r3, #0
 800337a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800337e:	e7aa      	b.n	80032d6 <_printf_i+0x14a>
 8003380:	4632      	mov	r2, r6
 8003382:	4649      	mov	r1, r9
 8003384:	4640      	mov	r0, r8
 8003386:	6923      	ldr	r3, [r4, #16]
 8003388:	47d0      	blx	sl
 800338a:	3001      	adds	r0, #1
 800338c:	d0ad      	beq.n	80032ea <_printf_i+0x15e>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	079b      	lsls	r3, r3, #30
 8003392:	d413      	bmi.n	80033bc <_printf_i+0x230>
 8003394:	68e0      	ldr	r0, [r4, #12]
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	4298      	cmp	r0, r3
 800339a:	bfb8      	it	lt
 800339c:	4618      	movlt	r0, r3
 800339e:	e7a6      	b.n	80032ee <_printf_i+0x162>
 80033a0:	2301      	movs	r3, #1
 80033a2:	4632      	mov	r2, r6
 80033a4:	4649      	mov	r1, r9
 80033a6:	4640      	mov	r0, r8
 80033a8:	47d0      	blx	sl
 80033aa:	3001      	adds	r0, #1
 80033ac:	d09d      	beq.n	80032ea <_printf_i+0x15e>
 80033ae:	3501      	adds	r5, #1
 80033b0:	68e3      	ldr	r3, [r4, #12]
 80033b2:	9903      	ldr	r1, [sp, #12]
 80033b4:	1a5b      	subs	r3, r3, r1
 80033b6:	42ab      	cmp	r3, r5
 80033b8:	dcf2      	bgt.n	80033a0 <_printf_i+0x214>
 80033ba:	e7eb      	b.n	8003394 <_printf_i+0x208>
 80033bc:	2500      	movs	r5, #0
 80033be:	f104 0619 	add.w	r6, r4, #25
 80033c2:	e7f5      	b.n	80033b0 <_printf_i+0x224>
 80033c4:	080035b7 	.word	0x080035b7
 80033c8:	080035c8 	.word	0x080035c8

080033cc <memmove>:
 80033cc:	4288      	cmp	r0, r1
 80033ce:	b510      	push	{r4, lr}
 80033d0:	eb01 0402 	add.w	r4, r1, r2
 80033d4:	d902      	bls.n	80033dc <memmove+0x10>
 80033d6:	4284      	cmp	r4, r0
 80033d8:	4623      	mov	r3, r4
 80033da:	d807      	bhi.n	80033ec <memmove+0x20>
 80033dc:	1e43      	subs	r3, r0, #1
 80033de:	42a1      	cmp	r1, r4
 80033e0:	d008      	beq.n	80033f4 <memmove+0x28>
 80033e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033ea:	e7f8      	b.n	80033de <memmove+0x12>
 80033ec:	4601      	mov	r1, r0
 80033ee:	4402      	add	r2, r0
 80033f0:	428a      	cmp	r2, r1
 80033f2:	d100      	bne.n	80033f6 <memmove+0x2a>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033fe:	e7f7      	b.n	80033f0 <memmove+0x24>

08003400 <_sbrk_r>:
 8003400:	b538      	push	{r3, r4, r5, lr}
 8003402:	2300      	movs	r3, #0
 8003404:	4d05      	ldr	r5, [pc, #20]	@ (800341c <_sbrk_r+0x1c>)
 8003406:	4604      	mov	r4, r0
 8003408:	4608      	mov	r0, r1
 800340a:	602b      	str	r3, [r5, #0]
 800340c:	f7fd f9f2 	bl	80007f4 <_sbrk>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d102      	bne.n	800341a <_sbrk_r+0x1a>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	b103      	cbz	r3, 800341a <_sbrk_r+0x1a>
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	20000258 	.word	0x20000258

08003420 <memchr>:
 8003420:	4603      	mov	r3, r0
 8003422:	b510      	push	{r4, lr}
 8003424:	b2c9      	uxtb	r1, r1
 8003426:	4402      	add	r2, r0
 8003428:	4293      	cmp	r3, r2
 800342a:	4618      	mov	r0, r3
 800342c:	d101      	bne.n	8003432 <memchr+0x12>
 800342e:	2000      	movs	r0, #0
 8003430:	e003      	b.n	800343a <memchr+0x1a>
 8003432:	7804      	ldrb	r4, [r0, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	428c      	cmp	r4, r1
 8003438:	d1f6      	bne.n	8003428 <memchr+0x8>
 800343a:	bd10      	pop	{r4, pc}

0800343c <memcpy>:
 800343c:	440a      	add	r2, r1
 800343e:	4291      	cmp	r1, r2
 8003440:	f100 33ff 	add.w	r3, r0, #4294967295
 8003444:	d100      	bne.n	8003448 <memcpy+0xc>
 8003446:	4770      	bx	lr
 8003448:	b510      	push	{r4, lr}
 800344a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344e:	4291      	cmp	r1, r2
 8003450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003454:	d1f9      	bne.n	800344a <memcpy+0xe>
 8003456:	bd10      	pop	{r4, pc}

08003458 <_realloc_r>:
 8003458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800345c:	4680      	mov	r8, r0
 800345e:	4615      	mov	r5, r2
 8003460:	460c      	mov	r4, r1
 8003462:	b921      	cbnz	r1, 800346e <_realloc_r+0x16>
 8003464:	4611      	mov	r1, r2
 8003466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800346a:	f7ff bc39 	b.w	8002ce0 <_malloc_r>
 800346e:	b92a      	cbnz	r2, 800347c <_realloc_r+0x24>
 8003470:	f7ff fbcc 	bl	8002c0c <_free_r>
 8003474:	2400      	movs	r4, #0
 8003476:	4620      	mov	r0, r4
 8003478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800347c:	f000 f81a 	bl	80034b4 <_malloc_usable_size_r>
 8003480:	4285      	cmp	r5, r0
 8003482:	4606      	mov	r6, r0
 8003484:	d802      	bhi.n	800348c <_realloc_r+0x34>
 8003486:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800348a:	d8f4      	bhi.n	8003476 <_realloc_r+0x1e>
 800348c:	4629      	mov	r1, r5
 800348e:	4640      	mov	r0, r8
 8003490:	f7ff fc26 	bl	8002ce0 <_malloc_r>
 8003494:	4607      	mov	r7, r0
 8003496:	2800      	cmp	r0, #0
 8003498:	d0ec      	beq.n	8003474 <_realloc_r+0x1c>
 800349a:	42b5      	cmp	r5, r6
 800349c:	462a      	mov	r2, r5
 800349e:	4621      	mov	r1, r4
 80034a0:	bf28      	it	cs
 80034a2:	4632      	movcs	r2, r6
 80034a4:	f7ff ffca 	bl	800343c <memcpy>
 80034a8:	4621      	mov	r1, r4
 80034aa:	4640      	mov	r0, r8
 80034ac:	f7ff fbae 	bl	8002c0c <_free_r>
 80034b0:	463c      	mov	r4, r7
 80034b2:	e7e0      	b.n	8003476 <_realloc_r+0x1e>

080034b4 <_malloc_usable_size_r>:
 80034b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b8:	1f18      	subs	r0, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bfbc      	itt	lt
 80034be:	580b      	ldrlt	r3, [r1, r0]
 80034c0:	18c0      	addlt	r0, r0, r3
 80034c2:	4770      	bx	lr

080034c4 <_init>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr

080034d0 <_fini>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	bf00      	nop
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr

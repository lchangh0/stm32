
lcd_st7735s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d58  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  08001e64  08001e64  00002e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c60  08002c60  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002c60  08002c60  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c60  08002c60  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c60  08002c60  00003c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c64  08002c64  00003c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002c68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000014  08002c7c  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002c7c  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006510  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169d  00000000  00000000  0000a54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000574  00000000  00000000  0000c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bac  00000000  00000000  0000c8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ae6  00000000  00000000  00023470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008149a  00000000  00000000  0002bf56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad3f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  000ad434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000af0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e4c 	.word	0x08001e4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001e4c 	.word	0x08001e4c

0800014c <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af02      	add	r7, sp, #8
 8000152:	4604      	mov	r4, r0
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4623      	mov	r3, r4
 800015c:	80fb      	strh	r3, [r7, #6]
 800015e:	4603      	mov	r3, r0
 8000160:	80bb      	strh	r3, [r7, #4]
 8000162:	460b      	mov	r3, r1
 8000164:	807b      	strh	r3, [r7, #2]
 8000166:	4613      	mov	r3, r2
 8000168:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800016a:	88f8      	ldrh	r0, [r7, #6]
 800016c:	88b9      	ldrh	r1, [r7, #4]
 800016e:	887a      	ldrh	r2, [r7, #2]
 8000170:	883c      	ldrh	r4, [r7, #0]
 8000172:	8b3b      	ldrh	r3, [r7, #24]
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	4623      	mov	r3, r4
 8000178:	f000 fa8c 	bl	8000694 <ST7735_FillRectangle>
}
 800017c:	bf00      	nop
 800017e:	370c      	adds	r7, #12
 8000180:	46bd      	mov	sp, r7
 8000182:	bd90      	pop	{r4, r7, pc}

08000184 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af02      	add	r7, sp, #8
 800018a:	4603      	mov	r3, r0
 800018c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800018e:	4b08      	ldr	r3, [pc, #32]	@ (80001b0 <fillScreen+0x2c>)
 8000190:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <fillScreen+0x30>)
 8000196:	f9b3 1000 	ldrsh.w	r1, [r3]
 800019a:	88fb      	ldrh	r3, [r7, #6]
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	460b      	mov	r3, r1
 80001a0:	2100      	movs	r1, #0
 80001a2:	2000      	movs	r0, #0
 80001a4:	f7ff ffd2 	bl	800014c <fillRect>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	20000032 	.word	0x20000032

080001b8 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	2180      	movs	r1, #128	@ 0x80
 80001c0:	4802      	ldr	r0, [pc, #8]	@ (80001cc <ST7735_Select+0x14>)
 80001c2:	f000 ff9f 	bl	8001104 <HAL_GPIO_WritePin>
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2180      	movs	r1, #128	@ 0x80
 80001d8:	4802      	ldr	r0, [pc, #8]	@ (80001e4 <ST7735_Unselect+0x14>)
 80001da:	f000 ff93 	bl	8001104 <HAL_GPIO_WritePin>
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010c00 	.word	0x40010c00

080001e8 <ST7735_Reset>:

void ST7735_Reset()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f2:	4807      	ldr	r0, [pc, #28]	@ (8000210 <ST7735_Reset+0x28>)
 80001f4:	f000 ff86 	bl	8001104 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80001f8:	2005      	movs	r0, #5
 80001fa:	f000 fcf7 	bl	8000bec <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000204:	4802      	ldr	r0, [pc, #8]	@ (8000210 <ST7735_Reset+0x28>)
 8000206:	f000 ff7d 	bl	8001104 <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40010c00 	.word	0x40010c00

08000214 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000224:	4806      	ldr	r0, [pc, #24]	@ (8000240 <ST7735_WriteCommand+0x2c>)
 8000226:	f000 ff6d 	bl	8001104 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800022a:	1df9      	adds	r1, r7, #7
 800022c:	f04f 33ff 	mov.w	r3, #4294967295
 8000230:	2201      	movs	r2, #1
 8000232:	4804      	ldr	r0, [pc, #16]	@ (8000244 <ST7735_WriteCommand+0x30>)
 8000234:	f001 fbe0 	bl	80019f8 <HAL_SPI_Transmit>
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40010c00 	.word	0x40010c00
 8000244:	2000003c 	.word	0x2000003c

08000248 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000258:	4807      	ldr	r0, [pc, #28]	@ (8000278 <ST7735_WriteData+0x30>)
 800025a:	f000 ff53 	bl	8001104 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	b29a      	uxth	r2, r3
 8000262:	f04f 33ff 	mov.w	r3, #4294967295
 8000266:	6879      	ldr	r1, [r7, #4]
 8000268:	4804      	ldr	r0, [pc, #16]	@ (800027c <ST7735_WriteData+0x34>)
 800026a:	f001 fbc5 	bl	80019f8 <HAL_SPI_Transmit>
}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40010c00 	.word	0x40010c00
 800027c:	2000003c 	.word	0x2000003c

08000280 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	1c5a      	adds	r2, r3, #1
 800028c:	607a      	str	r2, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000292:	e034      	b.n	80002fe <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	607a      	str	r2, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800029e:	7afb      	ldrb	r3, [r7, #11]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ffb7 	bl	8000214 <ST7735_WriteCommand>

        numArgs = *addr++;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	1c5a      	adds	r2, r3, #1
 80002aa:	607a      	str	r2, [r7, #4]
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80002b0:	7abb      	ldrb	r3, [r7, #10]
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002b8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80002ba:	7abb      	ldrb	r3, [r7, #10]
 80002bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002c0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80002c2:	7abb      	ldrb	r3, [r7, #10]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d008      	beq.n	80002da <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80002c8:	7abb      	ldrb	r3, [r7, #10]
 80002ca:	4619      	mov	r1, r3
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f7ff ffbb 	bl	8000248 <ST7735_WriteData>
            addr += numArgs;
 80002d2:	7abb      	ldrb	r3, [r7, #10]
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	4413      	add	r3, r2
 80002d8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80002da:	89bb      	ldrh	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00e      	beq.n	80002fe <DisplayInit+0x7e>
            ms = *addr++;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	607a      	str	r2, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80002ea:	89bb      	ldrh	r3, [r7, #12]
 80002ec:	2bff      	cmp	r3, #255	@ 0xff
 80002ee:	d102      	bne.n	80002f6 <DisplayInit+0x76>
 80002f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80002f4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80002f6:	89bb      	ldrh	r3, [r7, #12]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fc77 	bl	8000bec <HAL_Delay>
    while(numCommands--) {
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	1e5a      	subs	r2, r3, #1
 8000302:	73fa      	strb	r2, [r7, #15]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1c5      	bne.n	8000294 <DisplayInit+0x14>
        }
    }
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	4604      	mov	r4, r0
 800031c:	4608      	mov	r0, r1
 800031e:	4611      	mov	r1, r2
 8000320:	461a      	mov	r2, r3
 8000322:	4623      	mov	r3, r4
 8000324:	71fb      	strb	r3, [r7, #7]
 8000326:	4603      	mov	r3, r0
 8000328:	71bb      	strb	r3, [r7, #6]
 800032a:	460b      	mov	r3, r1
 800032c:	717b      	strb	r3, [r7, #5]
 800032e:	4613      	mov	r3, r2
 8000330:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000332:	202a      	movs	r0, #42	@ 0x2a
 8000334:	f7ff ff6e 	bl	8000214 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000338:	2300      	movs	r3, #0
 800033a:	733b      	strb	r3, [r7, #12]
 800033c:	4b17      	ldr	r3, [pc, #92]	@ (800039c <ST7735_SetAddressWindow+0x88>)
 800033e:	781a      	ldrb	r2, [r3, #0]
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4413      	add	r3, r2
 8000344:	b2db      	uxtb	r3, r3
 8000346:	737b      	strb	r3, [r7, #13]
 8000348:	2300      	movs	r3, #0
 800034a:	73bb      	strb	r3, [r7, #14]
 800034c:	4b13      	ldr	r3, [pc, #76]	@ (800039c <ST7735_SetAddressWindow+0x88>)
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	797b      	ldrb	r3, [r7, #5]
 8000352:	4413      	add	r3, r2
 8000354:	b2db      	uxtb	r3, r3
 8000356:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	2104      	movs	r1, #4
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff72 	bl	8000248 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000364:	202b      	movs	r0, #43	@ 0x2b
 8000366:	f7ff ff55 	bl	8000214 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800036a:	4b0d      	ldr	r3, [pc, #52]	@ (80003a0 <ST7735_SetAddressWindow+0x8c>)
 800036c:	781a      	ldrb	r2, [r3, #0]
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	4413      	add	r3, r2
 8000372:	b2db      	uxtb	r3, r3
 8000374:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <ST7735_SetAddressWindow+0x8c>)
 8000378:	781a      	ldrb	r2, [r3, #0]
 800037a:	793b      	ldrb	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	b2db      	uxtb	r3, r3
 8000380:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	2104      	movs	r1, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff5d 	bl	8000248 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800038e:	202c      	movs	r0, #44	@ 0x2c
 8000390:	f7ff ff40 	bl	8000214 <ST7735_WriteCommand>
}
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bd90      	pop	{r4, r7, pc}
 800039c:	20000037 	.word	0x20000037
 80003a0:	20000038 	.word	0x20000038

080003a4 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80003ae:	f7ff ff03 	bl	80001b8 <ST7735_Select>
    ST7735_Reset();
 80003b2:	f7ff ff19 	bl	80001e8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80003b6:	480c      	ldr	r0, [pc, #48]	@ (80003e8 <ST7735_Init+0x44>)
 80003b8:	f7ff ff62 	bl	8000280 <DisplayInit>
    DisplayInit(init_cmds2);
 80003bc:	480b      	ldr	r0, [pc, #44]	@ (80003ec <ST7735_Init+0x48>)
 80003be:	f7ff ff5f 	bl	8000280 <DisplayInit>
    DisplayInit(init_cmds3);
 80003c2:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <ST7735_Init+0x4c>)
 80003c4:	f7ff ff5c 	bl	8000280 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80003c8:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <ST7735_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80003ce:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <ST7735_Init+0x54>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f810 	bl	80003fc <ST7735_SetRotation>
    ST7735_Unselect();
 80003dc:	f7ff fef8 	bl	80001d0 <ST7735_Unselect>

}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	08001e6c 	.word	0x08001e6c
 80003ec:	08001ea4 	.word	0x08001ea4
 80003f0:	08001eb4 	.word	0x08001eb4
 80003f4:	20000035 	.word	0x20000035
 80003f8:	20000036 	.word	0x20000036

080003fc <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 0303 	and.w	r3, r3, #3
 8000410:	b2da      	uxtb	r2, r3
 8000412:	4b33      	ldr	r3, [pc, #204]	@ (80004e0 <ST7735_SetRotation+0xe4>)
 8000414:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000416:	4b32      	ldr	r3, [pc, #200]	@ (80004e0 <ST7735_SetRotation+0xe4>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b03      	cmp	r3, #3
 800041c:	d84e      	bhi.n	80004bc <ST7735_SetRotation+0xc0>
 800041e:	a201      	add	r2, pc, #4	@ (adr r2, 8000424 <ST7735_SetRotation+0x28>)
 8000420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000424:	08000435 	.word	0x08000435
 8000428:	08000457 	.word	0x08000457
 800042c:	08000479 	.word	0x08000479
 8000430:	0800049b 	.word	0x0800049b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000434:	23c0      	movs	r3, #192	@ 0xc0
 8000436:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <ST7735_SetRotation+0xe8>)
 800043a:	22a0      	movs	r2, #160	@ 0xa0
 800043c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800043e:	4b2a      	ldr	r3, [pc, #168]	@ (80004e8 <ST7735_SetRotation+0xec>)
 8000440:	2280      	movs	r2, #128	@ 0x80
 8000442:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000444:	4b29      	ldr	r3, [pc, #164]	@ (80004ec <ST7735_SetRotation+0xf0>)
 8000446:	781a      	ldrb	r2, [r3, #0]
 8000448:	4b29      	ldr	r3, [pc, #164]	@ (80004f0 <ST7735_SetRotation+0xf4>)
 800044a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800044c:	4b29      	ldr	r3, [pc, #164]	@ (80004f4 <ST7735_SetRotation+0xf8>)
 800044e:	781a      	ldrb	r2, [r3, #0]
 8000450:	4b29      	ldr	r3, [pc, #164]	@ (80004f8 <ST7735_SetRotation+0xfc>)
 8000452:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000454:	e032      	b.n	80004bc <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000456:	23a0      	movs	r3, #160	@ 0xa0
 8000458:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800045a:	4b23      	ldr	r3, [pc, #140]	@ (80004e8 <ST7735_SetRotation+0xec>)
 800045c:	22a0      	movs	r2, #160	@ 0xa0
 800045e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000460:	4b20      	ldr	r3, [pc, #128]	@ (80004e4 <ST7735_SetRotation+0xe8>)
 8000462:	2280      	movs	r2, #128	@ 0x80
 8000464:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000466:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <ST7735_SetRotation+0xf0>)
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	4b23      	ldr	r3, [pc, #140]	@ (80004f8 <ST7735_SetRotation+0xfc>)
 800046c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800046e:	4b21      	ldr	r3, [pc, #132]	@ (80004f4 <ST7735_SetRotation+0xf8>)
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b1f      	ldr	r3, [pc, #124]	@ (80004f0 <ST7735_SetRotation+0xf4>)
 8000474:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000476:	e021      	b.n	80004bc <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000478:	2300      	movs	r3, #0
 800047a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800047c:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <ST7735_SetRotation+0xe8>)
 800047e:	22a0      	movs	r2, #160	@ 0xa0
 8000480:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000482:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <ST7735_SetRotation+0xec>)
 8000484:	2280      	movs	r2, #128	@ 0x80
 8000486:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000488:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <ST7735_SetRotation+0xf0>)
 800048a:	781a      	ldrb	r2, [r3, #0]
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <ST7735_SetRotation+0xf4>)
 800048e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000490:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <ST7735_SetRotation+0xf8>)
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <ST7735_SetRotation+0xfc>)
 8000496:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000498:	e010      	b.n	80004bc <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800049a:	2360      	movs	r3, #96	@ 0x60
 800049c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <ST7735_SetRotation+0xec>)
 80004a0:	22a0      	movs	r2, #160	@ 0xa0
 80004a2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <ST7735_SetRotation+0xe8>)
 80004a6:	2280      	movs	r2, #128	@ 0x80
 80004a8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <ST7735_SetRotation+0xf0>)
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <ST7735_SetRotation+0xfc>)
 80004b0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80004b2:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <ST7735_SetRotation+0xf8>)
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <ST7735_SetRotation+0xf4>)
 80004b8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80004ba:	bf00      	nop
  }
  ST7735_Select();
 80004bc:	f7ff fe7c 	bl	80001b8 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80004c0:	2036      	movs	r0, #54	@ 0x36
 80004c2:	f7ff fea7 	bl	8000214 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80004c6:	f107 030f 	add.w	r3, r7, #15
 80004ca:	2101      	movs	r1, #1
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff febb 	bl	8000248 <ST7735_WriteData>
  ST7735_Unselect();
 80004d2:	f7ff fe7d 	bl	80001d0 <ST7735_Unselect>
}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000034 	.word	0x20000034
 80004e4:	20000032 	.word	0x20000032
 80004e8:	20000030 	.word	0x20000030
 80004ec:	20000035 	.word	0x20000035
 80004f0:	20000037 	.word	0x20000037
 80004f4:	20000036 	.word	0x20000036
 80004f8:	20000038 	.word	0x20000038

080004fc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80004fc:	b082      	sub	sp, #8
 80004fe:	b590      	push	{r4, r7, lr}
 8000500:	b089      	sub	sp, #36	@ 0x24
 8000502:	af00      	add	r7, sp, #0
 8000504:	637b      	str	r3, [r7, #52]	@ 0x34
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	460b      	mov	r3, r1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	b2d8      	uxtb	r0, r3
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	b2d9      	uxtb	r1, r3
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000522:	4413      	add	r3, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	3b01      	subs	r3, #1
 8000528:	b2dc      	uxtb	r4, r3
 800052a:	88bb      	ldrh	r3, [r7, #4]
 800052c:	b2da      	uxtb	r2, r3
 800052e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000532:	4413      	add	r3, r2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	3b01      	subs	r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	4622      	mov	r2, r4
 800053c:	f7ff feea 	bl	8000314 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
 8000544:	e043      	b.n	80005ce <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000546:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	3b20      	subs	r3, #32
 800054c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000550:	fb01 f303 	mul.w	r3, r1, r3
 8000554:	4619      	mov	r1, r3
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	440b      	add	r3, r1
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	4413      	add	r3, r2
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
 8000566:	e029      	b.n	80005bc <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00e      	beq.n	8000596 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000578:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800057a:	0a1b      	lsrs	r3, r3, #8
 800057c:	b29b      	uxth	r3, r3
 800057e:	b2db      	uxtb	r3, r3
 8000580:	743b      	strb	r3, [r7, #16]
 8000582:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000584:	b2db      	uxtb	r3, r3
 8000586:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2102      	movs	r1, #2
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe5a 	bl	8000248 <ST7735_WriteData>
 8000594:	e00f      	b.n	80005b6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800059a:	0a1b      	lsrs	r3, r3, #8
 800059c:	b29b      	uxth	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
 80005a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2102      	movs	r1, #2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe49 	bl	8000248 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	3301      	adds	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80005c0:	461a      	mov	r2, r3
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d3cf      	bcc.n	8000568 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	3301      	adds	r3, #1
 80005cc:	61fb      	str	r3, [r7, #28]
 80005ce:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80005d2:	461a      	mov	r2, r3
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d3b5      	bcc.n	8000546 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3724      	adds	r7, #36	@ 0x24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80005e6:	b002      	add	sp, #8
 80005e8:	4770      	bx	lr
	...

080005ec <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80005ec:	b082      	sub	sp, #8
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af04      	add	r7, sp, #16
 80005f4:	603a      	str	r2, [r7, #0]
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	4603      	mov	r3, r0
 80005fa:	80fb      	strh	r3, [r7, #6]
 80005fc:	460b      	mov	r3, r1
 80005fe:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000600:	f7ff fdda 	bl	80001b8 <ST7735_Select>

    while(*str) {
 8000604:	e033      	b.n	800066e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	7d3a      	ldrb	r2, [r7, #20]
 800060a:	4413      	add	r3, r2
 800060c:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <ST7735_WriteString+0xa0>)
 800060e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000612:	4293      	cmp	r3, r2
 8000614:	db16      	blt.n	8000644 <ST7735_WriteString+0x58>
            x = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800061a:	7d7b      	ldrb	r3, [r7, #21]
 800061c:	461a      	mov	r2, r3
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000624:	88bb      	ldrh	r3, [r7, #4]
 8000626:	7d7a      	ldrb	r2, [r7, #21]
 8000628:	4413      	add	r3, r2
 800062a:	4a19      	ldr	r2, [pc, #100]	@ (8000690 <ST7735_WriteString+0xa4>)
 800062c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000630:	4293      	cmp	r3, r2
 8000632:	da21      	bge.n	8000678 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b20      	cmp	r3, #32
 800063a:	d103      	bne.n	8000644 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	603b      	str	r3, [r7, #0]
                continue;
 8000642:	e014      	b.n	800066e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	88b9      	ldrh	r1, [r7, #4]
 800064a:	88f8      	ldrh	r0, [r7, #6]
 800064c:	8c3b      	ldrh	r3, [r7, #32]
 800064e:	9302      	str	r3, [sp, #8]
 8000650:	8bbb      	ldrh	r3, [r7, #28]
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	f7ff ff4f 	bl	80004fc <ST7735_WriteChar>
        x += font.width;
 800065e:	7d3b      	ldrb	r3, [r7, #20]
 8000660:	461a      	mov	r2, r3
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	4413      	add	r3, r2
 8000666:	80fb      	strh	r3, [r7, #6]
        str++;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	603b      	str	r3, [r7, #0]
    while(*str) {
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1c7      	bne.n	8000606 <ST7735_WriteString+0x1a>
 8000676:	e000      	b.n	800067a <ST7735_WriteString+0x8e>
                break;
 8000678:	bf00      	nop
    }

    ST7735_Unselect();
 800067a:	f7ff fda9 	bl	80001d0 <ST7735_Unselect>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000688:	b002      	add	sp, #8
 800068a:	4770      	bx	lr
 800068c:	20000030 	.word	0x20000030
 8000690:	20000032 	.word	0x20000032

08000694 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4603      	mov	r3, r0
 80006a8:	80bb      	strh	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
 80006ae:	4613      	mov	r3, r2
 80006b0:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	4a38      	ldr	r2, [pc, #224]	@ (8000798 <ST7735_FillRectangle+0x104>)
 80006b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	da67      	bge.n	800078e <ST7735_FillRectangle+0xfa>
 80006be:	88bb      	ldrh	r3, [r7, #4]
 80006c0:	4a36      	ldr	r2, [pc, #216]	@ (800079c <ST7735_FillRectangle+0x108>)
 80006c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006c6:	4293      	cmp	r3, r2
 80006c8:	da61      	bge.n	800078e <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 80006ca:	88fa      	ldrh	r2, [r7, #6]
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a31      	ldr	r2, [pc, #196]	@ (8000798 <ST7735_FillRectangle+0x104>)
 80006d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	dd06      	ble.n	80006e8 <ST7735_FillRectangle+0x54>
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <ST7735_FillRectangle+0x104>)
 80006dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80006e8:	88ba      	ldrh	r2, [r7, #4]
 80006ea:	883b      	ldrh	r3, [r7, #0]
 80006ec:	4413      	add	r3, r2
 80006ee:	4a2b      	ldr	r2, [pc, #172]	@ (800079c <ST7735_FillRectangle+0x108>)
 80006f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	dd06      	ble.n	8000706 <ST7735_FillRectangle+0x72>
 80006f8:	4b28      	ldr	r3, [pc, #160]	@ (800079c <ST7735_FillRectangle+0x108>)
 80006fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	88bb      	ldrh	r3, [r7, #4]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000706:	f7ff fd57 	bl	80001b8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	b2d8      	uxtb	r0, r3
 800070e:	88bb      	ldrh	r3, [r7, #4]
 8000710:	b2d9      	uxtb	r1, r3
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4413      	add	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3b01      	subs	r3, #1
 8000720:	b2dc      	uxtb	r4, r3
 8000722:	88bb      	ldrh	r3, [r7, #4]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	883b      	ldrh	r3, [r7, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	3b01      	subs	r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4622      	mov	r2, r4
 8000734:	f7ff fdee 	bl	8000314 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000738:	8c3b      	ldrh	r3, [r7, #32]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	733b      	strb	r3, [r7, #12]
 8000742:	8c3b      	ldrh	r3, [r7, #32]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800074e:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <ST7735_FillRectangle+0x10c>)
 8000750:	f000 fcd8 	bl	8001104 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000754:	883b      	ldrh	r3, [r7, #0]
 8000756:	80bb      	strh	r3, [r7, #4]
 8000758:	e013      	b.n	8000782 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 800075a:	887b      	ldrh	r3, [r7, #2]
 800075c:	80fb      	strh	r3, [r7, #6]
 800075e:	e00a      	b.n	8000776 <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000760:	f107 010c 	add.w	r1, r7, #12
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2202      	movs	r2, #2
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <ST7735_FillRectangle+0x110>)
 800076c:	f001 f944 	bl	80019f8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	3b01      	subs	r3, #1
 8000774:	80fb      	strh	r3, [r7, #6]
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f1      	bne.n	8000760 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	80bb      	strh	r3, [r7, #4]
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1e8      	bne.n	800075a <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8000788:	f7ff fd22 	bl	80001d0 <ST7735_Unselect>
 800078c:	e000      	b.n	8000790 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800078e:	bf00      	nop
}
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	bf00      	nop
 8000798:	20000030 	.word	0x20000030
 800079c:	20000032 	.word	0x20000032
 80007a0:	40010c00 	.word	0x40010c00
 80007a4:	2000003c 	.word	0x2000003c

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 f9bb 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f821 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f89d 	bl	80008f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007ba:	f000 f863 	bl	8000884 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fdf0 	bl	80003a4 <ST7735_Init>
  fillScreen(BLACK);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fcdd 	bl	8000184 <fillScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ST7735_SetRotation(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff fe16 	bl	80003fc <ST7735_SetRotation>
	  ST7735_WriteString(0,0, "Hello", Font_11x18, WHITE, BLACK);
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <main+0x48>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	9202      	str	r2, [sp, #8]
 80007d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007da:	9201      	str	r2, [sp, #4]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	9200      	str	r2, [sp, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <main+0x4c>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ff00 	bl	80005ec <ST7735_WriteString>
	  ST7735_SetRotation(1);
 80007ec:	bf00      	nop
 80007ee:	e7ec      	b.n	80007ca <main+0x22>
 80007f0:	20000000 	.word	0x20000000
 80007f4:	08001e64 	.word	0x08001e64

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b090      	sub	sp, #64	@ 0x40
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2228      	movs	r2, #40	@ 0x28
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f001 faf3 	bl	8001df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000836:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fc77 	bl	8001134 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800084c:	f000 f89e 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fee4 	bl	8001638 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000876:	f000 f889 	bl	800098c <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3740      	adds	r7, #64	@ 0x40
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_SPI1_Init+0x68>)
 800088a:	4a19      	ldr	r2, [pc, #100]	@ (80008f0 <MX_SPI1_Init+0x6c>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_SPI1_Init+0x68>)
 8000890:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_SPI1_Init+0x68>)
 8000898:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800089c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008ba:	2220      	movs	r2, #32
 80008bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008d2:	220a      	movs	r2, #10
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008d8:	f001 f80a 	bl	80018f0 <HAL_SPI_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008e2:	f000 f853 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000003c 	.word	0x2000003c
 80008f0:	40013000 	.word	0x40013000

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000908:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <MX_GPIO_Init+0x90>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a1d      	ldr	r2, [pc, #116]	@ (8000984 <MX_GPIO_Init+0x90>)
 800090e:	f043 0320 	orr.w	r3, r3, #32
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <MX_GPIO_Init+0x90>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_GPIO_Init+0x90>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <MX_GPIO_Init+0x90>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_GPIO_Init+0x90>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000956:	480c      	ldr	r0, [pc, #48]	@ (8000988 <MX_GPIO_Init+0x94>)
 8000958:	f000 fbd4 	bl	8001104 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800095c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2302      	movs	r3, #2
 800096c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_GPIO_Init+0x94>)
 8000976:	f000 fa41 	bl	8000dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	40010c00 	.word	0x40010c00

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_MspInit+0x5c>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <HAL_MspInit+0x5c>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_MspInit+0x5c>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_MspInit+0x5c>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <HAL_MspInit+0x5c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <HAL_MspInit+0x5c>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_MspInit+0x60>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <HAL_MspInit+0x60>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010000 	.word	0x40010000

080009fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a15      	ldr	r2, [pc, #84]	@ (8000a6c <HAL_SPI_MspInit+0x70>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d123      	bne.n	8000a64 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <HAL_SPI_MspInit+0x74>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <HAL_SPI_MspInit+0x74>)
 8000a22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_SPI_MspInit+0x74>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_SPI_MspInit+0x74>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <HAL_SPI_MspInit+0x74>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <HAL_SPI_MspInit+0x74>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a4c:	23a0      	movs	r3, #160	@ 0xa0
 8000a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_SPI_MspInit+0x78>)
 8000a60:	f000 f9cc 	bl	8000dfc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40013000 	.word	0x40013000
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010800 	.word	0x40010800

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f874 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff fff8 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ae2:	490c      	ldr	r1, [pc, #48]	@ (8000b14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a09      	ldr	r2, [pc, #36]	@ (8000b1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000af8:	4c09      	ldr	r4, [pc, #36]	@ (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f001 f97d 	bl	8001e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fe4d 	bl	80007a8 <main>
  bx lr
 8000b0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b18:	08002c68 	.word	0x08002c68
  ldr r2, =_sbss
 8000b1c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b20:	20000098 	.word	0x20000098

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f92b 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff ff28 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f935 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f90b 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	@ (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000010 	.word	0x20000010
 8000bb0:	2000000c 	.word	0x2000000c

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000010 	.word	0x20000010
 8000bd4:	20000094 	.word	0x20000094

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	@ (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000094 	.word	0x20000094

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000010 	.word	0x20000010

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	@ (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	@ (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	@ 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	@ 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff90 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff49 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff5e 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff90 	bl	8000cec <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5f 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb0 	bl	8000d50 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b08b      	sub	sp, #44	@ 0x2c
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0e:	e169      	b.n	80010e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e10:	2201      	movs	r2, #1
 8000e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8158 	bne.w	80010de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4a9a      	ldr	r2, [pc, #616]	@ (800109c <HAL_GPIO_Init+0x2a0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d05e      	beq.n	8000ef6 <HAL_GPIO_Init+0xfa>
 8000e38:	4a98      	ldr	r2, [pc, #608]	@ (800109c <HAL_GPIO_Init+0x2a0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d875      	bhi.n	8000f2a <HAL_GPIO_Init+0x12e>
 8000e3e:	4a98      	ldr	r2, [pc, #608]	@ (80010a0 <HAL_GPIO_Init+0x2a4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d058      	beq.n	8000ef6 <HAL_GPIO_Init+0xfa>
 8000e44:	4a96      	ldr	r2, [pc, #600]	@ (80010a0 <HAL_GPIO_Init+0x2a4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d86f      	bhi.n	8000f2a <HAL_GPIO_Init+0x12e>
 8000e4a:	4a96      	ldr	r2, [pc, #600]	@ (80010a4 <HAL_GPIO_Init+0x2a8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d052      	beq.n	8000ef6 <HAL_GPIO_Init+0xfa>
 8000e50:	4a94      	ldr	r2, [pc, #592]	@ (80010a4 <HAL_GPIO_Init+0x2a8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d869      	bhi.n	8000f2a <HAL_GPIO_Init+0x12e>
 8000e56:	4a94      	ldr	r2, [pc, #592]	@ (80010a8 <HAL_GPIO_Init+0x2ac>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d04c      	beq.n	8000ef6 <HAL_GPIO_Init+0xfa>
 8000e5c:	4a92      	ldr	r2, [pc, #584]	@ (80010a8 <HAL_GPIO_Init+0x2ac>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d863      	bhi.n	8000f2a <HAL_GPIO_Init+0x12e>
 8000e62:	4a92      	ldr	r2, [pc, #584]	@ (80010ac <HAL_GPIO_Init+0x2b0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d046      	beq.n	8000ef6 <HAL_GPIO_Init+0xfa>
 8000e68:	4a90      	ldr	r2, [pc, #576]	@ (80010ac <HAL_GPIO_Init+0x2b0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d85d      	bhi.n	8000f2a <HAL_GPIO_Init+0x12e>
 8000e6e:	2b12      	cmp	r3, #18
 8000e70:	d82a      	bhi.n	8000ec8 <HAL_GPIO_Init+0xcc>
 8000e72:	2b12      	cmp	r3, #18
 8000e74:	d859      	bhi.n	8000f2a <HAL_GPIO_Init+0x12e>
 8000e76:	a201      	add	r2, pc, #4	@ (adr r2, 8000e7c <HAL_GPIO_Init+0x80>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000ef7 	.word	0x08000ef7
 8000e80:	08000ed1 	.word	0x08000ed1
 8000e84:	08000ee3 	.word	0x08000ee3
 8000e88:	08000f25 	.word	0x08000f25
 8000e8c:	08000f2b 	.word	0x08000f2b
 8000e90:	08000f2b 	.word	0x08000f2b
 8000e94:	08000f2b 	.word	0x08000f2b
 8000e98:	08000f2b 	.word	0x08000f2b
 8000e9c:	08000f2b 	.word	0x08000f2b
 8000ea0:	08000f2b 	.word	0x08000f2b
 8000ea4:	08000f2b 	.word	0x08000f2b
 8000ea8:	08000f2b 	.word	0x08000f2b
 8000eac:	08000f2b 	.word	0x08000f2b
 8000eb0:	08000f2b 	.word	0x08000f2b
 8000eb4:	08000f2b 	.word	0x08000f2b
 8000eb8:	08000f2b 	.word	0x08000f2b
 8000ebc:	08000f2b 	.word	0x08000f2b
 8000ec0:	08000ed9 	.word	0x08000ed9
 8000ec4:	08000eed 	.word	0x08000eed
 8000ec8:	4a79      	ldr	r2, [pc, #484]	@ (80010b0 <HAL_GPIO_Init+0x2b4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d013      	beq.n	8000ef6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ece:	e02c      	b.n	8000f2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	623b      	str	r3, [r7, #32]
          break;
 8000ed6:	e029      	b.n	8000f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	3304      	adds	r3, #4
 8000ede:	623b      	str	r3, [r7, #32]
          break;
 8000ee0:	e024      	b.n	8000f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	623b      	str	r3, [r7, #32]
          break;
 8000eea:	e01f      	b.n	8000f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	330c      	adds	r3, #12
 8000ef2:	623b      	str	r3, [r7, #32]
          break;
 8000ef4:	e01a      	b.n	8000f2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d102      	bne.n	8000f04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000efe:	2304      	movs	r3, #4
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e013      	b.n	8000f2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d105      	bne.n	8000f18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	611a      	str	r2, [r3, #16]
          break;
 8000f16:	e009      	b.n	8000f2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69fa      	ldr	r2, [r7, #28]
 8000f20:	615a      	str	r2, [r3, #20]
          break;
 8000f22:	e003      	b.n	8000f2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
          break;
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x130>
          break;
 8000f2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2bff      	cmp	r3, #255	@ 0xff
 8000f30:	d801      	bhi.n	8000f36 <HAL_GPIO_Init+0x13a>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	e001      	b.n	8000f3a <HAL_GPIO_Init+0x13e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2bff      	cmp	r3, #255	@ 0xff
 8000f40:	d802      	bhi.n	8000f48 <HAL_GPIO_Init+0x14c>
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	e002      	b.n	8000f4e <HAL_GPIO_Init+0x152>
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	3b08      	subs	r3, #8
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	210f      	movs	r1, #15
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	6a39      	ldr	r1, [r7, #32]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80b1 	beq.w	80010de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80010b4 <HAL_GPIO_Init+0x2b8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	@ (80010b4 <HAL_GPIO_Init+0x2b8>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b4a      	ldr	r3, [pc, #296]	@ (80010b4 <HAL_GPIO_Init+0x2b8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f94:	4a48      	ldr	r2, [pc, #288]	@ (80010b8 <HAL_GPIO_Init+0x2bc>)
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a40      	ldr	r2, [pc, #256]	@ (80010bc <HAL_GPIO_Init+0x2c0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d013      	beq.n	8000fe8 <HAL_GPIO_Init+0x1ec>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80010c0 <HAL_GPIO_Init+0x2c4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d00d      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a3e      	ldr	r2, [pc, #248]	@ (80010c4 <HAL_GPIO_Init+0x2c8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d007      	beq.n	8000fe0 <HAL_GPIO_Init+0x1e4>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80010c8 <HAL_GPIO_Init+0x2cc>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d101      	bne.n	8000fdc <HAL_GPIO_Init+0x1e0>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e004      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e002      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	4093      	lsls	r3, r2
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ffa:	492f      	ldr	r1, [pc, #188]	@ (80010b8 <HAL_GPIO_Init+0x2bc>)
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001014:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	492c      	ldr	r1, [pc, #176]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	608b      	str	r3, [r1, #8]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001022:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	4928      	ldr	r1, [pc, #160]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 800102c:	4013      	ands	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	4922      	ldr	r1, [pc, #136]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	60cb      	str	r3, [r1, #12]
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	43db      	mvns	r3, r3
 8001052:	491e      	ldr	r1, [pc, #120]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8001054:	4013      	ands	r3, r2
 8001056:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4918      	ldr	r1, [pc, #96]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	43db      	mvns	r3, r3
 800107a:	4914      	ldr	r1, [pc, #80]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 800107c:	4013      	ands	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d021      	beq.n	80010d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	490e      	ldr	r1, [pc, #56]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
 8001098:	e021      	b.n	80010de <HAL_GPIO_Init+0x2e2>
 800109a:	bf00      	nop
 800109c:	10320000 	.word	0x10320000
 80010a0:	10310000 	.word	0x10310000
 80010a4:	10220000 	.word	0x10220000
 80010a8:	10210000 	.word	0x10210000
 80010ac:	10120000 	.word	0x10120000
 80010b0:	10110000 	.word	0x10110000
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	40011000 	.word	0x40011000
 80010c8:	40011400 	.word	0x40011400
 80010cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_GPIO_Init+0x304>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	4909      	ldr	r1, [pc, #36]	@ (8001100 <HAL_GPIO_Init+0x304>)
 80010da:	4013      	ands	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	3301      	adds	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	fa22 f303 	lsr.w	r3, r2, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f47f ae8e 	bne.w	8000e10 <HAL_GPIO_Init+0x14>
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	372c      	adds	r7, #44	@ 0x2c
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	4613      	mov	r3, r2
 8001112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	611a      	str	r2, [r3, #16]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e272      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8087 	beq.w	8001262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001154:	4b92      	ldr	r3, [pc, #584]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b04      	cmp	r3, #4
 800115e:	d00c      	beq.n	800117a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001160:	4b8f      	ldr	r3, [pc, #572]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b08      	cmp	r3, #8
 800116a:	d112      	bne.n	8001192 <HAL_RCC_OscConfig+0x5e>
 800116c:	4b8c      	ldr	r3, [pc, #560]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001178:	d10b      	bne.n	8001192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117a:	4b89      	ldr	r3, [pc, #548]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d06c      	beq.n	8001260 <HAL_RCC_OscConfig+0x12c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d168      	bne.n	8001260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e24c      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x76>
 800119c:	4b80      	ldr	r3, [pc, #512]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a7f      	ldr	r2, [pc, #508]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e02e      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x98>
 80011b2:	4b7b      	ldr	r3, [pc, #492]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7a      	ldr	r2, [pc, #488]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b78      	ldr	r3, [pc, #480]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a77      	ldr	r2, [pc, #476]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0xbc>
 80011d6:	4b72      	ldr	r3, [pc, #456]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a71      	ldr	r2, [pc, #452]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b6f      	ldr	r3, [pc, #444]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6e      	ldr	r2, [pc, #440]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011f0:	4b6b      	ldr	r3, [pc, #428]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a6a      	ldr	r2, [pc, #424]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b68      	ldr	r3, [pc, #416]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a67      	ldr	r2, [pc, #412]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fce2 	bl	8000bd8 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fcde 	bl	8000bd8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e200      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b5d      	ldr	r3, [pc, #372]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xe4>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fcce 	bl	8000bd8 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcca 	bl	8000bd8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	@ 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1ec      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x10c>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d063      	beq.n	8001336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800126e:	4b4c      	ldr	r3, [pc, #304]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800127a:	4b49      	ldr	r3, [pc, #292]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d11c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x18c>
 8001286:	4b46      	ldr	r3, [pc, #280]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x176>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1c0      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b3d      	ldr	r3, [pc, #244]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4939      	ldr	r1, [pc, #228]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e03a      	b.n	8001336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fc83 	bl	8000bd8 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc7f 	bl	8000bd8 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1a1      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4927      	ldr	r1, [pc, #156]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fc62 	bl	8000bd8 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fc5e 	bl	8000bd8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e180      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d03a      	beq.n	80013b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d019      	beq.n	800137e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <HAL_RCC_OscConfig+0x274>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001350:	f7ff fc42 	bl	8000bd8 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fc3e 	bl	8000bd8 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e160      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 fa9c 	bl	80018b4 <RCC_Delay>
 800137c:	e01c      	b.n	80013b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_RCC_OscConfig+0x274>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff fc28 	bl	8000bd8 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138a:	e00f      	b.n	80013ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc24 	bl	8000bd8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d908      	bls.n	80013ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e146      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	42420000 	.word	0x42420000
 80013a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	4b92      	ldr	r3, [pc, #584]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e9      	bne.n	800138c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a6 	beq.w	8001512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ca:	4b8b      	ldr	r3, [pc, #556]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10d      	bne.n	80013f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b88      	ldr	r3, [pc, #544]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a87      	ldr	r2, [pc, #540]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b85      	ldr	r3, [pc, #532]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f2:	4b82      	ldr	r3, [pc, #520]	@ (80015fc <HAL_RCC_OscConfig+0x4c8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d118      	bne.n	8001430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fe:	4b7f      	ldr	r3, [pc, #508]	@ (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7e      	ldr	r2, [pc, #504]	@ (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140a:	f7ff fbe5 	bl	8000bd8 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001412:	f7ff fbe1 	bl	8000bd8 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b64      	cmp	r3, #100	@ 0x64
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e103      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	4b75      	ldr	r3, [pc, #468]	@ (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x312>
 8001438:	4b6f      	ldr	r3, [pc, #444]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4a6e      	ldr	r2, [pc, #440]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6213      	str	r3, [r2, #32]
 8001444:	e02d      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x334>
 800144e:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a69      	ldr	r2, [pc, #420]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	4b67      	ldr	r3, [pc, #412]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4a66      	ldr	r2, [pc, #408]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	6213      	str	r3, [r2, #32]
 8001466:	e01c      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d10c      	bne.n	800148a <HAL_RCC_OscConfig+0x356>
 8001470:	4b61      	ldr	r3, [pc, #388]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a60      	ldr	r2, [pc, #384]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	4b5e      	ldr	r3, [pc, #376]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a5d      	ldr	r2, [pc, #372]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	e00b      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 800148a:	4b5b      	ldr	r3, [pc, #364]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a5a      	ldr	r2, [pc, #360]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4b58      	ldr	r3, [pc, #352]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a57      	ldr	r2, [pc, #348]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d015      	beq.n	80014d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fb95 	bl	8000bd8 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fb91 	bl	8000bd8 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0b1      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	4b4b      	ldr	r3, [pc, #300]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ee      	beq.n	80014b2 <HAL_RCC_OscConfig+0x37e>
 80014d4:	e014      	b.n	8001500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb7f 	bl	8000bd8 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fb7b 	bl	8000bd8 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e09b      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	4b40      	ldr	r3, [pc, #256]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d105      	bne.n	8001512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001506:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a3b      	ldr	r2, [pc, #236]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8087 	beq.w	800162a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800151c:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d061      	beq.n	80015ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d146      	bne.n	80015be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	4b33      	ldr	r3, [pc, #204]	@ (8001600 <HAL_RCC_OscConfig+0x4cc>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fb4f 	bl	8000bd8 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fb4b 	bl	8000bd8 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e06d      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001550:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001564:	d108      	bne.n	8001578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4921      	ldr	r1, [pc, #132]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001578:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a19      	ldr	r1, [r3, #32]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001588:	430b      	orrs	r3, r1
 800158a:	491b      	ldr	r1, [pc, #108]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x4cc>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb1f 	bl	8000bd8 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff fb1b 	bl	8000bd8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e03d      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x46a>
 80015bc:	e035      	b.n	800162a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_RCC_OscConfig+0x4cc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb08 	bl	8000bd8 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff fb04 	bl	8000bd8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e026      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x498>
 80015ea:	e01e      	b.n	800162a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e019      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40007000 	.word	0x40007000
 8001600:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_RCC_OscConfig+0x500>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	429a      	cmp	r2, r3
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0d0      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b67      	ldr	r3, [pc, #412]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4965      	ldr	r1, [pc, #404]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a58      	ldr	r2, [pc, #352]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800169e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a52      	ldr	r2, [pc, #328]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d040      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d115      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b41      	ldr	r3, [pc, #260]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e073      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06b      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4936      	ldr	r1, [pc, #216]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff fa56 	bl	8000bd8 <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff fa52 	bl	8000bd8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e053      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d210      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4922      	ldr	r1, [pc, #136]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	490a      	ldr	r1, [pc, #40]	@ (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	@ (8001804 <HAL_RCC_ClockConfig+0x1cc>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_RCC_ClockConfig+0x1d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f9b4 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40021000 	.word	0x40021000
 8001800:	08002c3c 	.word	0x08002c3c
 8001804:	20000008 	.word	0x20000008
 8001808:	2000000c 	.word	0x2000000c

0800180c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001826:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b04      	cmp	r3, #4
 8001834:	d002      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x30>
 8001836:	2b08      	cmp	r3, #8
 8001838:	d003      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x36>
 800183a:	e027      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800183e:	613b      	str	r3, [r7, #16]
      break;
 8001840:	e027      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	0c9b      	lsrs	r3, r3, #18
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	4a17      	ldr	r2, [pc, #92]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d010      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	0c5b      	lsrs	r3, r3, #17
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	4a11      	ldr	r2, [pc, #68]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800186e:	fb03 f202 	mul.w	r2, r3, r2
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e004      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a0c      	ldr	r2, [pc, #48]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	613b      	str	r3, [r7, #16]
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800188e:	613b      	str	r3, [r7, #16]
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	693b      	ldr	r3, [r7, #16]
}
 8001894:	4618      	mov	r0, r3
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	007a1200 	.word	0x007a1200
 80018a8:	08002c4c 	.word	0x08002c4c
 80018ac:	08002c5c 	.word	0x08002c5c
 80018b0:	003d0900 	.word	0x003d0900

080018b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <RCC_Delay+0x34>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <RCC_Delay+0x38>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0a5b      	lsrs	r3, r3, #9
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018d0:	bf00      	nop
  }
  while (Delay --);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	60fa      	str	r2, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <RCC_Delay+0x1c>
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000008 	.word	0x20000008
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e076      	b.n	80019f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	2b00      	cmp	r3, #0
 8001908:	d108      	bne.n	800191c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001912:	d009      	beq.n	8001928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
 800191a:	e005      	b.n	8001928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff f85a 	bl	80009fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800195e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ac:	ea42 0103 	orr.w	r1, r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	0c1a      	lsrs	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f002 0204 	and.w	r2, r2, #4
 80019ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a08:	f7ff f8e6 	bl	8000bd8 <HAL_GetTick>
 8001a0c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d001      	beq.n	8001a22 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e12a      	b.n	8001c78 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_SPI_Transmit+0x36>
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e122      	b.n	8001c78 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_SPI_Transmit+0x48>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e11b      	b.n	8001c78 <HAL_SPI_Transmit+0x280>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	88fa      	ldrh	r2, [r7, #6]
 8001a60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a8e:	d10f      	bne.n	8001ab0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001aae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aba:	2b40      	cmp	r3, #64	@ 0x40
 8001abc:	d007      	beq.n	8001ace <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ad6:	d152      	bne.n	8001b7e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_SPI_Transmit+0xee>
 8001ae0:	8b7b      	ldrh	r3, [r7, #26]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d145      	bne.n	8001b72 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	881a      	ldrh	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	1c9a      	adds	r2, r3, #2
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b0a:	e032      	b.n	8001b72 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d112      	bne.n	8001b40 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	881a      	ldrh	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	1c9a      	adds	r2, r3, #2
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001b3e:	e018      	b.n	8001b72 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b40:	f7ff f84a 	bl	8000bd8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d803      	bhi.n	8001b58 <HAL_SPI_Transmit+0x160>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	d102      	bne.n	8001b5e <HAL_SPI_Transmit+0x166>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e082      	b.n	8001c78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1c7      	bne.n	8001b0c <HAL_SPI_Transmit+0x114>
 8001b7c:	e053      	b.n	8001c26 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_SPI_Transmit+0x194>
 8001b86:	8b7b      	ldrh	r3, [r7, #26]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d147      	bne.n	8001c1c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	330c      	adds	r3, #12
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bb2:	e033      	b.n	8001c1c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d113      	bne.n	8001bea <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	330c      	adds	r3, #12
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001be8:	e018      	b.n	8001c1c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bea:	f7fe fff5 	bl	8000bd8 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d803      	bhi.n	8001c02 <HAL_SPI_Transmit+0x20a>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d102      	bne.n	8001c08 <HAL_SPI_Transmit+0x210>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e02d      	b.n	8001c78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1c6      	bne.n	8001bb4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f8b0 	bl	8001d90 <SPI_EndRxTxTransaction>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c90:	f7fe ffa2 	bl	8000bd8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ca0:	f7fe ff9a 	bl	8000bd8 <HAL_GetTick>
 8001ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	@ (8001d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	015b      	lsls	r3, r3, #5
 8001cac:	0d1b      	lsrs	r3, r3, #20
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cb6:	e054      	b.n	8001d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d050      	beq.n	8001d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001cc0:	f7fe ff8a 	bl	8000bd8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d902      	bls.n	8001cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d13d      	bne.n	8001d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cee:	d111      	bne.n	8001d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cf8:	d004      	beq.n	8001d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d02:	d107      	bne.n	8001d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d1c:	d10f      	bne.n	8001d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e017      	b.n	8001d82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	bf0c      	ite	eq
 8001d72:	2301      	moveq	r3, #1
 8001d74:	2300      	movne	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d19b      	bne.n	8001cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008

08001d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2201      	movs	r2, #1
 8001da4:	2102      	movs	r1, #2
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7ff ff6a 	bl	8001c80 <SPI_WaitFlagStateUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	f043 0220 	orr.w	r2, r3, #32
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e013      	b.n	8001dea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2180      	movs	r1, #128	@ 0x80
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff ff57 	bl	8001c80 <SPI_WaitFlagStateUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e000      	b.n	8001dea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <memset>:
 8001df2:	4603      	mov	r3, r0
 8001df4:	4402      	add	r2, r0
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d100      	bne.n	8001dfc <memset+0xa>
 8001dfa:	4770      	bx	lr
 8001dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8001e00:	e7f9      	b.n	8001df6 <memset+0x4>
	...

08001e04 <__libc_init_array>:
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	2600      	movs	r6, #0
 8001e08:	4d0c      	ldr	r5, [pc, #48]	@ (8001e3c <__libc_init_array+0x38>)
 8001e0a:	4c0d      	ldr	r4, [pc, #52]	@ (8001e40 <__libc_init_array+0x3c>)
 8001e0c:	1b64      	subs	r4, r4, r5
 8001e0e:	10a4      	asrs	r4, r4, #2
 8001e10:	42a6      	cmp	r6, r4
 8001e12:	d109      	bne.n	8001e28 <__libc_init_array+0x24>
 8001e14:	f000 f81a 	bl	8001e4c <_init>
 8001e18:	2600      	movs	r6, #0
 8001e1a:	4d0a      	ldr	r5, [pc, #40]	@ (8001e44 <__libc_init_array+0x40>)
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e48 <__libc_init_array+0x44>)
 8001e1e:	1b64      	subs	r4, r4, r5
 8001e20:	10a4      	asrs	r4, r4, #2
 8001e22:	42a6      	cmp	r6, r4
 8001e24:	d105      	bne.n	8001e32 <__libc_init_array+0x2e>
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
 8001e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e2c:	4798      	blx	r3
 8001e2e:	3601      	adds	r6, #1
 8001e30:	e7ee      	b.n	8001e10 <__libc_init_array+0xc>
 8001e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e36:	4798      	blx	r3
 8001e38:	3601      	adds	r6, #1
 8001e3a:	e7f2      	b.n	8001e22 <__libc_init_array+0x1e>
 8001e3c:	08002c60 	.word	0x08002c60
 8001e40:	08002c60 	.word	0x08002c60
 8001e44:	08002c60 	.word	0x08002c60
 8001e48:	08002c64 	.word	0x08002c64

08001e4c <_init>:
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	bf00      	nop
 8001e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e52:	bc08      	pop	{r3}
 8001e54:	469e      	mov	lr, r3
 8001e56:	4770      	bx	lr

08001e58 <_fini>:
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	bf00      	nop
 8001e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5e:	bc08      	pop	{r3}
 8001e60:	469e      	mov	lr, r3
 8001e62:	4770      	bx	lr

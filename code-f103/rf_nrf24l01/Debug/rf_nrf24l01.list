
rf_nrf24l01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a5c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003b68  08003b68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  00005070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bdc  08003bdc  00005070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bdc  08003bdc  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bdc  08003bdc  00004bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003be0  08003be0  00004be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003be4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  08003c54  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003c54  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009473  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae8  00000000  00000000  0000e50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0000fff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077b  00000000  00000000  000109d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f25  00000000  00000000  0001114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abf0  00000000  00000000  00029070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f64  00000000  00000000  00033c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9bc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f80  00000000  00000000  000b9c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000bcb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b50 	.word	0x08003b50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b50 	.word	0x08003b50

0800014c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF) != 0) {
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4806      	ldr	r0, [pc, #24]	@ (8000178 <__io_putchar+0x2c>)
 800015e:	f002 fb4e 	bl	80027fe <HAL_UART_Transmit>
 8000162:	4603      	mov	r3, r0
 8000164:	2b00      	cmp	r3, #0
 8000166:	d002      	beq.n	800016e <__io_putchar+0x22>
    return -1;
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	e000      	b.n	8000170 <__io_putchar+0x24>
  }
  return ch;
 800016e:	687b      	ldr	r3, [r7, #4]
}
 8000170:	4618      	mov	r0, r3
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	200000e4 	.word	0x200000e4

0800017c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8000186:	88fb      	ldrh	r3, [r7, #6]
 8000188:	2b80      	cmp	r3, #128	@ 0x80
 800018a:	d101      	bne.n	8000190 <HAL_GPIO_EXTI_Callback+0x14>
		nrf24l01p_tx_irq(); // clear interrupt flag
 800018c:	f000 fa10 	bl	80005b0 <nrf24l01p_tx_irq>
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019e:	f000 fdd7 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a2:	f000 f841 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a6:	f000 f8db 	bl	8000360 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001aa:	f000 f879 	bl	80002a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001ae:	f000 f8ad 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Start\n");
 80001b2:	4819      	ldr	r0, [pc, #100]	@ (8000218 <main+0x80>)
 80001b4:	f002 fe2a 	bl	8002e0c <puts>
  nrf24l01p_tx_init(2500, _1Mbps);
 80001b8:	2100      	movs	r1, #0
 80001ba:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80001be:	f000 f9c1 	bl	8000544 <nrf24l01p_tx_init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
      // change tx datas
	  printf("TX:");
 80001c2:	4816      	ldr	r0, [pc, #88]	@ (800021c <main+0x84>)
 80001c4:	f002 fdb2 	bl	8002d2c <iprintf>
      for(int i= 0; i < 8; i++)
 80001c8:	2300      	movs	r3, #0
 80001ca:	607b      	str	r3, [r7, #4]
 80001cc:	e015      	b.n	80001fa <main+0x62>
      {
          tx_data[i]++;
 80001ce:	4a14      	ldr	r2, [pc, #80]	@ (8000220 <main+0x88>)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4413      	add	r3, r2
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	b2d9      	uxtb	r1, r3
 80001da:	4a11      	ldr	r2, [pc, #68]	@ (8000220 <main+0x88>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	460a      	mov	r2, r1
 80001e2:	701a      	strb	r2, [r3, #0]
          printf("%02X ", tx_data[i-1]);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3b01      	subs	r3, #1
 80001e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000220 <main+0x88>)
 80001ea:	5cd3      	ldrb	r3, [r2, r3]
 80001ec:	4619      	mov	r1, r3
 80001ee:	480d      	ldr	r0, [pc, #52]	@ (8000224 <main+0x8c>)
 80001f0:	f002 fd9c 	bl	8002d2c <iprintf>
      for(int i= 0; i < 8; i++)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2b07      	cmp	r3, #7
 80001fe:	dde6      	ble.n	80001ce <main+0x36>
      }
      printf("\n");
 8000200:	200a      	movs	r0, #10
 8000202:	f002 fda5 	bl	8002d50 <putchar>

      // transmit
      nrf24l01p_tx_transmit(tx_data);
 8000206:	4806      	ldr	r0, [pc, #24]	@ (8000220 <main+0x88>)
 8000208:	f000 f9c7 	bl	800059a <nrf24l01p_tx_transmit>
      HAL_Delay(500);
 800020c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000210:	f000 fe00 	bl	8000e14 <HAL_Delay>
	  printf("TX:");
 8000214:	e7d5      	b.n	80001c2 <main+0x2a>
 8000216:	bf00      	nop
 8000218:	08003b68 	.word	0x08003b68
 800021c:	08003b70 	.word	0x08003b70
 8000220:	20000000 	.word	0x20000000
 8000224:	08003b74 	.word	0x08003b74

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	@ 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fec8 	bl	8002fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000256:	2300      	movs	r3, #0
 8000258:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	4618      	mov	r0, r3
 8000260:	f001 f8d8 	bl	8001414 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800026a:	f000 f8e1 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000272:	2300      	movs	r3, #0
 8000274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fb46 	bl	8001918 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000292:	f000 f8cd 	bl	8000430 <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3740      	adds	r7, #64	@ 0x40
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002a4:	4b17      	ldr	r3, [pc, #92]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002a6:	4a18      	ldr	r2, [pc, #96]	@ (8000308 <MX_SPI1_Init+0x68>)
 80002a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002aa:	4b16      	ldr	r3, [pc, #88]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002b2:	4b14      	ldr	r3, [pc, #80]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002be:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e4:	4b07      	ldr	r3, [pc, #28]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002ea:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002ec:	220a      	movs	r2, #10
 80002ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002f0:	4804      	ldr	r0, [pc, #16]	@ (8000304 <MX_SPI1_Init+0x64>)
 80002f2:	f001 fc9f 	bl	8001c34 <HAL_SPI_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002fc:	f000 f898 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000008c 	.word	0x2000008c
 8000308:	40013000 	.word	0x40013000

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f002 fa0b 	bl	800275e <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f86f 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000e4 	.word	0x200000e4
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000374:	4b2b      	ldr	r3, [pc, #172]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a2a      	ldr	r2, [pc, #168]	@ (8000424 <MX_GPIO_Init+0xc4>)
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b28      	ldr	r3, [pc, #160]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0320 	and.w	r3, r3, #32
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b25      	ldr	r3, [pc, #148]	@ (8000424 <MX_GPIO_Init+0xc4>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a24      	ldr	r2, [pc, #144]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <MX_GPIO_Init+0xc4>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003aa:	f043 0308 	orr.w	r3, r3, #8
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0308 	and.w	r3, r3, #8
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003c2:	4819      	ldr	r0, [pc, #100]	@ (8000428 <MX_GPIO_Init+0xc8>)
 80003c4:	f000 ffdc 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ce:	4816      	ldr	r0, [pc, #88]	@ (8000428 <MX_GPIO_Init+0xc8>)
 80003d0:	f000 ffd6 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80003d4:	2380      	movs	r3, #128	@ 0x80
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d8:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_GPIO_Init+0xcc>)
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4810      	ldr	r0, [pc, #64]	@ (8000428 <MX_GPIO_Init+0xc8>)
 80003e8:	f000 fe46 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CSN_Pin SPI1_CE_Pin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|SPI1_CE_Pin;
 80003ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	4808      	ldr	r0, [pc, #32]	@ (8000428 <MX_GPIO_Init+0xc8>)
 8000406:	f000 fe37 	bl	8001078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	2017      	movs	r0, #23
 8000410:	f000 fdfb 	bl	800100a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000414:	2017      	movs	r0, #23
 8000416:	f000 fe14 	bl	8001042 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041a:	bf00      	nop
 800041c:	3720      	adds	r7, #32
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	40010c00 	.word	0x40010c00
 800042c:	10110000 	.word	0x10110000

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <Error_Handler+0x8>

0800043c <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000446:	4802      	ldr	r0, [pc, #8]	@ (8000450 <cs_high+0x14>)
 8000448:	f000 ff9a 	bl	8001380 <HAL_GPIO_WritePin>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40010c00 	.word	0x40010c00

08000454 <cs_low>:

static void cs_low()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800045e:	4802      	ldr	r0, [pc, #8]	@ (8000468 <cs_low+0x14>)
 8000460:	f000 ff8e 	bl	8001380 <HAL_GPIO_WritePin>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40010c00 	.word	0x40010c00

0800046c <ce_high>:

static void ce_high()
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000476:	4802      	ldr	r0, [pc, #8]	@ (8000480 <ce_high+0x14>)
 8000478:	f000 ff82 	bl	8001380 <HAL_GPIO_WritePin>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40010c00 	.word	0x40010c00

08000484 <ce_low>:

static void ce_low()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800048e:	4802      	ldr	r0, [pc, #8]	@ (8000498 <ce_low+0x14>)
 8000490:	f000 ff76 	bl	8001380 <HAL_GPIO_WritePin>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40010c00 	.word	0x40010c00

0800049c <read_register>:

static uint8_t read_register(uint8_t reg)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80004aa:	f7ff ffd3 	bl	8000454 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80004ae:	f107 020e 	add.w	r2, r7, #14
 80004b2:	f107 010f 	add.w	r1, r7, #15
 80004b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2301      	movs	r3, #1
 80004be:	4809      	ldr	r0, [pc, #36]	@ (80004e4 <read_register+0x48>)
 80004c0:	f001 fe99 	bl	80021f6 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80004c4:	f107 010d 	add.w	r1, r7, #13
 80004c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80004cc:	2201      	movs	r2, #1
 80004ce:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <read_register+0x48>)
 80004d0:	f001 fd78 	bl	8001fc4 <HAL_SPI_Receive>
    cs_high();
 80004d4:	f7ff ffb2 	bl	800043c <cs_high>

    return read_val;
 80004d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000008c 	.word	0x2000008c

080004e8 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	f043 0320 	orr.w	r3, r3, #32
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000506:	f7ff ffa5 	bl	8000454 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800050a:	f107 020e 	add.w	r2, r7, #14
 800050e:	f107 010f 	add.w	r1, r7, #15
 8000512:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2301      	movs	r3, #1
 800051a:	4809      	ldr	r0, [pc, #36]	@ (8000540 <write_register+0x58>)
 800051c:	f001 fe6b 	bl	80021f6 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000520:	f107 010d 	add.w	r1, r7, #13
 8000524:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000528:	2201      	movs	r2, #1
 800052a:	4805      	ldr	r0, [pc, #20]	@ (8000540 <write_register+0x58>)
 800052c:	f001 fc06 	bl	8001d3c <HAL_SPI_Transmit>
    cs_high();
 8000530:	f7ff ff84 	bl	800043c <cs_high>

    return write_val;
 8000534:	7b7b      	ldrb	r3, [r7, #13]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000008c 	.word	0x2000008c

08000544 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	80fb      	strh	r3, [r7, #6]
 8000550:	4613      	mov	r3, r2
 8000552:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000554:	f000 f850 	bl	80005f8 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8000558:	f000 f8a2 	bl	80006a0 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 800055c:	f000 f94c 	bl	80007f8 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f9d4 	bl	8000910 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000568:	797b      	ldrb	r3, [r7, #5]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fa00 	bl	8000970 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 f9e0 	bl	8000936 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f000 f953 	bl	8000822 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800057c:	2005      	movs	r0, #5
 800057e:	f000 f973 	bl	8000868 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000582:	2003      	movs	r0, #3
 8000584:	f000 f980 	bl	8000888 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000588:	20fa      	movs	r0, #250	@ 0xfa
 800058a:	f000 f999 	bl	80008c0 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 800058e:	f7ff ff6d 	bl	800046c <ce_high>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 f892 	bl	80006cc <nrf24l01p_write_tx_fifo>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 80005b6:	f000 f8dd 	bl	8000774 <nrf24l01p_get_status>
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 0320 	and.w	r3, r3, #32
 80005c4:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d007      	beq.n	80005dc <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4808      	ldr	r0, [pc, #32]	@ (80005f4 <nrf24l01p_tx_irq+0x44>)
 80005d2:	f000 feed 	bl	80013b0 <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 80005d6:	f000 f8e7 	bl	80007a8 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 80005da:	e007      	b.n	80005ec <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e2:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <nrf24l01p_tx_irq+0x44>)
 80005e4:	f000 fecc 	bl	8001380 <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 80005e8:	f000 f8f2 	bl	80007d0 <nrf24l01p_clear_max_rt>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40011000 	.word	0x40011000

080005f8 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80005fc:	f7ff ff1e 	bl	800043c <cs_high>
    ce_low();
 8000600:	f7ff ff40 	bl	8000484 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000604:	2108      	movs	r1, #8
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff ff6e 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 800060c:	213f      	movs	r1, #63	@ 0x3f
 800060e:	2001      	movs	r0, #1
 8000610:	f7ff ff6a 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000614:	2103      	movs	r1, #3
 8000616:	2002      	movs	r0, #2
 8000618:	f7ff ff66 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800061c:	2103      	movs	r1, #3
 800061e:	2003      	movs	r0, #3
 8000620:	f7ff ff62 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000624:	2103      	movs	r1, #3
 8000626:	2004      	movs	r0, #4
 8000628:	f7ff ff5e 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800062c:	2102      	movs	r1, #2
 800062e:	2005      	movs	r0, #5
 8000630:	f7ff ff5a 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000634:	2107      	movs	r1, #7
 8000636:	2006      	movs	r0, #6
 8000638:	f7ff ff56 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800063c:	217e      	movs	r1, #126	@ 0x7e
 800063e:	2007      	movs	r0, #7
 8000640:	f7ff ff52 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000644:	2100      	movs	r1, #0
 8000646:	2011      	movs	r0, #17
 8000648:	f7ff ff4e 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800064c:	2100      	movs	r1, #0
 800064e:	2011      	movs	r0, #17
 8000650:	f7ff ff4a 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000654:	2100      	movs	r1, #0
 8000656:	2012      	movs	r0, #18
 8000658:	f7ff ff46 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800065c:	2100      	movs	r1, #0
 800065e:	2013      	movs	r0, #19
 8000660:	f7ff ff42 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000664:	2100      	movs	r1, #0
 8000666:	2014      	movs	r0, #20
 8000668:	f7ff ff3e 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800066c:	2100      	movs	r1, #0
 800066e:	2015      	movs	r0, #21
 8000670:	f7ff ff3a 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000674:	2100      	movs	r1, #0
 8000676:	2016      	movs	r0, #22
 8000678:	f7ff ff36 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800067c:	2111      	movs	r1, #17
 800067e:	2017      	movs	r0, #23
 8000680:	f7ff ff32 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000684:	2100      	movs	r1, #0
 8000686:	201c      	movs	r0, #28
 8000688:	f7ff ff2e 	bl	80004e8 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 800068c:	2100      	movs	r1, #0
 800068e:	201d      	movs	r0, #29
 8000690:	f7ff ff2a 	bl	80004e8 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000694:	f000 f83e 	bl	8000714 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8000698:	f000 f854 	bl	8000744 <nrf24l01p_flush_tx_fifo>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff fef8 	bl	800049c <read_register>
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f023 0301 	bic.w	r3, r3, #1
 80006b6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff13 	bl	80004e8 <write_register>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80006d4:	23a0      	movs	r3, #160	@ 0xa0
 80006d6:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80006d8:	f7ff febc 	bl	8000454 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80006dc:	f107 020e 	add.w	r2, r7, #14
 80006e0:	f107 010f 	add.w	r1, r7, #15
 80006e4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	4808      	ldr	r0, [pc, #32]	@ (8000710 <nrf24l01p_write_tx_fifo+0x44>)
 80006ee:	f001 fd82 	bl	80021f6 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80006f2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80006f6:	2208      	movs	r2, #8
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <nrf24l01p_write_tx_fifo+0x44>)
 80006fc:	f001 fb1e 	bl	8001d3c <HAL_SPI_Transmit>
    cs_high(); 
 8000700:	f7ff fe9c 	bl	800043c <cs_high>

    return status;
 8000704:	7bbb      	ldrb	r3, [r7, #14]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000008c 	.word	0x2000008c

08000714 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800071a:	23e2      	movs	r3, #226	@ 0xe2
 800071c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800071e:	f7ff fe99 	bl	8000454 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000722:	1dba      	adds	r2, r7, #6
 8000724:	1df9      	adds	r1, r7, #7
 8000726:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	4804      	ldr	r0, [pc, #16]	@ (8000740 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000730:	f001 fd61 	bl	80021f6 <HAL_SPI_TransmitReceive>
    cs_high();
 8000734:	f7ff fe82 	bl	800043c <cs_high>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000008c 	.word	0x2000008c

08000744 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800074a:	23e1      	movs	r3, #225	@ 0xe1
 800074c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800074e:	f7ff fe81 	bl	8000454 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000752:	1dba      	adds	r2, r7, #6
 8000754:	1df9      	adds	r1, r7, #7
 8000756:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	4804      	ldr	r0, [pc, #16]	@ (8000770 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000760:	f001 fd49 	bl	80021f6 <HAL_SPI_TransmitReceive>
    cs_high();
 8000764:	f7ff fe6a 	bl	800043c <cs_high>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000008c 	.word	0x2000008c

08000774 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800077a:	23ff      	movs	r3, #255	@ 0xff
 800077c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800077e:	f7ff fe69 	bl	8000454 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000782:	1dba      	adds	r2, r7, #6
 8000784:	1df9      	adds	r1, r7, #7
 8000786:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <nrf24l01p_get_status+0x30>)
 8000790:	f001 fd31 	bl	80021f6 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8000794:	f7ff fe52 	bl	800043c <cs_high>

    return status;
 8000798:	79bb      	ldrb	r3, [r7, #6]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000008c 	.word	0x2000008c

080007a8 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80007ae:	f7ff ffe1 	bl	8000774 <nrf24l01p_get_status>
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2007      	movs	r0, #7
 80007c4:	f7ff fe90 	bl	80004e8 <write_register>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80007d6:	f7ff ffcd 	bl	8000774 <nrf24l01p_get_status>
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4619      	mov	r1, r3
 80007ea:	2007      	movs	r0, #7
 80007ec:	f7ff fe7c 	bl	80004e8 <write_register>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fe4c 	bl	800049c <read_register>
 8000804:	4603      	mov	r3, r0
 8000806:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4619      	mov	r1, r3
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fe67 	bl	80004e8 <write_register>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b084      	sub	sp, #16
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fe35 	bl	800049c <read_register>
 8000832:	4603      	mov	r3, r0
 8000834:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d002      	beq.n	8000842 <nrf24l01p_set_crc_length+0x20>
 800083c:	2b02      	cmp	r3, #2
 800083e:	d005      	beq.n	800084c <nrf24l01p_set_crc_length+0x2a>
 8000840:	e009      	b.n	8000856 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	f023 0304 	bic.w	r3, r3, #4
 8000848:	73fb      	strb	r3, [r7, #15]
            break;
 800084a:	e004      	b.n	8000856 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	73fb      	strb	r3, [r7, #15]
            break;
 8000854:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	4619      	mov	r1, r3
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fe44 	bl	80004e8 <write_register>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	3b02      	subs	r3, #2
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	2003      	movs	r0, #3
 800087c:	f7ff fe34 	bl	80004e8 <write_register>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000892:	2004      	movs	r0, #4
 8000894:	f7ff fe02 	bl	800049c <read_register>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	f063 030f 	orn	r3, r3, #15
 80008a2:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80008a4:	7bfa      	ldrb	r2, [r7, #15]
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	4619      	mov	r1, r3
 80008b0:	2004      	movs	r0, #4
 80008b2:	f7ff fe19 	bl	80004e8 <write_register>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80008ca:	2004      	movs	r0, #4
 80008cc:	f7ff fde6 	bl	800049c <read_register>
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	f043 030f 	orr.w	r3, r3, #15
 80008da:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <nrf24l01p_auto_retransmit_delay+0x4c>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	091b      	lsrs	r3, r3, #4
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	3b01      	subs	r3, #1
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	b25a      	sxtb	r2, r3
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4619      	mov	r1, r3
 80008fc:	2004      	movs	r0, #4
 80008fe:	f7ff fdf3 	bl	80004e8 <write_register>
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	10624dd3 	.word	0x10624dd3

08000910 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000920:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000922:	89fb      	ldrh	r3, [r7, #14]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4619      	mov	r1, r3
 8000928:	2005      	movs	r0, #5
 800092a:	f7ff fddd 	bl	80004e8 <write_register>
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000940:	2006      	movs	r0, #6
 8000942:	f7ff fdab 	bl	800049c <read_register>
 8000946:	4603      	mov	r3, r0
 8000948:	f023 0306 	bic.w	r3, r3, #6
 800094c:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	b25a      	sxtb	r2, r3
 8000954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000958:	4313      	orrs	r3, r2
 800095a:	b25b      	sxtb	r3, r3
 800095c:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	4619      	mov	r1, r3
 8000962:	2006      	movs	r0, #6
 8000964:	f7ff fdc0 	bl	80004e8 <write_register>
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 800097a:	2006      	movs	r0, #6
 800097c:	f7ff fd8e 	bl	800049c <read_register>
 8000980:	4603      	mov	r3, r0
 8000982:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000986:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d00a      	beq.n	80009a4 <nrf24l01p_set_rf_air_data_rate+0x34>
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0e      	bgt.n	80009b0 <nrf24l01p_set_rf_air_data_rate+0x40>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00b      	beq.n	80009ae <nrf24l01p_set_rf_air_data_rate+0x3e>
 8000996:	2b01      	cmp	r3, #1
 8000998:	d10a      	bne.n	80009b0 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	73fb      	strb	r3, [r7, #15]
            break;
 80009a2:	e005      	b.n	80009b0 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f043 0320 	orr.w	r3, r3, #32
 80009aa:	73fb      	strb	r3, [r7, #15]
            break;
 80009ac:	e000      	b.n	80009b0 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80009ae:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	4619      	mov	r1, r3
 80009b4:	2006      	movs	r0, #6
 80009b6:	f7ff fd97 	bl	80004e8 <write_register>
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HAL_MspInit+0x5c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_MspInit+0x60>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_MspInit+0x60>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010000 	.word	0x40010000

08000a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab0 <HAL_SPI_MspInit+0x88>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d12f      	bne.n	8000aa8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <HAL_SPI_MspInit+0x8c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	@ (8000ab4 <HAL_SPI_MspInit+0x8c>)
 8000a4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_SPI_MspInit+0x8c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_SPI_MspInit+0x8c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <HAL_SPI_MspInit+0x8c>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_SPI_MspInit+0x8c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a78:	23a0      	movs	r3, #160	@ 0xa0
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <HAL_SPI_MspInit+0x90>)
 8000a8c:	f000 faf4 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a90:	2340      	movs	r3, #64	@ 0x40
 8000a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_SPI_MspInit+0x90>)
 8000aa4:	f000 fae8 	bl	8001078 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013000 	.word	0x40013000
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <HAL_UART_MspInit+0x8c>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d131      	bne.n	8000b40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <HAL_UART_MspInit+0x90>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b4c <HAL_UART_MspInit+0x90>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <HAL_UART_MspInit+0x90>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_UART_MspInit+0x90>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <HAL_UART_MspInit+0x90>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_UART_MspInit+0x90>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <HAL_UART_MspInit+0x94>)
 8000b22:	f000 faa9 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <HAL_UART_MspInit+0x94>)
 8000b3c:	f000 fa9c 	bl	8001078 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010800 	.word	0x40010800

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f91a 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000bb0:	2080      	movs	r0, #128	@ 0x80
 8000bb2:	f000 fc17 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	e00a      	b.n	8000be2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	60ba      	str	r2, [r7, #8]
 8000bd8:	b2ca      	uxtb	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	dbf0      	blt.n	8000bcc <_read+0x12>
  }

  return len;
 8000bea:	687b      	ldr	r3, [r7, #4]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e009      	b.n	8000c1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	60ba      	str	r2, [r7, #8]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fa9c 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbf1      	blt.n	8000c06 <_write+0x12>
  }
  return len;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_close>:

int _close(int file)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c52:	605a      	str	r2, [r3, #4]
  return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <_isatty>:

int _isatty(int file)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c68:	2301      	movs	r3, #1
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f002 f9d4 	bl	8003068 <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20005000 	.word	0x20005000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	2000012c 	.word	0x2000012c
 8000cf4:	20000280 	.word	0x20000280

08000cf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff fff8 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d0a:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a09      	ldr	r2, [pc, #36]	@ (8000d44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d20:	4c09      	ldr	r4, [pc, #36]	@ (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f002 f9a1 	bl	8003074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d32:	f7ff fa31 	bl	8000198 <main>
  bx lr
 8000d36:	4770      	bx	lr
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d40:	08003be4 	.word	0x08003be4
  ldr r2, =_sbss
 8000d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d48:	20000280 	.word	0x20000280

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_Init+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_Init+0x28>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f947 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe2a 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f95f 	bl	800105e <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f927 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000010 	.word	0x20000010
 8000dd8:	2000000c 	.word	0x2000000c

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <HAL_IncTick+0x1c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a03      	ldr	r2, [pc, #12]	@ (8000dfc <HAL_IncTick+0x20>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000010 	.word	0x20000010
 8000dfc:	20000130 	.word	0x20000130

08000e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b02      	ldr	r3, [pc, #8]	@ (8000e10 <HAL_GetTick+0x10>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000130 	.word	0x20000130

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff fff0 	bl	8000e00 <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffe0 	bl	8000e00 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000010 	.word	0x20000010

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4906      	ldr	r1, [pc, #24]	@ (8000ef4 <__NVIC_EnableIRQ+0x34>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	@ (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	@ (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	@ 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff90 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff2d 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff42 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff90 	bl	8000f4c <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5f 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff35 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	@ 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e169      	b.n	8001360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800108c:	2201      	movs	r2, #1
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 8158 	bne.w	800135a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d05e      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010b4:	4a98      	ldr	r2, [pc, #608]	@ (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d875      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ba:	4a98      	ldr	r2, [pc, #608]	@ (800131c <HAL_GPIO_Init+0x2a4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d058      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010c0:	4a96      	ldr	r2, [pc, #600]	@ (800131c <HAL_GPIO_Init+0x2a4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d86f      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010c6:	4a96      	ldr	r2, [pc, #600]	@ (8001320 <HAL_GPIO_Init+0x2a8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d052      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010cc:	4a94      	ldr	r2, [pc, #592]	@ (8001320 <HAL_GPIO_Init+0x2a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d869      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010d2:	4a94      	ldr	r2, [pc, #592]	@ (8001324 <HAL_GPIO_Init+0x2ac>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d04c      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010d8:	4a92      	ldr	r2, [pc, #584]	@ (8001324 <HAL_GPIO_Init+0x2ac>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d863      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010de:	4a92      	ldr	r2, [pc, #584]	@ (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d046      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010e4:	4a90      	ldr	r2, [pc, #576]	@ (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d85d      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d82a      	bhi.n	8001144 <HAL_GPIO_Init+0xcc>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d859      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010f2:	a201      	add	r2, pc, #4	@ (adr r2, 80010f8 <HAL_GPIO_Init+0x80>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001173 	.word	0x08001173
 80010fc:	0800114d 	.word	0x0800114d
 8001100:	0800115f 	.word	0x0800115f
 8001104:	080011a1 	.word	0x080011a1
 8001108:	080011a7 	.word	0x080011a7
 800110c:	080011a7 	.word	0x080011a7
 8001110:	080011a7 	.word	0x080011a7
 8001114:	080011a7 	.word	0x080011a7
 8001118:	080011a7 	.word	0x080011a7
 800111c:	080011a7 	.word	0x080011a7
 8001120:	080011a7 	.word	0x080011a7
 8001124:	080011a7 	.word	0x080011a7
 8001128:	080011a7 	.word	0x080011a7
 800112c:	080011a7 	.word	0x080011a7
 8001130:	080011a7 	.word	0x080011a7
 8001134:	080011a7 	.word	0x080011a7
 8001138:	080011a7 	.word	0x080011a7
 800113c:	08001155 	.word	0x08001155
 8001140:	08001169 	.word	0x08001169
 8001144:	4a79      	ldr	r2, [pc, #484]	@ (800132c <HAL_GPIO_Init+0x2b4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114a:	e02c      	b.n	80011a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e029      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	3304      	adds	r3, #4
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e024      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	3308      	adds	r3, #8
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e01f      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	330c      	adds	r3, #12
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e01a      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117a:	2304      	movs	r3, #4
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e013      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d105      	bne.n	8001194 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001188:	2308      	movs	r3, #8
 800118a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	611a      	str	r2, [r3, #16]
          break;
 8001192:	e009      	b.n	80011a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001194:	2308      	movs	r3, #8
 8001196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	615a      	str	r2, [r3, #20]
          break;
 800119e:	e003      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          break;
 80011a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	@ 0xff
 80011ac:	d801      	bhi.n	80011b2 <HAL_GPIO_Init+0x13a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	e001      	b.n	80011b6 <HAL_GPIO_Init+0x13e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3304      	adds	r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2bff      	cmp	r3, #255	@ 0xff
 80011bc:	d802      	bhi.n	80011c4 <HAL_GPIO_Init+0x14c>
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x152>
 80011c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c6:	3b08      	subs	r3, #8
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	210f      	movs	r1, #15
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	6a39      	ldr	r1, [r7, #32]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80b1 	beq.w	800135a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b4a      	ldr	r3, [pc, #296]	@ (8001330 <HAL_GPIO_Init+0x2b8>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001210:	4a48      	ldr	r2, [pc, #288]	@ (8001334 <HAL_GPIO_Init+0x2bc>)
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a40      	ldr	r2, [pc, #256]	@ (8001338 <HAL_GPIO_Init+0x2c0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3f      	ldr	r2, [pc, #252]	@ (800133c <HAL_GPIO_Init+0x2c4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_Init+0x1e8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3e      	ldr	r2, [pc, #248]	@ (8001340 <HAL_GPIO_Init+0x2c8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x1e4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3d      	ldr	r2, [pc, #244]	@ (8001344 <HAL_GPIO_Init+0x2cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_Init+0x1e0>
 8001254:	2303      	movs	r3, #3
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001258:	2304      	movs	r3, #4
 800125a:	e004      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001264:	2300      	movs	r3, #0
 8001266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001276:	492f      	ldr	r1, [pc, #188]	@ (8001334 <HAL_GPIO_Init+0x2bc>)
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001290:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	492c      	ldr	r1, [pc, #176]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	608b      	str	r3, [r1, #8]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4928      	ldr	r1, [pc, #160]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b8:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	4922      	ldr	r1, [pc, #136]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	60cb      	str	r3, [r1, #12]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	491e      	ldr	r1, [pc, #120]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4918      	ldr	r1, [pc, #96]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ee:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4914      	ldr	r1, [pc, #80]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	490e      	ldr	r1, [pc, #56]	@ (8001348 <HAL_GPIO_Init+0x2d0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
 8001314:	e021      	b.n	800135a <HAL_GPIO_Init+0x2e2>
 8001316:	bf00      	nop
 8001318:	10320000 	.word	0x10320000
 800131c:	10310000 	.word	0x10310000
 8001320:	10220000 	.word	0x10220000
 8001324:	10210000 	.word	0x10210000
 8001328:	10120000 	.word	0x10120000
 800132c:	10110000 	.word	0x10110000
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	40010800 	.word	0x40010800
 800133c:	40010c00 	.word	0x40010c00
 8001340:	40011000 	.word	0x40011000
 8001344:	40011400 	.word	0x40011400
 8001348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_GPIO_Init+0x304>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4909      	ldr	r1, [pc, #36]	@ (800137c <HAL_GPIO_Init+0x304>)
 8001356:	4013      	ands	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f ae8e 	bne.w	800108c <HAL_GPIO_Init+0x14>
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	372c      	adds	r7, #44	@ 0x2c
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	041a      	lsls	r2, r3, #16
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43d9      	mvns	r1, r3
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	400b      	ands	r3, r1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	611a      	str	r2, [r3, #16]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe feba 	bl	800017c <HAL_GPIO_EXTI_Callback>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e272      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8087 	beq.w	8001542 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001434:	4b92      	ldr	r3, [pc, #584]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b04      	cmp	r3, #4
 800143e:	d00c      	beq.n	800145a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001440:	4b8f      	ldr	r3, [pc, #572]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d112      	bne.n	8001472 <HAL_RCC_OscConfig+0x5e>
 800144c:	4b8c      	ldr	r3, [pc, #560]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001458:	d10b      	bne.n	8001472 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145a:	4b89      	ldr	r3, [pc, #548]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d06c      	beq.n	8001540 <HAL_RCC_OscConfig+0x12c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d168      	bne.n	8001540 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e24c      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x76>
 800147c:	4b80      	ldr	r3, [pc, #512]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a7f      	ldr	r2, [pc, #508]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e02e      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x98>
 8001492:	4b7b      	ldr	r3, [pc, #492]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7a      	ldr	r2, [pc, #488]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b78      	ldr	r3, [pc, #480]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a77      	ldr	r2, [pc, #476]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0xbc>
 80014b6:	4b72      	ldr	r3, [pc, #456]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a71      	ldr	r2, [pc, #452]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xd4>
 80014d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b68      	ldr	r3, [pc, #416]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a67      	ldr	r2, [pc, #412]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc86 	bl	8000e00 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fc82 	bl	8000e00 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e200      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b5d      	ldr	r3, [pc, #372]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xe4>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fc72 	bl	8000e00 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fc6e 	bl	8000e00 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1ec      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x10c>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d063      	beq.n	8001616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154e:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800155a:	4b49      	ldr	r3, [pc, #292]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b08      	cmp	r3, #8
 8001564:	d11c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x18c>
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x176>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e1c0      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4939      	ldr	r1, [pc, #228]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	e03a      	b.n	8001616 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	4b36      	ldr	r3, [pc, #216]	@ (8001684 <HAL_RCC_OscConfig+0x270>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fc27 	bl	8000e00 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc23 	bl	8000e00 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1a1      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4927      	ldr	r1, [pc, #156]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ea:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <HAL_RCC_OscConfig+0x270>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc06 	bl	8000e00 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc02 	bl	8000e00 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e180      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d03a      	beq.n	8001698 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d019      	beq.n	800165e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <HAL_RCC_OscConfig+0x274>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fbe6 	bl	8000e00 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fbe2 	bl	8000e00 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e160      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <HAL_RCC_OscConfig+0x26c>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f000 face 	bl	8001bf8 <RCC_Delay>
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_RCC_OscConfig+0x274>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff fbcc 	bl	8000e00 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166a:	e00f      	b.n	800168c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff fbc8 	bl	8000e00 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d908      	bls.n	800168c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e146      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	42420000 	.word	0x42420000
 8001688:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b92      	ldr	r3, [pc, #584]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e9      	bne.n	800166c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80a6 	beq.w	80017f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b8b      	ldr	r3, [pc, #556]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10d      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b88      	ldr	r3, [pc, #544]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a87      	ldr	r2, [pc, #540]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b85      	ldr	r3, [pc, #532]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b82      	ldr	r3, [pc, #520]	@ (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	4b7f      	ldr	r3, [pc, #508]	@ (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7e      	ldr	r2, [pc, #504]	@ (80018dc <HAL_RCC_OscConfig+0x4c8>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fb89 	bl	8000e00 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fb85 	bl	8000e00 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	@ 0x64
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e103      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b75      	ldr	r3, [pc, #468]	@ (80018dc <HAL_RCC_OscConfig+0x4c8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x312>
 8001718:	4b6f      	ldr	r3, [pc, #444]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4a6e      	ldr	r2, [pc, #440]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	e02d      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x334>
 800172e:	4b6a      	ldr	r3, [pc, #424]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a69      	ldr	r2, [pc, #420]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6213      	str	r3, [r2, #32]
 800173a:	4b67      	ldr	r3, [pc, #412]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a66      	ldr	r2, [pc, #408]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6213      	str	r3, [r2, #32]
 8001746:	e01c      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b05      	cmp	r3, #5
 800174e:	d10c      	bne.n	800176a <HAL_RCC_OscConfig+0x356>
 8001750:	4b61      	ldr	r3, [pc, #388]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a60      	ldr	r2, [pc, #384]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	4b5e      	ldr	r3, [pc, #376]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a5d      	ldr	r2, [pc, #372]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x36e>
 800176a:	4b5b      	ldr	r3, [pc, #364]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a5a      	ldr	r2, [pc, #360]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	4b58      	ldr	r3, [pc, #352]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a57      	ldr	r2, [pc, #348]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d015      	beq.n	80017b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fb39 	bl	8000e00 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fb35 	bl	8000e00 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0b1      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	4b4b      	ldr	r3, [pc, #300]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ee      	beq.n	8001792 <HAL_RCC_OscConfig+0x37e>
 80017b4:	e014      	b.n	80017e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb23 	bl	8000e00 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fb1f 	bl	8000e00 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e09b      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	4b40      	ldr	r3, [pc, #256]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ee      	bne.n	80017be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d105      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e6:	4b3c      	ldr	r3, [pc, #240]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a3b      	ldr	r2, [pc, #236]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b08      	cmp	r3, #8
 8001806:	d061      	beq.n	80018cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d146      	bne.n	800189e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff faf3 	bl	8000e00 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff faef 	bl	8000e00 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e06d      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f0      	bne.n	800181e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001844:	d108      	bne.n	8001858 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4921      	ldr	r1, [pc, #132]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a19      	ldr	r1, [r3, #32]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	430b      	orrs	r3, r1
 800186a:	491b      	ldr	r1, [pc, #108]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fac3 	bl	8000e00 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff fabf 	bl	8000e00 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e03d      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x46a>
 800189c:	e035      	b.n	800190a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_RCC_OscConfig+0x4cc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff faac 	bl	8000e00 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff faa8 	bl	8000e00 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e026      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x498>
 80018ca:	e01e      	b.n	800190a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e019      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40007000 	.word	0x40007000
 80018e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_RCC_OscConfig+0x500>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0d0      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b67      	ldr	r3, [pc, #412]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4965      	ldr	r1, [pc, #404]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a58      	ldr	r2, [pc, #352]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800197e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a52      	ldr	r2, [pc, #328]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001996:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d040      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d115      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e073      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06b      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4936      	ldr	r1, [pc, #216]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f9fa 	bl	8000e00 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff f9f6 	bl	8000e00 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e053      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d210      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4922      	ldr	r1, [pc, #136]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f958 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08003b7c 	.word	0x08003b7c
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	2000000c 	.word	0x2000000c

08001aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d002      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x30>
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x36>
 8001b1a:	e027      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b1c:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1e:	613b      	str	r3, [r7, #16]
      break;
 8001b20:	e027      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	0c9b      	lsrs	r3, r3, #18
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d010      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b3a:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0c5b      	lsrs	r3, r3, #17
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	4a11      	ldr	r2, [pc, #68]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4e:	fb03 f202 	mul.w	r2, r3, r2
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e004      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	613b      	str	r3, [r7, #16]
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6e:	613b      	str	r3, [r7, #16]
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	693b      	ldr	r3, [r7, #16]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	007a1200 	.word	0x007a1200
 8001b88:	08003b94 	.word	0x08003b94
 8001b8c:	08003ba4 	.word	0x08003ba4
 8001b90:	003d0900 	.word	0x003d0900

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b02      	ldr	r3, [pc, #8]	@ (8001ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff2 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	@ (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08003b8c 	.word	0x08003b8c

08001bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0adb      	lsrs	r3, r3, #11
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	@ (8001bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08003b8c 	.word	0x08003b8c

08001bf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <RCC_Delay+0x34>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <RCC_Delay+0x38>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c14:	bf00      	nop
  }
  while (Delay --);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1e5a      	subs	r2, r3, #1
 8001c1a:	60fa      	str	r2, [r7, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f9      	bne.n	8001c14 <RCC_Delay+0x1c>
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	10624dd3 	.word	0x10624dd3

08001c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e076      	b.n	8001d34 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d108      	bne.n	8001c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c56:	d009      	beq.n	8001c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
 8001c5e:	e005      	b.n	8001c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe fece 	bl	8000a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ca2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf0:	ea42 0103 	orr.w	r1, r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	0c1a      	lsrs	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f002 0204 	and.w	r2, r2, #4
 8001d12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d4c:	f7ff f858 	bl	8000e00 <HAL_GetTick>
 8001d50:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d001      	beq.n	8001d66 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	e12a      	b.n	8001fbc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_SPI_Transmit+0x36>
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e122      	b.n	8001fbc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_SPI_Transmit+0x48>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e11b      	b.n	8001fbc <HAL_SPI_Transmit+0x280>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dd2:	d10f      	bne.n	8001df4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001de2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001df2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfe:	2b40      	cmp	r3, #64	@ 0x40
 8001e00:	d007      	beq.n	8001e12 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e1a:	d152      	bne.n	8001ec2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_SPI_Transmit+0xee>
 8001e24:	8b7b      	ldrh	r3, [r7, #26]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d145      	bne.n	8001eb6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	881a      	ldrh	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	1c9a      	adds	r2, r3, #2
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e4e:	e032      	b.n	8001eb6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d112      	bne.n	8001e84 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	1c9a      	adds	r2, r3, #2
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e82:	e018      	b.n	8001eb6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e84:	f7fe ffbc 	bl	8000e00 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d803      	bhi.n	8001e9c <HAL_SPI_Transmit+0x160>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9a:	d102      	bne.n	8001ea2 <HAL_SPI_Transmit+0x166>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e082      	b.n	8001fbc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1c7      	bne.n	8001e50 <HAL_SPI_Transmit+0x114>
 8001ec0:	e053      	b.n	8001f6a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_SPI_Transmit+0x194>
 8001eca:	8b7b      	ldrh	r3, [r7, #26]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d147      	bne.n	8001f60 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	7812      	ldrb	r2, [r2, #0]
 8001edc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ef6:	e033      	b.n	8001f60 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d113      	bne.n	8001f2e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	330c      	adds	r3, #12
 8001f10:	7812      	ldrb	r2, [r2, #0]
 8001f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f2c:	e018      	b.n	8001f60 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f2e:	f7fe ff67 	bl	8000e00 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d803      	bhi.n	8001f46 <HAL_SPI_Transmit+0x20a>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d102      	bne.n	8001f4c <HAL_SPI_Transmit+0x210>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e02d      	b.n	8001fbc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1c6      	bne.n	8001ef8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fbc4 	bl	80026fc <SPI_EndRxTxTransaction>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10a      	bne.n	8001f9e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001fba:	2300      	movs	r3, #0
  }
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d001      	beq.n	8001fe4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e104      	b.n	80021ee <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fec:	d112      	bne.n	8002014 <HAL_SPI_Receive+0x50>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10e      	bne.n	8002014 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f8f3 	bl	80021f6 <HAL_SPI_TransmitReceive>
 8002010:	4603      	mov	r3, r0
 8002012:	e0ec      	b.n	80021ee <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002014:	f7fe fef4 	bl	8000e00 <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_SPI_Receive+0x62>
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0e1      	b.n	80021ee <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_SPI_Receive+0x74>
 8002034:	2302      	movs	r3, #2
 8002036:	e0da      	b.n	80021ee <HAL_SPI_Receive+0x22a>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2204      	movs	r2, #4
 8002044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	88fa      	ldrh	r2, [r7, #6]
 8002058:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	88fa      	ldrh	r2, [r7, #6]
 800205e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002086:	d10f      	bne.n	80020a8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002096:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80020a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b2:	2b40      	cmp	r3, #64	@ 0x40
 80020b4:	d007      	beq.n	80020c6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d170      	bne.n	80021b0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020ce:	e035      	b.n	800213c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d115      	bne.n	800210a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f103 020c 	add.w	r2, r3, #12
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002108:	e018      	b.n	800213c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800210a:	f7fe fe79 	bl	8000e00 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d803      	bhi.n	8002122 <HAL_SPI_Receive+0x15e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d102      	bne.n	8002128 <HAL_SPI_Receive+0x164>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e058      	b.n	80021ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1c4      	bne.n	80020d0 <HAL_SPI_Receive+0x10c>
 8002146:	e038      	b.n	80021ba <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d113      	bne.n	800217e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002160:	b292      	uxth	r2, r2
 8002162:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002168:	1c9a      	adds	r2, r3, #2
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800217c:	e018      	b.n	80021b0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800217e:	f7fe fe3f 	bl	8000e00 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d803      	bhi.n	8002196 <HAL_SPI_Receive+0x1d2>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d102      	bne.n	800219c <HAL_SPI_Receive+0x1d8>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e01e      	b.n	80021ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1c6      	bne.n	8002148 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa4a 	bl	8002658 <SPI_EndRxTransaction>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b08a      	sub	sp, #40	@ 0x28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002204:	2301      	movs	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002208:	f7fe fdfa 	bl	8000e00 <HAL_GetTick>
 800220c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002214:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d00c      	beq.n	8002240 <HAL_SPI_TransmitReceive+0x4a>
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800222c:	d106      	bne.n	800223c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_SPI_TransmitReceive+0x46>
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d001      	beq.n	8002240 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800223c:	2302      	movs	r3, #2
 800223e:	e17f      	b.n	8002540 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_SPI_TransmitReceive+0x5c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_SPI_TransmitReceive+0x5c>
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e174      	b.n	8002540 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_SPI_TransmitReceive+0x6e>
 8002260:	2302      	movs	r3, #2
 8002262:	e16d      	b.n	8002540 <HAL_SPI_TransmitReceive+0x34a>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b04      	cmp	r3, #4
 8002276:	d003      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2205      	movs	r2, #5
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	887a      	ldrh	r2, [r7, #2]
 8002296:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	887a      	ldrh	r2, [r7, #2]
 80022a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c0:	2b40      	cmp	r3, #64	@ 0x40
 80022c2:	d007      	beq.n	80022d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022dc:	d17e      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_SPI_TransmitReceive+0xf6>
 80022e6:	8afb      	ldrh	r3, [r7, #22]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d16c      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	1c9a      	adds	r2, r3, #2
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002310:	e059      	b.n	80023c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d11b      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x162>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_SPI_TransmitReceive+0x162>
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	2b01      	cmp	r3, #1
 800232e:	d113      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	1c9a      	adds	r2, r3, #2
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d119      	bne.n	800239a <HAL_SPI_TransmitReceive+0x1a4>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d014      	beq.n	800239a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237a:	b292      	uxth	r2, r2
 800237c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002382:	1c9a      	adds	r2, r3, #2
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002396:	2301      	movs	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800239a:	f7fe fd31 	bl	8000e00 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d80d      	bhi.n	80023c6 <HAL_SPI_TransmitReceive+0x1d0>
 80023aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d009      	beq.n	80023c6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0bc      	b.n	8002540 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1a0      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x11c>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d19b      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x11c>
 80023da:	e082      	b.n	80024e2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_SPI_TransmitReceive+0x1f4>
 80023e4:	8afb      	ldrh	r3, [r7, #22]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d171      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	330c      	adds	r3, #12
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002410:	e05d      	b.n	80024ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b02      	cmp	r3, #2
 800241e:	d11c      	bne.n	800245a <HAL_SPI_TransmitReceive+0x264>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d017      	beq.n	800245a <HAL_SPI_TransmitReceive+0x264>
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	2b01      	cmp	r3, #1
 800242e:	d114      	bne.n	800245a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	330c      	adds	r3, #12
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d119      	bne.n	800249c <HAL_SPI_TransmitReceive+0x2a6>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002498:	2301      	movs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800249c:	f7fe fcb0 	bl	8000e00 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d803      	bhi.n	80024b4 <HAL_SPI_TransmitReceive+0x2be>
 80024ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d102      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x2c4>
 80024b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e038      	b.n	8002540 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d19c      	bne.n	8002412 <HAL_SPI_TransmitReceive+0x21c>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d197      	bne.n	8002412 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f908 	bl	80026fc <SPI_EndRxTxTransaction>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e01d      	b.n	8002540 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800253e:	2300      	movs	r3, #0
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	3728      	adds	r7, #40	@ 0x28
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002558:	f7fe fc52 	bl	8000e00 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002568:	f7fe fc4a 	bl	8000e00 <HAL_GetTick>
 800256c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800256e:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	015b      	lsls	r3, r3, #5
 8002574:	0d1b      	lsrs	r3, r3, #20
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800257e:	e054      	b.n	800262a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d050      	beq.n	800262a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002588:	f7fe fc3a 	bl	8000e00 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	429a      	cmp	r2, r3
 8002596:	d902      	bls.n	800259e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d13d      	bne.n	800261a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80025ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025b6:	d111      	bne.n	80025dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025c0:	d004      	beq.n	80025cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ca:	d107      	bne.n	80025dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e4:	d10f      	bne.n	8002606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e017      	b.n	800264a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3b01      	subs	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4013      	ands	r3, r2
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	429a      	cmp	r2, r3
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	429a      	cmp	r2, r3
 8002646:	d19b      	bne.n	8002580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000008 	.word	0x20000008

08002658 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800266c:	d111      	bne.n	8002692 <SPI_EndRxTransaction+0x3a>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002676:	d004      	beq.n	8002682 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002680:	d107      	bne.n	8002692 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002690:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800269a:	d117      	bne.n	80026cc <SPI_EndRxTransaction+0x74>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a4:	d112      	bne.n	80026cc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2101      	movs	r1, #1
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ff49 	bl	8002548 <SPI_WaitFlagStateUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01a      	beq.n	80026f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e013      	b.n	80026f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	2180      	movs	r1, #128	@ 0x80
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff ff36 	bl	8002548 <SPI_WaitFlagStateUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	f043 0220 	orr.w	r2, r3, #32
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e000      	b.n	80026f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2201      	movs	r2, #1
 8002710:	2102      	movs	r1, #2
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff ff18 	bl	8002548 <SPI_WaitFlagStateUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e013      	b.n	8002756 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	@ 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff ff05 	bl	8002548 <SPI_WaitFlagStateUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e000      	b.n	8002756 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e042      	b.n	80027f6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d106      	bne.n	800278a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe f999 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2224      	movs	r2, #36	@ 0x24
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f972 	bl	8002a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b08a      	sub	sp, #40	@ 0x28
 8002802:	af02      	add	r7, sp, #8
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b20      	cmp	r3, #32
 800281c:	d175      	bne.n	800290a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_UART_Transmit+0x2c>
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e06e      	b.n	800290c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2221      	movs	r2, #33	@ 0x21
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800283c:	f7fe fae0 	bl	8000e00 <HAL_GetTick>
 8002840:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002856:	d108      	bne.n	800286a <HAL_UART_Transmit+0x6c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e003      	b.n	8002872 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002872:	e02e      	b.n	80028d2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2200      	movs	r2, #0
 800287c:	2180      	movs	r1, #128	@ 0x80
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f848 	bl	8002914 <UART_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e03a      	b.n	800290c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028aa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	3302      	adds	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e007      	b.n	80028c4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1cb      	bne.n	8002874 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2140      	movs	r1, #64	@ 0x40
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f814 	bl	8002914 <UART_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e006      	b.n	800290c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002924:	e03b      	b.n	800299e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d037      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7fe fa67 	bl	8000e00 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	6a3a      	ldr	r2, [r7, #32]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <UART_WaitOnFlagUntilTimeout+0x30>
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e03a      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d023      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b80      	cmp	r3, #128	@ 0x80
 800295a:	d020      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0x8a>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b40      	cmp	r3, #64	@ 0x40
 8002960:	d01d      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d116      	bne.n	800299e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f81d 	bl	80029c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2208      	movs	r2, #8
 8002990:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d0b4      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b095      	sub	sp, #84	@ 0x54
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d8:	e853 3f00 	ldrex	r3, [r3]
 80029dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330c      	adds	r3, #12
 80029ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80029f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e5      	bne.n	80029ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3314      	adds	r3, #20
 8002a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3314      	adds	r3, #20
 8002a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e5      	bne.n	8002a02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d119      	bne.n	8002a72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f023 0310 	bic.w	r3, r3, #16
 8002a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a5e:	61ba      	str	r2, [r7, #24]
 8002a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	6979      	ldr	r1, [r7, #20]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e5      	bne.n	8002a3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a80:	bf00      	nop
 8002a82:	3754      	adds	r7, #84	@ 0x54
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002ac6:	f023 030c 	bic.w	r3, r3, #12
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba0 <UART_SetConfig+0x114>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d103      	bne.n	8002afc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002af4:	f7ff f86c 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	e002      	b.n	8002b02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002afc:	f7ff f854 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002b00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	4a22      	ldr	r2, [pc, #136]	@ (8002ba4 <UART_SetConfig+0x118>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	0119      	lsls	r1, r3, #4
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	441a      	add	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <UART_SetConfig+0x118>)
 8002b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2064      	movs	r0, #100	@ 0x64
 8002b42:	fb00 f303 	mul.w	r3, r0, r3
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	3332      	adds	r3, #50	@ 0x32
 8002b4c:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <UART_SetConfig+0x118>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b58:	4419      	add	r1, r3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009a      	lsls	r2, r3, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <UART_SetConfig+0x118>)
 8002b72:	fba3 0302 	umull	r0, r3, r3, r2
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2064      	movs	r0, #100	@ 0x64
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	3332      	adds	r3, #50	@ 0x32
 8002b84:	4a07      	ldr	r2, [pc, #28]	@ (8002ba4 <UART_SetConfig+0x118>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	f003 020f 	and.w	r2, r3, #15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	440a      	add	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	51eb851f 	.word	0x51eb851f

08002ba8 <std>:
 8002ba8:	2300      	movs	r3, #0
 8002baa:	b510      	push	{r4, lr}
 8002bac:	4604      	mov	r4, r0
 8002bae:	e9c0 3300 	strd	r3, r3, [r0]
 8002bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bb6:	6083      	str	r3, [r0, #8]
 8002bb8:	8181      	strh	r1, [r0, #12]
 8002bba:	6643      	str	r3, [r0, #100]	@ 0x64
 8002bbc:	81c2      	strh	r2, [r0, #14]
 8002bbe:	6183      	str	r3, [r0, #24]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	305c      	adds	r0, #92	@ 0x5c
 8002bc6:	f000 fa01 	bl	8002fcc <memset>
 8002bca:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <std+0x58>)
 8002bcc:	6224      	str	r4, [r4, #32]
 8002bce:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <std+0x5c>)
 8002bd2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <std+0x60>)
 8002bd6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <std+0x64>)
 8002bda:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <std+0x68>)
 8002bde:	429c      	cmp	r4, r3
 8002be0:	d006      	beq.n	8002bf0 <std+0x48>
 8002be2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002be6:	4294      	cmp	r4, r2
 8002be8:	d002      	beq.n	8002bf0 <std+0x48>
 8002bea:	33d0      	adds	r3, #208	@ 0xd0
 8002bec:	429c      	cmp	r4, r3
 8002bee:	d105      	bne.n	8002bfc <std+0x54>
 8002bf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bf8:	f000 ba60 	b.w	80030bc <__retarget_lock_init_recursive>
 8002bfc:	bd10      	pop	{r4, pc}
 8002bfe:	bf00      	nop
 8002c00:	08002e1d 	.word	0x08002e1d
 8002c04:	08002e3f 	.word	0x08002e3f
 8002c08:	08002e77 	.word	0x08002e77
 8002c0c:	08002e9b 	.word	0x08002e9b
 8002c10:	20000134 	.word	0x20000134

08002c14 <stdio_exit_handler>:
 8002c14:	4a02      	ldr	r2, [pc, #8]	@ (8002c20 <stdio_exit_handler+0xc>)
 8002c16:	4903      	ldr	r1, [pc, #12]	@ (8002c24 <stdio_exit_handler+0x10>)
 8002c18:	4803      	ldr	r0, [pc, #12]	@ (8002c28 <stdio_exit_handler+0x14>)
 8002c1a:	f000 b869 	b.w	8002cf0 <_fwalk_sglue>
 8002c1e:	bf00      	nop
 8002c20:	20000014 	.word	0x20000014
 8002c24:	08003955 	.word	0x08003955
 8002c28:	20000024 	.word	0x20000024

08002c2c <cleanup_stdio>:
 8002c2c:	6841      	ldr	r1, [r0, #4]
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <cleanup_stdio+0x34>)
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4299      	cmp	r1, r3
 8002c34:	4604      	mov	r4, r0
 8002c36:	d001      	beq.n	8002c3c <cleanup_stdio+0x10>
 8002c38:	f000 fe8c 	bl	8003954 <_fflush_r>
 8002c3c:	68a1      	ldr	r1, [r4, #8]
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <cleanup_stdio+0x38>)
 8002c40:	4299      	cmp	r1, r3
 8002c42:	d002      	beq.n	8002c4a <cleanup_stdio+0x1e>
 8002c44:	4620      	mov	r0, r4
 8002c46:	f000 fe85 	bl	8003954 <_fflush_r>
 8002c4a:	68e1      	ldr	r1, [r4, #12]
 8002c4c:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <cleanup_stdio+0x3c>)
 8002c4e:	4299      	cmp	r1, r3
 8002c50:	d004      	beq.n	8002c5c <cleanup_stdio+0x30>
 8002c52:	4620      	mov	r0, r4
 8002c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c58:	f000 be7c 	b.w	8003954 <_fflush_r>
 8002c5c:	bd10      	pop	{r4, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000134 	.word	0x20000134
 8002c64:	2000019c 	.word	0x2000019c
 8002c68:	20000204 	.word	0x20000204

08002c6c <global_stdio_init.part.0>:
 8002c6c:	b510      	push	{r4, lr}
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <global_stdio_init.part.0+0x30>)
 8002c70:	4c0b      	ldr	r4, [pc, #44]	@ (8002ca0 <global_stdio_init.part.0+0x34>)
 8002c72:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca4 <global_stdio_init.part.0+0x38>)
 8002c74:	4620      	mov	r0, r4
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	2104      	movs	r1, #4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f7ff ff94 	bl	8002ba8 <std>
 8002c80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c84:	2201      	movs	r2, #1
 8002c86:	2109      	movs	r1, #9
 8002c88:	f7ff ff8e 	bl	8002ba8 <std>
 8002c8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c90:	2202      	movs	r2, #2
 8002c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c96:	2112      	movs	r1, #18
 8002c98:	f7ff bf86 	b.w	8002ba8 <std>
 8002c9c:	2000026c 	.word	0x2000026c
 8002ca0:	20000134 	.word	0x20000134
 8002ca4:	08002c15 	.word	0x08002c15

08002ca8 <__sfp_lock_acquire>:
 8002ca8:	4801      	ldr	r0, [pc, #4]	@ (8002cb0 <__sfp_lock_acquire+0x8>)
 8002caa:	f000 ba08 	b.w	80030be <__retarget_lock_acquire_recursive>
 8002cae:	bf00      	nop
 8002cb0:	20000275 	.word	0x20000275

08002cb4 <__sfp_lock_release>:
 8002cb4:	4801      	ldr	r0, [pc, #4]	@ (8002cbc <__sfp_lock_release+0x8>)
 8002cb6:	f000 ba03 	b.w	80030c0 <__retarget_lock_release_recursive>
 8002cba:	bf00      	nop
 8002cbc:	20000275 	.word	0x20000275

08002cc0 <__sinit>:
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	f7ff fff0 	bl	8002ca8 <__sfp_lock_acquire>
 8002cc8:	6a23      	ldr	r3, [r4, #32]
 8002cca:	b11b      	cbz	r3, 8002cd4 <__sinit+0x14>
 8002ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd0:	f7ff bff0 	b.w	8002cb4 <__sfp_lock_release>
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <__sinit+0x28>)
 8002cd6:	6223      	str	r3, [r4, #32]
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <__sinit+0x2c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f5      	bne.n	8002ccc <__sinit+0xc>
 8002ce0:	f7ff ffc4 	bl	8002c6c <global_stdio_init.part.0>
 8002ce4:	e7f2      	b.n	8002ccc <__sinit+0xc>
 8002ce6:	bf00      	nop
 8002ce8:	08002c2d 	.word	0x08002c2d
 8002cec:	2000026c 	.word	0x2000026c

08002cf0 <_fwalk_sglue>:
 8002cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf4:	4607      	mov	r7, r0
 8002cf6:	4688      	mov	r8, r1
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	2600      	movs	r6, #0
 8002cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d00:	f1b9 0901 	subs.w	r9, r9, #1
 8002d04:	d505      	bpl.n	8002d12 <_fwalk_sglue+0x22>
 8002d06:	6824      	ldr	r4, [r4, #0]
 8002d08:	2c00      	cmp	r4, #0
 8002d0a:	d1f7      	bne.n	8002cfc <_fwalk_sglue+0xc>
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d12:	89ab      	ldrh	r3, [r5, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d907      	bls.n	8002d28 <_fwalk_sglue+0x38>
 8002d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	d003      	beq.n	8002d28 <_fwalk_sglue+0x38>
 8002d20:	4629      	mov	r1, r5
 8002d22:	4638      	mov	r0, r7
 8002d24:	47c0      	blx	r8
 8002d26:	4306      	orrs	r6, r0
 8002d28:	3568      	adds	r5, #104	@ 0x68
 8002d2a:	e7e9      	b.n	8002d00 <_fwalk_sglue+0x10>

08002d2c <iprintf>:
 8002d2c:	b40f      	push	{r0, r1, r2, r3}
 8002d2e:	b507      	push	{r0, r1, r2, lr}
 8002d30:	4906      	ldr	r1, [pc, #24]	@ (8002d4c <iprintf+0x20>)
 8002d32:	ab04      	add	r3, sp, #16
 8002d34:	6808      	ldr	r0, [r1, #0]
 8002d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d3a:	6881      	ldr	r1, [r0, #8]
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	f000 fadf 	bl	8003300 <_vfiprintf_r>
 8002d42:	b003      	add	sp, #12
 8002d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d48:	b004      	add	sp, #16
 8002d4a:	4770      	bx	lr
 8002d4c:	20000020 	.word	0x20000020

08002d50 <putchar>:
 8002d50:	4b02      	ldr	r3, [pc, #8]	@ (8002d5c <putchar+0xc>)
 8002d52:	4601      	mov	r1, r0
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	6882      	ldr	r2, [r0, #8]
 8002d58:	f000 be85 	b.w	8003a66 <_putc_r>
 8002d5c:	20000020 	.word	0x20000020

08002d60 <_puts_r>:
 8002d60:	6a03      	ldr	r3, [r0, #32]
 8002d62:	b570      	push	{r4, r5, r6, lr}
 8002d64:	4605      	mov	r5, r0
 8002d66:	460e      	mov	r6, r1
 8002d68:	6884      	ldr	r4, [r0, #8]
 8002d6a:	b90b      	cbnz	r3, 8002d70 <_puts_r+0x10>
 8002d6c:	f7ff ffa8 	bl	8002cc0 <__sinit>
 8002d70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d72:	07db      	lsls	r3, r3, #31
 8002d74:	d405      	bmi.n	8002d82 <_puts_r+0x22>
 8002d76:	89a3      	ldrh	r3, [r4, #12]
 8002d78:	0598      	lsls	r0, r3, #22
 8002d7a:	d402      	bmi.n	8002d82 <_puts_r+0x22>
 8002d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d7e:	f000 f99e 	bl	80030be <__retarget_lock_acquire_recursive>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	0719      	lsls	r1, r3, #28
 8002d86:	d502      	bpl.n	8002d8e <_puts_r+0x2e>
 8002d88:	6923      	ldr	r3, [r4, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d135      	bne.n	8002dfa <_puts_r+0x9a>
 8002d8e:	4621      	mov	r1, r4
 8002d90:	4628      	mov	r0, r5
 8002d92:	f000 f8c5 	bl	8002f20 <__swsetup_r>
 8002d96:	b380      	cbz	r0, 8002dfa <_puts_r+0x9a>
 8002d98:	f04f 35ff 	mov.w	r5, #4294967295
 8002d9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d9e:	07da      	lsls	r2, r3, #31
 8002da0:	d405      	bmi.n	8002dae <_puts_r+0x4e>
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	059b      	lsls	r3, r3, #22
 8002da6:	d402      	bmi.n	8002dae <_puts_r+0x4e>
 8002da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002daa:	f000 f989 	bl	80030c0 <__retarget_lock_release_recursive>
 8002dae:	4628      	mov	r0, r5
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da04      	bge.n	8002dc0 <_puts_r+0x60>
 8002db6:	69a2      	ldr	r2, [r4, #24]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	dc17      	bgt.n	8002dec <_puts_r+0x8c>
 8002dbc:	290a      	cmp	r1, #10
 8002dbe:	d015      	beq.n	8002dec <_puts_r+0x8c>
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	6022      	str	r2, [r4, #0]
 8002dc6:	7019      	strb	r1, [r3, #0]
 8002dc8:	68a3      	ldr	r3, [r4, #8]
 8002dca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60a3      	str	r3, [r4, #8]
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d1ed      	bne.n	8002db2 <_puts_r+0x52>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da11      	bge.n	8002dfe <_puts_r+0x9e>
 8002dda:	4622      	mov	r2, r4
 8002ddc:	210a      	movs	r1, #10
 8002dde:	4628      	mov	r0, r5
 8002de0:	f000 f85f 	bl	8002ea2 <__swbuf_r>
 8002de4:	3001      	adds	r0, #1
 8002de6:	d0d7      	beq.n	8002d98 <_puts_r+0x38>
 8002de8:	250a      	movs	r5, #10
 8002dea:	e7d7      	b.n	8002d9c <_puts_r+0x3c>
 8002dec:	4622      	mov	r2, r4
 8002dee:	4628      	mov	r0, r5
 8002df0:	f000 f857 	bl	8002ea2 <__swbuf_r>
 8002df4:	3001      	adds	r0, #1
 8002df6:	d1e7      	bne.n	8002dc8 <_puts_r+0x68>
 8002df8:	e7ce      	b.n	8002d98 <_puts_r+0x38>
 8002dfa:	3e01      	subs	r6, #1
 8002dfc:	e7e4      	b.n	8002dc8 <_puts_r+0x68>
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	6022      	str	r2, [r4, #0]
 8002e04:	220a      	movs	r2, #10
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e7ee      	b.n	8002de8 <_puts_r+0x88>
	...

08002e0c <puts>:
 8002e0c:	4b02      	ldr	r3, [pc, #8]	@ (8002e18 <puts+0xc>)
 8002e0e:	4601      	mov	r1, r0
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	f7ff bfa5 	b.w	8002d60 <_puts_r>
 8002e16:	bf00      	nop
 8002e18:	20000020 	.word	0x20000020

08002e1c <__sread>:
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	460c      	mov	r4, r1
 8002e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e24:	f000 f8fc 	bl	8003020 <_read_r>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	bfab      	itete	ge
 8002e2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e30:	181b      	addge	r3, r3, r0
 8002e32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e36:	bfac      	ite	ge
 8002e38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e3a:	81a3      	strhlt	r3, [r4, #12]
 8002e3c:	bd10      	pop	{r4, pc}

08002e3e <__swrite>:
 8002e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e42:	461f      	mov	r7, r3
 8002e44:	898b      	ldrh	r3, [r1, #12]
 8002e46:	4605      	mov	r5, r0
 8002e48:	05db      	lsls	r3, r3, #23
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	4616      	mov	r6, r2
 8002e4e:	d505      	bpl.n	8002e5c <__swrite+0x1e>
 8002e50:	2302      	movs	r3, #2
 8002e52:	2200      	movs	r2, #0
 8002e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e58:	f000 f8d0 	bl	8002ffc <_lseek_r>
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	4632      	mov	r2, r6
 8002e60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e64:	81a3      	strh	r3, [r4, #12]
 8002e66:	4628      	mov	r0, r5
 8002e68:	463b      	mov	r3, r7
 8002e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e72:	f000 b8e7 	b.w	8003044 <_write_r>

08002e76 <__sseek>:
 8002e76:	b510      	push	{r4, lr}
 8002e78:	460c      	mov	r4, r1
 8002e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e7e:	f000 f8bd 	bl	8002ffc <_lseek_r>
 8002e82:	1c43      	adds	r3, r0, #1
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	bf15      	itete	ne
 8002e88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e92:	81a3      	strheq	r3, [r4, #12]
 8002e94:	bf18      	it	ne
 8002e96:	81a3      	strhne	r3, [r4, #12]
 8002e98:	bd10      	pop	{r4, pc}

08002e9a <__sclose>:
 8002e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e9e:	f000 b89d 	b.w	8002fdc <_close_r>

08002ea2 <__swbuf_r>:
 8002ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea4:	460e      	mov	r6, r1
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	b118      	cbz	r0, 8002eb4 <__swbuf_r+0x12>
 8002eac:	6a03      	ldr	r3, [r0, #32]
 8002eae:	b90b      	cbnz	r3, 8002eb4 <__swbuf_r+0x12>
 8002eb0:	f7ff ff06 	bl	8002cc0 <__sinit>
 8002eb4:	69a3      	ldr	r3, [r4, #24]
 8002eb6:	60a3      	str	r3, [r4, #8]
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	071a      	lsls	r2, r3, #28
 8002ebc:	d501      	bpl.n	8002ec2 <__swbuf_r+0x20>
 8002ebe:	6923      	ldr	r3, [r4, #16]
 8002ec0:	b943      	cbnz	r3, 8002ed4 <__swbuf_r+0x32>
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f000 f82b 	bl	8002f20 <__swsetup_r>
 8002eca:	b118      	cbz	r0, 8002ed4 <__swbuf_r+0x32>
 8002ecc:	f04f 37ff 	mov.w	r7, #4294967295
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	6922      	ldr	r2, [r4, #16]
 8002ed8:	b2f6      	uxtb	r6, r6
 8002eda:	1a98      	subs	r0, r3, r2
 8002edc:	6963      	ldr	r3, [r4, #20]
 8002ede:	4637      	mov	r7, r6
 8002ee0:	4283      	cmp	r3, r0
 8002ee2:	dc05      	bgt.n	8002ef0 <__swbuf_r+0x4e>
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f000 fd34 	bl	8003954 <_fflush_r>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d1ed      	bne.n	8002ecc <__swbuf_r+0x2a>
 8002ef0:	68a3      	ldr	r3, [r4, #8]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60a3      	str	r3, [r4, #8]
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	6022      	str	r2, [r4, #0]
 8002efc:	701e      	strb	r6, [r3, #0]
 8002efe:	6962      	ldr	r2, [r4, #20]
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d004      	beq.n	8002f10 <__swbuf_r+0x6e>
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	07db      	lsls	r3, r3, #31
 8002f0a:	d5e1      	bpl.n	8002ed0 <__swbuf_r+0x2e>
 8002f0c:	2e0a      	cmp	r6, #10
 8002f0e:	d1df      	bne.n	8002ed0 <__swbuf_r+0x2e>
 8002f10:	4621      	mov	r1, r4
 8002f12:	4628      	mov	r0, r5
 8002f14:	f000 fd1e 	bl	8003954 <_fflush_r>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d0d9      	beq.n	8002ed0 <__swbuf_r+0x2e>
 8002f1c:	e7d6      	b.n	8002ecc <__swbuf_r+0x2a>
	...

08002f20 <__swsetup_r>:
 8002f20:	b538      	push	{r3, r4, r5, lr}
 8002f22:	4b29      	ldr	r3, [pc, #164]	@ (8002fc8 <__swsetup_r+0xa8>)
 8002f24:	4605      	mov	r5, r0
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	460c      	mov	r4, r1
 8002f2a:	b118      	cbz	r0, 8002f34 <__swsetup_r+0x14>
 8002f2c:	6a03      	ldr	r3, [r0, #32]
 8002f2e:	b90b      	cbnz	r3, 8002f34 <__swsetup_r+0x14>
 8002f30:	f7ff fec6 	bl	8002cc0 <__sinit>
 8002f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f38:	0719      	lsls	r1, r3, #28
 8002f3a:	d422      	bmi.n	8002f82 <__swsetup_r+0x62>
 8002f3c:	06da      	lsls	r2, r3, #27
 8002f3e:	d407      	bmi.n	8002f50 <__swsetup_r+0x30>
 8002f40:	2209      	movs	r2, #9
 8002f42:	602a      	str	r2, [r5, #0]
 8002f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	81a3      	strh	r3, [r4, #12]
 8002f4e:	e033      	b.n	8002fb8 <__swsetup_r+0x98>
 8002f50:	0758      	lsls	r0, r3, #29
 8002f52:	d512      	bpl.n	8002f7a <__swsetup_r+0x5a>
 8002f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f56:	b141      	cbz	r1, 8002f6a <__swsetup_r+0x4a>
 8002f58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f5c:	4299      	cmp	r1, r3
 8002f5e:	d002      	beq.n	8002f66 <__swsetup_r+0x46>
 8002f60:	4628      	mov	r0, r5
 8002f62:	f000 f8af 	bl	80030c4 <_free_r>
 8002f66:	2300      	movs	r3, #0
 8002f68:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f70:	81a3      	strh	r3, [r4, #12]
 8002f72:	2300      	movs	r3, #0
 8002f74:	6063      	str	r3, [r4, #4]
 8002f76:	6923      	ldr	r3, [r4, #16]
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	81a3      	strh	r3, [r4, #12]
 8002f82:	6923      	ldr	r3, [r4, #16]
 8002f84:	b94b      	cbnz	r3, 8002f9a <__swsetup_r+0x7a>
 8002f86:	89a3      	ldrh	r3, [r4, #12]
 8002f88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f90:	d003      	beq.n	8002f9a <__swsetup_r+0x7a>
 8002f92:	4621      	mov	r1, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 fd2a 	bl	80039ee <__smakebuf_r>
 8002f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f9e:	f013 0201 	ands.w	r2, r3, #1
 8002fa2:	d00a      	beq.n	8002fba <__swsetup_r+0x9a>
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	60a2      	str	r2, [r4, #8]
 8002fa8:	6962      	ldr	r2, [r4, #20]
 8002faa:	4252      	negs	r2, r2
 8002fac:	61a2      	str	r2, [r4, #24]
 8002fae:	6922      	ldr	r2, [r4, #16]
 8002fb0:	b942      	cbnz	r2, 8002fc4 <__swsetup_r+0xa4>
 8002fb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002fb6:	d1c5      	bne.n	8002f44 <__swsetup_r+0x24>
 8002fb8:	bd38      	pop	{r3, r4, r5, pc}
 8002fba:	0799      	lsls	r1, r3, #30
 8002fbc:	bf58      	it	pl
 8002fbe:	6962      	ldrpl	r2, [r4, #20]
 8002fc0:	60a2      	str	r2, [r4, #8]
 8002fc2:	e7f4      	b.n	8002fae <__swsetup_r+0x8e>
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e7f7      	b.n	8002fb8 <__swsetup_r+0x98>
 8002fc8:	20000020 	.word	0x20000020

08002fcc <memset>:
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4402      	add	r2, r0
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <memset+0xa>
 8002fd4:	4770      	bx	lr
 8002fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fda:	e7f9      	b.n	8002fd0 <memset+0x4>

08002fdc <_close_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	2300      	movs	r3, #0
 8002fe0:	4d05      	ldr	r5, [pc, #20]	@ (8002ff8 <_close_r+0x1c>)
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	602b      	str	r3, [r5, #0]
 8002fe8:	f7fd fe20 	bl	8000c2c <_close>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d102      	bne.n	8002ff6 <_close_r+0x1a>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	b103      	cbz	r3, 8002ff6 <_close_r+0x1a>
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	20000270 	.word	0x20000270

08002ffc <_lseek_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4604      	mov	r4, r0
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	2200      	movs	r2, #0
 8003006:	4d05      	ldr	r5, [pc, #20]	@ (800301c <_lseek_r+0x20>)
 8003008:	602a      	str	r2, [r5, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	f7fd fe32 	bl	8000c74 <_lseek>
 8003010:	1c43      	adds	r3, r0, #1
 8003012:	d102      	bne.n	800301a <_lseek_r+0x1e>
 8003014:	682b      	ldr	r3, [r5, #0]
 8003016:	b103      	cbz	r3, 800301a <_lseek_r+0x1e>
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	20000270 	.word	0x20000270

08003020 <_read_r>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4604      	mov	r4, r0
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	2200      	movs	r2, #0
 800302a:	4d05      	ldr	r5, [pc, #20]	@ (8003040 <_read_r+0x20>)
 800302c:	602a      	str	r2, [r5, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	f7fd fdc3 	bl	8000bba <_read>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d102      	bne.n	800303e <_read_r+0x1e>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	b103      	cbz	r3, 800303e <_read_r+0x1e>
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	20000270 	.word	0x20000270

08003044 <_write_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	2200      	movs	r2, #0
 800304e:	4d05      	ldr	r5, [pc, #20]	@ (8003064 <_write_r+0x20>)
 8003050:	602a      	str	r2, [r5, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f7fd fdce 	bl	8000bf4 <_write>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_write_r+0x1e>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_write_r+0x1e>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000270 	.word	0x20000270

08003068 <__errno>:
 8003068:	4b01      	ldr	r3, [pc, #4]	@ (8003070 <__errno+0x8>)
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000020 	.word	0x20000020

08003074 <__libc_init_array>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	2600      	movs	r6, #0
 8003078:	4d0c      	ldr	r5, [pc, #48]	@ (80030ac <__libc_init_array+0x38>)
 800307a:	4c0d      	ldr	r4, [pc, #52]	@ (80030b0 <__libc_init_array+0x3c>)
 800307c:	1b64      	subs	r4, r4, r5
 800307e:	10a4      	asrs	r4, r4, #2
 8003080:	42a6      	cmp	r6, r4
 8003082:	d109      	bne.n	8003098 <__libc_init_array+0x24>
 8003084:	f000 fd64 	bl	8003b50 <_init>
 8003088:	2600      	movs	r6, #0
 800308a:	4d0a      	ldr	r5, [pc, #40]	@ (80030b4 <__libc_init_array+0x40>)
 800308c:	4c0a      	ldr	r4, [pc, #40]	@ (80030b8 <__libc_init_array+0x44>)
 800308e:	1b64      	subs	r4, r4, r5
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	42a6      	cmp	r6, r4
 8003094:	d105      	bne.n	80030a2 <__libc_init_array+0x2e>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	f855 3b04 	ldr.w	r3, [r5], #4
 800309c:	4798      	blx	r3
 800309e:	3601      	adds	r6, #1
 80030a0:	e7ee      	b.n	8003080 <__libc_init_array+0xc>
 80030a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a6:	4798      	blx	r3
 80030a8:	3601      	adds	r6, #1
 80030aa:	e7f2      	b.n	8003092 <__libc_init_array+0x1e>
 80030ac:	08003bdc 	.word	0x08003bdc
 80030b0:	08003bdc 	.word	0x08003bdc
 80030b4:	08003bdc 	.word	0x08003bdc
 80030b8:	08003be0 	.word	0x08003be0

080030bc <__retarget_lock_init_recursive>:
 80030bc:	4770      	bx	lr

080030be <__retarget_lock_acquire_recursive>:
 80030be:	4770      	bx	lr

080030c0 <__retarget_lock_release_recursive>:
 80030c0:	4770      	bx	lr
	...

080030c4 <_free_r>:
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	4605      	mov	r5, r0
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d040      	beq.n	800314e <_free_r+0x8a>
 80030cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d0:	1f0c      	subs	r4, r1, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bfb8      	it	lt
 80030d6:	18e4      	addlt	r4, r4, r3
 80030d8:	f000 f8de 	bl	8003298 <__malloc_lock>
 80030dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <_free_r+0x8c>)
 80030de:	6813      	ldr	r3, [r2, #0]
 80030e0:	b933      	cbnz	r3, 80030f0 <_free_r+0x2c>
 80030e2:	6063      	str	r3, [r4, #4]
 80030e4:	6014      	str	r4, [r2, #0]
 80030e6:	4628      	mov	r0, r5
 80030e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030ec:	f000 b8da 	b.w	80032a4 <__malloc_unlock>
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	d908      	bls.n	8003106 <_free_r+0x42>
 80030f4:	6820      	ldr	r0, [r4, #0]
 80030f6:	1821      	adds	r1, r4, r0
 80030f8:	428b      	cmp	r3, r1
 80030fa:	bf01      	itttt	eq
 80030fc:	6819      	ldreq	r1, [r3, #0]
 80030fe:	685b      	ldreq	r3, [r3, #4]
 8003100:	1809      	addeq	r1, r1, r0
 8003102:	6021      	streq	r1, [r4, #0]
 8003104:	e7ed      	b.n	80030e2 <_free_r+0x1e>
 8003106:	461a      	mov	r2, r3
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	b10b      	cbz	r3, 8003110 <_free_r+0x4c>
 800310c:	42a3      	cmp	r3, r4
 800310e:	d9fa      	bls.n	8003106 <_free_r+0x42>
 8003110:	6811      	ldr	r1, [r2, #0]
 8003112:	1850      	adds	r0, r2, r1
 8003114:	42a0      	cmp	r0, r4
 8003116:	d10b      	bne.n	8003130 <_free_r+0x6c>
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	4401      	add	r1, r0
 800311c:	1850      	adds	r0, r2, r1
 800311e:	4283      	cmp	r3, r0
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	d1e0      	bne.n	80030e6 <_free_r+0x22>
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4408      	add	r0, r1
 800312a:	6010      	str	r0, [r2, #0]
 800312c:	6053      	str	r3, [r2, #4]
 800312e:	e7da      	b.n	80030e6 <_free_r+0x22>
 8003130:	d902      	bls.n	8003138 <_free_r+0x74>
 8003132:	230c      	movs	r3, #12
 8003134:	602b      	str	r3, [r5, #0]
 8003136:	e7d6      	b.n	80030e6 <_free_r+0x22>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	1821      	adds	r1, r4, r0
 800313c:	428b      	cmp	r3, r1
 800313e:	bf01      	itttt	eq
 8003140:	6819      	ldreq	r1, [r3, #0]
 8003142:	685b      	ldreq	r3, [r3, #4]
 8003144:	1809      	addeq	r1, r1, r0
 8003146:	6021      	streq	r1, [r4, #0]
 8003148:	6063      	str	r3, [r4, #4]
 800314a:	6054      	str	r4, [r2, #4]
 800314c:	e7cb      	b.n	80030e6 <_free_r+0x22>
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	2000027c 	.word	0x2000027c

08003154 <sbrk_aligned>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	4e0f      	ldr	r6, [pc, #60]	@ (8003194 <sbrk_aligned+0x40>)
 8003158:	460c      	mov	r4, r1
 800315a:	6831      	ldr	r1, [r6, #0]
 800315c:	4605      	mov	r5, r0
 800315e:	b911      	cbnz	r1, 8003166 <sbrk_aligned+0x12>
 8003160:	f000 fcd8 	bl	8003b14 <_sbrk_r>
 8003164:	6030      	str	r0, [r6, #0]
 8003166:	4621      	mov	r1, r4
 8003168:	4628      	mov	r0, r5
 800316a:	f000 fcd3 	bl	8003b14 <_sbrk_r>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	d103      	bne.n	800317a <sbrk_aligned+0x26>
 8003172:	f04f 34ff 	mov.w	r4, #4294967295
 8003176:	4620      	mov	r0, r4
 8003178:	bd70      	pop	{r4, r5, r6, pc}
 800317a:	1cc4      	adds	r4, r0, #3
 800317c:	f024 0403 	bic.w	r4, r4, #3
 8003180:	42a0      	cmp	r0, r4
 8003182:	d0f8      	beq.n	8003176 <sbrk_aligned+0x22>
 8003184:	1a21      	subs	r1, r4, r0
 8003186:	4628      	mov	r0, r5
 8003188:	f000 fcc4 	bl	8003b14 <_sbrk_r>
 800318c:	3001      	adds	r0, #1
 800318e:	d1f2      	bne.n	8003176 <sbrk_aligned+0x22>
 8003190:	e7ef      	b.n	8003172 <sbrk_aligned+0x1e>
 8003192:	bf00      	nop
 8003194:	20000278 	.word	0x20000278

08003198 <_malloc_r>:
 8003198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800319c:	1ccd      	adds	r5, r1, #3
 800319e:	f025 0503 	bic.w	r5, r5, #3
 80031a2:	3508      	adds	r5, #8
 80031a4:	2d0c      	cmp	r5, #12
 80031a6:	bf38      	it	cc
 80031a8:	250c      	movcc	r5, #12
 80031aa:	2d00      	cmp	r5, #0
 80031ac:	4606      	mov	r6, r0
 80031ae:	db01      	blt.n	80031b4 <_malloc_r+0x1c>
 80031b0:	42a9      	cmp	r1, r5
 80031b2:	d904      	bls.n	80031be <_malloc_r+0x26>
 80031b4:	230c      	movs	r3, #12
 80031b6:	6033      	str	r3, [r6, #0]
 80031b8:	2000      	movs	r0, #0
 80031ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003294 <_malloc_r+0xfc>
 80031c2:	f000 f869 	bl	8003298 <__malloc_lock>
 80031c6:	f8d8 3000 	ldr.w	r3, [r8]
 80031ca:	461c      	mov	r4, r3
 80031cc:	bb44      	cbnz	r4, 8003220 <_malloc_r+0x88>
 80031ce:	4629      	mov	r1, r5
 80031d0:	4630      	mov	r0, r6
 80031d2:	f7ff ffbf 	bl	8003154 <sbrk_aligned>
 80031d6:	1c43      	adds	r3, r0, #1
 80031d8:	4604      	mov	r4, r0
 80031da:	d158      	bne.n	800328e <_malloc_r+0xf6>
 80031dc:	f8d8 4000 	ldr.w	r4, [r8]
 80031e0:	4627      	mov	r7, r4
 80031e2:	2f00      	cmp	r7, #0
 80031e4:	d143      	bne.n	800326e <_malloc_r+0xd6>
 80031e6:	2c00      	cmp	r4, #0
 80031e8:	d04b      	beq.n	8003282 <_malloc_r+0xea>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	4639      	mov	r1, r7
 80031ee:	4630      	mov	r0, r6
 80031f0:	eb04 0903 	add.w	r9, r4, r3
 80031f4:	f000 fc8e 	bl	8003b14 <_sbrk_r>
 80031f8:	4581      	cmp	r9, r0
 80031fa:	d142      	bne.n	8003282 <_malloc_r+0xea>
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	4630      	mov	r0, r6
 8003200:	1a6d      	subs	r5, r5, r1
 8003202:	4629      	mov	r1, r5
 8003204:	f7ff ffa6 	bl	8003154 <sbrk_aligned>
 8003208:	3001      	adds	r0, #1
 800320a:	d03a      	beq.n	8003282 <_malloc_r+0xea>
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	442b      	add	r3, r5
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	f8d8 3000 	ldr.w	r3, [r8]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	bb62      	cbnz	r2, 8003274 <_malloc_r+0xdc>
 800321a:	f8c8 7000 	str.w	r7, [r8]
 800321e:	e00f      	b.n	8003240 <_malloc_r+0xa8>
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	1b52      	subs	r2, r2, r5
 8003224:	d420      	bmi.n	8003268 <_malloc_r+0xd0>
 8003226:	2a0b      	cmp	r2, #11
 8003228:	d917      	bls.n	800325a <_malloc_r+0xc2>
 800322a:	1961      	adds	r1, r4, r5
 800322c:	42a3      	cmp	r3, r4
 800322e:	6025      	str	r5, [r4, #0]
 8003230:	bf18      	it	ne
 8003232:	6059      	strne	r1, [r3, #4]
 8003234:	6863      	ldr	r3, [r4, #4]
 8003236:	bf08      	it	eq
 8003238:	f8c8 1000 	streq.w	r1, [r8]
 800323c:	5162      	str	r2, [r4, r5]
 800323e:	604b      	str	r3, [r1, #4]
 8003240:	4630      	mov	r0, r6
 8003242:	f000 f82f 	bl	80032a4 <__malloc_unlock>
 8003246:	f104 000b 	add.w	r0, r4, #11
 800324a:	1d23      	adds	r3, r4, #4
 800324c:	f020 0007 	bic.w	r0, r0, #7
 8003250:	1ac2      	subs	r2, r0, r3
 8003252:	bf1c      	itt	ne
 8003254:	1a1b      	subne	r3, r3, r0
 8003256:	50a3      	strne	r3, [r4, r2]
 8003258:	e7af      	b.n	80031ba <_malloc_r+0x22>
 800325a:	6862      	ldr	r2, [r4, #4]
 800325c:	42a3      	cmp	r3, r4
 800325e:	bf0c      	ite	eq
 8003260:	f8c8 2000 	streq.w	r2, [r8]
 8003264:	605a      	strne	r2, [r3, #4]
 8003266:	e7eb      	b.n	8003240 <_malloc_r+0xa8>
 8003268:	4623      	mov	r3, r4
 800326a:	6864      	ldr	r4, [r4, #4]
 800326c:	e7ae      	b.n	80031cc <_malloc_r+0x34>
 800326e:	463c      	mov	r4, r7
 8003270:	687f      	ldr	r7, [r7, #4]
 8003272:	e7b6      	b.n	80031e2 <_malloc_r+0x4a>
 8003274:	461a      	mov	r2, r3
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	42a3      	cmp	r3, r4
 800327a:	d1fb      	bne.n	8003274 <_malloc_r+0xdc>
 800327c:	2300      	movs	r3, #0
 800327e:	6053      	str	r3, [r2, #4]
 8003280:	e7de      	b.n	8003240 <_malloc_r+0xa8>
 8003282:	230c      	movs	r3, #12
 8003284:	4630      	mov	r0, r6
 8003286:	6033      	str	r3, [r6, #0]
 8003288:	f000 f80c 	bl	80032a4 <__malloc_unlock>
 800328c:	e794      	b.n	80031b8 <_malloc_r+0x20>
 800328e:	6005      	str	r5, [r0, #0]
 8003290:	e7d6      	b.n	8003240 <_malloc_r+0xa8>
 8003292:	bf00      	nop
 8003294:	2000027c 	.word	0x2000027c

08003298 <__malloc_lock>:
 8003298:	4801      	ldr	r0, [pc, #4]	@ (80032a0 <__malloc_lock+0x8>)
 800329a:	f7ff bf10 	b.w	80030be <__retarget_lock_acquire_recursive>
 800329e:	bf00      	nop
 80032a0:	20000274 	.word	0x20000274

080032a4 <__malloc_unlock>:
 80032a4:	4801      	ldr	r0, [pc, #4]	@ (80032ac <__malloc_unlock+0x8>)
 80032a6:	f7ff bf0b 	b.w	80030c0 <__retarget_lock_release_recursive>
 80032aa:	bf00      	nop
 80032ac:	20000274 	.word	0x20000274

080032b0 <__sfputc_r>:
 80032b0:	6893      	ldr	r3, [r2, #8]
 80032b2:	b410      	push	{r4}
 80032b4:	3b01      	subs	r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	6093      	str	r3, [r2, #8]
 80032ba:	da07      	bge.n	80032cc <__sfputc_r+0x1c>
 80032bc:	6994      	ldr	r4, [r2, #24]
 80032be:	42a3      	cmp	r3, r4
 80032c0:	db01      	blt.n	80032c6 <__sfputc_r+0x16>
 80032c2:	290a      	cmp	r1, #10
 80032c4:	d102      	bne.n	80032cc <__sfputc_r+0x1c>
 80032c6:	bc10      	pop	{r4}
 80032c8:	f7ff bdeb 	b.w	8002ea2 <__swbuf_r>
 80032cc:	6813      	ldr	r3, [r2, #0]
 80032ce:	1c58      	adds	r0, r3, #1
 80032d0:	6010      	str	r0, [r2, #0]
 80032d2:	7019      	strb	r1, [r3, #0]
 80032d4:	4608      	mov	r0, r1
 80032d6:	bc10      	pop	{r4}
 80032d8:	4770      	bx	lr

080032da <__sfputs_r>:
 80032da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032dc:	4606      	mov	r6, r0
 80032de:	460f      	mov	r7, r1
 80032e0:	4614      	mov	r4, r2
 80032e2:	18d5      	adds	r5, r2, r3
 80032e4:	42ac      	cmp	r4, r5
 80032e6:	d101      	bne.n	80032ec <__sfputs_r+0x12>
 80032e8:	2000      	movs	r0, #0
 80032ea:	e007      	b.n	80032fc <__sfputs_r+0x22>
 80032ec:	463a      	mov	r2, r7
 80032ee:	4630      	mov	r0, r6
 80032f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f4:	f7ff ffdc 	bl	80032b0 <__sfputc_r>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d1f3      	bne.n	80032e4 <__sfputs_r+0xa>
 80032fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003300 <_vfiprintf_r>:
 8003300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003304:	460d      	mov	r5, r1
 8003306:	4614      	mov	r4, r2
 8003308:	4698      	mov	r8, r3
 800330a:	4606      	mov	r6, r0
 800330c:	b09d      	sub	sp, #116	@ 0x74
 800330e:	b118      	cbz	r0, 8003318 <_vfiprintf_r+0x18>
 8003310:	6a03      	ldr	r3, [r0, #32]
 8003312:	b90b      	cbnz	r3, 8003318 <_vfiprintf_r+0x18>
 8003314:	f7ff fcd4 	bl	8002cc0 <__sinit>
 8003318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800331a:	07d9      	lsls	r1, r3, #31
 800331c:	d405      	bmi.n	800332a <_vfiprintf_r+0x2a>
 800331e:	89ab      	ldrh	r3, [r5, #12]
 8003320:	059a      	lsls	r2, r3, #22
 8003322:	d402      	bmi.n	800332a <_vfiprintf_r+0x2a>
 8003324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003326:	f7ff feca 	bl	80030be <__retarget_lock_acquire_recursive>
 800332a:	89ab      	ldrh	r3, [r5, #12]
 800332c:	071b      	lsls	r3, r3, #28
 800332e:	d501      	bpl.n	8003334 <_vfiprintf_r+0x34>
 8003330:	692b      	ldr	r3, [r5, #16]
 8003332:	b99b      	cbnz	r3, 800335c <_vfiprintf_r+0x5c>
 8003334:	4629      	mov	r1, r5
 8003336:	4630      	mov	r0, r6
 8003338:	f7ff fdf2 	bl	8002f20 <__swsetup_r>
 800333c:	b170      	cbz	r0, 800335c <_vfiprintf_r+0x5c>
 800333e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003340:	07dc      	lsls	r4, r3, #31
 8003342:	d504      	bpl.n	800334e <_vfiprintf_r+0x4e>
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	b01d      	add	sp, #116	@ 0x74
 800334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800334e:	89ab      	ldrh	r3, [r5, #12]
 8003350:	0598      	lsls	r0, r3, #22
 8003352:	d4f7      	bmi.n	8003344 <_vfiprintf_r+0x44>
 8003354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003356:	f7ff feb3 	bl	80030c0 <__retarget_lock_release_recursive>
 800335a:	e7f3      	b.n	8003344 <_vfiprintf_r+0x44>
 800335c:	2300      	movs	r3, #0
 800335e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003360:	2320      	movs	r3, #32
 8003362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003366:	2330      	movs	r3, #48	@ 0x30
 8003368:	f04f 0901 	mov.w	r9, #1
 800336c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003370:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800351c <_vfiprintf_r+0x21c>
 8003374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003378:	4623      	mov	r3, r4
 800337a:	469a      	mov	sl, r3
 800337c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003380:	b10a      	cbz	r2, 8003386 <_vfiprintf_r+0x86>
 8003382:	2a25      	cmp	r2, #37	@ 0x25
 8003384:	d1f9      	bne.n	800337a <_vfiprintf_r+0x7a>
 8003386:	ebba 0b04 	subs.w	fp, sl, r4
 800338a:	d00b      	beq.n	80033a4 <_vfiprintf_r+0xa4>
 800338c:	465b      	mov	r3, fp
 800338e:	4622      	mov	r2, r4
 8003390:	4629      	mov	r1, r5
 8003392:	4630      	mov	r0, r6
 8003394:	f7ff ffa1 	bl	80032da <__sfputs_r>
 8003398:	3001      	adds	r0, #1
 800339a:	f000 80a7 	beq.w	80034ec <_vfiprintf_r+0x1ec>
 800339e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033a0:	445a      	add	r2, fp
 80033a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80033a4:	f89a 3000 	ldrb.w	r3, [sl]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 809f 	beq.w	80034ec <_vfiprintf_r+0x1ec>
 80033ae:	2300      	movs	r3, #0
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033b8:	f10a 0a01 	add.w	sl, sl, #1
 80033bc:	9304      	str	r3, [sp, #16]
 80033be:	9307      	str	r3, [sp, #28]
 80033c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80033c6:	4654      	mov	r4, sl
 80033c8:	2205      	movs	r2, #5
 80033ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ce:	4853      	ldr	r0, [pc, #332]	@ (800351c <_vfiprintf_r+0x21c>)
 80033d0:	f000 fbb0 	bl	8003b34 <memchr>
 80033d4:	9a04      	ldr	r2, [sp, #16]
 80033d6:	b9d8      	cbnz	r0, 8003410 <_vfiprintf_r+0x110>
 80033d8:	06d1      	lsls	r1, r2, #27
 80033da:	bf44      	itt	mi
 80033dc:	2320      	movmi	r3, #32
 80033de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033e2:	0713      	lsls	r3, r2, #28
 80033e4:	bf44      	itt	mi
 80033e6:	232b      	movmi	r3, #43	@ 0x2b
 80033e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033ec:	f89a 3000 	ldrb.w	r3, [sl]
 80033f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80033f2:	d015      	beq.n	8003420 <_vfiprintf_r+0x120>
 80033f4:	4654      	mov	r4, sl
 80033f6:	2000      	movs	r0, #0
 80033f8:	f04f 0c0a 	mov.w	ip, #10
 80033fc:	9a07      	ldr	r2, [sp, #28]
 80033fe:	4621      	mov	r1, r4
 8003400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003404:	3b30      	subs	r3, #48	@ 0x30
 8003406:	2b09      	cmp	r3, #9
 8003408:	d94b      	bls.n	80034a2 <_vfiprintf_r+0x1a2>
 800340a:	b1b0      	cbz	r0, 800343a <_vfiprintf_r+0x13a>
 800340c:	9207      	str	r2, [sp, #28]
 800340e:	e014      	b.n	800343a <_vfiprintf_r+0x13a>
 8003410:	eba0 0308 	sub.w	r3, r0, r8
 8003414:	fa09 f303 	lsl.w	r3, r9, r3
 8003418:	4313      	orrs	r3, r2
 800341a:	46a2      	mov	sl, r4
 800341c:	9304      	str	r3, [sp, #16]
 800341e:	e7d2      	b.n	80033c6 <_vfiprintf_r+0xc6>
 8003420:	9b03      	ldr	r3, [sp, #12]
 8003422:	1d19      	adds	r1, r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	9103      	str	r1, [sp, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	bfbb      	ittet	lt
 800342c:	425b      	neglt	r3, r3
 800342e:	f042 0202 	orrlt.w	r2, r2, #2
 8003432:	9307      	strge	r3, [sp, #28]
 8003434:	9307      	strlt	r3, [sp, #28]
 8003436:	bfb8      	it	lt
 8003438:	9204      	strlt	r2, [sp, #16]
 800343a:	7823      	ldrb	r3, [r4, #0]
 800343c:	2b2e      	cmp	r3, #46	@ 0x2e
 800343e:	d10a      	bne.n	8003456 <_vfiprintf_r+0x156>
 8003440:	7863      	ldrb	r3, [r4, #1]
 8003442:	2b2a      	cmp	r3, #42	@ 0x2a
 8003444:	d132      	bne.n	80034ac <_vfiprintf_r+0x1ac>
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	3402      	adds	r4, #2
 800344a:	1d1a      	adds	r2, r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	9203      	str	r2, [sp, #12]
 8003450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003454:	9305      	str	r3, [sp, #20]
 8003456:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003520 <_vfiprintf_r+0x220>
 800345a:	2203      	movs	r2, #3
 800345c:	4650      	mov	r0, sl
 800345e:	7821      	ldrb	r1, [r4, #0]
 8003460:	f000 fb68 	bl	8003b34 <memchr>
 8003464:	b138      	cbz	r0, 8003476 <_vfiprintf_r+0x176>
 8003466:	2240      	movs	r2, #64	@ 0x40
 8003468:	9b04      	ldr	r3, [sp, #16]
 800346a:	eba0 000a 	sub.w	r0, r0, sl
 800346e:	4082      	lsls	r2, r0
 8003470:	4313      	orrs	r3, r2
 8003472:	3401      	adds	r4, #1
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800347a:	2206      	movs	r2, #6
 800347c:	4829      	ldr	r0, [pc, #164]	@ (8003524 <_vfiprintf_r+0x224>)
 800347e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003482:	f000 fb57 	bl	8003b34 <memchr>
 8003486:	2800      	cmp	r0, #0
 8003488:	d03f      	beq.n	800350a <_vfiprintf_r+0x20a>
 800348a:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <_vfiprintf_r+0x228>)
 800348c:	bb1b      	cbnz	r3, 80034d6 <_vfiprintf_r+0x1d6>
 800348e:	9b03      	ldr	r3, [sp, #12]
 8003490:	3307      	adds	r3, #7
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	3308      	adds	r3, #8
 8003498:	9303      	str	r3, [sp, #12]
 800349a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800349c:	443b      	add	r3, r7
 800349e:	9309      	str	r3, [sp, #36]	@ 0x24
 80034a0:	e76a      	b.n	8003378 <_vfiprintf_r+0x78>
 80034a2:	460c      	mov	r4, r1
 80034a4:	2001      	movs	r0, #1
 80034a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80034aa:	e7a8      	b.n	80033fe <_vfiprintf_r+0xfe>
 80034ac:	2300      	movs	r3, #0
 80034ae:	f04f 0c0a 	mov.w	ip, #10
 80034b2:	4619      	mov	r1, r3
 80034b4:	3401      	adds	r4, #1
 80034b6:	9305      	str	r3, [sp, #20]
 80034b8:	4620      	mov	r0, r4
 80034ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034be:	3a30      	subs	r2, #48	@ 0x30
 80034c0:	2a09      	cmp	r2, #9
 80034c2:	d903      	bls.n	80034cc <_vfiprintf_r+0x1cc>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0c6      	beq.n	8003456 <_vfiprintf_r+0x156>
 80034c8:	9105      	str	r1, [sp, #20]
 80034ca:	e7c4      	b.n	8003456 <_vfiprintf_r+0x156>
 80034cc:	4604      	mov	r4, r0
 80034ce:	2301      	movs	r3, #1
 80034d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80034d4:	e7f0      	b.n	80034b8 <_vfiprintf_r+0x1b8>
 80034d6:	ab03      	add	r3, sp, #12
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	462a      	mov	r2, r5
 80034dc:	4630      	mov	r0, r6
 80034de:	4b13      	ldr	r3, [pc, #76]	@ (800352c <_vfiprintf_r+0x22c>)
 80034e0:	a904      	add	r1, sp, #16
 80034e2:	f3af 8000 	nop.w
 80034e6:	4607      	mov	r7, r0
 80034e8:	1c78      	adds	r0, r7, #1
 80034ea:	d1d6      	bne.n	800349a <_vfiprintf_r+0x19a>
 80034ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034ee:	07d9      	lsls	r1, r3, #31
 80034f0:	d405      	bmi.n	80034fe <_vfiprintf_r+0x1fe>
 80034f2:	89ab      	ldrh	r3, [r5, #12]
 80034f4:	059a      	lsls	r2, r3, #22
 80034f6:	d402      	bmi.n	80034fe <_vfiprintf_r+0x1fe>
 80034f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034fa:	f7ff fde1 	bl	80030c0 <__retarget_lock_release_recursive>
 80034fe:	89ab      	ldrh	r3, [r5, #12]
 8003500:	065b      	lsls	r3, r3, #25
 8003502:	f53f af1f 	bmi.w	8003344 <_vfiprintf_r+0x44>
 8003506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003508:	e71e      	b.n	8003348 <_vfiprintf_r+0x48>
 800350a:	ab03      	add	r3, sp, #12
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	462a      	mov	r2, r5
 8003510:	4630      	mov	r0, r6
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <_vfiprintf_r+0x22c>)
 8003514:	a904      	add	r1, sp, #16
 8003516:	f000 f87d 	bl	8003614 <_printf_i>
 800351a:	e7e4      	b.n	80034e6 <_vfiprintf_r+0x1e6>
 800351c:	08003ba6 	.word	0x08003ba6
 8003520:	08003bac 	.word	0x08003bac
 8003524:	08003bb0 	.word	0x08003bb0
 8003528:	00000000 	.word	0x00000000
 800352c:	080032db 	.word	0x080032db

08003530 <_printf_common>:
 8003530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003534:	4616      	mov	r6, r2
 8003536:	4698      	mov	r8, r3
 8003538:	688a      	ldr	r2, [r1, #8]
 800353a:	690b      	ldr	r3, [r1, #16]
 800353c:	4607      	mov	r7, r0
 800353e:	4293      	cmp	r3, r2
 8003540:	bfb8      	it	lt
 8003542:	4613      	movlt	r3, r2
 8003544:	6033      	str	r3, [r6, #0]
 8003546:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800354a:	460c      	mov	r4, r1
 800354c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003550:	b10a      	cbz	r2, 8003556 <_printf_common+0x26>
 8003552:	3301      	adds	r3, #1
 8003554:	6033      	str	r3, [r6, #0]
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	0699      	lsls	r1, r3, #26
 800355a:	bf42      	ittt	mi
 800355c:	6833      	ldrmi	r3, [r6, #0]
 800355e:	3302      	addmi	r3, #2
 8003560:	6033      	strmi	r3, [r6, #0]
 8003562:	6825      	ldr	r5, [r4, #0]
 8003564:	f015 0506 	ands.w	r5, r5, #6
 8003568:	d106      	bne.n	8003578 <_printf_common+0x48>
 800356a:	f104 0a19 	add.w	sl, r4, #25
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	6832      	ldr	r2, [r6, #0]
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	42ab      	cmp	r3, r5
 8003576:	dc2b      	bgt.n	80035d0 <_printf_common+0xa0>
 8003578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800357c:	6822      	ldr	r2, [r4, #0]
 800357e:	3b00      	subs	r3, #0
 8003580:	bf18      	it	ne
 8003582:	2301      	movne	r3, #1
 8003584:	0692      	lsls	r2, r2, #26
 8003586:	d430      	bmi.n	80035ea <_printf_common+0xba>
 8003588:	4641      	mov	r1, r8
 800358a:	4638      	mov	r0, r7
 800358c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003590:	47c8      	blx	r9
 8003592:	3001      	adds	r0, #1
 8003594:	d023      	beq.n	80035de <_printf_common+0xae>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	6922      	ldr	r2, [r4, #16]
 800359a:	f003 0306 	and.w	r3, r3, #6
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf14      	ite	ne
 80035a2:	2500      	movne	r5, #0
 80035a4:	6833      	ldreq	r3, [r6, #0]
 80035a6:	f04f 0600 	mov.w	r6, #0
 80035aa:	bf08      	it	eq
 80035ac:	68e5      	ldreq	r5, [r4, #12]
 80035ae:	f104 041a 	add.w	r4, r4, #26
 80035b2:	bf08      	it	eq
 80035b4:	1aed      	subeq	r5, r5, r3
 80035b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035ba:	bf08      	it	eq
 80035bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bfc4      	itt	gt
 80035c4:	1a9b      	subgt	r3, r3, r2
 80035c6:	18ed      	addgt	r5, r5, r3
 80035c8:	42b5      	cmp	r5, r6
 80035ca:	d11a      	bne.n	8003602 <_printf_common+0xd2>
 80035cc:	2000      	movs	r0, #0
 80035ce:	e008      	b.n	80035e2 <_printf_common+0xb2>
 80035d0:	2301      	movs	r3, #1
 80035d2:	4652      	mov	r2, sl
 80035d4:	4641      	mov	r1, r8
 80035d6:	4638      	mov	r0, r7
 80035d8:	47c8      	blx	r9
 80035da:	3001      	adds	r0, #1
 80035dc:	d103      	bne.n	80035e6 <_printf_common+0xb6>
 80035de:	f04f 30ff 	mov.w	r0, #4294967295
 80035e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e6:	3501      	adds	r5, #1
 80035e8:	e7c1      	b.n	800356e <_printf_common+0x3e>
 80035ea:	2030      	movs	r0, #48	@ 0x30
 80035ec:	18e1      	adds	r1, r4, r3
 80035ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035f8:	4422      	add	r2, r4
 80035fa:	3302      	adds	r3, #2
 80035fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003600:	e7c2      	b.n	8003588 <_printf_common+0x58>
 8003602:	2301      	movs	r3, #1
 8003604:	4622      	mov	r2, r4
 8003606:	4641      	mov	r1, r8
 8003608:	4638      	mov	r0, r7
 800360a:	47c8      	blx	r9
 800360c:	3001      	adds	r0, #1
 800360e:	d0e6      	beq.n	80035de <_printf_common+0xae>
 8003610:	3601      	adds	r6, #1
 8003612:	e7d9      	b.n	80035c8 <_printf_common+0x98>

08003614 <_printf_i>:
 8003614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	7e0f      	ldrb	r7, [r1, #24]
 800361a:	4691      	mov	r9, r2
 800361c:	2f78      	cmp	r7, #120	@ 0x78
 800361e:	4680      	mov	r8, r0
 8003620:	460c      	mov	r4, r1
 8003622:	469a      	mov	sl, r3
 8003624:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800362a:	d807      	bhi.n	800363c <_printf_i+0x28>
 800362c:	2f62      	cmp	r7, #98	@ 0x62
 800362e:	d80a      	bhi.n	8003646 <_printf_i+0x32>
 8003630:	2f00      	cmp	r7, #0
 8003632:	f000 80d3 	beq.w	80037dc <_printf_i+0x1c8>
 8003636:	2f58      	cmp	r7, #88	@ 0x58
 8003638:	f000 80ba 	beq.w	80037b0 <_printf_i+0x19c>
 800363c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003644:	e03a      	b.n	80036bc <_printf_i+0xa8>
 8003646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800364a:	2b15      	cmp	r3, #21
 800364c:	d8f6      	bhi.n	800363c <_printf_i+0x28>
 800364e:	a101      	add	r1, pc, #4	@ (adr r1, 8003654 <_printf_i+0x40>)
 8003650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003654:	080036ad 	.word	0x080036ad
 8003658:	080036c1 	.word	0x080036c1
 800365c:	0800363d 	.word	0x0800363d
 8003660:	0800363d 	.word	0x0800363d
 8003664:	0800363d 	.word	0x0800363d
 8003668:	0800363d 	.word	0x0800363d
 800366c:	080036c1 	.word	0x080036c1
 8003670:	0800363d 	.word	0x0800363d
 8003674:	0800363d 	.word	0x0800363d
 8003678:	0800363d 	.word	0x0800363d
 800367c:	0800363d 	.word	0x0800363d
 8003680:	080037c3 	.word	0x080037c3
 8003684:	080036eb 	.word	0x080036eb
 8003688:	0800377d 	.word	0x0800377d
 800368c:	0800363d 	.word	0x0800363d
 8003690:	0800363d 	.word	0x0800363d
 8003694:	080037e5 	.word	0x080037e5
 8003698:	0800363d 	.word	0x0800363d
 800369c:	080036eb 	.word	0x080036eb
 80036a0:	0800363d 	.word	0x0800363d
 80036a4:	0800363d 	.word	0x0800363d
 80036a8:	08003785 	.word	0x08003785
 80036ac:	6833      	ldr	r3, [r6, #0]
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6032      	str	r2, [r6, #0]
 80036b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036bc:	2301      	movs	r3, #1
 80036be:	e09e      	b.n	80037fe <_printf_i+0x1ea>
 80036c0:	6833      	ldr	r3, [r6, #0]
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	1d19      	adds	r1, r3, #4
 80036c6:	6031      	str	r1, [r6, #0]
 80036c8:	0606      	lsls	r6, r0, #24
 80036ca:	d501      	bpl.n	80036d0 <_printf_i+0xbc>
 80036cc:	681d      	ldr	r5, [r3, #0]
 80036ce:	e003      	b.n	80036d8 <_printf_i+0xc4>
 80036d0:	0645      	lsls	r5, r0, #25
 80036d2:	d5fb      	bpl.n	80036cc <_printf_i+0xb8>
 80036d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036d8:	2d00      	cmp	r5, #0
 80036da:	da03      	bge.n	80036e4 <_printf_i+0xd0>
 80036dc:	232d      	movs	r3, #45	@ 0x2d
 80036de:	426d      	negs	r5, r5
 80036e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e4:	230a      	movs	r3, #10
 80036e6:	4859      	ldr	r0, [pc, #356]	@ (800384c <_printf_i+0x238>)
 80036e8:	e011      	b.n	800370e <_printf_i+0xfa>
 80036ea:	6821      	ldr	r1, [r4, #0]
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	0608      	lsls	r0, r1, #24
 80036f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80036f4:	d402      	bmi.n	80036fc <_printf_i+0xe8>
 80036f6:	0649      	lsls	r1, r1, #25
 80036f8:	bf48      	it	mi
 80036fa:	b2ad      	uxthmi	r5, r5
 80036fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80036fe:	6033      	str	r3, [r6, #0]
 8003700:	bf14      	ite	ne
 8003702:	230a      	movne	r3, #10
 8003704:	2308      	moveq	r3, #8
 8003706:	4851      	ldr	r0, [pc, #324]	@ (800384c <_printf_i+0x238>)
 8003708:	2100      	movs	r1, #0
 800370a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800370e:	6866      	ldr	r6, [r4, #4]
 8003710:	2e00      	cmp	r6, #0
 8003712:	bfa8      	it	ge
 8003714:	6821      	ldrge	r1, [r4, #0]
 8003716:	60a6      	str	r6, [r4, #8]
 8003718:	bfa4      	itt	ge
 800371a:	f021 0104 	bicge.w	r1, r1, #4
 800371e:	6021      	strge	r1, [r4, #0]
 8003720:	b90d      	cbnz	r5, 8003726 <_printf_i+0x112>
 8003722:	2e00      	cmp	r6, #0
 8003724:	d04b      	beq.n	80037be <_printf_i+0x1aa>
 8003726:	4616      	mov	r6, r2
 8003728:	fbb5 f1f3 	udiv	r1, r5, r3
 800372c:	fb03 5711 	mls	r7, r3, r1, r5
 8003730:	5dc7      	ldrb	r7, [r0, r7]
 8003732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003736:	462f      	mov	r7, r5
 8003738:	42bb      	cmp	r3, r7
 800373a:	460d      	mov	r5, r1
 800373c:	d9f4      	bls.n	8003728 <_printf_i+0x114>
 800373e:	2b08      	cmp	r3, #8
 8003740:	d10b      	bne.n	800375a <_printf_i+0x146>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	07df      	lsls	r7, r3, #31
 8003746:	d508      	bpl.n	800375a <_printf_i+0x146>
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	6861      	ldr	r1, [r4, #4]
 800374c:	4299      	cmp	r1, r3
 800374e:	bfde      	ittt	le
 8003750:	2330      	movle	r3, #48	@ 0x30
 8003752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003756:	f106 36ff 	addle.w	r6, r6, #4294967295
 800375a:	1b92      	subs	r2, r2, r6
 800375c:	6122      	str	r2, [r4, #16]
 800375e:	464b      	mov	r3, r9
 8003760:	4621      	mov	r1, r4
 8003762:	4640      	mov	r0, r8
 8003764:	f8cd a000 	str.w	sl, [sp]
 8003768:	aa03      	add	r2, sp, #12
 800376a:	f7ff fee1 	bl	8003530 <_printf_common>
 800376e:	3001      	adds	r0, #1
 8003770:	d14a      	bne.n	8003808 <_printf_i+0x1f4>
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	b004      	add	sp, #16
 8003778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	f043 0320 	orr.w	r3, r3, #32
 8003782:	6023      	str	r3, [r4, #0]
 8003784:	2778      	movs	r7, #120	@ 0x78
 8003786:	4832      	ldr	r0, [pc, #200]	@ (8003850 <_printf_i+0x23c>)
 8003788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	6831      	ldr	r1, [r6, #0]
 8003790:	061f      	lsls	r7, r3, #24
 8003792:	f851 5b04 	ldr.w	r5, [r1], #4
 8003796:	d402      	bmi.n	800379e <_printf_i+0x18a>
 8003798:	065f      	lsls	r7, r3, #25
 800379a:	bf48      	it	mi
 800379c:	b2ad      	uxthmi	r5, r5
 800379e:	6031      	str	r1, [r6, #0]
 80037a0:	07d9      	lsls	r1, r3, #31
 80037a2:	bf44      	itt	mi
 80037a4:	f043 0320 	orrmi.w	r3, r3, #32
 80037a8:	6023      	strmi	r3, [r4, #0]
 80037aa:	b11d      	cbz	r5, 80037b4 <_printf_i+0x1a0>
 80037ac:	2310      	movs	r3, #16
 80037ae:	e7ab      	b.n	8003708 <_printf_i+0xf4>
 80037b0:	4826      	ldr	r0, [pc, #152]	@ (800384c <_printf_i+0x238>)
 80037b2:	e7e9      	b.n	8003788 <_printf_i+0x174>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	f023 0320 	bic.w	r3, r3, #32
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	e7f6      	b.n	80037ac <_printf_i+0x198>
 80037be:	4616      	mov	r6, r2
 80037c0:	e7bd      	b.n	800373e <_printf_i+0x12a>
 80037c2:	6833      	ldr	r3, [r6, #0]
 80037c4:	6825      	ldr	r5, [r4, #0]
 80037c6:	1d18      	adds	r0, r3, #4
 80037c8:	6961      	ldr	r1, [r4, #20]
 80037ca:	6030      	str	r0, [r6, #0]
 80037cc:	062e      	lsls	r6, r5, #24
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	d501      	bpl.n	80037d6 <_printf_i+0x1c2>
 80037d2:	6019      	str	r1, [r3, #0]
 80037d4:	e002      	b.n	80037dc <_printf_i+0x1c8>
 80037d6:	0668      	lsls	r0, r5, #25
 80037d8:	d5fb      	bpl.n	80037d2 <_printf_i+0x1be>
 80037da:	8019      	strh	r1, [r3, #0]
 80037dc:	2300      	movs	r3, #0
 80037de:	4616      	mov	r6, r2
 80037e0:	6123      	str	r3, [r4, #16]
 80037e2:	e7bc      	b.n	800375e <_printf_i+0x14a>
 80037e4:	6833      	ldr	r3, [r6, #0]
 80037e6:	2100      	movs	r1, #0
 80037e8:	1d1a      	adds	r2, r3, #4
 80037ea:	6032      	str	r2, [r6, #0]
 80037ec:	681e      	ldr	r6, [r3, #0]
 80037ee:	6862      	ldr	r2, [r4, #4]
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 f99f 	bl	8003b34 <memchr>
 80037f6:	b108      	cbz	r0, 80037fc <_printf_i+0x1e8>
 80037f8:	1b80      	subs	r0, r0, r6
 80037fa:	6060      	str	r0, [r4, #4]
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	6123      	str	r3, [r4, #16]
 8003800:	2300      	movs	r3, #0
 8003802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003806:	e7aa      	b.n	800375e <_printf_i+0x14a>
 8003808:	4632      	mov	r2, r6
 800380a:	4649      	mov	r1, r9
 800380c:	4640      	mov	r0, r8
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	47d0      	blx	sl
 8003812:	3001      	adds	r0, #1
 8003814:	d0ad      	beq.n	8003772 <_printf_i+0x15e>
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	079b      	lsls	r3, r3, #30
 800381a:	d413      	bmi.n	8003844 <_printf_i+0x230>
 800381c:	68e0      	ldr	r0, [r4, #12]
 800381e:	9b03      	ldr	r3, [sp, #12]
 8003820:	4298      	cmp	r0, r3
 8003822:	bfb8      	it	lt
 8003824:	4618      	movlt	r0, r3
 8003826:	e7a6      	b.n	8003776 <_printf_i+0x162>
 8003828:	2301      	movs	r3, #1
 800382a:	4632      	mov	r2, r6
 800382c:	4649      	mov	r1, r9
 800382e:	4640      	mov	r0, r8
 8003830:	47d0      	blx	sl
 8003832:	3001      	adds	r0, #1
 8003834:	d09d      	beq.n	8003772 <_printf_i+0x15e>
 8003836:	3501      	adds	r5, #1
 8003838:	68e3      	ldr	r3, [r4, #12]
 800383a:	9903      	ldr	r1, [sp, #12]
 800383c:	1a5b      	subs	r3, r3, r1
 800383e:	42ab      	cmp	r3, r5
 8003840:	dcf2      	bgt.n	8003828 <_printf_i+0x214>
 8003842:	e7eb      	b.n	800381c <_printf_i+0x208>
 8003844:	2500      	movs	r5, #0
 8003846:	f104 0619 	add.w	r6, r4, #25
 800384a:	e7f5      	b.n	8003838 <_printf_i+0x224>
 800384c:	08003bb7 	.word	0x08003bb7
 8003850:	08003bc8 	.word	0x08003bc8

08003854 <__sflush_r>:
 8003854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	0716      	lsls	r6, r2, #28
 800385c:	4605      	mov	r5, r0
 800385e:	460c      	mov	r4, r1
 8003860:	d454      	bmi.n	800390c <__sflush_r+0xb8>
 8003862:	684b      	ldr	r3, [r1, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	dc02      	bgt.n	800386e <__sflush_r+0x1a>
 8003868:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	dd48      	ble.n	8003900 <__sflush_r+0xac>
 800386e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003870:	2e00      	cmp	r6, #0
 8003872:	d045      	beq.n	8003900 <__sflush_r+0xac>
 8003874:	2300      	movs	r3, #0
 8003876:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800387a:	682f      	ldr	r7, [r5, #0]
 800387c:	6a21      	ldr	r1, [r4, #32]
 800387e:	602b      	str	r3, [r5, #0]
 8003880:	d030      	beq.n	80038e4 <__sflush_r+0x90>
 8003882:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	0759      	lsls	r1, r3, #29
 8003888:	d505      	bpl.n	8003896 <__sflush_r+0x42>
 800388a:	6863      	ldr	r3, [r4, #4]
 800388c:	1ad2      	subs	r2, r2, r3
 800388e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003890:	b10b      	cbz	r3, 8003896 <__sflush_r+0x42>
 8003892:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003894:	1ad2      	subs	r2, r2, r3
 8003896:	2300      	movs	r3, #0
 8003898:	4628      	mov	r0, r5
 800389a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800389c:	6a21      	ldr	r1, [r4, #32]
 800389e:	47b0      	blx	r6
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	d106      	bne.n	80038b4 <__sflush_r+0x60>
 80038a6:	6829      	ldr	r1, [r5, #0]
 80038a8:	291d      	cmp	r1, #29
 80038aa:	d82b      	bhi.n	8003904 <__sflush_r+0xb0>
 80038ac:	4a28      	ldr	r2, [pc, #160]	@ (8003950 <__sflush_r+0xfc>)
 80038ae:	410a      	asrs	r2, r1
 80038b0:	07d6      	lsls	r6, r2, #31
 80038b2:	d427      	bmi.n	8003904 <__sflush_r+0xb0>
 80038b4:	2200      	movs	r2, #0
 80038b6:	6062      	str	r2, [r4, #4]
 80038b8:	6922      	ldr	r2, [r4, #16]
 80038ba:	04d9      	lsls	r1, r3, #19
 80038bc:	6022      	str	r2, [r4, #0]
 80038be:	d504      	bpl.n	80038ca <__sflush_r+0x76>
 80038c0:	1c42      	adds	r2, r0, #1
 80038c2:	d101      	bne.n	80038c8 <__sflush_r+0x74>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b903      	cbnz	r3, 80038ca <__sflush_r+0x76>
 80038c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80038ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038cc:	602f      	str	r7, [r5, #0]
 80038ce:	b1b9      	cbz	r1, 8003900 <__sflush_r+0xac>
 80038d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038d4:	4299      	cmp	r1, r3
 80038d6:	d002      	beq.n	80038de <__sflush_r+0x8a>
 80038d8:	4628      	mov	r0, r5
 80038da:	f7ff fbf3 	bl	80030c4 <_free_r>
 80038de:	2300      	movs	r3, #0
 80038e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80038e2:	e00d      	b.n	8003900 <__sflush_r+0xac>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4628      	mov	r0, r5
 80038e8:	47b0      	blx	r6
 80038ea:	4602      	mov	r2, r0
 80038ec:	1c50      	adds	r0, r2, #1
 80038ee:	d1c9      	bne.n	8003884 <__sflush_r+0x30>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0c6      	beq.n	8003884 <__sflush_r+0x30>
 80038f6:	2b1d      	cmp	r3, #29
 80038f8:	d001      	beq.n	80038fe <__sflush_r+0xaa>
 80038fa:	2b16      	cmp	r3, #22
 80038fc:	d11d      	bne.n	800393a <__sflush_r+0xe6>
 80038fe:	602f      	str	r7, [r5, #0]
 8003900:	2000      	movs	r0, #0
 8003902:	e021      	b.n	8003948 <__sflush_r+0xf4>
 8003904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003908:	b21b      	sxth	r3, r3
 800390a:	e01a      	b.n	8003942 <__sflush_r+0xee>
 800390c:	690f      	ldr	r7, [r1, #16]
 800390e:	2f00      	cmp	r7, #0
 8003910:	d0f6      	beq.n	8003900 <__sflush_r+0xac>
 8003912:	0793      	lsls	r3, r2, #30
 8003914:	bf18      	it	ne
 8003916:	2300      	movne	r3, #0
 8003918:	680e      	ldr	r6, [r1, #0]
 800391a:	bf08      	it	eq
 800391c:	694b      	ldreq	r3, [r1, #20]
 800391e:	1bf6      	subs	r6, r6, r7
 8003920:	600f      	str	r7, [r1, #0]
 8003922:	608b      	str	r3, [r1, #8]
 8003924:	2e00      	cmp	r6, #0
 8003926:	ddeb      	ble.n	8003900 <__sflush_r+0xac>
 8003928:	4633      	mov	r3, r6
 800392a:	463a      	mov	r2, r7
 800392c:	4628      	mov	r0, r5
 800392e:	6a21      	ldr	r1, [r4, #32]
 8003930:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003934:	47e0      	blx	ip
 8003936:	2800      	cmp	r0, #0
 8003938:	dc07      	bgt.n	800394a <__sflush_r+0xf6>
 800393a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800393e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003942:	f04f 30ff 	mov.w	r0, #4294967295
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800394a:	4407      	add	r7, r0
 800394c:	1a36      	subs	r6, r6, r0
 800394e:	e7e9      	b.n	8003924 <__sflush_r+0xd0>
 8003950:	dfbffffe 	.word	0xdfbffffe

08003954 <_fflush_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	690b      	ldr	r3, [r1, #16]
 8003958:	4605      	mov	r5, r0
 800395a:	460c      	mov	r4, r1
 800395c:	b913      	cbnz	r3, 8003964 <_fflush_r+0x10>
 800395e:	2500      	movs	r5, #0
 8003960:	4628      	mov	r0, r5
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	b118      	cbz	r0, 800396e <_fflush_r+0x1a>
 8003966:	6a03      	ldr	r3, [r0, #32]
 8003968:	b90b      	cbnz	r3, 800396e <_fflush_r+0x1a>
 800396a:	f7ff f9a9 	bl	8002cc0 <__sinit>
 800396e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f3      	beq.n	800395e <_fflush_r+0xa>
 8003976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003978:	07d0      	lsls	r0, r2, #31
 800397a:	d404      	bmi.n	8003986 <_fflush_r+0x32>
 800397c:	0599      	lsls	r1, r3, #22
 800397e:	d402      	bmi.n	8003986 <_fflush_r+0x32>
 8003980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003982:	f7ff fb9c 	bl	80030be <__retarget_lock_acquire_recursive>
 8003986:	4628      	mov	r0, r5
 8003988:	4621      	mov	r1, r4
 800398a:	f7ff ff63 	bl	8003854 <__sflush_r>
 800398e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003990:	4605      	mov	r5, r0
 8003992:	07da      	lsls	r2, r3, #31
 8003994:	d4e4      	bmi.n	8003960 <_fflush_r+0xc>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	059b      	lsls	r3, r3, #22
 800399a:	d4e1      	bmi.n	8003960 <_fflush_r+0xc>
 800399c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800399e:	f7ff fb8f 	bl	80030c0 <__retarget_lock_release_recursive>
 80039a2:	e7dd      	b.n	8003960 <_fflush_r+0xc>

080039a4 <__swhatbuf_r>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	460c      	mov	r4, r1
 80039a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ac:	4615      	mov	r5, r2
 80039ae:	2900      	cmp	r1, #0
 80039b0:	461e      	mov	r6, r3
 80039b2:	b096      	sub	sp, #88	@ 0x58
 80039b4:	da0c      	bge.n	80039d0 <__swhatbuf_r+0x2c>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	2100      	movs	r1, #0
 80039ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039be:	bf14      	ite	ne
 80039c0:	2340      	movne	r3, #64	@ 0x40
 80039c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80039c6:	2000      	movs	r0, #0
 80039c8:	6031      	str	r1, [r6, #0]
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	b016      	add	sp, #88	@ 0x58
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	466a      	mov	r2, sp
 80039d2:	f000 f87d 	bl	8003ad0 <_fstat_r>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	dbed      	blt.n	80039b6 <__swhatbuf_r+0x12>
 80039da:	9901      	ldr	r1, [sp, #4]
 80039dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80039e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80039e4:	4259      	negs	r1, r3
 80039e6:	4159      	adcs	r1, r3
 80039e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039ec:	e7eb      	b.n	80039c6 <__swhatbuf_r+0x22>

080039ee <__smakebuf_r>:
 80039ee:	898b      	ldrh	r3, [r1, #12]
 80039f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039f2:	079d      	lsls	r5, r3, #30
 80039f4:	4606      	mov	r6, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	d507      	bpl.n	8003a0a <__smakebuf_r+0x1c>
 80039fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80039fe:	6023      	str	r3, [r4, #0]
 8003a00:	6123      	str	r3, [r4, #16]
 8003a02:	2301      	movs	r3, #1
 8003a04:	6163      	str	r3, [r4, #20]
 8003a06:	b003      	add	sp, #12
 8003a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a0a:	466a      	mov	r2, sp
 8003a0c:	ab01      	add	r3, sp, #4
 8003a0e:	f7ff ffc9 	bl	80039a4 <__swhatbuf_r>
 8003a12:	9f00      	ldr	r7, [sp, #0]
 8003a14:	4605      	mov	r5, r0
 8003a16:	4639      	mov	r1, r7
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f7ff fbbd 	bl	8003198 <_malloc_r>
 8003a1e:	b948      	cbnz	r0, 8003a34 <__smakebuf_r+0x46>
 8003a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a24:	059a      	lsls	r2, r3, #22
 8003a26:	d4ee      	bmi.n	8003a06 <__smakebuf_r+0x18>
 8003a28:	f023 0303 	bic.w	r3, r3, #3
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	e7e2      	b.n	80039fa <__smakebuf_r+0xc>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3e:	81a3      	strh	r3, [r4, #12]
 8003a40:	9b01      	ldr	r3, [sp, #4]
 8003a42:	6020      	str	r0, [r4, #0]
 8003a44:	b15b      	cbz	r3, 8003a5e <__smakebuf_r+0x70>
 8003a46:	4630      	mov	r0, r6
 8003a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a4c:	f000 f852 	bl	8003af4 <_isatty_r>
 8003a50:	b128      	cbz	r0, 8003a5e <__smakebuf_r+0x70>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	431d      	orrs	r5, r3
 8003a62:	81a5      	strh	r5, [r4, #12]
 8003a64:	e7cf      	b.n	8003a06 <__smakebuf_r+0x18>

08003a66 <_putc_r>:
 8003a66:	b570      	push	{r4, r5, r6, lr}
 8003a68:	460d      	mov	r5, r1
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	4606      	mov	r6, r0
 8003a6e:	b118      	cbz	r0, 8003a78 <_putc_r+0x12>
 8003a70:	6a03      	ldr	r3, [r0, #32]
 8003a72:	b90b      	cbnz	r3, 8003a78 <_putc_r+0x12>
 8003a74:	f7ff f924 	bl	8002cc0 <__sinit>
 8003a78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a7a:	07d8      	lsls	r0, r3, #31
 8003a7c:	d405      	bmi.n	8003a8a <_putc_r+0x24>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	0599      	lsls	r1, r3, #22
 8003a82:	d402      	bmi.n	8003a8a <_putc_r+0x24>
 8003a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a86:	f7ff fb1a 	bl	80030be <__retarget_lock_acquire_recursive>
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	60a3      	str	r3, [r4, #8]
 8003a92:	da05      	bge.n	8003aa0 <_putc_r+0x3a>
 8003a94:	69a2      	ldr	r2, [r4, #24]
 8003a96:	4293      	cmp	r3, r2
 8003a98:	db12      	blt.n	8003ac0 <_putc_r+0x5a>
 8003a9a:	b2eb      	uxtb	r3, r5
 8003a9c:	2b0a      	cmp	r3, #10
 8003a9e:	d00f      	beq.n	8003ac0 <_putc_r+0x5a>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	6022      	str	r2, [r4, #0]
 8003aa6:	701d      	strb	r5, [r3, #0]
 8003aa8:	b2ed      	uxtb	r5, r5
 8003aaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003aac:	07da      	lsls	r2, r3, #31
 8003aae:	d405      	bmi.n	8003abc <_putc_r+0x56>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	059b      	lsls	r3, r3, #22
 8003ab4:	d402      	bmi.n	8003abc <_putc_r+0x56>
 8003ab6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ab8:	f7ff fb02 	bl	80030c0 <__retarget_lock_release_recursive>
 8003abc:	4628      	mov	r0, r5
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f7ff f9ec 	bl	8002ea2 <__swbuf_r>
 8003aca:	4605      	mov	r5, r0
 8003acc:	e7ed      	b.n	8003aaa <_putc_r+0x44>
	...

08003ad0 <_fstat_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4d06      	ldr	r5, [pc, #24]	@ (8003af0 <_fstat_r+0x20>)
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	602b      	str	r3, [r5, #0]
 8003ade:	f7fd f8b0 	bl	8000c42 <_fstat>
 8003ae2:	1c43      	adds	r3, r0, #1
 8003ae4:	d102      	bne.n	8003aec <_fstat_r+0x1c>
 8003ae6:	682b      	ldr	r3, [r5, #0]
 8003ae8:	b103      	cbz	r3, 8003aec <_fstat_r+0x1c>
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	bd38      	pop	{r3, r4, r5, pc}
 8003aee:	bf00      	nop
 8003af0:	20000270 	.word	0x20000270

08003af4 <_isatty_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	2300      	movs	r3, #0
 8003af8:	4d05      	ldr	r5, [pc, #20]	@ (8003b10 <_isatty_r+0x1c>)
 8003afa:	4604      	mov	r4, r0
 8003afc:	4608      	mov	r0, r1
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	f7fd f8ae 	bl	8000c60 <_isatty>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_isatty_r+0x1a>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_isatty_r+0x1a>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	20000270 	.word	0x20000270

08003b14 <_sbrk_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	2300      	movs	r3, #0
 8003b18:	4d05      	ldr	r5, [pc, #20]	@ (8003b30 <_sbrk_r+0x1c>)
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	602b      	str	r3, [r5, #0]
 8003b20:	f7fd f8b4 	bl	8000c8c <_sbrk>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_sbrk_r+0x1a>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_sbrk_r+0x1a>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	20000270 	.word	0x20000270

08003b34 <memchr>:
 8003b34:	4603      	mov	r3, r0
 8003b36:	b510      	push	{r4, lr}
 8003b38:	b2c9      	uxtb	r1, r1
 8003b3a:	4402      	add	r2, r0
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	d101      	bne.n	8003b46 <memchr+0x12>
 8003b42:	2000      	movs	r0, #0
 8003b44:	e003      	b.n	8003b4e <memchr+0x1a>
 8003b46:	7804      	ldrb	r4, [r0, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	428c      	cmp	r4, r1
 8003b4c:	d1f6      	bne.n	8003b3c <memchr+0x8>
 8003b4e:	bd10      	pop	{r4, pc}

08003b50 <_init>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr

08003b5c <_fini>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr

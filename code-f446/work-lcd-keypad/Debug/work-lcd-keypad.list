
work-lcd-keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003774  08003774  00004774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ec  080037ec  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037f4  080037f4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f4  080037f4  000047f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080037fc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08003858  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003858  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a54c  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aae  00000000  00000000  0000f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00011088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008cb  00000000  00000000  00011bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222a3  00000000  00000000  000124bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4a2  00000000  00000000  0003475e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d949e  00000000  00000000  00041c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b09e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  0011b0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0011e584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800375c 	.word	0x0800375c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800375c 	.word	0x0800375c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <delay_us>:
#define LCD_D6 GPIOB, GPIO_PIN_10
#define LCD_D7 GPIOA, GPIO_PIN_8


void delay_us(uint32_t us)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0;
 80005a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM2->CNT < us);
 80005b0:	bf00      	nop
 80005b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d8f9      	bhi.n	80005b2 <delay_us+0x12>
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GetElapsedTick>:


uint32_t GetElapsedTick(uint32_t start)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	uint32_t end = HAL_GetTick();
 80005d4:	f000 fcf8 	bl	8000fc8 <HAL_GetTick>
 80005d8:	60f8      	str	r0, [r7, #12]
	if (end >= start)
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d303      	bcc.n	80005ea <GetElapsedTick+0x1e>
		return end - start;
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	e005      	b.n	80005f6 <GetElapsedTick+0x2a>
	else
		return 0xffff - start + end;
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80005f4:	33ff      	adds	r3, #255	@ 0xff
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <LCD_Enable>:

void LCD_Enable() {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2180      	movs	r1, #128	@ 0x80
 8000608:	4807      	ldr	r0, [pc, #28]	@ (8000628 <LCD_Enable+0x28>)
 800060a:	f001 fb63 	bl	8001cd4 <HAL_GPIO_WritePin>
    delay_us(10);
 800060e:	200a      	movs	r0, #10
 8000610:	f7ff ffc6 	bl	80005a0 <delay_us>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2180      	movs	r1, #128	@ 0x80
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <LCD_Enable+0x28>)
 800061a:	f001 fb5b 	bl	8001cd4 <HAL_GPIO_WritePin>
    delay_us(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f7ff ffbe 	bl	80005a0 <delay_us>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40020800 	.word	0x40020800

0800062c <LCD_Send4Bit>:

void LCD_Send4Bit(uint8_t data) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	2120      	movs	r1, #32
 8000642:	4816      	ldr	r0, [pc, #88]	@ (800069c <LCD_Send4Bit+0x70>)
 8000644:	f001 fb46 	bl	8001cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	105b      	asrs	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	2110      	movs	r1, #16
 8000658:	4810      	ldr	r0, [pc, #64]	@ (800069c <LCD_Send4Bit+0x70>)
 800065a:	f001 fb3b 	bl	8001cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	109b      	asrs	r3, r3, #2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000670:	480a      	ldr	r0, [pc, #40]	@ (800069c <LCD_Send4Bit+0x70>)
 8000672:	f001 fb2f 	bl	8001cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	10db      	asrs	r3, r3, #3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <LCD_Send4Bit+0x74>)
 800068a:	f001 fb23 	bl	8001cd4 <HAL_GPIO_WritePin>
    LCD_Enable();
 800068e:	f7ff ffb7 	bl	8000600 <LCD_Enable>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020000 	.word	0x40020000

080006a4 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <LCD_SendCommand+0x38>)
 80006b6:	f001 fb0d 	bl	8001cd4 <HAL_GPIO_WritePin>
    LCD_Send4Bit(cmd >> 4);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	091b      	lsrs	r3, r3, #4
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb3 	bl	800062c <LCD_Send4Bit>
    LCD_Send4Bit(cmd & 0x0F);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f003 030f 	and.w	r3, r3, #15
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffac 	bl	800062c <LCD_Send4Bit>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40020000 	.word	0x40020000

080006e0 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006f0:	4809      	ldr	r0, [pc, #36]	@ (8000718 <LCD_SendData+0x38>)
 80006f2:	f001 faef 	bl	8001cd4 <HAL_GPIO_WritePin>
    LCD_Send4Bit(data >> 4);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	091b      	lsrs	r3, r3, #4
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff95 	bl	800062c <LCD_Send4Bit>
    LCD_Send4Bit(data & 0x0F);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 030f 	and.w	r3, r3, #15
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff8e 	bl	800062c <LCD_Send4Bit>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020000 	.word	0x40020000

0800071c <LCD_Init>:

void LCD_Init() {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x28); // 4비트 모드, 2라인, 5x8 폰트
 8000720:	2028      	movs	r0, #40	@ 0x28
 8000722:	f7ff ffbf 	bl	80006a4 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // 디스플레이 ON, 커서 OFF
 8000726:	200c      	movs	r0, #12
 8000728:	f7ff ffbc 	bl	80006a4 <LCD_SendCommand>
    LCD_SendCommand(0x06); // 자동 이동, 오른쪽으로 이동
 800072c:	2006      	movs	r0, #6
 800072e:	f7ff ffb9 	bl	80006a4 <LCD_SendCommand>
    LCD_SendCommand(0x01); // 화면 클리어
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff ffb6 	bl	80006a4 <LCD_SendCommand>

    HAL_Delay(2);
 8000738:	2002      	movs	r0, #2
 800073a:	f000 fc51 	bl	8000fe0 <HAL_Delay>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}

08000742 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	460a      	mov	r2, r1
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	4613      	mov	r3, r2
 8000750:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = (row == 0) ? 0x80 + col : 0xC0 + col;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d103      	bne.n	8000760 <LCD_SetCursor+0x1e>
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	3b80      	subs	r3, #128	@ 0x80
 800075c:	b2db      	uxtb	r3, r3
 800075e:	e002      	b.n	8000766 <LCD_SetCursor+0x24>
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	3b40      	subs	r3, #64	@ 0x40
 8000764:	b2db      	uxtb	r3, r3
 8000766:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(pos);
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff9a 	bl	80006a4 <LCD_SendCommand>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <LCD_Print>:

void LCD_Print(char* str) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000780:	e006      	b.n	8000790 <LCD_Print+0x18>
        LCD_SendData(*str++);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffa8 	bl	80006e0 <LCD_SendData>
    while (*str) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f4      	bne.n	8000782 <LCD_Print+0xa>
    }
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <ToggleRunLed>:




void ToggleRunLed()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007a8:	2120      	movs	r1, #32
 80007aa:	4802      	ldr	r0, [pc, #8]	@ (80007b4 <ToggleRunLed+0x10>)
 80007ac:	f001 faab 	bl	8001d06 <HAL_GPIO_TogglePin>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40020000 	.word	0x40020000

080007b8 <ChangeRunLed>:

uint32_t tm_run_led;

void ChangeRunLed()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	if (GetElapsedTick(tm_run_led) >= 500)
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <ChangeRunLed+0x28>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff03 	bl	80005cc <GetElapsedTick>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007cc:	d306      	bcc.n	80007dc <ChangeRunLed+0x24>
	{
		tm_run_led = HAL_GetTick();
 80007ce:	f000 fbfb 	bl	8000fc8 <HAL_GetTick>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a02      	ldr	r2, [pc, #8]	@ (80007e0 <ChangeRunLed+0x28>)
 80007d6:	6013      	str	r3, [r2, #0]
		ToggleRunLed();
 80007d8:	f7ff ffe4 	bl	80007a4 <ToggleRunLed>
	}
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000108 	.word	0x20000108

080007e4 <Read_ADC>:


// **ADC 버튼 읽기**
uint16_t Read_ADC(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80007e8:	4807      	ldr	r0, [pc, #28]	@ (8000808 <Read_ADC+0x24>)
 80007ea:	f000 fc61 	bl	80010b0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80007ee:	f04f 31ff 	mov.w	r1, #4294967295
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <Read_ADC+0x24>)
 80007f4:	f000 fd2e 	bl	8001254 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 80007f8:	4803      	ldr	r0, [pc, #12]	@ (8000808 <Read_ADC+0x24>)
 80007fa:	f000 fdb6 	bl	800136a <HAL_ADC_GetValue>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29b      	uxth	r3, r3
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000078 	.word	0x20000078

0800080c <ReadButton>:
#define BTN_RIGHT 3
#define BTN_UP 4
#define BTN_DOWN 5

uint8_t ReadButton()
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
	uint16_t adc = Read_ADC();
 8000812:	f7ff ffe7 	bl	80007e4 <Read_ADC>
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	if (adc < 100) return BTN_RIGHT;
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	2b63      	cmp	r3, #99	@ 0x63
 800081e:	d801      	bhi.n	8000824 <ReadButton+0x18>
 8000820:	2303      	movs	r3, #3
 8000822:	e017      	b.n	8000854 <ReadButton+0x48>
	else if(adc < 200) return BTN_UP;
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	2bc7      	cmp	r3, #199	@ 0xc7
 8000828:	d801      	bhi.n	800082e <ReadButton+0x22>
 800082a:	2304      	movs	r3, #4
 800082c:	e012      	b.n	8000854 <ReadButton+0x48>
	else if (adc < 400) return BTN_DOWN;
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000834:	d201      	bcs.n	800083a <ReadButton+0x2e>
 8000836:	2305      	movs	r3, #5
 8000838:	e00c      	b.n	8000854 <ReadButton+0x48>
	else if (adc < 600) return BTN_LEFT;
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000840:	d201      	bcs.n	8000846 <ReadButton+0x3a>
 8000842:	2302      	movs	r3, #2
 8000844:	e006      	b.n	8000854 <ReadButton+0x48>
	else if (adc < 800) return BTN_SEL;
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800084c:	d201      	bcs.n	8000852 <ReadButton+0x46>
 800084e:	2301      	movs	r3, #1
 8000850:	e000      	b.n	8000854 <ReadButton+0x48>
	else return 0;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <InitWork>:

void InitWork()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	// 타이머 활성화
	HAL_TIM_Base_Start(&htim2);
 8000860:	4806      	ldr	r0, [pc, #24]	@ (800087c <InitWork+0x20>)
 8000862:	f001 ffe9 	bl	8002838 <HAL_TIM_Base_Start>

	LCD_Init();
 8000866:	f7ff ff59 	bl	800071c <LCD_Init>
	LCD_SetCursor(0, 0);
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff68 	bl	8000742 <LCD_SetCursor>
	LCD_Print("Keypad Ready!");
 8000872:	4803      	ldr	r0, [pc, #12]	@ (8000880 <InitWork+0x24>)
 8000874:	f7ff ff80 	bl	8000778 <LCD_Print>
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000c0 	.word	0x200000c0
 8000880:	08003774 	.word	0x08003774

08000884 <DoWork>:

uint32_t tm_work1;
uint32_t cnt;

void DoWork()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
	ChangeRunLed();
 800088a:	f7ff ff95 	bl	80007b8 <ChangeRunLed>

	if (GetElapsedTick(tm_work1) >= 500)
 800088e:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <DoWork+0xbc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe9a 	bl	80005cc <GetElapsedTick>
 8000898:	4603      	mov	r3, r0
 800089a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800089e:	d34b      	bcc.n	8000938 <DoWork+0xb4>
	{
		tm_work1 = HAL_GetTick();
 80008a0:	f000 fb92 	bl	8000fc8 <HAL_GetTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a26      	ldr	r2, [pc, #152]	@ (8000940 <DoWork+0xbc>)
 80008a8:	6013      	str	r3, [r2, #0]

		cnt++;
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <DoWork+0xc0>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	4a24      	ldr	r2, [pc, #144]	@ (8000944 <DoWork+0xc0>)
 80008b2:	6013      	str	r3, [r2, #0]

		uint8_t btn = ReadButton();
 80008b4:	f7ff ffaa 	bl	800080c <ReadButton>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		char buff[32];
		buff[0] = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	713b      	strb	r3, [r7, #4]

		if (btn == BTN_SEL) sprintf(buff, "SELECT");
 80008c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d105      	bne.n	80008d6 <DoWork+0x52>
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	491e      	ldr	r1, [pc, #120]	@ (8000948 <DoWork+0xc4>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 faa4 	bl	8002e1c <siprintf>
 80008d4:	e026      	b.n	8000924 <DoWork+0xa0>
		else if (btn == BTN_LEFT) sprintf(buff, "LEFT");
 80008d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d105      	bne.n	80008ea <DoWork+0x66>
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	491a      	ldr	r1, [pc, #104]	@ (800094c <DoWork+0xc8>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fa9a 	bl	8002e1c <siprintf>
 80008e8:	e01c      	b.n	8000924 <DoWork+0xa0>
		else if (btn == BTN_RIGHT) sprintf(buff, "RIGHT");
 80008ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d105      	bne.n	80008fe <DoWork+0x7a>
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4916      	ldr	r1, [pc, #88]	@ (8000950 <DoWork+0xcc>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fa90 	bl	8002e1c <siprintf>
 80008fc:	e012      	b.n	8000924 <DoWork+0xa0>
		else if (btn == BTN_UP) sprintf(buff, "UP");
 80008fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000902:	2b04      	cmp	r3, #4
 8000904:	d105      	bne.n	8000912 <DoWork+0x8e>
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4912      	ldr	r1, [pc, #72]	@ (8000954 <DoWork+0xd0>)
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fa86 	bl	8002e1c <siprintf>
 8000910:	e008      	b.n	8000924 <DoWork+0xa0>
		else if (btn == BTN_DOWN) sprintf(buff, "DOWN");
 8000912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000916:	2b05      	cmp	r3, #5
 8000918:	d104      	bne.n	8000924 <DoWork+0xa0>
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	490e      	ldr	r1, [pc, #56]	@ (8000958 <DoWork+0xd4>)
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fa7c 	bl	8002e1c <siprintf>

		LCD_Init();
 8000924:	f7ff fefa 	bl	800071c <LCD_Init>
		LCD_SetCursor(0, 0);
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff ff09 	bl	8000742 <LCD_SetCursor>
		LCD_Print(buff);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff20 	bl	8000778 <LCD_Print>
	}

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	@ 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000010c 	.word	0x2000010c
 8000944:	20000110 	.word	0x20000110
 8000948:	08003784 	.word	0x08003784
 800094c:	0800378c 	.word	0x0800378c
 8000950:	08003794 	.word	0x08003794
 8000954:	0800379c 	.word	0x0800379c
 8000958:	080037a0 	.word	0x080037a0

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 facc 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f80c 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f000 f908 	bl	8000b7c <MX_GPIO_Init>
  MX_TIM2_Init();
 800096c:	f000 f8ba 	bl	8000ae4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000970:	f000 f866 	bl	8000a40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  InitWork();
 8000974:	f7ff ff72 	bl	800085c <InitWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DoWork();
 8000978:	f7ff ff84 	bl	8000884 <DoWork>
 800097c:	e7fc      	b.n	8000978 <main+0x1c>
	...

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	@ 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2234      	movs	r2, #52	@ 0x34
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f002 fa64 	bl	8002e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <SystemClock_Config+0xb8>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <SystemClock_Config+0xb8>)
 80009ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <SystemClock_Config+0xb8>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <SystemClock_Config+0xbc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009cc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a3c <SystemClock_Config+0xbc>)
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <SystemClock_Config+0xbc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fc31 	bl	800225c <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a00:	f000 f948 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 f98c 	bl	8001d3c <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a2a:	f000 f933 	bl	8000c94 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3750      	adds	r7, #80	@ 0x50
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a46:	463b      	mov	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a54:	4a21      	ldr	r2, [pc, #132]	@ (8000adc <MX_ADC1_Init+0x9c>)
 8000a56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a82:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <MX_ADC1_Init+0xa0>)
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa0:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000aa2:	f000 fac1 	bl	8001028 <HAL_ADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000aac:	f000 f8f2 	bl	8000c94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_ADC1_Init+0x98>)
 8000ac2:	f000 fc5f 	bl	8001384 <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000acc:	f000 f8e2 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000078 	.word	0x20000078
 8000adc:	40012000 	.word	0x40012000
 8000ae0:	0f000001 	.word	0x0f000001

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b28:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b2a:	f001 fe35 	bl	8002798 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b34:	f000 f8ae 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b46:	f001 fedf 	bl	8002908 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b50:	f000 f8a0 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_TIM2_Init+0x94>)
 8000b62:	f002 f8df 	bl	8002d24 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f892 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000c0 	.word	0x200000c0

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b3b      	ldr	r3, [pc, #236]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b38      	ldr	r3, [pc, #224]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b34      	ldr	r3, [pc, #208]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a33      	ldr	r2, [pc, #204]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a25      	ldr	r2, [pc, #148]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c08:	481f      	ldr	r0, [pc, #124]	@ (8000c88 <MX_GPIO_Init+0x10c>)
 8000c0a:	f001 f863 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8000c14:	481d      	ldr	r0, [pc, #116]	@ (8000c8c <MX_GPIO_Init+0x110>)
 8000c16:	f001 f85d 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2180      	movs	r1, #128	@ 0x80
 8000c1e:	481c      	ldr	r0, [pc, #112]	@ (8000c90 <MX_GPIO_Init+0x114>)
 8000c20:	f001 f858 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000c24:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4812      	ldr	r0, [pc, #72]	@ (8000c88 <MX_GPIO_Init+0x10c>)
 8000c3e:	f000 feb5 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8000c42:	f44f 63a6 	mov.w	r3, #1328	@ 0x530
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <MX_GPIO_Init+0x110>)
 8000c5c:	f000 fea6 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	@ (8000c90 <MX_GPIO_Init+0x114>)
 8000c78:	f000 fe98 	bl	80019ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	@ 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40020800 	.word	0x40020800

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <HAL_ADC_MspInit+0x7c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d127      	bne.n	8000d62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	4a15      	ldr	r2, [pc, #84]	@ (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <HAL_ADC_MspInit+0x84>)
 8000d5e:	f000 fe25 	bl	80019ac <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	@ 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40012000 	.word	0x40012000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d88:	d10d      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0e:	f000 f8c7 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f002 f810 	bl	8002e6c <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20020000 	.word	0x20020000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	20000114 	.word	0x20000114
 8000e80:	20000268 	.word	0x20000268

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eac:	f7ff ffea 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	@ (8000ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f001 ffcf 	bl	8002e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fd3f 	bl	800095c <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000eec:	080037fc 	.word	0x080037fc
  ldr r2, =_sbss
 8000ef0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ef4:	20000264 	.word	0x20000264

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 fd0d 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff feb6 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fd17 	bl	8001992 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 fced 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000118 	.word	0x20000118

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000118 	.word	0x20000118

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e033      	b.n	80010a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fe52 	bl	8000cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	d118      	bne.n	8001098 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800106e:	f023 0302 	bic.w	r3, r3, #2
 8001072:	f043 0202 	orr.w	r2, r3, #2
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fab4 	bl	80015e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
 8001096:	e001      	b.n	800109c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d101      	bne.n	80010ca <HAL_ADC_Start+0x1a>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e0b2      	b.n	8001230 <HAL_ADC_Start+0x180>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d018      	beq.n	8001112 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010f0:	4b52      	ldr	r3, [pc, #328]	@ (800123c <HAL_ADC_Start+0x18c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <HAL_ADC_Start+0x190>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0c9a      	lsrs	r2, r3, #18
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001104:	e002      	b.n	800110c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3b01      	subs	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b01      	cmp	r3, #1
 800111e:	d17a      	bne.n	8001216 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800114a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800115a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800115e:	d106      	bne.n	800116e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001164:	f023 0206 	bic.w	r2, r3, #6
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	645a      	str	r2, [r3, #68]	@ 0x44
 800116c:	e002      	b.n	8001174 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800117c:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <HAL_ADC_Start+0x194>)
 800117e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001188:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2b00      	cmp	r3, #0
 8001194:	d12a      	bne.n	80011ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a2b      	ldr	r2, [pc, #172]	@ (8001248 <HAL_ADC_Start+0x198>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d015      	beq.n	80011cc <HAL_ADC_Start+0x11c>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a29      	ldr	r2, [pc, #164]	@ (800124c <HAL_ADC_Start+0x19c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d105      	bne.n	80011b6 <HAL_ADC_Start+0x106>
 80011aa:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <HAL_ADC_Start+0x194>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00a      	beq.n	80011cc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a25      	ldr	r2, [pc, #148]	@ (8001250 <HAL_ADC_Start+0x1a0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d136      	bne.n	800122e <HAL_ADC_Start+0x17e>
 80011c0:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <HAL_ADC_Start+0x194>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d130      	bne.n	800122e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d129      	bne.n	800122e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	e020      	b.n	800122e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a15      	ldr	r2, [pc, #84]	@ (8001248 <HAL_ADC_Start+0x198>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d11b      	bne.n	800122e <HAL_ADC_Start+0x17e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d114      	bne.n	800122e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	e00b      	b.n	800122e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f043 0210 	orr.w	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000000 	.word	0x20000000
 8001240:	431bde83 	.word	0x431bde83
 8001244:	40012300 	.word	0x40012300
 8001248:	40012000 	.word	0x40012000
 800124c:	40012100 	.word	0x40012100
 8001250:	40012200 	.word	0x40012200

08001254 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800126c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001270:	d113      	bne.n	800129a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800127c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001280:	d10b      	bne.n	800129a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f043 0220 	orr.w	r2, r3, #32
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e063      	b.n	8001362 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800129a:	f7ff fe95 	bl	8000fc8 <HAL_GetTick>
 800129e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012a0:	e021      	b.n	80012e6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d01d      	beq.n	80012e6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d007      	beq.n	80012c0 <HAL_ADC_PollForConversion+0x6c>
 80012b0:	f7ff fe8a 	bl	8000fc8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d212      	bcs.n	80012e6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d00b      	beq.n	80012e6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	f043 0204 	orr.w	r2, r3, #4
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e03d      	b.n	8001362 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d1d6      	bne.n	80012a2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f06f 0212 	mvn.w	r2, #18
 80012fc:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d123      	bne.n	8001360 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	2b00      	cmp	r3, #0
 800131e:	d11f      	bne.n	8001360 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001326:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001338:	2b00      	cmp	r3, #0
 800133a:	d111      	bne.n	8001360 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1c>
 800139c:	2302      	movs	r3, #2
 800139e:	e113      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x244>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d925      	bls.n	80013fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68d9      	ldr	r1, [r3, #12]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	3b1e      	subs	r3, #30
 80013c6:	2207      	movs	r2, #7
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43da      	mvns	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	400a      	ands	r2, r1
 80013d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68d9      	ldr	r1, [r3, #12]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	4603      	mov	r3, r0
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4403      	add	r3, r0
 80013ee:	3b1e      	subs	r3, #30
 80013f0:	409a      	lsls	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	e022      	b.n	8001442 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6919      	ldr	r1, [r3, #16]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	2207      	movs	r2, #7
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	400a      	ands	r2, r1
 800141e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6919      	ldr	r1, [r3, #16]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	4603      	mov	r3, r0
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4403      	add	r3, r0
 8001438:	409a      	lsls	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b06      	cmp	r3, #6
 8001448:	d824      	bhi.n	8001494 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b05      	subs	r3, #5
 800145c:	221f      	movs	r2, #31
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	400a      	ands	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3b05      	subs	r3, #5
 8001486:	fa00 f203 	lsl.w	r2, r0, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
 8001492:	e04c      	b.n	800152e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b0c      	cmp	r3, #12
 800149a:	d824      	bhi.n	80014e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3b23      	subs	r3, #35	@ 0x23
 80014ae:	221f      	movs	r2, #31
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43da      	mvns	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	400a      	ands	r2, r1
 80014bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b23      	subs	r3, #35	@ 0x23
 80014d8:	fa00 f203 	lsl.w	r2, r0, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014e4:	e023      	b.n	800152e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b41      	subs	r3, #65	@ 0x41
 80014f8:	221f      	movs	r2, #31
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	400a      	ands	r2, r1
 8001506:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b41      	subs	r3, #65	@ 0x41
 8001522:	fa00 f203 	lsl.w	r2, r0, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800152e:	4b29      	ldr	r3, [pc, #164]	@ (80015d4 <HAL_ADC_ConfigChannel+0x250>)
 8001530:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a28      	ldr	r2, [pc, #160]	@ (80015d8 <HAL_ADC_ConfigChannel+0x254>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d10f      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1d8>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b12      	cmp	r3, #18
 8001542:	d10b      	bne.n	800155c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_ADC_ConfigChannel+0x254>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12b      	bne.n	80015be <HAL_ADC_ConfigChannel+0x23a>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <HAL_ADC_ConfigChannel+0x258>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d003      	beq.n	8001578 <HAL_ADC_ConfigChannel+0x1f4>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b11      	cmp	r3, #17
 8001576:	d122      	bne.n	80015be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <HAL_ADC_ConfigChannel+0x258>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d111      	bne.n	80015be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_ADC_ConfigChannel+0x25c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a11      	ldr	r2, [pc, #68]	@ (80015e4 <HAL_ADC_ConfigChannel+0x260>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9a      	lsrs	r2, r3, #18
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015b0:	e002      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40012300 	.word	0x40012300
 80015d8:	40012000 	.word	0x40012000
 80015dc:	10000012 	.word	0x10000012
 80015e0:	20000000 	.word	0x20000000
 80015e4:	431bde83 	.word	0x431bde83

080015e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f0:	4b79      	ldr	r3, [pc, #484]	@ (80017d8 <ADC_Init+0x1f0>)
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	431a      	orrs	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800161c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	021a      	lsls	r2, r3, #8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6899      	ldr	r1, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167a:	4a58      	ldr	r2, [pc, #352]	@ (80017dc <ADC_Init+0x1f4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800168e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6899      	ldr	r1, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6899      	ldr	r1, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	e00f      	b.n	80016e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0202 	bic.w	r2, r2, #2
 80016f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7e1b      	ldrb	r3, [r3, #24]
 8001700:	005a      	lsls	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01b      	beq.n	800174c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001722:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6859      	ldr	r1, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	3b01      	subs	r3, #1
 8001740:	035a      	lsls	r2, r3, #13
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	e007      	b.n	800175c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800175a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800176a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	3b01      	subs	r3, #1
 8001778:	051a      	lsls	r2, r3, #20
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6899      	ldr	r1, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800179e:	025a      	lsls	r2, r3, #9
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6899      	ldr	r1, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	029a      	lsls	r2, r3, #10
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40012300 	.word	0x40012300
 80017dc:	0f000001 	.word	0x0f000001

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	@ (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	@ (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	@ 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff47 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff5c 	bl	8001828 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffb0 	bl	8001900 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e165      	b.n	8001c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8154 	bne.w	8001c8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d005      	beq.n	80019fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d017      	beq.n	8001a9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80ae 	beq.w	8001c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b5d      	ldr	r3, [pc, #372]	@ (8001cac <HAL_GPIO_Init+0x300>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cac <HAL_GPIO_Init+0x300>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b42:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_GPIO_Init+0x300>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4e:	4a58      	ldr	r2, [pc, #352]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb4 <HAL_GPIO_Init+0x308>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb8 <HAL_GPIO_Init+0x30c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x216>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4d      	ldr	r2, [pc, #308]	@ (8001cbc <HAL_GPIO_Init+0x310>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x212>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc0 <HAL_GPIO_Init+0x314>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4b      	ldr	r2, [pc, #300]	@ (8001cc4 <HAL_GPIO_Init+0x318>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x20a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001cc8 <HAL_GPIO_Init+0x31c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x206>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	@ (8001ccc <HAL_GPIO_Init+0x320>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x202>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x21c>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd8:	4935      	ldr	r1, [pc, #212]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a31      	ldr	r2, [pc, #196]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a26      	ldr	r2, [pc, #152]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3a:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c64:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c88:	4a11      	ldr	r2, [pc, #68]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	f67f ae96 	bls.w	80019c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40021400 	.word	0x40021400
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	041a      	lsls	r2, r3, #16
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	400b      	ands	r3, r1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	619a      	str	r2, [r3, #24]
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0cc      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b68      	ldr	r3, [pc, #416]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d90c      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b65      	ldr	r3, [pc, #404]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b8      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b59      	ldr	r3, [pc, #356]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a58      	ldr	r2, [pc, #352]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a52      	ldr	r2, [pc, #328]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b50      	ldr	r3, [pc, #320]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	494d      	ldr	r1, [pc, #308]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d044      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b47      	ldr	r3, [pc, #284]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d119      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e07f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e067      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b37      	ldr	r3, [pc, #220]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4934      	ldr	r1, [pc, #208]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff f8cc 	bl	8000fc8 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff f8c8 	bl	8000fc8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e04f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20c      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e032      	b.n	8001eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4916      	ldr	r1, [pc, #88]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	490e      	ldr	r1, [pc, #56]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec2:	f000 f821 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	490a      	ldr	r1, [pc, #40]	@ (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	5ccb      	ldrb	r3, [r1, r3]
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f82c 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	080037a8 	.word	0x080037a8
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f0c:	b0a6      	sub	sp, #152	@ 0x98
 8001f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f2e:	4bc8      	ldr	r3, [pc, #800]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	f200 817e 	bhi.w	8002238 <HAL_RCC_GetSysClockFreq+0x330>
 8001f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f79 	.word	0x08001f79
 8001f48:	08002239 	.word	0x08002239
 8001f4c:	08002239 	.word	0x08002239
 8001f50:	08002239 	.word	0x08002239
 8001f54:	08001f81 	.word	0x08001f81
 8001f58:	08002239 	.word	0x08002239
 8001f5c:	08002239 	.word	0x08002239
 8001f60:	08002239 	.word	0x08002239
 8001f64:	08001f89 	.word	0x08001f89
 8001f68:	08002239 	.word	0x08002239
 8001f6c:	08002239 	.word	0x08002239
 8001f70:	08002239 	.word	0x08002239
 8001f74:	080020f3 	.word	0x080020f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4bb6      	ldr	r3, [pc, #728]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f7e:	e15f      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f80:	4bb5      	ldr	r3, [pc, #724]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f86:	e15b      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f88:	4bb1      	ldr	r3, [pc, #708]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f94:	4bae      	ldr	r3, [pc, #696]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d031      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa0:	4bab      	ldr	r3, [pc, #684]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001faa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001fac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fb8:	4ba7      	ldr	r3, [pc, #668]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001fbe:	462a      	mov	r2, r5
 8001fc0:	fb03 f202 	mul.w	r2, r3, r2
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	4aa2      	ldr	r2, [pc, #648]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	fba1 1202 	umull	r1, r2, r1, r2
 8001fd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001fd8:	460a      	mov	r2, r1
 8001fda:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001fdc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001fde:	4413      	add	r3, r2
 8001fe0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001fec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ff0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001ff4:	f7fe f95c 	bl	80002b0 <__aeabi_uldivmod>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002002:	e064      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002004:	4b92      	ldr	r3, [pc, #584]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	2200      	movs	r2, #0
 800200c:	653b      	str	r3, [r7, #80]	@ 0x50
 800200e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002018:	2300      	movs	r3, #0
 800201a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800201c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002020:	4622      	mov	r2, r4
 8002022:	462b      	mov	r3, r5
 8002024:	f04f 0000 	mov.w	r0, #0
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	0159      	lsls	r1, r3, #5
 800202e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002032:	0150      	lsls	r0, r2, #5
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4621      	mov	r1, r4
 800203a:	1a51      	subs	r1, r2, r1
 800203c:	6139      	str	r1, [r7, #16]
 800203e:	4629      	mov	r1, r5
 8002040:	eb63 0301 	sbc.w	r3, r3, r1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002052:	4659      	mov	r1, fp
 8002054:	018b      	lsls	r3, r1, #6
 8002056:	4651      	mov	r1, sl
 8002058:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800205c:	4651      	mov	r1, sl
 800205e:	018a      	lsls	r2, r1, #6
 8002060:	4651      	mov	r1, sl
 8002062:	ebb2 0801 	subs.w	r8, r2, r1
 8002066:	4659      	mov	r1, fp
 8002068:	eb63 0901 	sbc.w	r9, r3, r1
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002078:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800207c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002080:	4690      	mov	r8, r2
 8002082:	4699      	mov	r9, r3
 8002084:	4623      	mov	r3, r4
 8002086:	eb18 0303 	adds.w	r3, r8, r3
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	462b      	mov	r3, r5
 800208e:	eb49 0303 	adc.w	r3, r9, r3
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020a0:	4629      	mov	r1, r5
 80020a2:	028b      	lsls	r3, r1, #10
 80020a4:	4621      	mov	r1, r4
 80020a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020aa:	4621      	mov	r1, r4
 80020ac:	028a      	lsls	r2, r1, #10
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020b6:	2200      	movs	r2, #0
 80020b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80020ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80020bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80020c0:	f7fe f8f6 	bl	80002b0 <__aeabi_uldivmod>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4613      	mov	r3, r2
 80020ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020ce:	4b60      	ldr	r3, [pc, #384]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	3301      	adds	r3, #1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80020e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80020f0:	e0a6      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020fe:	4b54      	ldr	r3, [pc, #336]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02a      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210a:	4b51      	ldr	r3, [pc, #324]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	2200      	movs	r2, #0
 8002112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002114:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002118:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800211c:	2100      	movs	r1, #0
 800211e:	4b4e      	ldr	r3, [pc, #312]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 8002120:	fb03 f201 	mul.w	r2, r3, r1
 8002124:	2300      	movs	r3, #0
 8002126:	fb00 f303 	mul.w	r3, r0, r3
 800212a:	4413      	add	r3, r2
 800212c:	4a4a      	ldr	r2, [pc, #296]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x350>)
 800212e:	fba0 1202 	umull	r1, r2, r0, r2
 8002132:	677a      	str	r2, [r7, #116]	@ 0x74
 8002134:	460a      	mov	r2, r1
 8002136:	673a      	str	r2, [r7, #112]	@ 0x70
 8002138:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800213a:	4413      	add	r3, r2
 800213c:	677b      	str	r3, [r7, #116]	@ 0x74
 800213e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002142:	2200      	movs	r2, #0
 8002144:	633b      	str	r3, [r7, #48]	@ 0x30
 8002146:	637a      	str	r2, [r7, #52]	@ 0x34
 8002148:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800214c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002150:	f7fe f8ae 	bl	80002b0 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4613      	mov	r3, r2
 800215a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800215e:	e05b      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	2200      	movs	r2, #0
 8002168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800216a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002172:	623b      	str	r3, [r7, #32]
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
 8002178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800217c:	4642      	mov	r2, r8
 800217e:	464b      	mov	r3, r9
 8002180:	f04f 0000 	mov.w	r0, #0
 8002184:	f04f 0100 	mov.w	r1, #0
 8002188:	0159      	lsls	r1, r3, #5
 800218a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800218e:	0150      	lsls	r0, r2, #5
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4641      	mov	r1, r8
 8002196:	ebb2 0a01 	subs.w	sl, r2, r1
 800219a:	4649      	mov	r1, r9
 800219c:	eb63 0b01 	sbc.w	fp, r3, r1
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021b4:	ebb2 040a 	subs.w	r4, r2, sl
 80021b8:	eb63 050b 	sbc.w	r5, r3, fp
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	00eb      	lsls	r3, r5, #3
 80021c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ca:	00e2      	lsls	r2, r4, #3
 80021cc:	4614      	mov	r4, r2
 80021ce:	461d      	mov	r5, r3
 80021d0:	4643      	mov	r3, r8
 80021d2:	18e3      	adds	r3, r4, r3
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	464b      	mov	r3, r9
 80021d8:	eb45 0303 	adc.w	r3, r5, r3
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ea:	4629      	mov	r1, r5
 80021ec:	028b      	lsls	r3, r1, #10
 80021ee:	4621      	mov	r1, r4
 80021f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f4:	4621      	mov	r1, r4
 80021f6:	028a      	lsls	r2, r1, #10
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002200:	2200      	movs	r2, #0
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	61fa      	str	r2, [r7, #28]
 8002206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220a:	f7fe f851 	bl	80002b0 <__aeabi_uldivmod>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4613      	mov	r3, r2
 8002214:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002218:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x348>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0f1b      	lsrs	r3, r3, #28
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002226:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800222a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002236:	e003      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x34c>)
 800223a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800223e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002244:	4618      	mov	r0, r3
 8002246:	3798      	adds	r7, #152	@ 0x98
 8002248:	46bd      	mov	sp, r7
 800224a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	00f42400 	.word	0x00f42400
 8002258:	017d7840 	.word	0x017d7840

0800225c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e28d      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8083 	beq.w	8002382 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800227c:	4b94      	ldr	r3, [pc, #592]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b04      	cmp	r3, #4
 8002286:	d019      	beq.n	80022bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002288:	4b91      	ldr	r3, [pc, #580]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002290:	2b08      	cmp	r3, #8
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002294:	4b8e      	ldr	r3, [pc, #568]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800229c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022a0:	d00c      	beq.n	80022bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4b8b      	ldr	r3, [pc, #556]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d112      	bne.n	80022d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b88      	ldr	r3, [pc, #544]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b84      	ldr	r3, [pc, #528]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d05b      	beq.n	8002380 <HAL_RCC_OscConfig+0x124>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d157      	bne.n	8002380 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e25a      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x90>
 80022de:	4b7c      	ldr	r3, [pc, #496]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a7b      	ldr	r2, [pc, #492]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xcc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0xb4>
 80022f6:	4b76      	ldr	r3, [pc, #472]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a75      	ldr	r2, [pc, #468]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b73      	ldr	r3, [pc, #460]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a72      	ldr	r2, [pc, #456]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xcc>
 8002310:	4b6f      	ldr	r3, [pc, #444]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6e      	ldr	r2, [pc, #440]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b6c      	ldr	r3, [pc, #432]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a6b      	ldr	r2, [pc, #428]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fe4a 	bl	8000fc8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fe46 	bl	8000fc8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	@ 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e21f      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b61      	ldr	r3, [pc, #388]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xdc>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7fe fe36 	bl	8000fc8 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe fe32 	bl	8000fc8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	@ 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e20b      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	4b57      	ldr	r3, [pc, #348]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x104>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06f      	beq.n	800246e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800238e:	4b50      	ldr	r3, [pc, #320]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b00      	cmp	r3, #0
 8002398:	d017      	beq.n	80023ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800239a:	4b4d      	ldr	r3, [pc, #308]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
        || \
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d105      	bne.n	80023b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023a6:	4b4a      	ldr	r3, [pc, #296]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b47      	ldr	r3, [pc, #284]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b44      	ldr	r3, [pc, #272]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b41      	ldr	r3, [pc, #260]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x186>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1d3      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4937      	ldr	r1, [pc, #220]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b34      	ldr	r3, [pc, #208]	@ (80024d4 <HAL_RCC_OscConfig+0x278>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fddf 	bl	8000fc8 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fddb 	bl	8000fc8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1b4      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2b      	ldr	r3, [pc, #172]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b28      	ldr	r3, [pc, #160]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4925      	ldr	r1, [pc, #148]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <HAL_RCC_OscConfig+0x278>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fdbe 	bl	8000fc8 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe fdba 	bl	8000fc8 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e193      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d036      	beq.n	80024e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe fd9e 	bl	8000fc8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe fd9a 	bl	8000fc8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e173      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_OscConfig+0x274>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x234>
 80024ae:	e01b      	b.n	80024e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7fe fd87 	bl	8000fc8 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	e00e      	b.n	80024dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024be:	f7fe fd83 	bl	8000fc8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d907      	bls.n	80024dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e15c      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000
 80024d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80024de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ea      	bne.n	80024be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8097 	beq.w	8002624 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b83      	ldr	r3, [pc, #524]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b7f      	ldr	r3, [pc, #508]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	4a7e      	ldr	r2, [pc, #504]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	@ 0x40
 8002516:	4b7c      	ldr	r3, [pc, #496]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b79      	ldr	r3, [pc, #484]	@ (800270c <HAL_RCC_OscConfig+0x4b0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b76      	ldr	r3, [pc, #472]	@ (800270c <HAL_RCC_OscConfig+0x4b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a75      	ldr	r2, [pc, #468]	@ (800270c <HAL_RCC_OscConfig+0x4b0>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fd43 	bl	8000fc8 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe fd3f 	bl	8000fc8 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e118      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b6c      	ldr	r3, [pc, #432]	@ (800270c <HAL_RCC_OscConfig+0x4b0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x31e>
 800256c:	4b66      	ldr	r3, [pc, #408]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002570:	4a65      	ldr	r2, [pc, #404]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	@ 0x70
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x358>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x340>
 8002582:	4b61      	ldr	r3, [pc, #388]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002586:	4a60      	ldr	r2, [pc, #384]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6713      	str	r3, [r2, #112]	@ 0x70
 800258e:	4b5e      	ldr	r3, [pc, #376]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002592:	4a5d      	ldr	r2, [pc, #372]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	@ 0x70
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0x358>
 800259c:	4b5a      	ldr	r3, [pc, #360]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a0:	4a59      	ldr	r2, [pc, #356]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a8:	4b57      	ldr	r3, [pc, #348]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ac:	4a56      	ldr	r2, [pc, #344]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fd04 	bl	8000fc8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fd00 	bl	8000fc8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0d7      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	4b4b      	ldr	r3, [pc, #300]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ee      	beq.n	80025c4 <HAL_RCC_OscConfig+0x368>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe fcee 	bl	8000fc8 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe fcea 	bl	8000fc8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0c1      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ee      	bne.n	80025f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b3b      	ldr	r3, [pc, #236]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a3a      	ldr	r2, [pc, #232]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80ad 	beq.w	8002788 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800262e:	4b36      	ldr	r3, [pc, #216]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d060      	beq.n	80026fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d145      	bne.n	80026ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b33      	ldr	r3, [pc, #204]	@ (8002710 <HAL_RCC_OscConfig+0x4b4>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fcbe 	bl	8000fc8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fcba 	bl	8000fc8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e093      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b29      	ldr	r3, [pc, #164]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	019b      	lsls	r3, r3, #6
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	071b      	lsls	r3, r3, #28
 800269a:	491b      	ldr	r1, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x4b4>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7fe fc8f 	bl	8000fc8 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe fc8b 	bl	8000fc8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e064      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x452>
 80026cc:	e05c      	b.n	8002788 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_RCC_OscConfig+0x4b4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fc78 	bl	8000fc8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fc74 	bl	8000fc8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e04d      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x480>
 80026fa:	e045      	b.n	8002788 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e040      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
 8002708:	40023800 	.word	0x40023800
 800270c:	40007000 	.word	0x40007000
 8002710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002714:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <HAL_RCC_OscConfig+0x538>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d030      	beq.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d129      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d122      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800274a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800274c:	4293      	cmp	r3, r2
 800274e:	d119      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d10f      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e041      	b.n	800282e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fada 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f000 f95e 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d001      	beq.n	8002850 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e046      	b.n	80028de <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_TIM_Base_Start+0xb4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d022      	beq.n	80028a8 <HAL_TIM_Base_Start+0x70>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286a:	d01d      	beq.n	80028a8 <HAL_TIM_Base_Start+0x70>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <HAL_TIM_Base_Start+0xb8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d018      	beq.n	80028a8 <HAL_TIM_Base_Start+0x70>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1e      	ldr	r2, [pc, #120]	@ (80028f4 <HAL_TIM_Base_Start+0xbc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <HAL_TIM_Base_Start+0x70>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1c      	ldr	r2, [pc, #112]	@ (80028f8 <HAL_TIM_Base_Start+0xc0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00e      	beq.n	80028a8 <HAL_TIM_Base_Start+0x70>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1b      	ldr	r2, [pc, #108]	@ (80028fc <HAL_TIM_Base_Start+0xc4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_TIM_Base_Start+0x70>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a19      	ldr	r2, [pc, #100]	@ (8002900 <HAL_TIM_Base_Start+0xc8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_TIM_Base_Start+0x70>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a18      	ldr	r2, [pc, #96]	@ (8002904 <HAL_TIM_Base_Start+0xcc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d010      	beq.n	80028dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ca:	e007      	b.n	80028dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800
 80028f8:	40000c00 	.word	0x40000c00
 80028fc:	40010400 	.word	0x40010400
 8002900:	40014000 	.word	0x40014000
 8002904:	40001800 	.word	0x40001800

08002908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_TIM_ConfigClockSource+0x1c>
 8002920:	2302      	movs	r3, #2
 8002922:	e0b4      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x186>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800294a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295c:	d03e      	beq.n	80029dc <HAL_TIM_ConfigClockSource+0xd4>
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002962:	f200 8087 	bhi.w	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296a:	f000 8086 	beq.w	8002a7a <HAL_TIM_ConfigClockSource+0x172>
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002972:	d87f      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b70      	cmp	r3, #112	@ 0x70
 8002976:	d01a      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xa6>
 8002978:	2b70      	cmp	r3, #112	@ 0x70
 800297a:	d87b      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b60      	cmp	r3, #96	@ 0x60
 800297e:	d050      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x11a>
 8002980:	2b60      	cmp	r3, #96	@ 0x60
 8002982:	d877      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b50      	cmp	r3, #80	@ 0x50
 8002986:	d03c      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0xfa>
 8002988:	2b50      	cmp	r3, #80	@ 0x50
 800298a:	d873      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b40      	cmp	r3, #64	@ 0x40
 800298e:	d058      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x13a>
 8002990:	2b40      	cmp	r3, #64	@ 0x40
 8002992:	d86f      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b30      	cmp	r3, #48	@ 0x30
 8002996:	d064      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x15a>
 8002998:	2b30      	cmp	r3, #48	@ 0x30
 800299a:	d86b      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b20      	cmp	r3, #32
 800299e:	d060      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d867      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05c      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x15a>
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d05a      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	e062      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029be:	f000 f991 	bl	8002ce4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	609a      	str	r2, [r3, #8]
      break;
 80029da:	e04f      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ec:	f000 f97a 	bl	8002ce4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029fe:	609a      	str	r2, [r3, #8]
      break;
 8002a00:	e03c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f000 f8ee 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2150      	movs	r1, #80	@ 0x50
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f947 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 8002a20:	e02c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f000 f90d 	bl	8002c4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2160      	movs	r1, #96	@ 0x60
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f937 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 8002a40:	e01c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f000 f8ce 	bl	8002bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2140      	movs	r1, #64	@ 0x40
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f927 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 8002a60:	e00c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f000 f91e 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 8002a72:	e003      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      break;
 8002a78:	e000      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a46      	ldr	r2, [pc, #280]	@ (8002bc4 <TIM_Base_SetConfig+0x12c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d013      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab6:	d00f      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a43      	ldr	r2, [pc, #268]	@ (8002bc8 <TIM_Base_SetConfig+0x130>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a42      	ldr	r2, [pc, #264]	@ (8002bcc <TIM_Base_SetConfig+0x134>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a41      	ldr	r2, [pc, #260]	@ (8002bd0 <TIM_Base_SetConfig+0x138>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <TIM_Base_SetConfig+0x40>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a40      	ldr	r2, [pc, #256]	@ (8002bd4 <TIM_Base_SetConfig+0x13c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a35      	ldr	r2, [pc, #212]	@ (8002bc4 <TIM_Base_SetConfig+0x12c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d02b      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af8:	d027      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a32      	ldr	r2, [pc, #200]	@ (8002bc8 <TIM_Base_SetConfig+0x130>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d023      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a31      	ldr	r2, [pc, #196]	@ (8002bcc <TIM_Base_SetConfig+0x134>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01f      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a30      	ldr	r2, [pc, #192]	@ (8002bd0 <TIM_Base_SetConfig+0x138>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01b      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd4 <TIM_Base_SetConfig+0x13c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d017      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd8 <TIM_Base_SetConfig+0x140>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a2d      	ldr	r2, [pc, #180]	@ (8002bdc <TIM_Base_SetConfig+0x144>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00f      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002be0 <TIM_Base_SetConfig+0x148>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00b      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a2b      	ldr	r2, [pc, #172]	@ (8002be4 <TIM_Base_SetConfig+0x14c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002be8 <TIM_Base_SetConfig+0x150>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a29      	ldr	r2, [pc, #164]	@ (8002bec <TIM_Base_SetConfig+0x154>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d108      	bne.n	8002b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a10      	ldr	r2, [pc, #64]	@ (8002bc4 <TIM_Base_SetConfig+0x12c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_Base_SetConfig+0xf8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <TIM_Base_SetConfig+0x13c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d103      	bne.n	8002b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f023 0201 	bic.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	611a      	str	r2, [r3, #16]
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	40000c00 	.word	0x40000c00
 8002bd4:	40010400 	.word	0x40010400
 8002bd8:	40014000 	.word	0x40014000
 8002bdc:	40014400 	.word	0x40014400
 8002be0:	40014800 	.word	0x40014800
 8002be4:	40001800 	.word	0x40001800
 8002be8:	40001c00 	.word	0x40001c00
 8002bec:	40002000 	.word	0x40002000

08002bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 030a 	bic.w	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b087      	sub	sp, #28
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f023 0210 	bic.w	r2, r3, #16
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	031b      	lsls	r3, r3, #12
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f043 0307 	orr.w	r3, r3, #7
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	021a      	lsls	r2, r3, #8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e05a      	b.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a21      	ldr	r2, [pc, #132]	@ (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d88:	d01d      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1b      	ldr	r2, [pc, #108]	@ (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a17      	ldr	r2, [pc, #92]	@ (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a15      	ldr	r2, [pc, #84]	@ (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10c      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40010000 	.word	0x40010000
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	40000c00 	.word	0x40000c00
 8002e10:	40010400 	.word	0x40010400
 8002e14:	40014000 	.word	0x40014000
 8002e18:	40001800 	.word	0x40001800

08002e1c <siprintf>:
 8002e1c:	b40e      	push	{r1, r2, r3}
 8002e1e:	b500      	push	{lr}
 8002e20:	b09c      	sub	sp, #112	@ 0x70
 8002e22:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e24:	9002      	str	r0, [sp, #8]
 8002e26:	9006      	str	r0, [sp, #24]
 8002e28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e2c:	4809      	ldr	r0, [pc, #36]	@ (8002e54 <siprintf+0x38>)
 8002e2e:	9107      	str	r1, [sp, #28]
 8002e30:	9104      	str	r1, [sp, #16]
 8002e32:	4909      	ldr	r1, [pc, #36]	@ (8002e58 <siprintf+0x3c>)
 8002e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e38:	9105      	str	r1, [sp, #20]
 8002e3a:	6800      	ldr	r0, [r0, #0]
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	a902      	add	r1, sp, #8
 8002e40:	f000 f994 	bl	800316c <_svfiprintf_r>
 8002e44:	9b02      	ldr	r3, [sp, #8]
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	b01c      	add	sp, #112	@ 0x70
 8002e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e50:	b003      	add	sp, #12
 8002e52:	4770      	bx	lr
 8002e54:	2000000c 	.word	0x2000000c
 8002e58:	ffff0208 	.word	0xffff0208

08002e5c <memset>:
 8002e5c:	4402      	add	r2, r0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d100      	bne.n	8002e66 <memset+0xa>
 8002e64:	4770      	bx	lr
 8002e66:	f803 1b01 	strb.w	r1, [r3], #1
 8002e6a:	e7f9      	b.n	8002e60 <memset+0x4>

08002e6c <__errno>:
 8002e6c:	4b01      	ldr	r3, [pc, #4]	@ (8002e74 <__errno+0x8>)
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	2000000c 	.word	0x2000000c

08002e78 <__libc_init_array>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8002eb0 <__libc_init_array+0x38>)
 8002e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8002eb4 <__libc_init_array+0x3c>)
 8002e7e:	1b64      	subs	r4, r4, r5
 8002e80:	10a4      	asrs	r4, r4, #2
 8002e82:	2600      	movs	r6, #0
 8002e84:	42a6      	cmp	r6, r4
 8002e86:	d109      	bne.n	8002e9c <__libc_init_array+0x24>
 8002e88:	4d0b      	ldr	r5, [pc, #44]	@ (8002eb8 <__libc_init_array+0x40>)
 8002e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8002ebc <__libc_init_array+0x44>)
 8002e8c:	f000 fc66 	bl	800375c <_init>
 8002e90:	1b64      	subs	r4, r4, r5
 8002e92:	10a4      	asrs	r4, r4, #2
 8002e94:	2600      	movs	r6, #0
 8002e96:	42a6      	cmp	r6, r4
 8002e98:	d105      	bne.n	8002ea6 <__libc_init_array+0x2e>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea0:	4798      	blx	r3
 8002ea2:	3601      	adds	r6, #1
 8002ea4:	e7ee      	b.n	8002e84 <__libc_init_array+0xc>
 8002ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eaa:	4798      	blx	r3
 8002eac:	3601      	adds	r6, #1
 8002eae:	e7f2      	b.n	8002e96 <__libc_init_array+0x1e>
 8002eb0:	080037f4 	.word	0x080037f4
 8002eb4:	080037f4 	.word	0x080037f4
 8002eb8:	080037f4 	.word	0x080037f4
 8002ebc:	080037f8 	.word	0x080037f8

08002ec0 <__retarget_lock_acquire_recursive>:
 8002ec0:	4770      	bx	lr

08002ec2 <__retarget_lock_release_recursive>:
 8002ec2:	4770      	bx	lr

08002ec4 <_free_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	d041      	beq.n	8002f50 <_free_r+0x8c>
 8002ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed0:	1f0c      	subs	r4, r1, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bfb8      	it	lt
 8002ed6:	18e4      	addlt	r4, r4, r3
 8002ed8:	f000 f8e0 	bl	800309c <__malloc_lock>
 8002edc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f54 <_free_r+0x90>)
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	b933      	cbnz	r3, 8002ef0 <_free_r+0x2c>
 8002ee2:	6063      	str	r3, [r4, #4]
 8002ee4:	6014      	str	r4, [r2, #0]
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eec:	f000 b8dc 	b.w	80030a8 <__malloc_unlock>
 8002ef0:	42a3      	cmp	r3, r4
 8002ef2:	d908      	bls.n	8002f06 <_free_r+0x42>
 8002ef4:	6820      	ldr	r0, [r4, #0]
 8002ef6:	1821      	adds	r1, r4, r0
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	bf01      	itttt	eq
 8002efc:	6819      	ldreq	r1, [r3, #0]
 8002efe:	685b      	ldreq	r3, [r3, #4]
 8002f00:	1809      	addeq	r1, r1, r0
 8002f02:	6021      	streq	r1, [r4, #0]
 8002f04:	e7ed      	b.n	8002ee2 <_free_r+0x1e>
 8002f06:	461a      	mov	r2, r3
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	b10b      	cbz	r3, 8002f10 <_free_r+0x4c>
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	d9fa      	bls.n	8002f06 <_free_r+0x42>
 8002f10:	6811      	ldr	r1, [r2, #0]
 8002f12:	1850      	adds	r0, r2, r1
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d10b      	bne.n	8002f30 <_free_r+0x6c>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	4401      	add	r1, r0
 8002f1c:	1850      	adds	r0, r2, r1
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	6011      	str	r1, [r2, #0]
 8002f22:	d1e0      	bne.n	8002ee6 <_free_r+0x22>
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	6053      	str	r3, [r2, #4]
 8002f2a:	4408      	add	r0, r1
 8002f2c:	6010      	str	r0, [r2, #0]
 8002f2e:	e7da      	b.n	8002ee6 <_free_r+0x22>
 8002f30:	d902      	bls.n	8002f38 <_free_r+0x74>
 8002f32:	230c      	movs	r3, #12
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	e7d6      	b.n	8002ee6 <_free_r+0x22>
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	1821      	adds	r1, r4, r0
 8002f3c:	428b      	cmp	r3, r1
 8002f3e:	bf04      	itt	eq
 8002f40:	6819      	ldreq	r1, [r3, #0]
 8002f42:	685b      	ldreq	r3, [r3, #4]
 8002f44:	6063      	str	r3, [r4, #4]
 8002f46:	bf04      	itt	eq
 8002f48:	1809      	addeq	r1, r1, r0
 8002f4a:	6021      	streq	r1, [r4, #0]
 8002f4c:	6054      	str	r4, [r2, #4]
 8002f4e:	e7ca      	b.n	8002ee6 <_free_r+0x22>
 8002f50:	bd38      	pop	{r3, r4, r5, pc}
 8002f52:	bf00      	nop
 8002f54:	20000260 	.word	0x20000260

08002f58 <sbrk_aligned>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8002f98 <sbrk_aligned+0x40>)
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	6831      	ldr	r1, [r6, #0]
 8002f60:	4605      	mov	r5, r0
 8002f62:	b911      	cbnz	r1, 8002f6a <sbrk_aligned+0x12>
 8002f64:	f000 fba6 	bl	80036b4 <_sbrk_r>
 8002f68:	6030      	str	r0, [r6, #0]
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f000 fba1 	bl	80036b4 <_sbrk_r>
 8002f72:	1c43      	adds	r3, r0, #1
 8002f74:	d103      	bne.n	8002f7e <sbrk_aligned+0x26>
 8002f76:	f04f 34ff 	mov.w	r4, #4294967295
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
 8002f7e:	1cc4      	adds	r4, r0, #3
 8002f80:	f024 0403 	bic.w	r4, r4, #3
 8002f84:	42a0      	cmp	r0, r4
 8002f86:	d0f8      	beq.n	8002f7a <sbrk_aligned+0x22>
 8002f88:	1a21      	subs	r1, r4, r0
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f000 fb92 	bl	80036b4 <_sbrk_r>
 8002f90:	3001      	adds	r0, #1
 8002f92:	d1f2      	bne.n	8002f7a <sbrk_aligned+0x22>
 8002f94:	e7ef      	b.n	8002f76 <sbrk_aligned+0x1e>
 8002f96:	bf00      	nop
 8002f98:	2000025c 	.word	0x2000025c

08002f9c <_malloc_r>:
 8002f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa0:	1ccd      	adds	r5, r1, #3
 8002fa2:	f025 0503 	bic.w	r5, r5, #3
 8002fa6:	3508      	adds	r5, #8
 8002fa8:	2d0c      	cmp	r5, #12
 8002faa:	bf38      	it	cc
 8002fac:	250c      	movcc	r5, #12
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	4606      	mov	r6, r0
 8002fb2:	db01      	blt.n	8002fb8 <_malloc_r+0x1c>
 8002fb4:	42a9      	cmp	r1, r5
 8002fb6:	d904      	bls.n	8002fc2 <_malloc_r+0x26>
 8002fb8:	230c      	movs	r3, #12
 8002fba:	6033      	str	r3, [r6, #0]
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003098 <_malloc_r+0xfc>
 8002fc6:	f000 f869 	bl	800309c <__malloc_lock>
 8002fca:	f8d8 3000 	ldr.w	r3, [r8]
 8002fce:	461c      	mov	r4, r3
 8002fd0:	bb44      	cbnz	r4, 8003024 <_malloc_r+0x88>
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f7ff ffbf 	bl	8002f58 <sbrk_aligned>
 8002fda:	1c43      	adds	r3, r0, #1
 8002fdc:	4604      	mov	r4, r0
 8002fde:	d158      	bne.n	8003092 <_malloc_r+0xf6>
 8002fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8002fe4:	4627      	mov	r7, r4
 8002fe6:	2f00      	cmp	r7, #0
 8002fe8:	d143      	bne.n	8003072 <_malloc_r+0xd6>
 8002fea:	2c00      	cmp	r4, #0
 8002fec:	d04b      	beq.n	8003086 <_malloc_r+0xea>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	4639      	mov	r1, r7
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	eb04 0903 	add.w	r9, r4, r3
 8002ff8:	f000 fb5c 	bl	80036b4 <_sbrk_r>
 8002ffc:	4581      	cmp	r9, r0
 8002ffe:	d142      	bne.n	8003086 <_malloc_r+0xea>
 8003000:	6821      	ldr	r1, [r4, #0]
 8003002:	1a6d      	subs	r5, r5, r1
 8003004:	4629      	mov	r1, r5
 8003006:	4630      	mov	r0, r6
 8003008:	f7ff ffa6 	bl	8002f58 <sbrk_aligned>
 800300c:	3001      	adds	r0, #1
 800300e:	d03a      	beq.n	8003086 <_malloc_r+0xea>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	442b      	add	r3, r5
 8003014:	6023      	str	r3, [r4, #0]
 8003016:	f8d8 3000 	ldr.w	r3, [r8]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	bb62      	cbnz	r2, 8003078 <_malloc_r+0xdc>
 800301e:	f8c8 7000 	str.w	r7, [r8]
 8003022:	e00f      	b.n	8003044 <_malloc_r+0xa8>
 8003024:	6822      	ldr	r2, [r4, #0]
 8003026:	1b52      	subs	r2, r2, r5
 8003028:	d420      	bmi.n	800306c <_malloc_r+0xd0>
 800302a:	2a0b      	cmp	r2, #11
 800302c:	d917      	bls.n	800305e <_malloc_r+0xc2>
 800302e:	1961      	adds	r1, r4, r5
 8003030:	42a3      	cmp	r3, r4
 8003032:	6025      	str	r5, [r4, #0]
 8003034:	bf18      	it	ne
 8003036:	6059      	strne	r1, [r3, #4]
 8003038:	6863      	ldr	r3, [r4, #4]
 800303a:	bf08      	it	eq
 800303c:	f8c8 1000 	streq.w	r1, [r8]
 8003040:	5162      	str	r2, [r4, r5]
 8003042:	604b      	str	r3, [r1, #4]
 8003044:	4630      	mov	r0, r6
 8003046:	f000 f82f 	bl	80030a8 <__malloc_unlock>
 800304a:	f104 000b 	add.w	r0, r4, #11
 800304e:	1d23      	adds	r3, r4, #4
 8003050:	f020 0007 	bic.w	r0, r0, #7
 8003054:	1ac2      	subs	r2, r0, r3
 8003056:	bf1c      	itt	ne
 8003058:	1a1b      	subne	r3, r3, r0
 800305a:	50a3      	strne	r3, [r4, r2]
 800305c:	e7af      	b.n	8002fbe <_malloc_r+0x22>
 800305e:	6862      	ldr	r2, [r4, #4]
 8003060:	42a3      	cmp	r3, r4
 8003062:	bf0c      	ite	eq
 8003064:	f8c8 2000 	streq.w	r2, [r8]
 8003068:	605a      	strne	r2, [r3, #4]
 800306a:	e7eb      	b.n	8003044 <_malloc_r+0xa8>
 800306c:	4623      	mov	r3, r4
 800306e:	6864      	ldr	r4, [r4, #4]
 8003070:	e7ae      	b.n	8002fd0 <_malloc_r+0x34>
 8003072:	463c      	mov	r4, r7
 8003074:	687f      	ldr	r7, [r7, #4]
 8003076:	e7b6      	b.n	8002fe6 <_malloc_r+0x4a>
 8003078:	461a      	mov	r2, r3
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	42a3      	cmp	r3, r4
 800307e:	d1fb      	bne.n	8003078 <_malloc_r+0xdc>
 8003080:	2300      	movs	r3, #0
 8003082:	6053      	str	r3, [r2, #4]
 8003084:	e7de      	b.n	8003044 <_malloc_r+0xa8>
 8003086:	230c      	movs	r3, #12
 8003088:	6033      	str	r3, [r6, #0]
 800308a:	4630      	mov	r0, r6
 800308c:	f000 f80c 	bl	80030a8 <__malloc_unlock>
 8003090:	e794      	b.n	8002fbc <_malloc_r+0x20>
 8003092:	6005      	str	r5, [r0, #0]
 8003094:	e7d6      	b.n	8003044 <_malloc_r+0xa8>
 8003096:	bf00      	nop
 8003098:	20000260 	.word	0x20000260

0800309c <__malloc_lock>:
 800309c:	4801      	ldr	r0, [pc, #4]	@ (80030a4 <__malloc_lock+0x8>)
 800309e:	f7ff bf0f 	b.w	8002ec0 <__retarget_lock_acquire_recursive>
 80030a2:	bf00      	nop
 80030a4:	20000258 	.word	0x20000258

080030a8 <__malloc_unlock>:
 80030a8:	4801      	ldr	r0, [pc, #4]	@ (80030b0 <__malloc_unlock+0x8>)
 80030aa:	f7ff bf0a 	b.w	8002ec2 <__retarget_lock_release_recursive>
 80030ae:	bf00      	nop
 80030b0:	20000258 	.word	0x20000258

080030b4 <__ssputs_r>:
 80030b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b8:	688e      	ldr	r6, [r1, #8]
 80030ba:	461f      	mov	r7, r3
 80030bc:	42be      	cmp	r6, r7
 80030be:	680b      	ldr	r3, [r1, #0]
 80030c0:	4682      	mov	sl, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	4690      	mov	r8, r2
 80030c6:	d82d      	bhi.n	8003124 <__ssputs_r+0x70>
 80030c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030d0:	d026      	beq.n	8003120 <__ssputs_r+0x6c>
 80030d2:	6965      	ldr	r5, [r4, #20]
 80030d4:	6909      	ldr	r1, [r1, #16]
 80030d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030da:	eba3 0901 	sub.w	r9, r3, r1
 80030de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030e2:	1c7b      	adds	r3, r7, #1
 80030e4:	444b      	add	r3, r9
 80030e6:	106d      	asrs	r5, r5, #1
 80030e8:	429d      	cmp	r5, r3
 80030ea:	bf38      	it	cc
 80030ec:	461d      	movcc	r5, r3
 80030ee:	0553      	lsls	r3, r2, #21
 80030f0:	d527      	bpl.n	8003142 <__ssputs_r+0x8e>
 80030f2:	4629      	mov	r1, r5
 80030f4:	f7ff ff52 	bl	8002f9c <_malloc_r>
 80030f8:	4606      	mov	r6, r0
 80030fa:	b360      	cbz	r0, 8003156 <__ssputs_r+0xa2>
 80030fc:	6921      	ldr	r1, [r4, #16]
 80030fe:	464a      	mov	r2, r9
 8003100:	f000 fae8 	bl	80036d4 <memcpy>
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800310a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	6126      	str	r6, [r4, #16]
 8003112:	6165      	str	r5, [r4, #20]
 8003114:	444e      	add	r6, r9
 8003116:	eba5 0509 	sub.w	r5, r5, r9
 800311a:	6026      	str	r6, [r4, #0]
 800311c:	60a5      	str	r5, [r4, #8]
 800311e:	463e      	mov	r6, r7
 8003120:	42be      	cmp	r6, r7
 8003122:	d900      	bls.n	8003126 <__ssputs_r+0x72>
 8003124:	463e      	mov	r6, r7
 8003126:	6820      	ldr	r0, [r4, #0]
 8003128:	4632      	mov	r2, r6
 800312a:	4641      	mov	r1, r8
 800312c:	f000 faa8 	bl	8003680 <memmove>
 8003130:	68a3      	ldr	r3, [r4, #8]
 8003132:	1b9b      	subs	r3, r3, r6
 8003134:	60a3      	str	r3, [r4, #8]
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	4433      	add	r3, r6
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	2000      	movs	r0, #0
 800313e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003142:	462a      	mov	r2, r5
 8003144:	f000 fad4 	bl	80036f0 <_realloc_r>
 8003148:	4606      	mov	r6, r0
 800314a:	2800      	cmp	r0, #0
 800314c:	d1e0      	bne.n	8003110 <__ssputs_r+0x5c>
 800314e:	6921      	ldr	r1, [r4, #16]
 8003150:	4650      	mov	r0, sl
 8003152:	f7ff feb7 	bl	8002ec4 <_free_r>
 8003156:	230c      	movs	r3, #12
 8003158:	f8ca 3000 	str.w	r3, [sl]
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003162:	81a3      	strh	r3, [r4, #12]
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	e7e9      	b.n	800313e <__ssputs_r+0x8a>
	...

0800316c <_svfiprintf_r>:
 800316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003170:	4698      	mov	r8, r3
 8003172:	898b      	ldrh	r3, [r1, #12]
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	b09d      	sub	sp, #116	@ 0x74
 8003178:	4607      	mov	r7, r0
 800317a:	460d      	mov	r5, r1
 800317c:	4614      	mov	r4, r2
 800317e:	d510      	bpl.n	80031a2 <_svfiprintf_r+0x36>
 8003180:	690b      	ldr	r3, [r1, #16]
 8003182:	b973      	cbnz	r3, 80031a2 <_svfiprintf_r+0x36>
 8003184:	2140      	movs	r1, #64	@ 0x40
 8003186:	f7ff ff09 	bl	8002f9c <_malloc_r>
 800318a:	6028      	str	r0, [r5, #0]
 800318c:	6128      	str	r0, [r5, #16]
 800318e:	b930      	cbnz	r0, 800319e <_svfiprintf_r+0x32>
 8003190:	230c      	movs	r3, #12
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	b01d      	add	sp, #116	@ 0x74
 800319a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800319e:	2340      	movs	r3, #64	@ 0x40
 80031a0:	616b      	str	r3, [r5, #20]
 80031a2:	2300      	movs	r3, #0
 80031a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80031a6:	2320      	movs	r3, #32
 80031a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80031b0:	2330      	movs	r3, #48	@ 0x30
 80031b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003350 <_svfiprintf_r+0x1e4>
 80031b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031ba:	f04f 0901 	mov.w	r9, #1
 80031be:	4623      	mov	r3, r4
 80031c0:	469a      	mov	sl, r3
 80031c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031c6:	b10a      	cbz	r2, 80031cc <_svfiprintf_r+0x60>
 80031c8:	2a25      	cmp	r2, #37	@ 0x25
 80031ca:	d1f9      	bne.n	80031c0 <_svfiprintf_r+0x54>
 80031cc:	ebba 0b04 	subs.w	fp, sl, r4
 80031d0:	d00b      	beq.n	80031ea <_svfiprintf_r+0x7e>
 80031d2:	465b      	mov	r3, fp
 80031d4:	4622      	mov	r2, r4
 80031d6:	4629      	mov	r1, r5
 80031d8:	4638      	mov	r0, r7
 80031da:	f7ff ff6b 	bl	80030b4 <__ssputs_r>
 80031de:	3001      	adds	r0, #1
 80031e0:	f000 80a7 	beq.w	8003332 <_svfiprintf_r+0x1c6>
 80031e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031e6:	445a      	add	r2, fp
 80031e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80031ea:	f89a 3000 	ldrb.w	r3, [sl]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 809f 	beq.w	8003332 <_svfiprintf_r+0x1c6>
 80031f4:	2300      	movs	r3, #0
 80031f6:	f04f 32ff 	mov.w	r2, #4294967295
 80031fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031fe:	f10a 0a01 	add.w	sl, sl, #1
 8003202:	9304      	str	r3, [sp, #16]
 8003204:	9307      	str	r3, [sp, #28]
 8003206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800320a:	931a      	str	r3, [sp, #104]	@ 0x68
 800320c:	4654      	mov	r4, sl
 800320e:	2205      	movs	r2, #5
 8003210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003214:	484e      	ldr	r0, [pc, #312]	@ (8003350 <_svfiprintf_r+0x1e4>)
 8003216:	f7fc fffb 	bl	8000210 <memchr>
 800321a:	9a04      	ldr	r2, [sp, #16]
 800321c:	b9d8      	cbnz	r0, 8003256 <_svfiprintf_r+0xea>
 800321e:	06d0      	lsls	r0, r2, #27
 8003220:	bf44      	itt	mi
 8003222:	2320      	movmi	r3, #32
 8003224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003228:	0711      	lsls	r1, r2, #28
 800322a:	bf44      	itt	mi
 800322c:	232b      	movmi	r3, #43	@ 0x2b
 800322e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003232:	f89a 3000 	ldrb.w	r3, [sl]
 8003236:	2b2a      	cmp	r3, #42	@ 0x2a
 8003238:	d015      	beq.n	8003266 <_svfiprintf_r+0xfa>
 800323a:	9a07      	ldr	r2, [sp, #28]
 800323c:	4654      	mov	r4, sl
 800323e:	2000      	movs	r0, #0
 8003240:	f04f 0c0a 	mov.w	ip, #10
 8003244:	4621      	mov	r1, r4
 8003246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800324a:	3b30      	subs	r3, #48	@ 0x30
 800324c:	2b09      	cmp	r3, #9
 800324e:	d94b      	bls.n	80032e8 <_svfiprintf_r+0x17c>
 8003250:	b1b0      	cbz	r0, 8003280 <_svfiprintf_r+0x114>
 8003252:	9207      	str	r2, [sp, #28]
 8003254:	e014      	b.n	8003280 <_svfiprintf_r+0x114>
 8003256:	eba0 0308 	sub.w	r3, r0, r8
 800325a:	fa09 f303 	lsl.w	r3, r9, r3
 800325e:	4313      	orrs	r3, r2
 8003260:	9304      	str	r3, [sp, #16]
 8003262:	46a2      	mov	sl, r4
 8003264:	e7d2      	b.n	800320c <_svfiprintf_r+0xa0>
 8003266:	9b03      	ldr	r3, [sp, #12]
 8003268:	1d19      	adds	r1, r3, #4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	9103      	str	r1, [sp, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	bfbb      	ittet	lt
 8003272:	425b      	neglt	r3, r3
 8003274:	f042 0202 	orrlt.w	r2, r2, #2
 8003278:	9307      	strge	r3, [sp, #28]
 800327a:	9307      	strlt	r3, [sp, #28]
 800327c:	bfb8      	it	lt
 800327e:	9204      	strlt	r2, [sp, #16]
 8003280:	7823      	ldrb	r3, [r4, #0]
 8003282:	2b2e      	cmp	r3, #46	@ 0x2e
 8003284:	d10a      	bne.n	800329c <_svfiprintf_r+0x130>
 8003286:	7863      	ldrb	r3, [r4, #1]
 8003288:	2b2a      	cmp	r3, #42	@ 0x2a
 800328a:	d132      	bne.n	80032f2 <_svfiprintf_r+0x186>
 800328c:	9b03      	ldr	r3, [sp, #12]
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	9203      	str	r2, [sp, #12]
 8003294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003298:	3402      	adds	r4, #2
 800329a:	9305      	str	r3, [sp, #20]
 800329c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003360 <_svfiprintf_r+0x1f4>
 80032a0:	7821      	ldrb	r1, [r4, #0]
 80032a2:	2203      	movs	r2, #3
 80032a4:	4650      	mov	r0, sl
 80032a6:	f7fc ffb3 	bl	8000210 <memchr>
 80032aa:	b138      	cbz	r0, 80032bc <_svfiprintf_r+0x150>
 80032ac:	9b04      	ldr	r3, [sp, #16]
 80032ae:	eba0 000a 	sub.w	r0, r0, sl
 80032b2:	2240      	movs	r2, #64	@ 0x40
 80032b4:	4082      	lsls	r2, r0
 80032b6:	4313      	orrs	r3, r2
 80032b8:	3401      	adds	r4, #1
 80032ba:	9304      	str	r3, [sp, #16]
 80032bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c0:	4824      	ldr	r0, [pc, #144]	@ (8003354 <_svfiprintf_r+0x1e8>)
 80032c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032c6:	2206      	movs	r2, #6
 80032c8:	f7fc ffa2 	bl	8000210 <memchr>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d036      	beq.n	800333e <_svfiprintf_r+0x1d2>
 80032d0:	4b21      	ldr	r3, [pc, #132]	@ (8003358 <_svfiprintf_r+0x1ec>)
 80032d2:	bb1b      	cbnz	r3, 800331c <_svfiprintf_r+0x1b0>
 80032d4:	9b03      	ldr	r3, [sp, #12]
 80032d6:	3307      	adds	r3, #7
 80032d8:	f023 0307 	bic.w	r3, r3, #7
 80032dc:	3308      	adds	r3, #8
 80032de:	9303      	str	r3, [sp, #12]
 80032e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032e2:	4433      	add	r3, r6
 80032e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80032e6:	e76a      	b.n	80031be <_svfiprintf_r+0x52>
 80032e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032ec:	460c      	mov	r4, r1
 80032ee:	2001      	movs	r0, #1
 80032f0:	e7a8      	b.n	8003244 <_svfiprintf_r+0xd8>
 80032f2:	2300      	movs	r3, #0
 80032f4:	3401      	adds	r4, #1
 80032f6:	9305      	str	r3, [sp, #20]
 80032f8:	4619      	mov	r1, r3
 80032fa:	f04f 0c0a 	mov.w	ip, #10
 80032fe:	4620      	mov	r0, r4
 8003300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003304:	3a30      	subs	r2, #48	@ 0x30
 8003306:	2a09      	cmp	r2, #9
 8003308:	d903      	bls.n	8003312 <_svfiprintf_r+0x1a6>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0c6      	beq.n	800329c <_svfiprintf_r+0x130>
 800330e:	9105      	str	r1, [sp, #20]
 8003310:	e7c4      	b.n	800329c <_svfiprintf_r+0x130>
 8003312:	fb0c 2101 	mla	r1, ip, r1, r2
 8003316:	4604      	mov	r4, r0
 8003318:	2301      	movs	r3, #1
 800331a:	e7f0      	b.n	80032fe <_svfiprintf_r+0x192>
 800331c:	ab03      	add	r3, sp, #12
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	462a      	mov	r2, r5
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <_svfiprintf_r+0x1f0>)
 8003324:	a904      	add	r1, sp, #16
 8003326:	4638      	mov	r0, r7
 8003328:	f3af 8000 	nop.w
 800332c:	1c42      	adds	r2, r0, #1
 800332e:	4606      	mov	r6, r0
 8003330:	d1d6      	bne.n	80032e0 <_svfiprintf_r+0x174>
 8003332:	89ab      	ldrh	r3, [r5, #12]
 8003334:	065b      	lsls	r3, r3, #25
 8003336:	f53f af2d 	bmi.w	8003194 <_svfiprintf_r+0x28>
 800333a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800333c:	e72c      	b.n	8003198 <_svfiprintf_r+0x2c>
 800333e:	ab03      	add	r3, sp, #12
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	462a      	mov	r2, r5
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <_svfiprintf_r+0x1f0>)
 8003346:	a904      	add	r1, sp, #16
 8003348:	4638      	mov	r0, r7
 800334a:	f000 f879 	bl	8003440 <_printf_i>
 800334e:	e7ed      	b.n	800332c <_svfiprintf_r+0x1c0>
 8003350:	080037b8 	.word	0x080037b8
 8003354:	080037c2 	.word	0x080037c2
 8003358:	00000000 	.word	0x00000000
 800335c:	080030b5 	.word	0x080030b5
 8003360:	080037be 	.word	0x080037be

08003364 <_printf_common>:
 8003364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003368:	4616      	mov	r6, r2
 800336a:	4698      	mov	r8, r3
 800336c:	688a      	ldr	r2, [r1, #8]
 800336e:	690b      	ldr	r3, [r1, #16]
 8003370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003374:	4293      	cmp	r3, r2
 8003376:	bfb8      	it	lt
 8003378:	4613      	movlt	r3, r2
 800337a:	6033      	str	r3, [r6, #0]
 800337c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003380:	4607      	mov	r7, r0
 8003382:	460c      	mov	r4, r1
 8003384:	b10a      	cbz	r2, 800338a <_printf_common+0x26>
 8003386:	3301      	adds	r3, #1
 8003388:	6033      	str	r3, [r6, #0]
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	0699      	lsls	r1, r3, #26
 800338e:	bf42      	ittt	mi
 8003390:	6833      	ldrmi	r3, [r6, #0]
 8003392:	3302      	addmi	r3, #2
 8003394:	6033      	strmi	r3, [r6, #0]
 8003396:	6825      	ldr	r5, [r4, #0]
 8003398:	f015 0506 	ands.w	r5, r5, #6
 800339c:	d106      	bne.n	80033ac <_printf_common+0x48>
 800339e:	f104 0a19 	add.w	sl, r4, #25
 80033a2:	68e3      	ldr	r3, [r4, #12]
 80033a4:	6832      	ldr	r2, [r6, #0]
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	42ab      	cmp	r3, r5
 80033aa:	dc26      	bgt.n	80033fa <_printf_common+0x96>
 80033ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	3b00      	subs	r3, #0
 80033b4:	bf18      	it	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	0692      	lsls	r2, r2, #26
 80033ba:	d42b      	bmi.n	8003414 <_printf_common+0xb0>
 80033bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033c0:	4641      	mov	r1, r8
 80033c2:	4638      	mov	r0, r7
 80033c4:	47c8      	blx	r9
 80033c6:	3001      	adds	r0, #1
 80033c8:	d01e      	beq.n	8003408 <_printf_common+0xa4>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	6922      	ldr	r2, [r4, #16]
 80033ce:	f003 0306 	and.w	r3, r3, #6
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf02      	ittt	eq
 80033d6:	68e5      	ldreq	r5, [r4, #12]
 80033d8:	6833      	ldreq	r3, [r6, #0]
 80033da:	1aed      	subeq	r5, r5, r3
 80033dc:	68a3      	ldr	r3, [r4, #8]
 80033de:	bf0c      	ite	eq
 80033e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033e4:	2500      	movne	r5, #0
 80033e6:	4293      	cmp	r3, r2
 80033e8:	bfc4      	itt	gt
 80033ea:	1a9b      	subgt	r3, r3, r2
 80033ec:	18ed      	addgt	r5, r5, r3
 80033ee:	2600      	movs	r6, #0
 80033f0:	341a      	adds	r4, #26
 80033f2:	42b5      	cmp	r5, r6
 80033f4:	d11a      	bne.n	800342c <_printf_common+0xc8>
 80033f6:	2000      	movs	r0, #0
 80033f8:	e008      	b.n	800340c <_printf_common+0xa8>
 80033fa:	2301      	movs	r3, #1
 80033fc:	4652      	mov	r2, sl
 80033fe:	4641      	mov	r1, r8
 8003400:	4638      	mov	r0, r7
 8003402:	47c8      	blx	r9
 8003404:	3001      	adds	r0, #1
 8003406:	d103      	bne.n	8003410 <_printf_common+0xac>
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003410:	3501      	adds	r5, #1
 8003412:	e7c6      	b.n	80033a2 <_printf_common+0x3e>
 8003414:	18e1      	adds	r1, r4, r3
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	2030      	movs	r0, #48	@ 0x30
 800341a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800341e:	4422      	add	r2, r4
 8003420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003428:	3302      	adds	r3, #2
 800342a:	e7c7      	b.n	80033bc <_printf_common+0x58>
 800342c:	2301      	movs	r3, #1
 800342e:	4622      	mov	r2, r4
 8003430:	4641      	mov	r1, r8
 8003432:	4638      	mov	r0, r7
 8003434:	47c8      	blx	r9
 8003436:	3001      	adds	r0, #1
 8003438:	d0e6      	beq.n	8003408 <_printf_common+0xa4>
 800343a:	3601      	adds	r6, #1
 800343c:	e7d9      	b.n	80033f2 <_printf_common+0x8e>
	...

08003440 <_printf_i>:
 8003440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003444:	7e0f      	ldrb	r7, [r1, #24]
 8003446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003448:	2f78      	cmp	r7, #120	@ 0x78
 800344a:	4691      	mov	r9, r2
 800344c:	4680      	mov	r8, r0
 800344e:	460c      	mov	r4, r1
 8003450:	469a      	mov	sl, r3
 8003452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003456:	d807      	bhi.n	8003468 <_printf_i+0x28>
 8003458:	2f62      	cmp	r7, #98	@ 0x62
 800345a:	d80a      	bhi.n	8003472 <_printf_i+0x32>
 800345c:	2f00      	cmp	r7, #0
 800345e:	f000 80d2 	beq.w	8003606 <_printf_i+0x1c6>
 8003462:	2f58      	cmp	r7, #88	@ 0x58
 8003464:	f000 80b9 	beq.w	80035da <_printf_i+0x19a>
 8003468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800346c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003470:	e03a      	b.n	80034e8 <_printf_i+0xa8>
 8003472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003476:	2b15      	cmp	r3, #21
 8003478:	d8f6      	bhi.n	8003468 <_printf_i+0x28>
 800347a:	a101      	add	r1, pc, #4	@ (adr r1, 8003480 <_printf_i+0x40>)
 800347c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003480:	080034d9 	.word	0x080034d9
 8003484:	080034ed 	.word	0x080034ed
 8003488:	08003469 	.word	0x08003469
 800348c:	08003469 	.word	0x08003469
 8003490:	08003469 	.word	0x08003469
 8003494:	08003469 	.word	0x08003469
 8003498:	080034ed 	.word	0x080034ed
 800349c:	08003469 	.word	0x08003469
 80034a0:	08003469 	.word	0x08003469
 80034a4:	08003469 	.word	0x08003469
 80034a8:	08003469 	.word	0x08003469
 80034ac:	080035ed 	.word	0x080035ed
 80034b0:	08003517 	.word	0x08003517
 80034b4:	080035a7 	.word	0x080035a7
 80034b8:	08003469 	.word	0x08003469
 80034bc:	08003469 	.word	0x08003469
 80034c0:	0800360f 	.word	0x0800360f
 80034c4:	08003469 	.word	0x08003469
 80034c8:	08003517 	.word	0x08003517
 80034cc:	08003469 	.word	0x08003469
 80034d0:	08003469 	.word	0x08003469
 80034d4:	080035af 	.word	0x080035af
 80034d8:	6833      	ldr	r3, [r6, #0]
 80034da:	1d1a      	adds	r2, r3, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6032      	str	r2, [r6, #0]
 80034e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034e8:	2301      	movs	r3, #1
 80034ea:	e09d      	b.n	8003628 <_printf_i+0x1e8>
 80034ec:	6833      	ldr	r3, [r6, #0]
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	1d19      	adds	r1, r3, #4
 80034f2:	6031      	str	r1, [r6, #0]
 80034f4:	0606      	lsls	r6, r0, #24
 80034f6:	d501      	bpl.n	80034fc <_printf_i+0xbc>
 80034f8:	681d      	ldr	r5, [r3, #0]
 80034fa:	e003      	b.n	8003504 <_printf_i+0xc4>
 80034fc:	0645      	lsls	r5, r0, #25
 80034fe:	d5fb      	bpl.n	80034f8 <_printf_i+0xb8>
 8003500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003504:	2d00      	cmp	r5, #0
 8003506:	da03      	bge.n	8003510 <_printf_i+0xd0>
 8003508:	232d      	movs	r3, #45	@ 0x2d
 800350a:	426d      	negs	r5, r5
 800350c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003510:	4859      	ldr	r0, [pc, #356]	@ (8003678 <_printf_i+0x238>)
 8003512:	230a      	movs	r3, #10
 8003514:	e011      	b.n	800353a <_printf_i+0xfa>
 8003516:	6821      	ldr	r1, [r4, #0]
 8003518:	6833      	ldr	r3, [r6, #0]
 800351a:	0608      	lsls	r0, r1, #24
 800351c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003520:	d402      	bmi.n	8003528 <_printf_i+0xe8>
 8003522:	0649      	lsls	r1, r1, #25
 8003524:	bf48      	it	mi
 8003526:	b2ad      	uxthmi	r5, r5
 8003528:	2f6f      	cmp	r7, #111	@ 0x6f
 800352a:	4853      	ldr	r0, [pc, #332]	@ (8003678 <_printf_i+0x238>)
 800352c:	6033      	str	r3, [r6, #0]
 800352e:	bf14      	ite	ne
 8003530:	230a      	movne	r3, #10
 8003532:	2308      	moveq	r3, #8
 8003534:	2100      	movs	r1, #0
 8003536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800353a:	6866      	ldr	r6, [r4, #4]
 800353c:	60a6      	str	r6, [r4, #8]
 800353e:	2e00      	cmp	r6, #0
 8003540:	bfa2      	ittt	ge
 8003542:	6821      	ldrge	r1, [r4, #0]
 8003544:	f021 0104 	bicge.w	r1, r1, #4
 8003548:	6021      	strge	r1, [r4, #0]
 800354a:	b90d      	cbnz	r5, 8003550 <_printf_i+0x110>
 800354c:	2e00      	cmp	r6, #0
 800354e:	d04b      	beq.n	80035e8 <_printf_i+0x1a8>
 8003550:	4616      	mov	r6, r2
 8003552:	fbb5 f1f3 	udiv	r1, r5, r3
 8003556:	fb03 5711 	mls	r7, r3, r1, r5
 800355a:	5dc7      	ldrb	r7, [r0, r7]
 800355c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003560:	462f      	mov	r7, r5
 8003562:	42bb      	cmp	r3, r7
 8003564:	460d      	mov	r5, r1
 8003566:	d9f4      	bls.n	8003552 <_printf_i+0x112>
 8003568:	2b08      	cmp	r3, #8
 800356a:	d10b      	bne.n	8003584 <_printf_i+0x144>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	07df      	lsls	r7, r3, #31
 8003570:	d508      	bpl.n	8003584 <_printf_i+0x144>
 8003572:	6923      	ldr	r3, [r4, #16]
 8003574:	6861      	ldr	r1, [r4, #4]
 8003576:	4299      	cmp	r1, r3
 8003578:	bfde      	ittt	le
 800357a:	2330      	movle	r3, #48	@ 0x30
 800357c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003584:	1b92      	subs	r2, r2, r6
 8003586:	6122      	str	r2, [r4, #16]
 8003588:	f8cd a000 	str.w	sl, [sp]
 800358c:	464b      	mov	r3, r9
 800358e:	aa03      	add	r2, sp, #12
 8003590:	4621      	mov	r1, r4
 8003592:	4640      	mov	r0, r8
 8003594:	f7ff fee6 	bl	8003364 <_printf_common>
 8003598:	3001      	adds	r0, #1
 800359a:	d14a      	bne.n	8003632 <_printf_i+0x1f2>
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	b004      	add	sp, #16
 80035a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	f043 0320 	orr.w	r3, r3, #32
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	4833      	ldr	r0, [pc, #204]	@ (800367c <_printf_i+0x23c>)
 80035b0:	2778      	movs	r7, #120	@ 0x78
 80035b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	6831      	ldr	r1, [r6, #0]
 80035ba:	061f      	lsls	r7, r3, #24
 80035bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80035c0:	d402      	bmi.n	80035c8 <_printf_i+0x188>
 80035c2:	065f      	lsls	r7, r3, #25
 80035c4:	bf48      	it	mi
 80035c6:	b2ad      	uxthmi	r5, r5
 80035c8:	6031      	str	r1, [r6, #0]
 80035ca:	07d9      	lsls	r1, r3, #31
 80035cc:	bf44      	itt	mi
 80035ce:	f043 0320 	orrmi.w	r3, r3, #32
 80035d2:	6023      	strmi	r3, [r4, #0]
 80035d4:	b11d      	cbz	r5, 80035de <_printf_i+0x19e>
 80035d6:	2310      	movs	r3, #16
 80035d8:	e7ac      	b.n	8003534 <_printf_i+0xf4>
 80035da:	4827      	ldr	r0, [pc, #156]	@ (8003678 <_printf_i+0x238>)
 80035dc:	e7e9      	b.n	80035b2 <_printf_i+0x172>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	f023 0320 	bic.w	r3, r3, #32
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	e7f6      	b.n	80035d6 <_printf_i+0x196>
 80035e8:	4616      	mov	r6, r2
 80035ea:	e7bd      	b.n	8003568 <_printf_i+0x128>
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	6825      	ldr	r5, [r4, #0]
 80035f0:	6961      	ldr	r1, [r4, #20]
 80035f2:	1d18      	adds	r0, r3, #4
 80035f4:	6030      	str	r0, [r6, #0]
 80035f6:	062e      	lsls	r6, r5, #24
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	d501      	bpl.n	8003600 <_printf_i+0x1c0>
 80035fc:	6019      	str	r1, [r3, #0]
 80035fe:	e002      	b.n	8003606 <_printf_i+0x1c6>
 8003600:	0668      	lsls	r0, r5, #25
 8003602:	d5fb      	bpl.n	80035fc <_printf_i+0x1bc>
 8003604:	8019      	strh	r1, [r3, #0]
 8003606:	2300      	movs	r3, #0
 8003608:	6123      	str	r3, [r4, #16]
 800360a:	4616      	mov	r6, r2
 800360c:	e7bc      	b.n	8003588 <_printf_i+0x148>
 800360e:	6833      	ldr	r3, [r6, #0]
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	6032      	str	r2, [r6, #0]
 8003614:	681e      	ldr	r6, [r3, #0]
 8003616:	6862      	ldr	r2, [r4, #4]
 8003618:	2100      	movs	r1, #0
 800361a:	4630      	mov	r0, r6
 800361c:	f7fc fdf8 	bl	8000210 <memchr>
 8003620:	b108      	cbz	r0, 8003626 <_printf_i+0x1e6>
 8003622:	1b80      	subs	r0, r0, r6
 8003624:	6060      	str	r0, [r4, #4]
 8003626:	6863      	ldr	r3, [r4, #4]
 8003628:	6123      	str	r3, [r4, #16]
 800362a:	2300      	movs	r3, #0
 800362c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003630:	e7aa      	b.n	8003588 <_printf_i+0x148>
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	4632      	mov	r2, r6
 8003636:	4649      	mov	r1, r9
 8003638:	4640      	mov	r0, r8
 800363a:	47d0      	blx	sl
 800363c:	3001      	adds	r0, #1
 800363e:	d0ad      	beq.n	800359c <_printf_i+0x15c>
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	079b      	lsls	r3, r3, #30
 8003644:	d413      	bmi.n	800366e <_printf_i+0x22e>
 8003646:	68e0      	ldr	r0, [r4, #12]
 8003648:	9b03      	ldr	r3, [sp, #12]
 800364a:	4298      	cmp	r0, r3
 800364c:	bfb8      	it	lt
 800364e:	4618      	movlt	r0, r3
 8003650:	e7a6      	b.n	80035a0 <_printf_i+0x160>
 8003652:	2301      	movs	r3, #1
 8003654:	4632      	mov	r2, r6
 8003656:	4649      	mov	r1, r9
 8003658:	4640      	mov	r0, r8
 800365a:	47d0      	blx	sl
 800365c:	3001      	adds	r0, #1
 800365e:	d09d      	beq.n	800359c <_printf_i+0x15c>
 8003660:	3501      	adds	r5, #1
 8003662:	68e3      	ldr	r3, [r4, #12]
 8003664:	9903      	ldr	r1, [sp, #12]
 8003666:	1a5b      	subs	r3, r3, r1
 8003668:	42ab      	cmp	r3, r5
 800366a:	dcf2      	bgt.n	8003652 <_printf_i+0x212>
 800366c:	e7eb      	b.n	8003646 <_printf_i+0x206>
 800366e:	2500      	movs	r5, #0
 8003670:	f104 0619 	add.w	r6, r4, #25
 8003674:	e7f5      	b.n	8003662 <_printf_i+0x222>
 8003676:	bf00      	nop
 8003678:	080037c9 	.word	0x080037c9
 800367c:	080037da 	.word	0x080037da

08003680 <memmove>:
 8003680:	4288      	cmp	r0, r1
 8003682:	b510      	push	{r4, lr}
 8003684:	eb01 0402 	add.w	r4, r1, r2
 8003688:	d902      	bls.n	8003690 <memmove+0x10>
 800368a:	4284      	cmp	r4, r0
 800368c:	4623      	mov	r3, r4
 800368e:	d807      	bhi.n	80036a0 <memmove+0x20>
 8003690:	1e43      	subs	r3, r0, #1
 8003692:	42a1      	cmp	r1, r4
 8003694:	d008      	beq.n	80036a8 <memmove+0x28>
 8003696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800369a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800369e:	e7f8      	b.n	8003692 <memmove+0x12>
 80036a0:	4402      	add	r2, r0
 80036a2:	4601      	mov	r1, r0
 80036a4:	428a      	cmp	r2, r1
 80036a6:	d100      	bne.n	80036aa <memmove+0x2a>
 80036a8:	bd10      	pop	{r4, pc}
 80036aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036b2:	e7f7      	b.n	80036a4 <memmove+0x24>

080036b4 <_sbrk_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4d06      	ldr	r5, [pc, #24]	@ (80036d0 <_sbrk_r+0x1c>)
 80036b8:	2300      	movs	r3, #0
 80036ba:	4604      	mov	r4, r0
 80036bc:	4608      	mov	r0, r1
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	f7fd fbaa 	bl	8000e18 <_sbrk>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d102      	bne.n	80036ce <_sbrk_r+0x1a>
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	b103      	cbz	r3, 80036ce <_sbrk_r+0x1a>
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
 80036d0:	20000254 	.word	0x20000254

080036d4 <memcpy>:
 80036d4:	440a      	add	r2, r1
 80036d6:	4291      	cmp	r1, r2
 80036d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80036dc:	d100      	bne.n	80036e0 <memcpy+0xc>
 80036de:	4770      	bx	lr
 80036e0:	b510      	push	{r4, lr}
 80036e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ea:	4291      	cmp	r1, r2
 80036ec:	d1f9      	bne.n	80036e2 <memcpy+0xe>
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <_realloc_r>:
 80036f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f4:	4680      	mov	r8, r0
 80036f6:	4615      	mov	r5, r2
 80036f8:	460c      	mov	r4, r1
 80036fa:	b921      	cbnz	r1, 8003706 <_realloc_r+0x16>
 80036fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003700:	4611      	mov	r1, r2
 8003702:	f7ff bc4b 	b.w	8002f9c <_malloc_r>
 8003706:	b92a      	cbnz	r2, 8003714 <_realloc_r+0x24>
 8003708:	f7ff fbdc 	bl	8002ec4 <_free_r>
 800370c:	2400      	movs	r4, #0
 800370e:	4620      	mov	r0, r4
 8003710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003714:	f000 f81a 	bl	800374c <_malloc_usable_size_r>
 8003718:	4285      	cmp	r5, r0
 800371a:	4606      	mov	r6, r0
 800371c:	d802      	bhi.n	8003724 <_realloc_r+0x34>
 800371e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003722:	d8f4      	bhi.n	800370e <_realloc_r+0x1e>
 8003724:	4629      	mov	r1, r5
 8003726:	4640      	mov	r0, r8
 8003728:	f7ff fc38 	bl	8002f9c <_malloc_r>
 800372c:	4607      	mov	r7, r0
 800372e:	2800      	cmp	r0, #0
 8003730:	d0ec      	beq.n	800370c <_realloc_r+0x1c>
 8003732:	42b5      	cmp	r5, r6
 8003734:	462a      	mov	r2, r5
 8003736:	4621      	mov	r1, r4
 8003738:	bf28      	it	cs
 800373a:	4632      	movcs	r2, r6
 800373c:	f7ff ffca 	bl	80036d4 <memcpy>
 8003740:	4621      	mov	r1, r4
 8003742:	4640      	mov	r0, r8
 8003744:	f7ff fbbe 	bl	8002ec4 <_free_r>
 8003748:	463c      	mov	r4, r7
 800374a:	e7e0      	b.n	800370e <_realloc_r+0x1e>

0800374c <_malloc_usable_size_r>:
 800374c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003750:	1f18      	subs	r0, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	bfbc      	itt	lt
 8003756:	580b      	ldrlt	r3, [r1, r0]
 8003758:	18c0      	addlt	r0, r0, r3
 800375a:	4770      	bx	lr

0800375c <_init>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr

08003768 <_fini>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

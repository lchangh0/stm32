
work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08008bcc  08008bcc  00009bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea8  08008ea8  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea8  08008ea8  00009ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb0  08008eb0  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00009eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00009eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008eb8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  2000006c  08008f24  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08008f24  0000a78c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a7f  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd7  00000000  00000000  00021b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  000257f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001089  00000000  00000000  00026d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ceb  00000000  00000000  00027db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b002  00000000  00000000  0004eaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e575f  00000000  00000000  00069aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  0014f248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  001553c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008bb4 	.word	0x08008bb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08008bb4 	.word	0x08008bb4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <GetElapsedTick>:
{
	return HAL_GetTick();
}

uint32_t GetElapsedTick(uint32_t start)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 80005b8:	f002 fb22 	bl	8002c00 <HAL_GetTick>
 80005bc:	60f8      	str	r0, [r7, #12]
	if (now >= start)
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d303      	bcc.n	80005ce <GetElapsedTick+0x1e>
		return now - start;
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	e003      	b.n	80005d6 <GetElapsedTick+0x26>
	else
		return 0xffffffff - start + now;
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	3b01      	subs	r3, #1
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <__io_putchar>:


// printf()함수를 실행했을 때 UART2로 출력한다.
// printf() 출력내용에 개행문자 \n이 있어야 UART로 출력된다.
int __io_putchar(int ch)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80005e8:	1d39      	adds	r1, r7, #4
 80005ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ee:	2201      	movs	r2, #1
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <__io_putchar+0x20>)
 80005f2:	f006 f939 	bl	8006868 <HAL_UART_Transmit>
	return ch;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200004bc 	.word	0x200004bc

08000604 <InitDWT>:


uint32_t clocks_per_us;

void InitDWT(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
    // CYCCNT 레지스터를 초기화하고 사용하도록 설정
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <InitDWT+0x3c>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <InitDWT+0x3c>)
 800060e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000612:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <InitDWT+0x40>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800061a:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <InitDWT+0x40>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a09      	ldr	r2, [pc, #36]	@ (8000644 <InitDWT+0x40>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6013      	str	r3, [r2, #0]

    clocks_per_us = SystemCoreClock / 1000000;
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <InitDWT+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <InitDWT+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9b      	lsrs	r3, r3, #18
 8000632:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <InitDWT+0x4c>)
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000edf0 	.word	0xe000edf0
 8000644:	e0001000 	.word	0xe0001000
 8000648:	20000004 	.word	0x20000004
 800064c:	431bde83 	.word	0x431bde83
 8000650:	20000088 	.word	0x20000088

08000654 <DelayUS>:


// 마이크로초 단위 딜레이 함수
void DelayUS(uint32_t us)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <DelayUS+0x38>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * clocks_per_us;
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <DelayUS+0x3c>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 800066e:	bf00      	nop
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <DelayUS+0x38>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	429a      	cmp	r2, r3
 800067c:	d8f8      	bhi.n	8000670 <DelayUS+0x1c>
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e0001000 	.word	0xe0001000
 8000690:	20000088 	.word	0x20000088

08000694 <InitUartRxInterrupt>:
uint8_t rx5buff[128];
uint8_t rx5_r_idx = 0;
uint8_t rx5_w_idx = 0;

void InitUartRxInterrupt()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	// UART2 RX 인터럽트 활성
	HAL_UART_Receive_IT(&huart2, &rx2data, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	4905      	ldr	r1, [pc, #20]	@ (80006b0 <InitUartRxInterrupt+0x1c>)
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <InitUartRxInterrupt+0x20>)
 800069e:	f006 f96e 	bl	800697e <HAL_UART_Receive_IT>

	// UART5 RX 인터럽트 활성
	HAL_UART_Receive_IT(&huart5, &rx5data, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	4904      	ldr	r1, [pc, #16]	@ (80006b8 <InitUartRxInterrupt+0x24>)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <InitUartRxInterrupt+0x28>)
 80006a8:	f006 f969 	bl	800697e <HAL_UART_Receive_IT>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000008c 	.word	0x2000008c
 80006b4:	200004bc 	.word	0x200004bc
 80006b8:	20000111 	.word	0x20000111
 80006bc:	20000474 	.word	0x20000474

080006c0 <HAL_UART_RxCpltCallback>:

// UART 수신 인터럽트 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <HAL_UART_RxCpltCallback+0x7c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d115      	bne.n	80006fe <HAL_UART_RxCpltCallback+0x3e>
	{
		rx2buff[rx2_w_idx] = rx2data;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <HAL_UART_RxCpltCallback+0x80>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <HAL_UART_RxCpltCallback+0x84>)
 80006da:	7819      	ldrb	r1, [r3, #0]
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <HAL_UART_RxCpltCallback+0x88>)
 80006de:	5499      	strb	r1, [r3, r2]
		rx2_w_idx = (rx2_w_idx + 1) % sizeof(rx2buff);
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <HAL_UART_RxCpltCallback+0x80>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <HAL_UART_RxCpltCallback+0x80>)
 80006f0:	701a      	strb	r2, [r3, #0]

		// UART2 RX 인터럽트 활성
		HAL_UART_Receive_IT(&huart2, &rx2data, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	4913      	ldr	r1, [pc, #76]	@ (8000744 <HAL_UART_RxCpltCallback+0x84>)
 80006f6:	4815      	ldr	r0, [pc, #84]	@ (800074c <HAL_UART_RxCpltCallback+0x8c>)
 80006f8:	f006 f941 	bl	800697e <HAL_UART_Receive_IT>
		rx5_w_idx = (rx5_w_idx + 1) % sizeof(rx5buff);

		// UART5 RX 인터럽트 활성
		HAL_UART_Receive_IT(&huart5, &rx5data, 1);
	}
}
 80006fc:	e019      	b.n	8000732 <HAL_UART_RxCpltCallback+0x72>
	else if (huart->Instance == UART5)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <HAL_UART_RxCpltCallback+0x90>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d114      	bne.n	8000732 <HAL_UART_RxCpltCallback+0x72>
		rx5buff[rx5_w_idx] = rx5data;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_UART_RxCpltCallback+0x94>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <HAL_UART_RxCpltCallback+0x98>)
 8000710:	7819      	ldrb	r1, [r3, #0]
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_UART_RxCpltCallback+0x9c>)
 8000714:	5499      	strb	r1, [r3, r2]
		rx5_w_idx = (rx5_w_idx + 1) % sizeof(rx5buff);
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <HAL_UART_RxCpltCallback+0x94>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <HAL_UART_RxCpltCallback+0x94>)
 8000726:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, &rx5data, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	490b      	ldr	r1, [pc, #44]	@ (8000758 <HAL_UART_RxCpltCallback+0x98>)
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <HAL_UART_RxCpltCallback+0xa0>)
 800072e:	f006 f926 	bl	800697e <HAL_UART_Receive_IT>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40004400 	.word	0x40004400
 8000740:	20000110 	.word	0x20000110
 8000744:	2000008c 	.word	0x2000008c
 8000748:	20000090 	.word	0x20000090
 800074c:	200004bc 	.word	0x200004bc
 8000750:	40005000 	.word	0x40005000
 8000754:	20000194 	.word	0x20000194
 8000758:	20000111 	.word	0x20000111
 800075c:	20000114 	.word	0x20000114
 8000760:	20000474 	.word	0x20000474

08000764 <HAL_CAN_RxFifo0MsgPendingCallback>:

#include "can1.h"


// 수신된 CAN 메시지 처리
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	@ 0x30
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	f107 0210 	add.w	r2, r7, #16
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f002 ff49 	bl	800360e <HAL_CAN_GetRxMessage>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d11a      	bne.n	80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
        printf("Received ID: 0x%lX, Data: ", RxHeader.StdId);
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	4619      	mov	r1, r3
 8000786:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000788:	f007 f936 	bl	80079f8 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000790:	e00b      	b.n	80007aa <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
            printf("%02X ", RxData[i]);
 8000792:	f107 0208 	add.w	r2, r7, #8
 8000796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4809      	ldr	r0, [pc, #36]	@ (80007c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80007a0:	f007 f92a 	bl	80079f8 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++) {
 80007a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007a6:	3301      	adds	r3, #1
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007aa:	6a3a      	ldr	r2, [r7, #32]
 80007ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d8ef      	bhi.n	8000792 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
        }
        printf("\r\n");
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80007b4:	f007 f990 	bl	8007ad8 <puts>
    }
}
 80007b8:	bf00      	nop
 80007ba:	3730      	adds	r7, #48	@ 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08008bcc 	.word	0x08008bcc
 80007c4:	08008be8 	.word	0x08008be8
 80007c8:	08008bf0 	.word	0x08008bf0

080007cc <HAL_TIM_IC_CaptureCallback>:
uint32_t rising_time;
uint32_t falling_time;

// TIM1 CC 인터럽트 핸들러
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a20      	ldr	r2, [pc, #128]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x90>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d139      	bne.n	8000852 <HAL_TIM_IC_CaptureCallback+0x86>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7f1b      	ldrb	r3, [r3, #28]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d135      	bne.n	8000852 <HAL_TIM_IC_CaptureCallback+0x86>
	{
		if ((TIM1->CCER & TIM_CCER_CC3P) == 0)	// Rising Edge 감지
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <HAL_TIM_IC_CaptureCallback+0x90>)
 80007e8:	6a1b      	ldr	r3, [r3, #32]
 80007ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d117      	bne.n	8000822 <HAL_TIM_IC_CaptureCallback+0x56>
		{
			rising_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80007f2:	2108      	movs	r1, #8
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f005 fad5 	bl	8005da4 <HAL_TIM_ReadCapturedValue>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a18      	ldr	r2, [pc, #96]	@ (8000860 <HAL_TIM_IC_CaptureCallback+0x94>)
 80007fe:	6013      	str	r3, [r2, #0]
			// 다음에 Falling Edge 감지
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6a1a      	ldr	r2, [r3, #32]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800080e:	621a      	str	r2, [r3, #32]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6a1a      	ldr	r2, [r3, #32]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800081e:	621a      	str	r2, [r3, #32]
			// 다음에 Rising Edge 감지
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			is_capture_done = 1;
		}
	}
}
 8000820:	e017      	b.n	8000852 <HAL_TIM_IC_CaptureCallback+0x86>
			falling_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000822:	2108      	movs	r1, #8
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f005 fabd 	bl	8005da4 <HAL_TIM_ReadCapturedValue>
 800082a:	4603      	mov	r3, r0
 800082c:	4a0d      	ldr	r2, [pc, #52]	@ (8000864 <HAL_TIM_IC_CaptureCallback+0x98>)
 800082e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6a1a      	ldr	r2, [r3, #32]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800083e:	621a      	str	r2, [r3, #32]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6a12      	ldr	r2, [r2, #32]
 800084a:	621a      	str	r2, [r3, #32]
			is_capture_done = 1;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40010000 	.word	0x40010000
 8000860:	20000198 	.word	0x20000198
 8000864:	2000019c 	.word	0x2000019c
 8000868:	20000195 	.word	0x20000195

0800086c <LCD_Enable>:
#define LCD_D4 GPIOB, GPIO_PIN_5
#define LCD_D5 GPIOB, GPIO_PIN_4
#define LCD_D6 GPIOB, GPIO_PIN_10
#define LCD_D7 GPIOA, GPIO_PIN_8

void LCD_Enable() {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	4807      	ldr	r0, [pc, #28]	@ (8000894 <LCD_Enable+0x28>)
 8000876:	f003 fd53 	bl	8004320 <HAL_GPIO_WritePin>
    DelayUS(10);
 800087a:	200a      	movs	r0, #10
 800087c:	f7ff feea 	bl	8000654 <DelayUS>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	4803      	ldr	r0, [pc, #12]	@ (8000894 <LCD_Enable+0x28>)
 8000886:	f003 fd4b 	bl	8004320 <HAL_GPIO_WritePin>
    DelayUS(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f7ff fee2 	bl	8000654 <DelayUS>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40020800 	.word	0x40020800

08000898 <LCD_Send4Bit>:

void LCD_Send4Bit(uint8_t data) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	2120      	movs	r1, #32
 80008ae:	4816      	ldr	r0, [pc, #88]	@ (8000908 <LCD_Send4Bit+0x70>)
 80008b0:	f003 fd36 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	105b      	asrs	r3, r3, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	2110      	movs	r1, #16
 80008c4:	4810      	ldr	r0, [pc, #64]	@ (8000908 <LCD_Send4Bit+0x70>)
 80008c6:	f003 fd2b 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	109b      	asrs	r3, r3, #2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008dc:	480a      	ldr	r0, [pc, #40]	@ (8000908 <LCD_Send4Bit+0x70>)
 80008de:	f003 fd1f 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	10db      	asrs	r3, r3, #3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <LCD_Send4Bit+0x74>)
 80008f6:	f003 fd13 	bl	8004320 <HAL_GPIO_WritePin>
    LCD_Enable();
 80008fa:	f7ff ffb7 	bl	800086c <LCD_Enable>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40020400 	.word	0x40020400
 800090c:	40020000 	.word	0x40020000

08000910 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000920:	4809      	ldr	r0, [pc, #36]	@ (8000948 <LCD_SendCommand+0x38>)
 8000922:	f003 fcfd 	bl	8004320 <HAL_GPIO_WritePin>
    LCD_Send4Bit(cmd >> 4);
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	091b      	lsrs	r3, r3, #4
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffb3 	bl	8000898 <LCD_Send4Bit>
    LCD_Send4Bit(cmd & 0x0F);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f003 030f 	and.w	r3, r3, #15
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffac 	bl	8000898 <LCD_Send4Bit>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40020000 	.word	0x40020000

0800094c <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800095c:	4809      	ldr	r0, [pc, #36]	@ (8000984 <LCD_SendData+0x38>)
 800095e:	f003 fcdf 	bl	8004320 <HAL_GPIO_WritePin>
    LCD_Send4Bit(data >> 4);
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	091b      	lsrs	r3, r3, #4
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff95 	bl	8000898 <LCD_Send4Bit>
    LCD_Send4Bit(data & 0x0F);
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff8e 	bl	8000898 <LCD_Send4Bit>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40020000 	.word	0x40020000

08000988 <LCD_Init>:

void LCD_Init() {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    //HAL_Delay(50);
    LCD_SendCommand(0x28); // 4비트 모드, 2라인, 5x8 폰트
 800098c:	2028      	movs	r0, #40	@ 0x28
 800098e:	f7ff ffbf 	bl	8000910 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // 디스플레이 ON, 커서 OFF
 8000992:	200c      	movs	r0, #12
 8000994:	f7ff ffbc 	bl	8000910 <LCD_SendCommand>
    LCD_SendCommand(0x06); // 자동 이동, 오른쪽으로 이동
 8000998:	2006      	movs	r0, #6
 800099a:	f7ff ffb9 	bl	8000910 <LCD_SendCommand>
    LCD_SendCommand(0x01); // 화면 클리어
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff ffb6 	bl	8000910 <LCD_SendCommand>
    HAL_Delay(5);
 80009a4:	2005      	movs	r0, #5
 80009a6:	f002 f937 	bl	8002c18 <HAL_Delay>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}

080009ae <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	460a      	mov	r2, r1
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	4613      	mov	r3, r2
 80009bc:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = (row == 0) ? 0x80 + col : 0xC0 + col;
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d103      	bne.n	80009cc <LCD_SetCursor+0x1e>
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	3b80      	subs	r3, #128	@ 0x80
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	e002      	b.n	80009d2 <LCD_SetCursor+0x24>
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	3b40      	subs	r3, #64	@ 0x40
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(pos);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff9a 	bl	8000910 <LCD_SendCommand>
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <IsDifferent>:
static char lcd_line2[16+1];
static byte lcd_line1_changed;
static byte lcd_line2_changed;

static byte IsDifferent(char *a, char* b)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	uint8_t asize = strlen(a);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fc0e 	bl	8000210 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	72fb      	strb	r3, [r7, #11]
	uint8_t bsize = strlen(b);
 80009f8:	6838      	ldr	r0, [r7, #0]
 80009fa:	f7ff fc09 	bl	8000210 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	72bb      	strb	r3, [r7, #10]
	int i = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]

	while(TRUE)
	{
		if (i >= asize && i >= bsize) break;
 8000a06:	7afb      	ldrb	r3, [r7, #11]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	db03      	blt.n	8000a16 <IsDifferent+0x32>
 8000a0e:	7abb      	ldrb	r3, [r7, #10]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	da1f      	bge.n	8000a56 <IsDifferent+0x72>

		char ca = i < asize ? a[i] : 0;
 8000a16:	7afb      	ldrb	r3, [r7, #11]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	da04      	bge.n	8000a28 <IsDifferent+0x44>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e000      	b.n	8000a2a <IsDifferent+0x46>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	727b      	strb	r3, [r7, #9]
		char cb = i < bsize ? b[i] : 0;
 8000a2c:	7abb      	ldrb	r3, [r7, #10]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	da04      	bge.n	8000a3e <IsDifferent+0x5a>
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	e000      	b.n	8000a40 <IsDifferent+0x5c>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	723b      	strb	r3, [r7, #8]

		if (ca != cb) return TRUE;
 8000a42:	7a7a      	ldrb	r2, [r7, #9]
 8000a44:	7a3b      	ldrb	r3, [r7, #8]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d001      	beq.n	8000a4e <IsDifferent+0x6a>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e005      	b.n	8000a5a <IsDifferent+0x76>
		i++;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
	{
 8000a54:	e7d7      	b.n	8000a06 <IsDifferent+0x22>
		if (i >= asize && i >= bsize) break;
 8000a56:	bf00      	nop
	}
	return FALSE;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <SetLcdLine1>:

static void SetLcdLine1(char *str)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint8_t slen = strlen(str);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fbcf 	bl	8000210 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < sizeof(lcd_line1); i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e01b      	b.n	8000ab4 <SetLcdLine1+0x50>
	{
		if (i < slen && str[i])
 8000a7c:	7afb      	ldrb	r3, [r7, #11]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	da0f      	bge.n	8000aa4 <SetLcdLine1+0x40>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d009      	beq.n	8000aa4 <SetLcdLine1+0x40>
			lcd_line1[i] = str[i];
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	7819      	ldrb	r1, [r3, #0]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <SetLcdLine1+0x60>)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	460a      	mov	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e004      	b.n	8000aae <SetLcdLine1+0x4a>
		else
			lcd_line1[i] = 0;
 8000aa4:	4a07      	ldr	r2, [pc, #28]	@ (8000ac4 <SetLcdLine1+0x60>)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(lcd_line1); i++)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b10      	cmp	r3, #16
 8000ab8:	d9e0      	bls.n	8000a7c <SetLcdLine1+0x18>
	}
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001a0 	.word	0x200001a0

08000ac8 <SetLcdLine2>:

static void SetLcdLine2(char *str)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	uint8_t slen = strlen(str);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fb9d 	bl	8000210 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < sizeof(lcd_line2); i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e01b      	b.n	8000b18 <SetLcdLine2+0x50>
	{
		if (i < slen && str[i])
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	da0f      	bge.n	8000b08 <SetLcdLine2+0x40>
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d009      	beq.n	8000b08 <SetLcdLine2+0x40>
			lcd_line2[i] = str[i];
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	7819      	ldrb	r1, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <SetLcdLine2+0x60>)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	460a      	mov	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e004      	b.n	8000b12 <SetLcdLine2+0x4a>
		else
			lcd_line2[i] = 0;
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <SetLcdLine2+0x60>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(lcd_line2); i++)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3301      	adds	r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b10      	cmp	r3, #16
 8000b1c:	d9e0      	bls.n	8000ae0 <SetLcdLine2+0x18>
	}
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200001b4 	.word	0x200001b4

08000b2c <PrintLcdLine1>:


void PrintLcdLine1(char* str)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if (IsDifferent(lcd_line1, str))
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <PrintLcdLine1+0x2c>)
 8000b38:	f7ff ff54 	bl	80009e4 <IsDifferent>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <PrintLcdLine1+0x22>
	{
		SetLcdLine1(str);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff8e 	bl	8000a64 <SetLcdLine1>
		lcd_line1_changed = TRUE;
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <PrintLcdLine1+0x30>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200001a0 	.word	0x200001a0
 8000b5c:	200001c5 	.word	0x200001c5

08000b60 <PrintLcdLine2>:

void PrintLcdLine2(char* str)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if (IsDifferent(lcd_line2, str))
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <PrintLcdLine2+0x2c>)
 8000b6c:	f7ff ff3a 	bl	80009e4 <IsDifferent>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <PrintLcdLine2+0x22>
	{
		SetLcdLine2(str);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffa6 	bl	8000ac8 <SetLcdLine2>
		lcd_line2_changed = TRUE;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <PrintLcdLine2+0x30>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001b4 	.word	0x200001b4
 8000b90:	200001c6 	.word	0x200001c6

08000b94 <UpdateLcd>:

static void UpdateLcd()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	if (!lcd_line1_changed && !lcd_line2_changed)
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <UpdateLcd+0x70>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d103      	bne.n	8000baa <UpdateLcd+0x16>
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <UpdateLcd+0x74>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d028      	beq.n	8000bfc <UpdateLcd+0x68>
		return;

	lcd_line1_changed = FALSE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <UpdateLcd+0x70>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	lcd_line2_changed = FALSE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <UpdateLcd+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]

	LCD_Init();
 8000bb6:	f7ff fee7 	bl	8000988 <LCD_Init>
	char *c = &lcd_line1[0];
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <UpdateLcd+0x78>)
 8000bbc:	607b      	str	r3, [r7, #4]
	while(*c)
 8000bbe:	e006      	b.n	8000bce <UpdateLcd+0x3a>
		LCD_SendData(*c++);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff febf 	bl	800094c <LCD_SendData>
	while(*c)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f4      	bne.n	8000bc0 <UpdateLcd+0x2c>

	LCD_SetCursor(1, 0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff fee8 	bl	80009ae <LCD_SetCursor>
	c = &lcd_line2[0];
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <UpdateLcd+0x7c>)
 8000be0:	607b      	str	r3, [r7, #4]
	while(*c)
 8000be2:	e006      	b.n	8000bf2 <UpdateLcd+0x5e>
		LCD_SendData(*c++);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fead 	bl	800094c <LCD_SendData>
	while(*c)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f4      	bne.n	8000be4 <UpdateLcd+0x50>
 8000bfa:	e000      	b.n	8000bfe <UpdateLcd+0x6a>
		return;
 8000bfc:	bf00      	nop
}
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200001c5 	.word	0x200001c5
 8000c08:	200001c6 	.word	0x200001c6
 8000c0c:	200001a0 	.word	0x200001a0
 8000c10:	200001b4 	.word	0x200001b4

08000c14 <Read_ADC>:


// **ADC 버튼 읽기**
uint16_t Read_ADC(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <Read_ADC+0x24>)
 8000c1a:	f002 f865 	bl	8002ce8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <Read_ADC+0x24>)
 8000c24:	f002 f932 	bl	8002e8c <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8000c28:	4803      	ldr	r0, [pc, #12]	@ (8000c38 <Read_ADC+0x24>)
 8000c2a:	f002 f9ba 	bl	8002fa2 <HAL_ADC_GetValue>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29b      	uxth	r3, r3
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200001dc 	.word	0x200001dc

08000c3c <ReadKeypad>:


static uint8_t ReadKeypad()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	uint16_t adc = Read_ADC();
 8000c42:	f7ff ffe7 	bl	8000c14 <Read_ADC>
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
	if (adc < 100) return BTN_RIGHT;
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	2b63      	cmp	r3, #99	@ 0x63
 8000c4e:	d801      	bhi.n	8000c54 <ReadKeypad+0x18>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e017      	b.n	8000c84 <ReadKeypad+0x48>
	else if(adc < 200) return BTN_UP;
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	2bc7      	cmp	r3, #199	@ 0xc7
 8000c58:	d801      	bhi.n	8000c5e <ReadKeypad+0x22>
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	e012      	b.n	8000c84 <ReadKeypad+0x48>
	else if (adc < 400) return BTN_DOWN;
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000c64:	d201      	bcs.n	8000c6a <ReadKeypad+0x2e>
 8000c66:	2305      	movs	r3, #5
 8000c68:	e00c      	b.n	8000c84 <ReadKeypad+0x48>
	else if (adc < 600) return BTN_LEFT;
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000c70:	d201      	bcs.n	8000c76 <ReadKeypad+0x3a>
 8000c72:	2302      	movs	r3, #2
 8000c74:	e006      	b.n	8000c84 <ReadKeypad+0x48>
	else if (adc < 800) return BTN_SEL;
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000c7c:	d201      	bcs.n	8000c82 <ReadKeypad+0x46>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <ReadKeypad+0x48>
	else return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <InitLcdKeypadWork>:


void InitLcdKeypadWork()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	LCD_Init();
 8000c90:	f7ff fe7a 	bl	8000988 <LCD_Init>
	LCD_SetCursor(0,0);
 8000c94:	2100      	movs	r1, #0
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fe89 	bl	80009ae <LCD_SetCursor>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <DoLcdKeypadWork>:
static uint8_t btn_prev;
static uint32_t tm_first;
static uint8_t first_work;

void DoLcdKeypadWork()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
	if (!first_work && GetElapsedTick(tm_first) >= 1000)
 8000ca6:	4b37      	ldr	r3, [pc, #220]	@ (8000d84 <DoLcdKeypadWork+0xe4>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d111      	bne.n	8000cd2 <DoLcdKeypadWork+0x32>
 8000cae:	4b36      	ldr	r3, [pc, #216]	@ (8000d88 <DoLcdKeypadWork+0xe8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fc7c 	bl	80005b0 <GetElapsedTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cbe:	d308      	bcc.n	8000cd2 <DoLcdKeypadWork+0x32>
	{
		first_work = 1;
 8000cc0:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <DoLcdKeypadWork+0xe4>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
		PrintLcdLine1("1234");
 8000cc6:	4831      	ldr	r0, [pc, #196]	@ (8000d8c <DoLcdKeypadWork+0xec>)
 8000cc8:	f7ff ff30 	bl	8000b2c <PrintLcdLine1>
		PrintLcdLine2("ABCD");
 8000ccc:	4830      	ldr	r0, [pc, #192]	@ (8000d90 <DoLcdKeypadWork+0xf0>)
 8000cce:	f7ff ff47 	bl	8000b60 <PrintLcdLine2>
	}

	if (GetElapsedTick(tm_read_key) > 100)
 8000cd2:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <DoLcdKeypadWork+0xf4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fc6a 	bl	80005b0 <GetElapsedTick>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b64      	cmp	r3, #100	@ 0x64
 8000ce0:	d949      	bls.n	8000d76 <DoLcdKeypadWork+0xd6>
	{
		tm_read_key = HAL_GetTick();
 8000ce2:	f001 ff8d 	bl	8002c00 <HAL_GetTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d94 <DoLcdKeypadWork+0xf4>)
 8000cea:	6013      	str	r3, [r2, #0]

		uint8_t btn = ReadKeypad();
 8000cec:	f7ff ffa6 	bl	8000c3c <ReadKeypad>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	75fb      	strb	r3, [r7, #23]
		if (btn != btn_prev)
 8000cf4:	4b28      	ldr	r3, [pc, #160]	@ (8000d98 <DoLcdKeypadWork+0xf8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	7dfa      	ldrb	r2, [r7, #23]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d03b      	beq.n	8000d76 <DoLcdKeypadWork+0xd6>
		{
			btn_prev = btn;
 8000cfe:	4a26      	ldr	r2, [pc, #152]	@ (8000d98 <DoLcdKeypadWork+0xf8>)
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	7013      	strb	r3, [r2, #0]

			char msg[16+1] = {0};
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	731a      	strb	r2, [r3, #12]

			if (btn == BTN_LEFT) sprintf(msg, "LEFT");
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d105      	bne.n	8000d28 <DoLcdKeypadWork+0x88>
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	491f      	ldr	r1, [pc, #124]	@ (8000d9c <DoLcdKeypadWork+0xfc>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f006 fee1 	bl	8007ae8 <siprintf>
 8000d26:	e022      	b.n	8000d6e <DoLcdKeypadWork+0xce>
			else if (btn == BTN_RIGHT) sprintf(msg, "RIGHT");
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d105      	bne.n	8000d3a <DoLcdKeypadWork+0x9a>
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	491b      	ldr	r1, [pc, #108]	@ (8000da0 <DoLcdKeypadWork+0x100>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f006 fed8 	bl	8007ae8 <siprintf>
 8000d38:	e019      	b.n	8000d6e <DoLcdKeypadWork+0xce>
			else if (btn == BTN_UP) sprintf(msg, "UP");
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d105      	bne.n	8000d4c <DoLcdKeypadWork+0xac>
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4918      	ldr	r1, [pc, #96]	@ (8000da4 <DoLcdKeypadWork+0x104>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f006 fecf 	bl	8007ae8 <siprintf>
 8000d4a:	e010      	b.n	8000d6e <DoLcdKeypadWork+0xce>
			else if (btn == BTN_DOWN) sprintf(msg, "DOWN");
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d105      	bne.n	8000d5e <DoLcdKeypadWork+0xbe>
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4914      	ldr	r1, [pc, #80]	@ (8000da8 <DoLcdKeypadWork+0x108>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f006 fec6 	bl	8007ae8 <siprintf>
 8000d5c:	e007      	b.n	8000d6e <DoLcdKeypadWork+0xce>
			else if (btn == BTN_SEL) sprintf(msg, "SELECT");
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d104      	bne.n	8000d6e <DoLcdKeypadWork+0xce>
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4911      	ldr	r1, [pc, #68]	@ (8000dac <DoLcdKeypadWork+0x10c>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f006 febd 	bl	8007ae8 <siprintf>

			PrintLcdLine1(msg);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fedb 	bl	8000b2c <PrintLcdLine1>
	//char msg2[16+1] = {0};
	//snprintf(msg2, sizeof(msg2), "T%d.%d H%d.%d",
	//		Temp_byte1, Temp_byte2, Rh_byte1, Rh_byte2);
	//PrintLcdLine2(msg2);

	UpdateLcd();
 8000d76:	f7ff ff0d 	bl	8000b94 <UpdateLcd>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001d4 	.word	0x200001d4
 8000d88:	200001d0 	.word	0x200001d0
 8000d8c:	08008bfc 	.word	0x08008bfc
 8000d90:	08008c04 	.word	0x08008c04
 8000d94:	200001c8 	.word	0x200001c8
 8000d98:	200001cc 	.word	0x200001cc
 8000d9c:	08008c0c 	.word	0x08008c0c
 8000da0:	08008c14 	.word	0x08008c14
 8000da4:	08008c1c 	.word	0x08008c1c
 8000da8:	08008c20 	.word	0x08008c20
 8000dac:	08008c28 	.word	0x08008c28

08000db0 <ToggleRunLed>:
#define RGB_LED_G_PIN GPIO_PIN_1
#define RGB_LED_B_PIN GPIO_PIN_2


void ToggleRunLed()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RUN_LED_PORT, RUN_LED_PIN);
 8000db4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <ToggleRunLed+0x14>)
 8000dba:	f003 faca 	bl	8004352 <HAL_GPIO_TogglePin>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <ChangeRunLed>:

uint32_t tm_run_led = 0;
uint32_t run_led_interval = 500;

void ChangeRunLed()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	if (GetElapsedTick(tm_run_led) >= run_led_interval)
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <ChangeRunLed+0x2c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fbed 	bl	80005b0 <GetElapsedTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <ChangeRunLed+0x30>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d306      	bcc.n	8000dee <ChangeRunLed+0x26>
	{
		tm_run_led = HAL_GetTick();
 8000de0:	f001 ff0e 	bl	8002c00 <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4a03      	ldr	r2, [pc, #12]	@ (8000df4 <ChangeRunLed+0x2c>)
 8000de8:	6013      	str	r3, [r2, #0]
		ToggleRunLed();
 8000dea:	f7ff ffe1 	bl	8000db0 <ToggleRunLed>
	}
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001d8 	.word	0x200001d8
 8000df8:	20000000 	.word	0x20000000

08000dfc <DoLedWork>:
{
}


void DoLedWork()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	ChangeRunLed();
 8000e00:	f7ff ffe2 	bl	8000dc8 <ChangeRunLed>

	//ChangeRgbLed();
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f001 fe92 	bl	8002b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f81e 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 fb80 	bl	8001518 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e18:	f000 fb54 	bl	80014c4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e1c:	f000 fa62 	bl	80012e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e20:	f000 faae 	bl	8001380 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000e24:	f000 f99e 	bl	8001164 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000e28:	f000 f8c4 	bl	8000fb4 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000e2c:	f000 fa0e 	bl	800124c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e30:	f000 f86e 	bl	8000f10 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e34:	f000 f8f4 	bl	8001020 <MX_SPI1_Init>
  MX_UART5_Init();
 8000e38:	f000 fb1a 	bl	8001470 <MX_UART5_Init>
  MX_SPI2_Init();
 8000e3c:	f000 f926 	bl	800108c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e40:	f000 f95a 	bl	80010f8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  InitWork();
 8000e44:	f001 fe36 	bl	8002ab4 <InitWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DoWork();
 8000e48:	f001 fe40 	bl	8002acc <DoWork>
 8000e4c:	e7fc      	b.n	8000e48 <main+0x40>
	...

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	@ 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2234      	movs	r2, #52	@ 0x34
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 ff3a 	bl	8007cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	4a22      	ldr	r2, [pc, #136]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e84:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e90:	2300      	movs	r3, #0
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <SystemClock_Config+0xbc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <SystemClock_Config+0xbc>)
 8000e9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <SystemClock_Config+0xbc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fda9 	bl	8004a1c <HAL_RCC_OscConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ed0:	f000 fbcc 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 fa4a 	bl	8004388 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000efa:	f000 fbb7 	bl	800166c <Error_Handler>
  }
}
 8000efe:	bf00      	nop
 8000f00:	3750      	adds	r7, #80	@ 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000

08000f10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f24:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <MX_ADC1_Init+0x9c>)
 8000f26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f52:	4a17      	ldr	r2, [pc, #92]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f72:	f001 fe75 	bl	8002c60 <HAL_ADC_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f7c:	f000 fb76 	bl	800166c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_ADC1_Init+0x98>)
 8000f92:	f002 f813 	bl	8002fbc <HAL_ADC_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f9c:	f000 fb66 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001dc 	.word	0x200001dc
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	0f000001 	.word	0x0f000001

08000fb4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fba:	4a18      	ldr	r2, [pc, #96]	@ (800101c <MX_CAN1_Init+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fd2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000fd6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fde:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <MX_CAN1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <MX_CAN1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	@ (8001018 <MX_CAN1_Init+0x64>)
 8001006:	f002 fa07 	bl	8003418 <HAL_CAN_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001010:	f000 fb2c 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000224 	.word	0x20000224
 800101c:	40006400 	.word	0x40006400

08001020 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001026:	4a18      	ldr	r2, [pc, #96]	@ (8001088 <MX_SPI1_Init+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <MX_SPI1_Init+0x64>)
 800102c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_SPI1_Init+0x64>)
 800104c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001050:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001054:	2218      	movs	r2, #24
 8001056:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_SPI1_Init+0x64>)
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_SPI1_Init+0x64>)
 800106c:	220a      	movs	r2, #10
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001072:	f003 ff71 	bl	8004f58 <HAL_SPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800107c:	f000 faf6 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000024c 	.word	0x2000024c
 8001088:	40013000 	.word	0x40013000

0800108c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <MX_SPI2_Init+0x64>)
 8001092:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <MX_SPI2_Init+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <MX_SPI2_Init+0x64>)
 8001098:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800109c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010c0:	2218      	movs	r2, #24
 80010c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010d8:	220a      	movs	r2, #10
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <MX_SPI2_Init+0x64>)
 80010de:	f003 ff3b 	bl	8004f58 <HAL_SPI_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010e8:	f000 fac0 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200002a4 	.word	0x200002a4
 80010f4:	40003800 	.word	0x40003800

080010f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_SPI3_Init+0x64>)
 80010fe:	4a18      	ldr	r2, [pc, #96]	@ (8001160 <MX_SPI3_Init+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_SPI3_Init+0x64>)
 8001104:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001108:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_SPI3_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_SPI3_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_SPI3_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_SPI3_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <MX_SPI3_Init+0x64>)
 8001124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001128:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <MX_SPI3_Init+0x64>)
 800112c:	2218      	movs	r2, #24
 800112e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <MX_SPI3_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MX_SPI3_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <MX_SPI3_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <MX_SPI3_Init+0x64>)
 8001144:	220a      	movs	r2, #10
 8001146:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <MX_SPI3_Init+0x64>)
 800114a:	f003 ff05 	bl	8004f58 <HAL_SPI_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001154:	f000 fa8a 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002fc 	.word	0x200002fc
 8001160:	40003c00 	.word	0x40003c00

08001164 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_TIM1_Init+0xe0>)
 8001190:	4a2d      	ldr	r2, [pc, #180]	@ (8001248 <MX_TIM1_Init+0xe4>)
 8001192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <MX_TIM1_Init+0xe0>)
 8001196:	220f      	movs	r2, #15
 8001198:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <MX_TIM1_Init+0xe0>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011a0:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <MX_TIM1_Init+0xe0>)
 80011a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <MX_TIM1_Init+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ae:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <MX_TIM1_Init+0xe0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <MX_TIM1_Init+0xe0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ba:	4822      	ldr	r0, [pc, #136]	@ (8001244 <MX_TIM1_Init+0xe0>)
 80011bc:	f004 f9da 	bl	8005574 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80011c6:	f000 fa51 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4619      	mov	r1, r3
 80011d6:	481b      	ldr	r0, [pc, #108]	@ (8001244 <MX_TIM1_Init+0xe0>)
 80011d8:	f004 fd1c 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011e2:	f000 fa43 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011e6:	4817      	ldr	r0, [pc, #92]	@ (8001244 <MX_TIM1_Init+0xe0>)
 80011e8:	f004 fa6c 	bl	80056c4 <HAL_TIM_IC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011f2:	f000 fa3b 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	480f      	ldr	r0, [pc, #60]	@ (8001244 <MX_TIM1_Init+0xe0>)
 8001206:	f005 fa4f 	bl	80066a8 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001210:	f000 fa2c 	bl	800166c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001214:	2300      	movs	r3, #0
 8001216:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001218:	2301      	movs	r3, #1
 800121a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	2208      	movs	r2, #8
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <MX_TIM1_Init+0xe0>)
 800122c:	f004 fb93 	bl	8005956 <HAL_TIM_IC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001236:	f000 fa19 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	@ 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000354 	.word	0x20000354
 8001248:	40010000 	.word	0x40010000

0800124c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001268:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_TIM2_Init+0x94>)
 800126a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800126e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_TIM2_Init+0x94>)
 8001272:	220f      	movs	r2, #15
 8001274:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_TIM2_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_TIM2_Init+0x94>)
 800127e:	f04f 32ff 	mov.w	r2, #4294967295
 8001282:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_TIM2_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_TIM2_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001290:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <MX_TIM2_Init+0x94>)
 8001292:	f004 f96f 	bl	8005574 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800129c:	f000 f9e6 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <MX_TIM2_Init+0x94>)
 80012ae:	f004 fcb1 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012b8:	f000 f9d8 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_TIM2_Init+0x94>)
 80012ca:	f005 f9ed 	bl	80066a8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012d4:	f000 f9ca 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000039c 	.word	0x2000039c

080012e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  // 1 msec 주기
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_TIM3_Init+0x94>)
 8001302:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <MX_TIM3_Init+0x98>)
 8001304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_TIM3_Init+0x94>)
 8001308:	220f      	movs	r2, #15
 800130a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_TIM3_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_TIM3_Init+0x94>)
 8001314:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001318:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_TIM3_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <MX_TIM3_Init+0x94>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001326:	4814      	ldr	r0, [pc, #80]	@ (8001378 <MX_TIM3_Init+0x94>)
 8001328:	f004 f924 	bl	8005574 <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001332:	f000 f99b 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	4619      	mov	r1, r3
 8001342:	480d      	ldr	r0, [pc, #52]	@ (8001378 <MX_TIM3_Init+0x94>)
 8001344:	f004 fc66 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800134e:	f000 f98d 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	@ (8001378 <MX_TIM3_Init+0x94>)
 8001360:	f005 f9a2 	bl	80066a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800136a:	f000 f97f 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200003e4 	.word	0x200003e4
 800137c:	40000400 	.word	0x40000400

08001380 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08e      	sub	sp, #56	@ 0x38
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <MX_TIM4_Init+0xe8>)
 80013b2:	4a2e      	ldr	r2, [pc, #184]	@ (800146c <MX_TIM4_Init+0xec>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <MX_TIM4_Init+0xe8>)
 80013b8:	220f      	movs	r2, #15
 80013ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <MX_TIM4_Init+0xe8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80013c2:	4b29      	ldr	r3, [pc, #164]	@ (8001468 <MX_TIM4_Init+0xe8>)
 80013c4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <MX_TIM4_Init+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b25      	ldr	r3, [pc, #148]	@ (8001468 <MX_TIM4_Init+0xe8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013d6:	4824      	ldr	r0, [pc, #144]	@ (8001468 <MX_TIM4_Init+0xe8>)
 80013d8:	f004 f8cc 	bl	8005574 <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80013e2:	f000 f943 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f0:	4619      	mov	r1, r3
 80013f2:	481d      	ldr	r0, [pc, #116]	@ (8001468 <MX_TIM4_Init+0xe8>)
 80013f4:	f004 fc0e 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013fe:	f000 f935 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001402:	4819      	ldr	r0, [pc, #100]	@ (8001468 <MX_TIM4_Init+0xe8>)
 8001404:	f004 f905 	bl	8005612 <HAL_TIM_PWM_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800140e:	f000 f92d 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	4619      	mov	r1, r3
 8001420:	4811      	ldr	r0, [pc, #68]	@ (8001468 <MX_TIM4_Init+0xe8>)
 8001422:	f005 f941 	bl	80066a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800142c:	f000 f91e 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001430:	2360      	movs	r3, #96	@ 0x60
 8001432:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8001434:	f240 53db 	movw	r3, #1499	@ 0x5db
 8001438:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <MX_TIM4_Init+0xe8>)
 800144a:	f004 fb21 	bl	8005a90 <HAL_TIM_PWM_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001454:	f000 f90a 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <MX_TIM4_Init+0xe8>)
 800145a:	f001 f92b 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 800145e:	bf00      	nop
 8001460:	3738      	adds	r7, #56	@ 0x38
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000042c 	.word	0x2000042c
 800146c:	40000800 	.word	0x40000800

08001470 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_UART5_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <MX_UART5_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <MX_UART5_Init+0x4c>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_UART5_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_UART5_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_UART5_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_UART5_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_UART5_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_UART5_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_UART5_Init+0x4c>)
 80014a8:	f005 f98e 	bl	80067c8 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 f8db 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000474 	.word	0x20000474
 80014c0:	40005000 	.word	0x40005000

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f005 f964 	bl	80067c8 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f8b1 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200004bc 	.word	0x200004bc
 8001514:	40004400 	.word	0x40004400

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <MX_GPIO_Init+0x144>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a49      	ldr	r2, [pc, #292]	@ (800165c <MX_GPIO_Init+0x144>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b47      	ldr	r3, [pc, #284]	@ (800165c <MX_GPIO_Init+0x144>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b43      	ldr	r3, [pc, #268]	@ (800165c <MX_GPIO_Init+0x144>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a42      	ldr	r2, [pc, #264]	@ (800165c <MX_GPIO_Init+0x144>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b40      	ldr	r3, [pc, #256]	@ (800165c <MX_GPIO_Init+0x144>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b3c      	ldr	r3, [pc, #240]	@ (800165c <MX_GPIO_Init+0x144>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a3b      	ldr	r2, [pc, #236]	@ (800165c <MX_GPIO_Init+0x144>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b39      	ldr	r3, [pc, #228]	@ (800165c <MX_GPIO_Init+0x144>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b35      	ldr	r3, [pc, #212]	@ (800165c <MX_GPIO_Init+0x144>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a34      	ldr	r2, [pc, #208]	@ (800165c <MX_GPIO_Init+0x144>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b32      	ldr	r3, [pc, #200]	@ (800165c <MX_GPIO_Init+0x144>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <MX_GPIO_Init+0x144>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a2d      	ldr	r2, [pc, #180]	@ (800165c <MX_GPIO_Init+0x144>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <MX_GPIO_Init+0x144>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_4
 80015ba:	2200      	movs	r2, #0
 80015bc:	f240 7136 	movw	r1, #1846	@ 0x736
 80015c0:	4827      	ldr	r0, [pc, #156]	@ (8001660 <MX_GPIO_Init+0x148>)
 80015c2:	f002 fead 	bl	8004320 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80015cc:	4825      	ldr	r0, [pc, #148]	@ (8001664 <MX_GPIO_Init+0x14c>)
 80015ce:	f002 fea7 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80015d8:	4823      	ldr	r0, [pc, #140]	@ (8001668 <MX_GPIO_Init+0x150>)
 80015da:	f002 fea1 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	481c      	ldr	r0, [pc, #112]	@ (8001664 <MX_GPIO_Init+0x14c>)
 80015f4:	f002 fd00 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_4
 80015f8:	f240 7336 	movw	r3, #1846	@ 0x736
 80015fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4813      	ldr	r0, [pc, #76]	@ (8001660 <MX_GPIO_Init+0x148>)
 8001612:	f002 fcf1 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001616:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <MX_GPIO_Init+0x14c>)
 8001630:	f002 fce2 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001634:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <MX_GPIO_Init+0x150>)
 800164e:	f002 fcd3 	bl	8003ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	@ 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020000 	.word	0x40020000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <Error_Handler+0x8>

08001678 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b0c8      	sub	sp, #288	@ 0x120
 800167c:	af00      	add	r7, sp, #0
 800167e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001682:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001686:	6018      	str	r0, [r3, #0]
 8001688:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800168c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001690:	6019      	str	r1, [r3, #0]
 8001692:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001696:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800169a:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 800169c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016a0:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	2bff      	cmp	r3, #255	@ 0xff
 80016a8:	d806      	bhi.n	80016b8 <PN532_WriteFrame+0x40>
 80016aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016ae:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	e0aa      	b.n	8001814 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 80016c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80016d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016d8:	2200      	movs	r2, #0
 80016da:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80016dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016e4:	22ff      	movs	r2, #255	@ 0xff
 80016e6:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80016ee:	e010      	b.n	8001712 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 80016f0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80016f4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80016f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80016fc:	5cd2      	ldrb	r2, [r2, r3]
 80016fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001702:	4413      	add	r3, r2
 8001704:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8001708:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800170c:	3301      	adds	r3, #1
 800170e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001712:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001716:	2b02      	cmp	r3, #2
 8001718:	d9ea      	bls.n	80016f0 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 800171a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800171e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800172a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800172e:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8001730:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001734:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	425b      	negs	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001744:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001748:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8001750:	e023      	b.n	800179a <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8001752:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001756:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800175a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	441a      	add	r2, r3
 8001762:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001766:	3305      	adds	r3, #5
 8001768:	7811      	ldrb	r1, [r2, #0]
 800176a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800176e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001772:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8001774:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001778:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800177c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	4413      	add	r3, r2
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800178a:	4413      	add	r3, r2
 800178c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8001790:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001794:	3301      	adds	r3, #1
 8001796:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800179a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80017a4:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80017a8:	8812      	ldrh	r2, [r2, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d8d1      	bhi.n	8001752 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 80017ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017b2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	3305      	adds	r3, #5
 80017ba:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 80017be:	43d2      	mvns	r2, r2
 80017c0:	b2d1      	uxtb	r1, r2
 80017c2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80017c6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80017ca:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 80017cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017d0:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	3306      	adds	r3, #6
 80017d8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80017dc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80017e0:	2100      	movs	r1, #0
 80017e2:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80017e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80017f4:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80017f8:	8812      	ldrh	r2, [r2, #0]
 80017fa:	3207      	adds	r2, #7
 80017fc:	b291      	uxth	r1, r2
 80017fe:	f107 0214 	add.w	r2, r7, #20
 8001802:	4610      	mov	r0, r2
 8001804:	4798      	blx	r3
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	e000      	b.n	8001814 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b0c8      	sub	sp, #288	@ 0x120
 8001824:	af00      	add	r7, sp, #0
 8001826:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800182a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800182e:	6018      	str	r0, [r3, #0]
 8001830:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001834:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001838:	6019      	str	r1, [r3, #0]
 800183a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800183e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001842:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 800184a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800184e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800185a:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 800185e:	8812      	ldrh	r2, [r2, #0]
 8001860:	3207      	adds	r2, #7
 8001862:	b291      	uxth	r1, r2
 8001864:	f107 0214 	add.w	r2, r7, #20
 8001868:	4610      	mov	r0, r2
 800186a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8001872:	e019      	b.n	80018a8 <PN532_ReadFrame+0x88>
        offset += 1;
 8001874:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001878:	3301      	adds	r3, #1
 800187a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 800187e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001882:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	1dda      	adds	r2, r3, #7
 800188a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800188e:	429a      	cmp	r2, r3
 8001890:	da0a      	bge.n	80018a8 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8001892:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001896:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	485b      	ldr	r0, [pc, #364]	@ (8001a0c <PN532_ReadFrame+0x1ec>)
 80018a0:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e0ab      	b.n	8001a00 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 80018a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80018ac:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80018b0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0dc      	beq.n	8001874 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 80018ba:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80018be:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80018c2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	2bff      	cmp	r3, #255	@ 0xff
 80018ca:	d00a      	beq.n	80018e2 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 80018cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	484c      	ldr	r0, [pc, #304]	@ (8001a0c <PN532_ReadFrame+0x1ec>)
 80018da:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	e08e      	b.n	8001a00 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 80018e2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80018e6:	3301      	adds	r3, #1
 80018e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 80018ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018f0:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	1dda      	adds	r2, r3, #7
 80018f8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80018fc:	429a      	cmp	r2, r3
 80018fe:	da0a      	bge.n	8001916 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8001900:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001904:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	4840      	ldr	r0, [pc, #256]	@ (8001a10 <PN532_ReadFrame+0x1f0>)
 800190e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
 8001914:	e074      	b.n	8001a00 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8001916:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800191a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800191e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8001928:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800192c:	3301      	adds	r3, #1
 800192e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001932:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001936:	5cd2      	ldrb	r2, [r2, r3]
 8001938:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800193c:	4413      	add	r3, r2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00a      	beq.n	800195a <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8001944:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001948:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	4830      	ldr	r0, [pc, #192]	@ (8001a14 <PN532_ReadFrame+0x1f4>)
 8001952:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	e052      	b.n	8001a00 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800195a:	2300      	movs	r3, #0
 800195c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8001960:	e014      	b.n	800198c <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8001962:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001966:	1c9a      	adds	r2, r3, #2
 8001968:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800196c:	4413      	add	r3, r2
 800196e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001972:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001976:	5cd2      	ldrb	r2, [r2, r3]
 8001978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800197c:	4413      	add	r3, r2
 800197e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8001982:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001986:	3301      	adds	r3, #1
 8001988:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800198c:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8001990:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001994:	429a      	cmp	r2, r3
 8001996:	d2e4      	bcs.n	8001962 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8001998:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00a      	beq.n	80019b6 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 80019a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80019a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	481a      	ldr	r0, [pc, #104]	@ (8001a18 <PN532_ReadFrame+0x1f8>)
 80019ae:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
 80019b4:	e024      	b.n	8001a00 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 80019bc:	e018      	b.n	80019f0 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 80019be:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80019c2:	1c9a      	adds	r2, r3, #2
 80019c4:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 80019c8:	441a      	add	r2, r3
 80019ca:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 80019ce:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80019d2:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 80019d6:	6809      	ldr	r1, [r1, #0]
 80019d8:	440b      	add	r3, r1
 80019da:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80019de:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80019e2:	5c8a      	ldrb	r2, [r1, r2]
 80019e4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 80019e6:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 80019ea:	3301      	adds	r3, #1
 80019ec:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 80019f0:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 80019f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d3e0      	bcc.n	80019be <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 80019fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	08008c30 	.word	0x08008c30
 8001a10:	08008c64 	.word	0x08008c64
 8001a14:	08008c80 	.word	0x08008c80
 8001a18:	08008cb0 	.word	0x08008cb0

08001a1c <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b0c7      	sub	sp, #284	@ 0x11c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8001a26:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8001a2a:	6020      	str	r0, [r4, #0]
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001a32:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8001a36:	600a      	str	r2, [r1, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a3e:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8001a42:	4602      	mov	r2, r0
 8001a44:	701a      	strb	r2, [r3, #0]
 8001a46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a4e:	460a      	mov	r2, r1
 8001a50:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8001a52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a5a:	22d4      	movs	r2, #212	@ 0xd4
 8001a5c:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8001a5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a66:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001a6a:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001a78:	e012      	b.n	8001aa0 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8001a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001a7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8001a82:	441a      	add	r2, r3
 8001a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001a88:	3302      	adds	r3, #2
 8001a8a:	7811      	ldrb	r1, [r2, #0]
 8001a8c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001a90:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001a94:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8001a96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d8e5      	bhi.n	8001a7a <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8001aae:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	f107 0110 	add.w	r1, r7, #16
 8001aba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001abe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	f7ff fdd8 	bl	8001678 <PN532_WriteFrame>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d011      	beq.n	8001af2 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8001ace:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ad2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8001adc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ae0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	485b      	ldr	r0, [pc, #364]	@ (8001c58 <PN532_CallFunction+0x23c>)
 8001aea:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	e0ac      	b.n	8001c4c <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8001af2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001af6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001b02:	4798      	blx	r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	f083 0301 	eor.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295
 8001b14:	e09a      	b.n	8001c4c <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8001b16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f107 0210 	add.w	r2, r7, #16
 8001b26:	2106      	movs	r1, #6
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001b32:	e01c      	b.n	8001b6e <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8001b34:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001b38:	4a48      	ldr	r2, [pc, #288]	@ (8001c5c <PN532_CallFunction+0x240>)
 8001b3a:	5cd2      	ldrb	r2, [r2, r3]
 8001b3c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001b40:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001b44:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d00a      	beq.n	8001b64 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8001b4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4841      	ldr	r0, [pc, #260]	@ (8001c60 <PN532_CallFunction+0x244>)
 8001b5c:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e073      	b.n	8001c4c <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001b64:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001b6e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d9de      	bls.n	8001b34 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8001b76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001b86:	4798      	blx	r3
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f083 0301 	eor.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	e058      	b.n	8001c4c <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8001b9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b9e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	f107 0110 	add.w	r1, r7, #16
 8001bac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f7ff fe33 	bl	8001820 <PN532_ReadFrame>
 8001bba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8001bbe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2bd5      	cmp	r3, #213	@ 0xd5
 8001bca:	d10d      	bne.n	8001be8 <PN532_CallFunction+0x1cc>
 8001bcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bdc:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d00a      	beq.n	8001bfe <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8001be8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	481b      	ldr	r0, [pc, #108]	@ (8001c64 <PN532_CallFunction+0x248>)
 8001bf6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	e026      	b.n	8001c4c <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8001c04:	e015      	b.n	8001c32 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8001c06:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001c0a:	1c9a      	adds	r2, r3, #2
 8001c0c:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001c10:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001c14:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8001c18:	6809      	ldr	r1, [r1, #0]
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001c20:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8001c24:	5c8a      	ldrb	r2, [r1, r2]
 8001c26:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8001c28:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8001c32:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001c3c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c40:	8812      	ldrh	r2, [r2, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d8df      	bhi.n	8001c06 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8001c46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c4a:	3b02      	subs	r3, #2
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08008ce4 	.word	0x08008ce4
 8001c5c:	08008e34 	.word	0x08008e34
 8001c60:	08008cf8 	.word	0x08008cf8
 8001c64:	08008d24 	.word	0x08008d24

08001c68 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af04      	add	r7, sp, #16
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8001c72:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2304      	movs	r3, #4
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	2102      	movs	r1, #2
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fec8 	bl	8001a1c <PN532_CallFunction>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c92:	d106      	bne.n	8001ca2 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	4804      	ldr	r0, [pc, #16]	@ (8001cac <PN532_GetFirmwareVersion+0x44>)
 8001c9a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	e000      	b.n	8001ca4 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	08008d4c 	.word	0x08008d4c

08001cb0 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af04      	add	r7, sp, #16
 8001cb6:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <PN532_SamConfiguration+0x40>)
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	8019      	strh	r1, [r3, #0]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	0c12      	lsrs	r2, r2, #16
 8001cc8:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8001cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2114      	movs	r1, #20
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fe9b 	bl	8001a1c <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	08008d68 	.word	0x08008d68

08001cf4 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b090      	sub	sp, #64	@ 0x40
 8001cf8:	af04      	add	r7, sp, #16
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	2302      	movs	r3, #2
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2313      	movs	r3, #19
 8001d24:	214a      	movs	r1, #74	@ 0x4a
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff fe78 	bl	8001a1c <PN532_CallFunction>
 8001d2c:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8001d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da02      	bge.n	8001d3a <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e02e      	b.n	8001d98 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8001d3a:	7c3b      	ldrb	r3, [r7, #16]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d006      	beq.n	8001d4e <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	4816      	ldr	r0, [pc, #88]	@ (8001da0 <PN532_ReadPassiveTarget+0xac>)
 8001d46:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	e024      	b.n	8001d98 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8001d4e:	7d7b      	ldrb	r3, [r7, #21]
 8001d50:	2b07      	cmp	r3, #7
 8001d52:	d906      	bls.n	8001d62 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <PN532_ReadPassiveTarget+0xb0>)
 8001d5a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	e01a      	b.n	8001d98 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001d68:	e010      	b.n	8001d8c <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8001d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d6e:	1d9a      	adds	r2, r3, #6
 8001d70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	440b      	add	r3, r1
 8001d78:	3230      	adds	r2, #48	@ 0x30
 8001d7a:	443a      	add	r2, r7
 8001d7c:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001d80:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8001d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d86:	3301      	adds	r3, #1
 8001d88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001d8c:	7d7b      	ldrb	r3, [r7, #21]
 8001d8e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d3e9      	bcc.n	8001d6a <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8001d96:	7d7b      	ldrb	r3, [r7, #21]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3730      	adds	r7, #48	@ 0x30
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	08008d6c 	.word	0x08008d6c
 8001da4:	08008d8c 	.word	0x08008d8c

08001da8 <PN532_Reset>:


/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001db2:	480e      	ldr	r0, [pc, #56]	@ (8001dec <PN532_Reset+0x44>)
 8001db4:	f002 fab4 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001db8:	2064      	movs	r0, #100	@ 0x64
 8001dba:	f000 ff2d 	bl	8002c18 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dc4:	4809      	ldr	r0, [pc, #36]	@ (8001dec <PN532_Reset+0x44>)
 8001dc6:	f002 faab 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001dca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dce:	f000 ff23 	bl	8002c18 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dd8:	4804      	ldr	r0, [pc, #16]	@ (8001dec <PN532_Reset+0x44>)
 8001dda:	f002 faa1 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001dde:	2064      	movs	r0, #100	@ 0x64
 8001de0:	f000 ff1a 	bl	8002c18 <HAL_Delay>
    return PN532_STATUS_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020800 	.word	0x40020800

08001df0 <PN532_Log>:

void PN532_Log(const char* log) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <PN532_Log+0x18>)
 8001dfc:	f005 fdfc 	bl	80079f8 <iprintf>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	08008db4 	.word	0x08008db4

08001e0c <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e1e:	480e      	ldr	r0, [pc, #56]	@ (8001e58 <spi_rw+0x4c>)
 8001e20:	f002 fa7e 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001e24:	2001      	movs	r0, #1
 8001e26:	f000 fef7 	bl	8002c18 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	220a      	movs	r2, #10
 8001e30:	9200      	str	r2, [sp, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4809      	ldr	r0, [pc, #36]	@ (8001e5c <spi_rw+0x50>)
 8001e38:	f003 f917 	bl	800506a <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f000 feeb 	bl	8002c18 <HAL_Delay>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e48:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <spi_rw+0x4c>)
 8001e4a:	f002 fa69 	bl	8004320 <HAL_GPIO_WritePin>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	2000024c 	.word	0x2000024c

08001e60 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8001e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	807b      	strh	r3, [r7, #2]
 8001e6e:	466b      	mov	r3, sp
 8001e70:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	1c59      	adds	r1, r3, #1
 8001e76:	1e4b      	subs	r3, r1, #1
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	460a      	mov	r2, r1
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	4690      	mov	r8, r2
 8001e80:	4699      	mov	r9, r3
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e96:	460a      	mov	r2, r1
 8001e98:	2300      	movs	r3, #0
 8001e9a:	4614      	mov	r4, r2
 8001e9c:	461d      	mov	r5, r3
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	00eb      	lsls	r3, r5, #3
 8001ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eac:	00e2      	lsls	r2, r4, #3
 8001eae:	460b      	mov	r3, r1
 8001eb0:	3307      	adds	r3, #7
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	ebad 0d03 	sub.w	sp, sp, r3
 8001eba:	466b      	mov	r3, sp
 8001ebc:	3300      	adds	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8001ec6:	2005      	movs	r0, #5
 8001ec8:	f000 fea6 	bl	8002c18 <HAL_Delay>
    spi_rw(frame, count + 1);
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff ff98 	bl	8001e0c <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	75fb      	strb	r3, [r7, #23]
 8001ee0:	e00a      	b.n	8001ef8 <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	440b      	add	r3, r1
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	5c8a      	ldrb	r2, [r1, r2]
 8001ef0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	75fb      	strb	r3, [r7, #23]
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	887a      	ldrh	r2, [r7, #2]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d8ef      	bhi.n	8001ee2 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	46b5      	mov	sp, r6
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001f10 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8001f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	807b      	strh	r3, [r7, #2]
 8001f1e:	466b      	mov	r3, sp
 8001f20:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	1c59      	adds	r1, r3, #1
 8001f26:	1e4b      	subs	r3, r1, #1
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4690      	mov	r8, r2
 8001f30:	4699      	mov	r9, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f46:	460a      	mov	r2, r1
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	00eb      	lsls	r3, r5, #3
 8001f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f5c:	00e2      	lsls	r2, r4, #3
 8001f5e:	460b      	mov	r3, r1
 8001f60:	3307      	adds	r3, #7
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	ebad 0d03 	sub.w	sp, sp, r3
 8001f6a:	466b      	mov	r3, sp
 8001f6c:	3300      	adds	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
 8001f7a:	e00a      	b.n	8001f92 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	441a      	add	r2, r3
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	3301      	adds	r3, #1
 8001f86:	7811      	ldrb	r1, [r2, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d8ef      	bhi.n	8001f7c <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8001f9c:	887b      	ldrh	r3, [r7, #2]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff ff30 	bl	8001e0c <spi_rw>
    return PN532_STATUS_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	46b5      	mov	sp, r6
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001fba <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8001fc6:	f000 fe1b 	bl	8002c00 <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001fcc:	e010      	b.n	8001ff0 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f000 fe22 	bl	8002c18 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff16 	bl	8001e0c <spi_rw>
        if (status[1] == _SPI_READY) {
 8001fe0:	7a7b      	ldrb	r3, [r7, #9]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <PN532_SPI_WaitReady+0x30>
            return true;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00b      	b.n	8002002 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 8001fea:	2005      	movs	r0, #5
 8001fec:	f000 fe14 	bl	8002c18 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8001ff0:	f000 fe06 	bl	8002c00 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8e6      	bhi.n	8001fce <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8002012:	2300      	movs	r3, #0
 8002014:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8002016:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800201a:	f000 fdfd 	bl	8002c18 <HAL_Delay>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002024:	4809      	ldr	r0, [pc, #36]	@ (800204c <PN532_SPI_Wakeup+0x40>)
 8002026:	f002 f97b 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 800202a:	2002      	movs	r0, #2
 800202c:	f000 fdf4 	bl	8002c18 <HAL_Delay>
    spi_rw(data, 1);
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2101      	movs	r1, #1
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fee9 	bl	8001e0c <spi_rw>
    HAL_Delay(1000);
 800203a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800203e:	f000 fdeb 	bl	8002c18 <HAL_Delay>
    return PN532_STATUS_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40020400 	.word	0x40020400

08002050 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a0c      	ldr	r2, [pc, #48]	@ (800208c <PN532_SPI_Init+0x3c>)
 800205c:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0b      	ldr	r2, [pc, #44]	@ (8002090 <PN532_SPI_Init+0x40>)
 8002062:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <PN532_SPI_Init+0x44>)
 8002068:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <PN532_SPI_Init+0x48>)
 800206e:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <PN532_SPI_Init+0x4c>)
 8002074:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a09      	ldr	r2, [pc, #36]	@ (80020a0 <PN532_SPI_Init+0x50>)
 800207a:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	4798      	blx	r3
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	08001da9 	.word	0x08001da9
 8002090:	08001e61 	.word	0x08001e61
 8002094:	08001f11 	.word	0x08001f11
 8002098:	08001fbb 	.word	0x08001fbb
 800209c:	0800200d 	.word	0x0800200d
 80020a0:	08001df1 	.word	0x08001df1

080020a4 <InitRfidWork>:
uint8_t buff[255];
uint8_t uid[MIFARE_UID_MAX_LENGTH];
int32_t uid_len = 0;

void InitRfidWork()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  printf("Hello!\r\n");
 80020a8:	4811      	ldr	r0, [pc, #68]	@ (80020f0 <InitRfidWork+0x4c>)
 80020aa:	f005 fd15 	bl	8007ad8 <puts>

  PN532_SPI_Init(&pn532);
 80020ae:	4811      	ldr	r0, [pc, #68]	@ (80020f4 <InitRfidWork+0x50>)
 80020b0:	f7ff ffce 	bl	8002050 <PN532_SPI_Init>

  PN532_GetFirmwareVersion(&pn532, buff);
 80020b4:	4910      	ldr	r1, [pc, #64]	@ (80020f8 <InitRfidWork+0x54>)
 80020b6:	480f      	ldr	r0, [pc, #60]	@ (80020f4 <InitRfidWork+0x50>)
 80020b8:	f7ff fdd6 	bl	8001c68 <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 80020bc:	490e      	ldr	r1, [pc, #56]	@ (80020f8 <InitRfidWork+0x54>)
 80020be:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <InitRfidWork+0x50>)
 80020c0:	f7ff fdd2 	bl	8001c68 <PN532_GetFirmwareVersion>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <InitRfidWork+0x46>
	printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 80020ca:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <InitRfidWork+0x54>)
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	4619      	mov	r1, r3
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <InitRfidWork+0x54>)
 80020d2:	789b      	ldrb	r3, [r3, #2]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4809      	ldr	r0, [pc, #36]	@ (80020fc <InitRfidWork+0x58>)
 80020d8:	f005 fc8e 	bl	80079f8 <iprintf>
  } else {
	return;
  }
  PN532_SamConfiguration(&pn532);
 80020dc:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <InitRfidWork+0x50>)
 80020de:	f7ff fde7 	bl	8001cb0 <PN532_SamConfiguration>
  printf("Waiting for RFID/NFC card...\r\n");
 80020e2:	4807      	ldr	r0, [pc, #28]	@ (8002100 <InitRfidWork+0x5c>)
 80020e4:	f005 fcf8 	bl	8007ad8 <puts>
 80020e8:	e000      	b.n	80020ec <InitRfidWork+0x48>
	return;
 80020ea:	bf00      	nop
}
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	08008dbc 	.word	0x08008dbc
 80020f4:	20000504 	.word	0x20000504
 80020f8:	2000051c 	.word	0x2000051c
 80020fc:	08008dc4 	.word	0x08008dc4
 8002100:	08008df0 	.word	0x08008df0

08002104 <DoRfidWork>:

void DoRfidWork()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
    // Check if a card is available to read
    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 800210a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210e:	2200      	movs	r2, #0
 8002110:	4915      	ldr	r1, [pc, #84]	@ (8002168 <DoRfidWork+0x64>)
 8002112:	4816      	ldr	r0, [pc, #88]	@ (800216c <DoRfidWork+0x68>)
 8002114:	f7ff fdee 	bl	8001cf4 <PN532_ReadPassiveTarget>
 8002118:	4603      	mov	r3, r0
 800211a:	4a15      	ldr	r2, [pc, #84]	@ (8002170 <DoRfidWork+0x6c>)
 800211c:	6013      	str	r3, [r2, #0]
    if (uid_len == PN532_STATUS_ERROR) {
 800211e:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <DoRfidWork+0x6c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d103      	bne.n	8002130 <DoRfidWork+0x2c>
      printf(".");
 8002128:	202e      	movs	r0, #46	@ 0x2e
 800212a:	f005 fc77 	bl	8007a1c <putchar>
      for (uint8_t i = 0; i < uid_len; i++) {
        printf("%02x ", uid[i]);
      }
      printf("\r\n");
    }
}
 800212e:	e017      	b.n	8002160 <DoRfidWork+0x5c>
      printf("Found card with UID: ");
 8002130:	4810      	ldr	r0, [pc, #64]	@ (8002174 <DoRfidWork+0x70>)
 8002132:	f005 fc61 	bl	80079f8 <iprintf>
      for (uint8_t i = 0; i < uid_len; i++) {
 8002136:	2300      	movs	r3, #0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	e009      	b.n	8002150 <DoRfidWork+0x4c>
        printf("%02x ", uid[i]);
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <DoRfidWork+0x64>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	@ (8002178 <DoRfidWork+0x74>)
 8002146:	f005 fc57 	bl	80079f8 <iprintf>
      for (uint8_t i = 0; i < uid_len; i++) {
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	3301      	adds	r3, #1
 800214e:	71fb      	strb	r3, [r7, #7]
 8002150:	79fa      	ldrb	r2, [r7, #7]
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <DoRfidWork+0x6c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	dbf0      	blt.n	800213c <DoRfidWork+0x38>
      printf("\r\n");
 800215a:	4808      	ldr	r0, [pc, #32]	@ (800217c <DoRfidWork+0x78>)
 800215c:	f005 fcbc 	bl	8007ad8 <puts>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000061c 	.word	0x2000061c
 800216c:	20000504 	.word	0x20000504
 8002170:	20000628 	.word	0x20000628
 8002174:	08008e10 	.word	0x08008e10
 8002178:	08008e28 	.word	0x08008e28
 800217c:	08008e30 	.word	0x08008e30

08002180 <Stepper_Step>:


#define STEP 8

// **한 스텝씩 회전하는 함수**
void Stepper_Step(int step) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
        {0, 0, 1, 1},
        {0, 0, 0, 1},
        {1, 0, 0, 1},
    };

    HAL_GPIO_WritePin(IN_PORT, IN1, stepSequence[step][0]);
 8002188:	4a16      	ldr	r2, [pc, #88]	@ (80021e4 <Stepper_Step+0x64>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8002190:	461a      	mov	r2, r3
 8002192:	2120      	movs	r1, #32
 8002194:	4814      	ldr	r0, [pc, #80]	@ (80021e8 <Stepper_Step+0x68>)
 8002196:	f002 f8c3 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN_PORT, IN2, stepSequence[step][1]);
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <Stepper_Step+0x64>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	461a      	mov	r2, r3
 80021a6:	2140      	movs	r1, #64	@ 0x40
 80021a8:	480f      	ldr	r0, [pc, #60]	@ (80021e8 <Stepper_Step+0x68>)
 80021aa:	f002 f8b9 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN_PORT, IN3, stepSequence[step][2]);
 80021ae:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <Stepper_Step+0x64>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	789b      	ldrb	r3, [r3, #2]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021be:	480a      	ldr	r0, [pc, #40]	@ (80021e8 <Stepper_Step+0x68>)
 80021c0:	f002 f8ae 	bl	8004320 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN_PORT, IN4, stepSequence[step][3]);
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <Stepper_Step+0x64>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	78db      	ldrb	r3, [r3, #3]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021d4:	4804      	ldr	r0, [pc, #16]	@ (80021e8 <Stepper_Step+0x68>)
 80021d6:	f002 f8a3 	bl	8004320 <HAL_GPIO_WritePin>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	08008e3c 	.word	0x08008e3c
 80021e8:	40020800 	.word	0x40020800

080021ec <HAL_TIM_PeriodElapsedCallback>:
uint32_t sm_target_step;
uint32_t sm_curr_step;

// TIMER3 인터럽트 처리 (1ms초 주기)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	if (sm_curr_step < sm_target_step)
 80021f4:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d217      	bcs.n	8002230 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		uint32_t i = sm_curr_step++;
 8002200:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	490c      	ldr	r1, [pc, #48]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002208:	600a      	str	r2, [r1, #0]
 800220a:	60fb      	str	r3, [r7, #12]

		if (sm_direction == 1)	// 시계 방향
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d106      	bne.n	8002222 <HAL_TIM_PeriodElapsedCallback+0x36>
			Stepper_Step(i % STEP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ffb0 	bl	8002180 <Stepper_Step>
		else
			Stepper_Step(((STEP-1) - (i % STEP)) % STEP);
	}
}
 8002220:	e006      	b.n	8002230 <HAL_TIM_PeriodElapsedCallback+0x44>
			Stepper_Step(((STEP-1) - (i % STEP)) % STEP);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ffa8 	bl	8002180 <Stepper_Step>
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000634 	.word	0x20000634
 800223c:	20000630 	.word	0x20000630
 8002240:	2000062c 	.word	0x2000062c

08002244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <HAL_MspInit+0x4c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a0f      	ldr	r2, [pc, #60]	@ (8002290 <HAL_MspInit+0x4c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <HAL_MspInit+0x4c>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_ADC_MspInit+0x7c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d127      	bne.n	8002306 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_ADC_MspInit+0x80>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	4a15      	ldr	r2, [pc, #84]	@ (8002314 <HAL_ADC_MspInit+0x80>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c6:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <HAL_ADC_MspInit+0x80>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_ADC_MspInit+0x80>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a0e      	ldr	r2, [pc, #56]	@ (8002314 <HAL_ADC_MspInit+0x80>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <HAL_ADC_MspInit+0x80>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ee:	2301      	movs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f2:	2303      	movs	r3, #3
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	@ (8002318 <HAL_ADC_MspInit+0x84>)
 8002302:	f001 fe79 	bl	8003ff8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	@ 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40012000 	.word	0x40012000
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000

0800231c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1d      	ldr	r2, [pc, #116]	@ (80023b0 <HAL_CAN_MspInit+0x94>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d134      	bne.n	80023a8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_CAN_MspInit+0x98>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_CAN_MspInit+0x98>)
 8002348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800234c:	6413      	str	r3, [r2, #64]	@ 0x40
 800234e:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_CAN_MspInit+0x98>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_CAN_MspInit+0x98>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <HAL_CAN_MspInit+0x98>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_CAN_MspInit+0x98>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002376:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002388:	2309      	movs	r3, #9
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	4809      	ldr	r0, [pc, #36]	@ (80023b8 <HAL_CAN_MspInit+0x9c>)
 8002394:	f001 fe30 	bl	8003ff8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2014      	movs	r0, #20
 800239e:	f001 fd62 	bl	8003e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023a2:	2014      	movs	r0, #20
 80023a4:	f001 fd7b 	bl	8003e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	@ 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40006400 	.word	0x40006400
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000

080023bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08e      	sub	sp, #56	@ 0x38
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a63      	ldr	r2, [pc, #396]	@ (8002568 <HAL_SPI_MspInit+0x1ac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d12c      	bne.n	8002438 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	4b62      	ldr	r3, [pc, #392]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	4a61      	ldr	r2, [pc, #388]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 80023e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ee:	4b5f      	ldr	r3, [pc, #380]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	4b5b      	ldr	r3, [pc, #364]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a5a      	ldr	r2, [pc, #360]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b58      	ldr	r3, [pc, #352]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002416:	23e0      	movs	r3, #224	@ 0xe0
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002426:	2305      	movs	r3, #5
 8002428:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800242e:	4619      	mov	r1, r3
 8002430:	484f      	ldr	r0, [pc, #316]	@ (8002570 <HAL_SPI_MspInit+0x1b4>)
 8002432:	f001 fde1 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002436:	e092      	b.n	800255e <HAL_SPI_MspInit+0x1a2>
  else if(hspi->Instance==SPI2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4d      	ldr	r2, [pc, #308]	@ (8002574 <HAL_SPI_MspInit+0x1b8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d14b      	bne.n	80024da <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	4b49      	ldr	r3, [pc, #292]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a48      	ldr	r2, [pc, #288]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b46      	ldr	r3, [pc, #280]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4b42      	ldr	r3, [pc, #264]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a41      	ldr	r2, [pc, #260]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	4a3a      	ldr	r2, [pc, #232]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6313      	str	r3, [r2, #48]	@ 0x30
 800248a:	4b38      	ldr	r3, [pc, #224]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002496:	230c      	movs	r3, #12
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024a6:	2305      	movs	r3, #5
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ae:	4619      	mov	r1, r3
 80024b0:	4831      	ldr	r0, [pc, #196]	@ (8002578 <HAL_SPI_MspInit+0x1bc>)
 80024b2:	f001 fda1 	bl	8003ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024c8:	2305      	movs	r3, #5
 80024ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024d0:	4619      	mov	r1, r3
 80024d2:	482a      	ldr	r0, [pc, #168]	@ (800257c <HAL_SPI_MspInit+0x1c0>)
 80024d4:	f001 fd90 	bl	8003ff8 <HAL_GPIO_Init>
}
 80024d8:	e041      	b.n	800255e <HAL_SPI_MspInit+0x1a2>
  else if(hspi->Instance==SPI3)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a28      	ldr	r2, [pc, #160]	@ (8002580 <HAL_SPI_MspInit+0x1c4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d13c      	bne.n	800255e <HAL_SPI_MspInit+0x1a2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	4b20      	ldr	r3, [pc, #128]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	4a1f      	ldr	r2, [pc, #124]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f4:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	4a18      	ldr	r2, [pc, #96]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002510:	4b16      	ldr	r3, [pc, #88]	@ (800256c <HAL_SPI_MspInit+0x1b0>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800251c:	2302      	movs	r3, #2
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 800252c:	2305      	movs	r3, #5
 800252e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002534:	4619      	mov	r1, r3
 8002536:	4810      	ldr	r0, [pc, #64]	@ (8002578 <HAL_SPI_MspInit+0x1bc>)
 8002538:	f001 fd5e 	bl	8003ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800253c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800254e:	2306      	movs	r3, #6
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002556:	4619      	mov	r1, r3
 8002558:	4807      	ldr	r0, [pc, #28]	@ (8002578 <HAL_SPI_MspInit+0x1bc>)
 800255a:	f001 fd4d 	bl	8003ff8 <HAL_GPIO_Init>
}
 800255e:	bf00      	nop
 8002560:	3738      	adds	r7, #56	@ 0x38
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40013000 	.word	0x40013000
 800256c:	40023800 	.word	0x40023800
 8002570:	40020000 	.word	0x40020000
 8002574:	40003800 	.word	0x40003800
 8002578:	40020800 	.word	0x40020800
 800257c:	40020400 	.word	0x40020400
 8002580:	40003c00 	.word	0x40003c00

08002584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	@ 0x30
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3f      	ldr	r2, [pc, #252]	@ (80026a0 <HAL_TIM_Base_MspInit+0x11c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d135      	bne.n	8002612 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	4b3e      	ldr	r3, [pc, #248]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	4a3d      	ldr	r2, [pc, #244]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b6:	4b3b      	ldr	r3, [pc, #236]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	4b37      	ldr	r3, [pc, #220]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a36      	ldr	r2, [pc, #216]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b34      	ldr	r3, [pc, #208]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	482b      	ldr	r0, [pc, #172]	@ (80026a8 <HAL_TIM_Base_MspInit+0x124>)
 80025fc:	f001 fcfc 	bl	8003ff8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	201b      	movs	r0, #27
 8002606:	f001 fc2e 	bl	8003e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800260a:	201b      	movs	r0, #27
 800260c:	f001 fc47 	bl	8003e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002610:	e042      	b.n	8002698 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800261a:	d10e      	bne.n	800263a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	4a1f      	ldr	r2, [pc, #124]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6413      	str	r3, [r2, #64]	@ 0x40
 800262c:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]
}
 8002638:	e02e      	b.n	8002698 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <HAL_TIM_Base_MspInit+0x128>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d116      	bne.n	8002672 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	6413      	str	r3, [r2, #64]	@ 0x40
 8002654:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	201d      	movs	r0, #29
 8002666:	f001 fbfe 	bl	8003e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800266a:	201d      	movs	r0, #29
 800266c:	f001 fc17 	bl	8003e9e <HAL_NVIC_EnableIRQ>
}
 8002670:	e012      	b.n	8002698 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM4)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a0e      	ldr	r2, [pc, #56]	@ (80026b0 <HAL_TIM_Base_MspInit+0x12c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d10d      	bne.n	8002698 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	4a07      	ldr	r2, [pc, #28]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6413      	str	r3, [r2, #64]	@ 0x40
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_TIM_Base_MspInit+0x120>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
}
 8002698:	bf00      	nop
 800269a:	3730      	adds	r7, #48	@ 0x30
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40010000 	.word	0x40010000
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40000400 	.word	0x40000400
 80026b0:	40000800 	.word	0x40000800

080026b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a12      	ldr	r2, [pc, #72]	@ (800271c <HAL_TIM_MspPostInit+0x68>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d11d      	bne.n	8002712 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_TIM_MspPostInit+0x6c>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a10      	ldr	r2, [pc, #64]	@ (8002720 <HAL_TIM_MspPostInit+0x6c>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_TIM_MspPostInit+0x6c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026f2:	2340      	movs	r3, #64	@ 0x40
 80026f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002702:	2302      	movs	r3, #2
 8002704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4619      	mov	r1, r3
 800270c:	4805      	ldr	r0, [pc, #20]	@ (8002724 <HAL_TIM_MspPostInit+0x70>)
 800270e:	f001 fc73 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002712:	bf00      	nop
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40000800 	.word	0x40000800
 8002720:	40023800 	.word	0x40023800
 8002724:	40020400 	.word	0x40020400

08002728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	@ 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a49      	ldr	r2, [pc, #292]	@ (800286c <HAL_UART_MspInit+0x144>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d153      	bne.n	80027f2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	4b48      	ldr	r3, [pc, #288]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a47      	ldr	r2, [pc, #284]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b45      	ldr	r3, [pc, #276]	@ (8002870 <HAL_UART_MspInit+0x148>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	4b41      	ldr	r3, [pc, #260]	@ (8002870 <HAL_UART_MspInit+0x148>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	4a40      	ldr	r2, [pc, #256]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	6313      	str	r3, [r2, #48]	@ 0x30
 8002776:	4b3e      	ldr	r3, [pc, #248]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b3a      	ldr	r3, [pc, #232]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a39      	ldr	r2, [pc, #228]	@ (8002870 <HAL_UART_MspInit+0x148>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	4b37      	ldr	r3, [pc, #220]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800279e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027b0:	2308      	movs	r3, #8
 80027b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	482e      	ldr	r0, [pc, #184]	@ (8002874 <HAL_UART_MspInit+0x14c>)
 80027bc:	f001 fc1c 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027c0:	2304      	movs	r3, #4
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027d0:	2308      	movs	r3, #8
 80027d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4619      	mov	r1, r3
 80027da:	4827      	ldr	r0, [pc, #156]	@ (8002878 <HAL_UART_MspInit+0x150>)
 80027dc:	f001 fc0c 	bl	8003ff8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	2035      	movs	r0, #53	@ 0x35
 80027e6:	f001 fb3e 	bl	8003e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80027ea:	2035      	movs	r0, #53	@ 0x35
 80027ec:	f001 fb57 	bl	8003e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027f0:	e038      	b.n	8002864 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a21      	ldr	r2, [pc, #132]	@ (800287c <HAL_UART_MspInit+0x154>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d133      	bne.n	8002864 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280a:	6413      	str	r3, [r2, #64]	@ 0x40
 800280c:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <HAL_UART_MspInit+0x148>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <HAL_UART_MspInit+0x148>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	4a13      	ldr	r2, [pc, #76]	@ (8002870 <HAL_UART_MspInit+0x148>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6313      	str	r3, [r2, #48]	@ 0x30
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_UART_MspInit+0x148>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002834:	230c      	movs	r3, #12
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002844:	2307      	movs	r3, #7
 8002846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	4619      	mov	r1, r3
 800284e:	480c      	ldr	r0, [pc, #48]	@ (8002880 <HAL_UART_MspInit+0x158>)
 8002850:	f001 fbd2 	bl	8003ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	2026      	movs	r0, #38	@ 0x26
 800285a:	f001 fb04 	bl	8003e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800285e:	2026      	movs	r0, #38	@ 0x26
 8002860:	f001 fb1d 	bl	8003e9e <HAL_NVIC_EnableIRQ>
}
 8002864:	bf00      	nop
 8002866:	3730      	adds	r7, #48	@ 0x30
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40005000 	.word	0x40005000
 8002870:	40023800 	.word	0x40023800
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40004400 	.word	0x40004400
 8002880:	40020000 	.word	0x40020000

08002884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <NMI_Handler+0x4>

0800288c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <HardFault_Handler+0x4>

08002894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <MemManage_Handler+0x4>

0800289c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <BusFault_Handler+0x4>

080028a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <UsageFault_Handler+0x4>

080028ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028da:	f000 f97d 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <CAN1_RX0_IRQHandler+0x10>)
 80028ea:	f000 ffb2 	bl	8003852 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000224 	.word	0x20000224

080028f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <TIM1_CC_IRQHandler+0x10>)
 80028fe:	f002 ff3a 	bl	8005776 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000354 	.word	0x20000354

0800290c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <TIM3_IRQHandler+0x10>)
 8002912:	f002 ff30 	bl	8005776 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200003e4 	.word	0x200003e4

08002920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002924:	4802      	ldr	r0, [pc, #8]	@ (8002930 <USART2_IRQHandler+0x10>)
 8002926:	f004 f84f 	bl	80069c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200004bc 	.word	0x200004bc

08002934 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002938:	4802      	ldr	r0, [pc, #8]	@ (8002944 <UART5_IRQHandler+0x10>)
 800293a:	f004 f845 	bl	80069c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000474 	.word	0x20000474

08002948 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e00a      	b.n	8002970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800295a:	f3af 8000 	nop.w
 800295e:	4601      	mov	r1, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	60ba      	str	r2, [r7, #8]
 8002966:	b2ca      	uxtb	r2, r1
 8002968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	dbf0      	blt.n	800295a <_read+0x12>
  }

  return len;
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e009      	b.n	80029a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60ba      	str	r2, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fe1f 	bl	80005e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbf1      	blt.n	8002994 <_write+0x12>
  }
  return len;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_close>:

int _close(int file)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029e2:	605a      	str	r2, [r3, #4]
  return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_isatty>:

int _isatty(int file)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a2c:	4a14      	ldr	r2, [pc, #80]	@ (8002a80 <_sbrk+0x5c>)
 8002a2e:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <_sbrk+0x60>)
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a38:	4b13      	ldr	r3, [pc, #76]	@ (8002a88 <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <_sbrk+0x64>)
 8002a42:	4a12      	ldr	r2, [pc, #72]	@ (8002a8c <_sbrk+0x68>)
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a46:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <_sbrk+0x64>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a54:	f005 f98e 	bl	8007d74 <__errno>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	e009      	b.n	8002a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a64:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <_sbrk+0x64>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	4a05      	ldr	r2, [pc, #20]	@ (8002a88 <_sbrk+0x64>)
 8002a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20020000 	.word	0x20020000
 8002a84:	00000400 	.word	0x00000400
 8002a88:	20000638 	.word	0x20000638
 8002a8c:	20000790 	.word	0x20000790

08002a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <SystemInit+0x20>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9a:	4a05      	ldr	r2, [pc, #20]	@ (8002ab0 <SystemInit+0x20>)
 8002a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <InitWork>:
#include "lcd_st7789v.h"
#include "rfid_pn532.h"


void InitWork()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	// us단위 시간 처리를 위한 초기화
	InitDWT();
 8002ab8:	f7fd fda4 	bl	8000604 <InitDWT>

	// UART RX 인터럽트 활성
	InitUartRxInterrupt();
 8002abc:	f7fd fdea 	bl	8000694 <InitUartRxInterrupt>
	// TIMER4 CH1 인터럽트 활성(PWM, PB6) - SG90 Servo Motor
	//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

	//InitCan1();

	InitLcdKeypadWork();
 8002ac0:	f7fe f8e4 	bl	8000c8c <InitLcdKeypadWork>
	//InitFndWork();
	//InitThermoWork();
	//InitLcdWork();
	InitRfidWork();
 8002ac4:	f7ff faee 	bl	80020a4 <InitRfidWork>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <DoWork>:


void DoWork()
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	//ReadButton();
	//CheckButtonPressed();

	DoLedWork();
 8002ad0:	f7fe f994 	bl	8000dfc <DoLedWork>
	//ChangeServoSG90Pwm();
	//RunSonicSensor();
	//DoCan1Work();
	//DoStepMotorWork();

	DoLcdKeypadWork();
 8002ad4:	f7fe f8e4 	bl	8000ca0 <DoLcdKeypadWork>
	//DoFndWork();
	//DoThermoWork();
	//DoLcdWork();
	DoRfidWork();
 8002ad8:	f7ff fb14 	bl	8002104 <DoRfidWork>
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <Reset_Handler>:
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b18 <LoopFillZerobss+0xe>
 8002ae4:	f7ff ffd4 	bl	8002a90 <SystemInit>
 8002ae8:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <LoopFillZerobss+0x12>)
 8002aea:	490d      	ldr	r1, [pc, #52]	@ (8002b20 <LoopFillZerobss+0x16>)
 8002aec:	4a0d      	ldr	r2, [pc, #52]	@ (8002b24 <LoopFillZerobss+0x1a>)
 8002aee:	2300      	movs	r3, #0
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:
 8002af2:	58d4      	ldr	r4, [r2, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:
 8002af8:	18c4      	adds	r4, r0, r3
 8002afa:	428c      	cmp	r4, r1
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <LoopFillZerobss+0x1e>)
 8002b00:	4c0a      	ldr	r4, [pc, #40]	@ (8002b2c <LoopFillZerobss+0x22>)
 8002b02:	2300      	movs	r3, #0
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:
 8002b0a:	42a2      	cmp	r2, r4
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>
 8002b0e:	f005 f937 	bl	8007d80 <__libc_init_array>
 8002b12:	f7fe f979 	bl	8000e08 <main>
 8002b16:	4770      	bx	lr
 8002b18:	20020000 	.word	0x20020000
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	2000006c 	.word	0x2000006c
 8002b24:	08008eb8 	.word	0x08008eb8
 8002b28:	2000006c 	.word	0x2000006c
 8002b2c:	2000078c 	.word	0x2000078c

08002b30 <ADC_IRQHandler>:
 8002b30:	e7fe      	b.n	8002b30 <ADC_IRQHandler>
	...

08002b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <HAL_Init+0x40>)
 8002b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_Init+0x40>)
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	@ (8002b74 <HAL_Init+0x40>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f001 f977 	bl	8003e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b62:	200f      	movs	r0, #15
 8002b64:	f000 f808 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b68:	f7ff fb6c 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00

08002b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b80:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_InitTick+0x54>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <HAL_InitTick+0x58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f98f 	bl	8003eba <HAL_SYSTICK_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00e      	b.n	8002bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d80a      	bhi.n	8002bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f001 f957 	bl	8003e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4a06      	ldr	r2, [pc, #24]	@ (8002bd4 <HAL_InitTick+0x5c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000004 	.word	0x20000004
 8002bd0:	2000000c 	.word	0x2000000c
 8002bd4:	20000008 	.word	0x20000008

08002bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	2000000c 	.word	0x2000000c
 8002bfc:	2000063c 	.word	0x2000063c

08002c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000063c 	.word	0x2000063c

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff ffee 	bl	8002c00 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000000c 	.word	0x2000000c

08002c60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e033      	b.n	8002cde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff fb08 	bl	8002294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ca6:	f023 0302 	bic.w	r3, r3, #2
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fab4 	bl	8003220 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cce:	e001      	b.n	8002cd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_Start+0x1a>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0b2      	b.n	8002e68 <HAL_ADC_Start+0x180>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d018      	beq.n	8002d4a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d28:	4b52      	ldr	r3, [pc, #328]	@ (8002e74 <HAL_ADC_Start+0x18c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	@ (8002e78 <HAL_ADC_Start+0x190>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9a      	lsrs	r2, r3, #18
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d3c:	e002      	b.n	8002d44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f9      	bne.n	8002d3e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d17a      	bne.n	8002e4e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d96:	d106      	bne.n	8002da6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9c:	f023 0206 	bic.w	r2, r3, #6
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002da4:	e002      	b.n	8002dac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002db4:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_ADC_Start+0x194>)
 8002db6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002dc0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d12a      	bne.n	8002e24 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e80 <HAL_ADC_Start+0x198>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d015      	beq.n	8002e04 <HAL_ADC_Start+0x11c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a29      	ldr	r2, [pc, #164]	@ (8002e84 <HAL_ADC_Start+0x19c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d105      	bne.n	8002dee <HAL_ADC_Start+0x106>
 8002de2:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <HAL_ADC_Start+0x194>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a25      	ldr	r2, [pc, #148]	@ (8002e88 <HAL_ADC_Start+0x1a0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d136      	bne.n	8002e66 <HAL_ADC_Start+0x17e>
 8002df8:	4b20      	ldr	r3, [pc, #128]	@ (8002e7c <HAL_ADC_Start+0x194>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d130      	bne.n	8002e66 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d129      	bne.n	8002e66 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	e020      	b.n	8002e66 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a15      	ldr	r2, [pc, #84]	@ (8002e80 <HAL_ADC_Start+0x198>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d11b      	bne.n	8002e66 <HAL_ADC_Start+0x17e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d114      	bne.n	8002e66 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	e00b      	b.n	8002e66 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	20000004 	.word	0x20000004
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	40012300 	.word	0x40012300
 8002e80:	40012000 	.word	0x40012000
 8002e84:	40012100 	.word	0x40012100
 8002e88:	40012200 	.word	0x40012200

08002e8c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea8:	d113      	bne.n	8002ed2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e063      	b.n	8002f9a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed2:	f7ff fe95 	bl	8002c00 <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ed8:	e021      	b.n	8002f1e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d01d      	beq.n	8002f1e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_ADC_PollForConversion+0x6c>
 8002ee8:	f7ff fe8a 	bl	8002c00 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d212      	bcs.n	8002f1e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d00b      	beq.n	8002f1e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f043 0204 	orr.w	r2, r3, #4
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e03d      	b.n	8002f9a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d1d6      	bne.n	8002eda <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0212 	mvn.w	r2, #18
 8002f34:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d123      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11f      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x1c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e113      	b.n	8003200 <HAL_ADC_ConfigChannel+0x244>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b09      	cmp	r3, #9
 8002fe6:	d925      	bls.n	8003034 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68d9      	ldr	r1, [r3, #12]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b1e      	subs	r3, #30
 8002ffe:	2207      	movs	r2, #7
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43da      	mvns	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	400a      	ands	r2, r1
 800300c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68d9      	ldr	r1, [r3, #12]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	4603      	mov	r3, r0
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4403      	add	r3, r0
 8003026:	3b1e      	subs	r3, #30
 8003028:	409a      	lsls	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	e022      	b.n	800307a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	2207      	movs	r2, #7
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	400a      	ands	r2, r1
 8003056:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6919      	ldr	r1, [r3, #16]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4618      	mov	r0, r3
 800306a:	4603      	mov	r3, r0
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4403      	add	r3, r0
 8003070:	409a      	lsls	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d824      	bhi.n	80030cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b05      	subs	r3, #5
 8003094:	221f      	movs	r2, #31
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	400a      	ands	r2, r1
 80030a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3b05      	subs	r3, #5
 80030be:	fa00 f203 	lsl.w	r2, r0, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80030ca:	e04c      	b.n	8003166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d824      	bhi.n	800311e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	3b23      	subs	r3, #35	@ 0x23
 80030e6:	221f      	movs	r2, #31
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43da      	mvns	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	400a      	ands	r2, r1
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	4618      	mov	r0, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	3b23      	subs	r3, #35	@ 0x23
 8003110:	fa00 f203 	lsl.w	r2, r0, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
 800311c:	e023      	b.n	8003166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	3b41      	subs	r3, #65	@ 0x41
 8003130:	221f      	movs	r2, #31
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	400a      	ands	r2, r1
 800313e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	4618      	mov	r0, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b41      	subs	r3, #65	@ 0x41
 800315a:	fa00 f203 	lsl.w	r2, r0, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003166:	4b29      	ldr	r3, [pc, #164]	@ (800320c <HAL_ADC_ConfigChannel+0x250>)
 8003168:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a28      	ldr	r2, [pc, #160]	@ (8003210 <HAL_ADC_ConfigChannel+0x254>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d10f      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x1d8>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b12      	cmp	r3, #18
 800317a:	d10b      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1d      	ldr	r2, [pc, #116]	@ (8003210 <HAL_ADC_ConfigChannel+0x254>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d12b      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x23a>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003214 <HAL_ADC_ConfigChannel+0x258>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x1f4>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b11      	cmp	r3, #17
 80031ae:	d122      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a11      	ldr	r2, [pc, #68]	@ (8003214 <HAL_ADC_ConfigChannel+0x258>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d111      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <HAL_ADC_ConfigChannel+0x25c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a11      	ldr	r2, [pc, #68]	@ (800321c <HAL_ADC_ConfigChannel+0x260>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	0c9a      	lsrs	r2, r3, #18
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031e8:	e002      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f9      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40012300 	.word	0x40012300
 8003210:	40012000 	.word	0x40012000
 8003214:	10000012 	.word	0x10000012
 8003218:	20000004 	.word	0x20000004
 800321c:	431bde83 	.word	0x431bde83

08003220 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003228:	4b79      	ldr	r3, [pc, #484]	@ (8003410 <ADC_Init+0x1f0>)
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	021a      	lsls	r2, r3, #8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6899      	ldr	r1, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b2:	4a58      	ldr	r2, [pc, #352]	@ (8003414 <ADC_Init+0x1f4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d022      	beq.n	80032fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6899      	ldr	r1, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6899      	ldr	r1, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	e00f      	b.n	800331e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800330c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800331c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0202 	bic.w	r2, r2, #2
 800332c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6899      	ldr	r1, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7e1b      	ldrb	r3, [r3, #24]
 8003338:	005a      	lsls	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800335a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800336a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	3b01      	subs	r3, #1
 8003378:	035a      	lsls	r2, r3, #13
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	e007      	b.n	8003394 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003392:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	051a      	lsls	r2, r3, #20
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6899      	ldr	r1, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033d6:	025a      	lsls	r2, r3, #9
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6899      	ldr	r1, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	029a      	lsls	r2, r3, #10
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40012300 	.word	0x40012300
 8003414:	0f000001 	.word	0x0f000001

08003418 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0ed      	b.n	8003606 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe ff70 	bl	800231c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800344c:	f7ff fbd8 	bl	8002c00 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003452:	e012      	b.n	800347a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003454:	f7ff fbd4 	bl	8002c00 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b0a      	cmp	r3, #10
 8003460:	d90b      	bls.n	800347a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2205      	movs	r2, #5
 8003472:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0c5      	b.n	8003606 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0e5      	beq.n	8003454 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0202 	bic.w	r2, r2, #2
 8003496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003498:	f7ff fbb2 	bl	8002c00 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800349e:	e012      	b.n	80034c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034a0:	f7ff fbae 	bl	8002c00 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b0a      	cmp	r3, #10
 80034ac:	d90b      	bls.n	80034c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2205      	movs	r2, #5
 80034be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e09f      	b.n	8003606 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e1b      	ldrb	r3, [r3, #24]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d108      	bne.n	80034ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e007      	b.n	80034fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7e5b      	ldrb	r3, [r3, #25]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d108      	bne.n	8003518 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e007      	b.n	8003528 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7e9b      	ldrb	r3, [r3, #26]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d108      	bne.n	8003542 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0220 	orr.w	r2, r2, #32
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e007      	b.n	8003552 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0220 	bic.w	r2, r2, #32
 8003550:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7edb      	ldrb	r3, [r3, #27]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d108      	bne.n	800356c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0210 	bic.w	r2, r2, #16
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e007      	b.n	800357c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0210 	orr.w	r2, r2, #16
 800357a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7f1b      	ldrb	r3, [r3, #28]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d108      	bne.n	8003596 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0208 	orr.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e007      	b.n	80035a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0208 	bic.w	r2, r2, #8
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7f5b      	ldrb	r3, [r3, #29]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d108      	bne.n	80035c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0204 	orr.w	r2, r2, #4
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e007      	b.n	80035d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0204 	bic.w	r2, r2, #4
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800360e:	b480      	push	{r7}
 8003610:	b087      	sub	sp, #28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003622:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d003      	beq.n	8003632 <HAL_CAN_GetRxMessage+0x24>
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	2b02      	cmp	r3, #2
 800362e:	f040 8103 	bne.w	8003838 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10e      	bne.n	8003656 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0f7      	b.n	8003846 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0e8      	b.n	8003846 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	331b      	adds	r3, #27
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	4413      	add	r3, r2
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0204 	and.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	331b      	adds	r3, #27
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0d5b      	lsrs	r3, r3, #21
 80036a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e00b      	b.n	80036c4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	331b      	adds	r3, #27
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	331b      	adds	r3, #27
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0202 	and.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	331b      	adds	r3, #27
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2208      	movs	r2, #8
 80036f6:	611a      	str	r2, [r3, #16]
 80036f8:	e00b      	b.n	8003712 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	331b      	adds	r3, #27
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 020f 	and.w	r2, r3, #15
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	331b      	adds	r3, #27
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	b2da      	uxtb	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	331b      	adds	r3, #27
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4413      	add	r3, r2
 8003736:	3304      	adds	r3, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4413      	add	r3, r2
 800374c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	4413      	add	r3, r2
 8003762:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0a1a      	lsrs	r2, r3, #8
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	4413      	add	r3, r2
 800377c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0c1a      	lsrs	r2, r3, #16
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	3302      	adds	r3, #2
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	4413      	add	r3, r2
 8003796:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0e1a      	lsrs	r2, r3, #24
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	3303      	adds	r3, #3
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	3304      	adds	r3, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	0a1a      	lsrs	r2, r3, #8
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	3305      	adds	r3, #5
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0c1a      	lsrs	r2, r3, #16
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	3306      	adds	r3, #6
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	0e1a      	lsrs	r2, r3, #24
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	3307      	adds	r3, #7
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d108      	bne.n	8003824 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0220 	orr.w	r2, r2, #32
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	e007      	b.n	8003834 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0220 	orr.w	r2, r2, #32
 8003832:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e006      	b.n	8003846 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b08a      	sub	sp, #40	@ 0x28
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d07c      	beq.n	8003992 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d023      	beq.n	80038ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2201      	movs	r2, #1
 80038a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f983 	bl	8003bc0 <HAL_CAN_TxMailbox0CompleteCallback>
 80038ba:	e016      	b.n	80038ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ce:	e00c      	b.n	80038ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e2:	e002      	b.n	80038ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f989 	bl	8003bfc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d024      	beq.n	800393e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f963 	bl	8003bd4 <HAL_CAN_TxMailbox1CompleteCallback>
 800390e:	e016      	b.n	800393e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
 8003922:	e00c      	b.n	800393e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
 8003936:	e002      	b.n	800393e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f969 	bl	8003c10 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d024      	beq.n	8003992 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003950:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f943 	bl	8003be8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003962:	e016      	b.n	8003992 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
 8003976:	e00c      	b.n	8003992 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
 800398a:	e002      	b.n	8003992 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f949 	bl	8003c24 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00c      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2210      	movs	r2, #16
 80039b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2208      	movs	r2, #8
 80039d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f930 	bl	8003c38 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fc feb7 	bl	8000764 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2210      	movs	r2, #16
 8003a18:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00b      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2208      	movs	r2, #8
 8003a34:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f912 	bl	8003c60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f8f9 	bl	8003c4c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2210      	movs	r2, #16
 8003a74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8fc 	bl	8003c74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2208      	movs	r2, #8
 8003a96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f8f5 	bl	8003c88 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d07b      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d072      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d043      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03e      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b20:	2b60      	cmp	r3, #96	@ 0x60
 8003b22:	d02b      	beq.n	8003b7c <HAL_CAN_IRQHandler+0x32a>
 8003b24:	2b60      	cmp	r3, #96	@ 0x60
 8003b26:	d82e      	bhi.n	8003b86 <HAL_CAN_IRQHandler+0x334>
 8003b28:	2b50      	cmp	r3, #80	@ 0x50
 8003b2a:	d022      	beq.n	8003b72 <HAL_CAN_IRQHandler+0x320>
 8003b2c:	2b50      	cmp	r3, #80	@ 0x50
 8003b2e:	d82a      	bhi.n	8003b86 <HAL_CAN_IRQHandler+0x334>
 8003b30:	2b40      	cmp	r3, #64	@ 0x40
 8003b32:	d019      	beq.n	8003b68 <HAL_CAN_IRQHandler+0x316>
 8003b34:	2b40      	cmp	r3, #64	@ 0x40
 8003b36:	d826      	bhi.n	8003b86 <HAL_CAN_IRQHandler+0x334>
 8003b38:	2b30      	cmp	r3, #48	@ 0x30
 8003b3a:	d010      	beq.n	8003b5e <HAL_CAN_IRQHandler+0x30c>
 8003b3c:	2b30      	cmp	r3, #48	@ 0x30
 8003b3e:	d822      	bhi.n	8003b86 <HAL_CAN_IRQHandler+0x334>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d002      	beq.n	8003b4a <HAL_CAN_IRQHandler+0x2f8>
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d005      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b48:	e01d      	b.n	8003b86 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	f043 0308 	orr.w	r3, r3, #8
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b52:	e019      	b.n	8003b88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	f043 0310 	orr.w	r3, r3, #16
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b5c:	e014      	b.n	8003b88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	f043 0320 	orr.w	r3, r3, #32
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b66:	e00f      	b.n	8003b88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b70:	e00a      	b.n	8003b88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b7a:	e005      	b.n	8003b88 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b84:	e000      	b.n	8003b88 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b86:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b96:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f872 	bl	8003c9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3728      	adds	r7, #40	@ 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce2:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	60d3      	str	r3, [r2, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cfc:	4b04      	ldr	r3, [pc, #16]	@ (8003d10 <__NVIC_GetPriorityGrouping+0x18>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	f003 0307 	and.w	r3, r3, #7
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	db0b      	blt.n	8003d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	f003 021f 	and.w	r2, r3, #31
 8003d2c:	4907      	ldr	r1, [pc, #28]	@ (8003d4c <__NVIC_EnableIRQ+0x38>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2001      	movs	r0, #1
 8003d36:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	e000e100 	.word	0xe000e100

08003d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	6039      	str	r1, [r7, #0]
 8003d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	db0a      	blt.n	8003d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	490c      	ldr	r1, [pc, #48]	@ (8003d9c <__NVIC_SetPriority+0x4c>)
 8003d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	440b      	add	r3, r1
 8003d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d78:	e00a      	b.n	8003d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4908      	ldr	r1, [pc, #32]	@ (8003da0 <__NVIC_SetPriority+0x50>)
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	3b04      	subs	r3, #4
 8003d88:	0112      	lsls	r2, r2, #4
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	761a      	strb	r2, [r3, #24]
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000e100 	.word	0xe000e100
 8003da0:	e000ed00 	.word	0xe000ed00

08003da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b089      	sub	sp, #36	@ 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f1c3 0307 	rsb	r3, r3, #7
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	bf28      	it	cs
 8003dc2:	2304      	movcs	r3, #4
 8003dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	2b06      	cmp	r3, #6
 8003dcc:	d902      	bls.n	8003dd4 <NVIC_EncodePriority+0x30>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3b03      	subs	r3, #3
 8003dd2:	e000      	b.n	8003dd6 <NVIC_EncodePriority+0x32>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	401a      	ands	r2, r3
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dec:	f04f 31ff 	mov.w	r1, #4294967295
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	43d9      	mvns	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dfc:	4313      	orrs	r3, r2
         );
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3724      	adds	r7, #36	@ 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e1c:	d301      	bcc.n	8003e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e00f      	b.n	8003e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e22:	4a0a      	ldr	r2, [pc, #40]	@ (8003e4c <SysTick_Config+0x40>)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e2a:	210f      	movs	r1, #15
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e30:	f7ff ff8e 	bl	8003d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <SysTick_Config+0x40>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3a:	4b04      	ldr	r3, [pc, #16]	@ (8003e4c <SysTick_Config+0x40>)
 8003e3c:	2207      	movs	r2, #7
 8003e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	e000e010 	.word	0xe000e010

08003e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ff29 	bl	8003cb0 <__NVIC_SetPriorityGrouping>
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b086      	sub	sp, #24
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e78:	f7ff ff3e 	bl	8003cf8 <__NVIC_GetPriorityGrouping>
 8003e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	6978      	ldr	r0, [r7, #20]
 8003e84:	f7ff ff8e 	bl	8003da4 <NVIC_EncodePriority>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff5d 	bl	8003d50 <__NVIC_SetPriority>
}
 8003e96:	bf00      	nop
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff31 	bl	8003d14 <__NVIC_EnableIRQ>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ffa2 	bl	8003e0c <SysTick_Config>
 8003ec8:	4603      	mov	r3, r0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ede:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7fe fe8e 	bl	8002c00 <HAL_GetTick>
 8003ee4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d008      	beq.n	8003f04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2280      	movs	r2, #128	@ 0x80
 8003ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e052      	b.n	8003faa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0216 	bic.w	r2, r2, #22
 8003f12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <HAL_DMA_Abort+0x62>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0208 	bic.w	r2, r2, #8
 8003f42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f54:	e013      	b.n	8003f7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f56:	f7fe fe53 	bl	8002c00 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d90c      	bls.n	8003f7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e015      	b.n	8003faa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e4      	bne.n	8003f56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	223f      	movs	r2, #63	@ 0x3f
 8003f92:	409a      	lsls	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2280      	movs	r2, #128	@ 0x80
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e00c      	b.n	8003fea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e165      	b.n	80042e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004014:	2201      	movs	r2, #1
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	f040 8154 	bne.w	80042da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d005      	beq.n	800404a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004046:	2b02      	cmp	r3, #2
 8004048:	d130      	bne.n	80040ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004080:	2201      	movs	r2, #1
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 0201 	and.w	r2, r3, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d017      	beq.n	80040e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2203      	movs	r2, #3
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d123      	bne.n	800413c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	08da      	lsrs	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3208      	adds	r2, #8
 80040fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	08da      	lsrs	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3208      	adds	r2, #8
 8004136:	69b9      	ldr	r1, [r7, #24]
 8004138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0203 	and.w	r2, r3, #3
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80ae 	beq.w	80042da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4b5d      	ldr	r3, [pc, #372]	@ (80042f8 <HAL_GPIO_Init+0x300>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	4a5c      	ldr	r2, [pc, #368]	@ (80042f8 <HAL_GPIO_Init+0x300>)
 8004188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800418c:	6453      	str	r3, [r2, #68]	@ 0x44
 800418e:	4b5a      	ldr	r3, [pc, #360]	@ (80042f8 <HAL_GPIO_Init+0x300>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419a:	4a58      	ldr	r2, [pc, #352]	@ (80042fc <HAL_GPIO_Init+0x304>)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004300 <HAL_GPIO_Init+0x308>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d025      	beq.n	8004212 <HAL_GPIO_Init+0x21a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004304 <HAL_GPIO_Init+0x30c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01f      	beq.n	800420e <HAL_GPIO_Init+0x216>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004308 <HAL_GPIO_Init+0x310>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d019      	beq.n	800420a <HAL_GPIO_Init+0x212>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4c      	ldr	r2, [pc, #304]	@ (800430c <HAL_GPIO_Init+0x314>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_GPIO_Init+0x20e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004310 <HAL_GPIO_Init+0x318>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00d      	beq.n	8004202 <HAL_GPIO_Init+0x20a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004314 <HAL_GPIO_Init+0x31c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <HAL_GPIO_Init+0x206>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a49      	ldr	r2, [pc, #292]	@ (8004318 <HAL_GPIO_Init+0x320>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <HAL_GPIO_Init+0x202>
 80041f6:	2306      	movs	r3, #6
 80041f8:	e00c      	b.n	8004214 <HAL_GPIO_Init+0x21c>
 80041fa:	2307      	movs	r3, #7
 80041fc:	e00a      	b.n	8004214 <HAL_GPIO_Init+0x21c>
 80041fe:	2305      	movs	r3, #5
 8004200:	e008      	b.n	8004214 <HAL_GPIO_Init+0x21c>
 8004202:	2304      	movs	r3, #4
 8004204:	e006      	b.n	8004214 <HAL_GPIO_Init+0x21c>
 8004206:	2303      	movs	r3, #3
 8004208:	e004      	b.n	8004214 <HAL_GPIO_Init+0x21c>
 800420a:	2302      	movs	r3, #2
 800420c:	e002      	b.n	8004214 <HAL_GPIO_Init+0x21c>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_GPIO_Init+0x21c>
 8004212:	2300      	movs	r3, #0
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	f002 0203 	and.w	r2, r2, #3
 800421a:	0092      	lsls	r2, r2, #2
 800421c:	4093      	lsls	r3, r2
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004224:	4935      	ldr	r1, [pc, #212]	@ (80042fc <HAL_GPIO_Init+0x304>)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	3302      	adds	r3, #2
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004232:	4b3a      	ldr	r3, [pc, #232]	@ (800431c <HAL_GPIO_Init+0x324>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004256:	4a31      	ldr	r2, [pc, #196]	@ (800431c <HAL_GPIO_Init+0x324>)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800425c:	4b2f      	ldr	r3, [pc, #188]	@ (800431c <HAL_GPIO_Init+0x324>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004280:	4a26      	ldr	r2, [pc, #152]	@ (800431c <HAL_GPIO_Init+0x324>)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004286:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_GPIO_Init+0x324>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042aa:	4a1c      	ldr	r2, [pc, #112]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b0:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d4:	4a11      	ldr	r2, [pc, #68]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3301      	adds	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	f67f ae96 	bls.w	8004014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3724      	adds	r7, #36	@ 0x24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40013800 	.word	0x40013800
 8004300:	40020000 	.word	0x40020000
 8004304:	40020400 	.word	0x40020400
 8004308:	40020800 	.word	0x40020800
 800430c:	40020c00 	.word	0x40020c00
 8004310:	40021000 	.word	0x40021000
 8004314:	40021400 	.word	0x40021400
 8004318:	40021800 	.word	0x40021800
 800431c:	40013c00 	.word	0x40013c00

08004320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
 800432c:	4613      	mov	r3, r2
 800432e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004330:	787b      	ldrb	r3, [r7, #1]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800433c:	e003      	b.n	8004346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	041a      	lsls	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	619a      	str	r2, [r3, #24]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004364:	887a      	ldrh	r2, [r7, #2]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	041a      	lsls	r2, r3, #16
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	43d9      	mvns	r1, r3
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	400b      	ands	r3, r1
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	619a      	str	r2, [r3, #24]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0cc      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b68      	ldr	r3, [pc, #416]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d90c      	bls.n	80043c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b65      	ldr	r3, [pc, #404]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b63      	ldr	r3, [pc, #396]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0b8      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043dc:	4b59      	ldr	r3, [pc, #356]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a58      	ldr	r2, [pc, #352]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f4:	4b53      	ldr	r3, [pc, #332]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a52      	ldr	r2, [pc, #328]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004400:	4b50      	ldr	r3, [pc, #320]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	494d      	ldr	r1, [pc, #308]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d044      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d119      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e07f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d003      	beq.n	8004446 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	2b03      	cmp	r3, #3
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b3f      	ldr	r3, [pc, #252]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e06f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b3b      	ldr	r3, [pc, #236]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e067      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004466:	4b37      	ldr	r3, [pc, #220]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4934      	ldr	r1, [pc, #208]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004478:	f7fe fbc2 	bl	8002c00 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fe fbbe 	bl	8002c00 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e04f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b2b      	ldr	r3, [pc, #172]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 020c 	and.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1eb      	bne.n	8004480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b25      	ldr	r3, [pc, #148]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d20c      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b22      	ldr	r3, [pc, #136]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e032      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044dc:	4b19      	ldr	r3, [pc, #100]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4916      	ldr	r1, [pc, #88]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	490e      	ldr	r1, [pc, #56]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800450e:	f000 f855 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8004512:	4602      	mov	r2, r0
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	490a      	ldr	r1, [pc, #40]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	5ccb      	ldrb	r3, [r1, r3]
 8004522:	fa22 f303 	lsr.w	r3, r2, r3
 8004526:	4a09      	ldr	r2, [pc, #36]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800452a:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <HAL_RCC_ClockConfig+0x1c8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fb22 	bl	8002b78 <HAL_InitTick>

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40023c00 	.word	0x40023c00
 8004544:	40023800 	.word	0x40023800
 8004548:	08008e5c 	.word	0x08008e5c
 800454c:	20000004 	.word	0x20000004
 8004550:	20000008 	.word	0x20000008

08004554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004558:	4b03      	ldr	r3, [pc, #12]	@ (8004568 <HAL_RCC_GetHCLKFreq+0x14>)
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000004 	.word	0x20000004

0800456c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004570:	f7ff fff0 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 8004574:	4602      	mov	r2, r0
 8004576:	4b05      	ldr	r3, [pc, #20]	@ (800458c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	0a9b      	lsrs	r3, r3, #10
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4903      	ldr	r1, [pc, #12]	@ (8004590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004582:	5ccb      	ldrb	r3, [r1, r3]
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40023800 	.word	0x40023800
 8004590:	08008e6c 	.word	0x08008e6c

08004594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004598:	f7ff ffdc 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	0b5b      	lsrs	r3, r3, #13
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4903      	ldr	r1, [pc, #12]	@ (80045b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40023800 	.word	0x40023800
 80045b8:	08008e6c 	.word	0x08008e6c

080045bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c0:	b0ae      	sub	sp, #184	@ 0xb8
 80045c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e2:	4bcb      	ldr	r3, [pc, #812]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	f200 8206 	bhi.w	80049fc <HAL_RCC_GetSysClockFreq+0x440>
 80045f0:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800462d 	.word	0x0800462d
 80045fc:	080049fd 	.word	0x080049fd
 8004600:	080049fd 	.word	0x080049fd
 8004604:	080049fd 	.word	0x080049fd
 8004608:	08004635 	.word	0x08004635
 800460c:	080049fd 	.word	0x080049fd
 8004610:	080049fd 	.word	0x080049fd
 8004614:	080049fd 	.word	0x080049fd
 8004618:	0800463d 	.word	0x0800463d
 800461c:	080049fd 	.word	0x080049fd
 8004620:	080049fd 	.word	0x080049fd
 8004624:	080049fd 	.word	0x080049fd
 8004628:	0800482d 	.word	0x0800482d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800462c:	4bb9      	ldr	r3, [pc, #740]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x358>)
 800462e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004632:	e1e7      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004634:	4bb8      	ldr	r3, [pc, #736]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800463a:	e1e3      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800463c:	4bb4      	ldr	r3, [pc, #720]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004648:	4bb1      	ldr	r3, [pc, #708]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d071      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004654:	4bae      	ldr	r3, [pc, #696]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004660:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004664:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800467a:	4622      	mov	r2, r4
 800467c:	462b      	mov	r3, r5
 800467e:	f04f 0000 	mov.w	r0, #0
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	0159      	lsls	r1, r3, #5
 8004688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800468c:	0150      	lsls	r0, r2, #5
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4621      	mov	r1, r4
 8004694:	1a51      	subs	r1, r2, r1
 8004696:	6439      	str	r1, [r7, #64]	@ 0x40
 8004698:	4629      	mov	r1, r5
 800469a:	eb63 0301 	sbc.w	r3, r3, r1
 800469e:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80046ac:	4649      	mov	r1, r9
 80046ae:	018b      	lsls	r3, r1, #6
 80046b0:	4641      	mov	r1, r8
 80046b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b6:	4641      	mov	r1, r8
 80046b8:	018a      	lsls	r2, r1, #6
 80046ba:	4641      	mov	r1, r8
 80046bc:	1a51      	subs	r1, r2, r1
 80046be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046c0:	4649      	mov	r1, r9
 80046c2:	eb63 0301 	sbc.w	r3, r3, r1
 80046c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80046d4:	4649      	mov	r1, r9
 80046d6:	00cb      	lsls	r3, r1, #3
 80046d8:	4641      	mov	r1, r8
 80046da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046de:	4641      	mov	r1, r8
 80046e0:	00ca      	lsls	r2, r1, #3
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	4622      	mov	r2, r4
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ee:	462b      	mov	r3, r5
 80046f0:	460a      	mov	r2, r1
 80046f2:	eb42 0303 	adc.w	r3, r2, r3
 80046f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004704:	4629      	mov	r1, r5
 8004706:	024b      	lsls	r3, r1, #9
 8004708:	4621      	mov	r1, r4
 800470a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800470e:	4621      	mov	r1, r4
 8004710:	024a      	lsls	r2, r1, #9
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004724:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004728:	f7fb fdca 	bl	80002c0 <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4613      	mov	r3, r2
 8004732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004736:	e067      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004738:	4b75      	ldr	r3, [pc, #468]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004744:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004748:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800474c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004750:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004752:	2300      	movs	r3, #0
 8004754:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	0159      	lsls	r1, r3, #5
 8004768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476c:	0150      	lsls	r0, r2, #5
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4621      	mov	r1, r4
 8004774:	1a51      	subs	r1, r2, r1
 8004776:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004778:	4629      	mov	r1, r5
 800477a:	eb63 0301 	sbc.w	r3, r3, r1
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800478c:	4649      	mov	r1, r9
 800478e:	018b      	lsls	r3, r1, #6
 8004790:	4641      	mov	r1, r8
 8004792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004796:	4641      	mov	r1, r8
 8004798:	018a      	lsls	r2, r1, #6
 800479a:	4641      	mov	r1, r8
 800479c:	ebb2 0a01 	subs.w	sl, r2, r1
 80047a0:	4649      	mov	r1, r9
 80047a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ba:	4692      	mov	sl, r2
 80047bc:	469b      	mov	fp, r3
 80047be:	4623      	mov	r3, r4
 80047c0:	eb1a 0303 	adds.w	r3, sl, r3
 80047c4:	623b      	str	r3, [r7, #32]
 80047c6:	462b      	mov	r3, r5
 80047c8:	eb4b 0303 	adc.w	r3, fp, r3
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047da:	4629      	mov	r1, r5
 80047dc:	028b      	lsls	r3, r1, #10
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e4:	4621      	mov	r1, r4
 80047e6:	028a      	lsls	r2, r1, #10
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047f0:	2200      	movs	r2, #0
 80047f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80047f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80047f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80047fa:	f7fb fd61 	bl	80002c0 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4613      	mov	r3, r2
 8004804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004808:	4b41      	ldr	r3, [pc, #260]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800481a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800481e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800482a:	e0eb      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800482c:	4b38      	ldr	r3, [pc, #224]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004838:	4b35      	ldr	r3, [pc, #212]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d06b      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004844:	4b32      	ldr	r3, [pc, #200]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	2200      	movs	r2, #0
 800484c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800484e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	663b      	str	r3, [r7, #96]	@ 0x60
 8004858:	2300      	movs	r3, #0
 800485a:	667b      	str	r3, [r7, #100]	@ 0x64
 800485c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004860:	4622      	mov	r2, r4
 8004862:	462b      	mov	r3, r5
 8004864:	f04f 0000 	mov.w	r0, #0
 8004868:	f04f 0100 	mov.w	r1, #0
 800486c:	0159      	lsls	r1, r3, #5
 800486e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004872:	0150      	lsls	r0, r2, #5
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4621      	mov	r1, r4
 800487a:	1a51      	subs	r1, r2, r1
 800487c:	61b9      	str	r1, [r7, #24]
 800487e:	4629      	mov	r1, r5
 8004880:	eb63 0301 	sbc.w	r3, r3, r1
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004892:	4659      	mov	r1, fp
 8004894:	018b      	lsls	r3, r1, #6
 8004896:	4651      	mov	r1, sl
 8004898:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800489c:	4651      	mov	r1, sl
 800489e:	018a      	lsls	r2, r1, #6
 80048a0:	4651      	mov	r1, sl
 80048a2:	ebb2 0801 	subs.w	r8, r2, r1
 80048a6:	4659      	mov	r1, fp
 80048a8:	eb63 0901 	sbc.w	r9, r3, r1
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c0:	4690      	mov	r8, r2
 80048c2:	4699      	mov	r9, r3
 80048c4:	4623      	mov	r3, r4
 80048c6:	eb18 0303 	adds.w	r3, r8, r3
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	462b      	mov	r3, r5
 80048ce:	eb49 0303 	adc.w	r3, r9, r3
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048e0:	4629      	mov	r1, r5
 80048e2:	024b      	lsls	r3, r1, #9
 80048e4:	4621      	mov	r1, r4
 80048e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ea:	4621      	mov	r1, r4
 80048ec:	024a      	lsls	r2, r1, #9
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048f6:	2200      	movs	r2, #0
 80048f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80048fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004900:	f7fb fcde 	bl	80002c0 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800490e:	e065      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x420>
 8004910:	40023800 	.word	0x40023800
 8004914:	00f42400 	.word	0x00f42400
 8004918:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x458>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	2200      	movs	r2, #0
 8004924:	4618      	mov	r0, r3
 8004926:	4611      	mov	r1, r2
 8004928:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800492c:	653b      	str	r3, [r7, #80]	@ 0x50
 800492e:	2300      	movs	r3, #0
 8004930:	657b      	str	r3, [r7, #84]	@ 0x54
 8004932:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004936:	4642      	mov	r2, r8
 8004938:	464b      	mov	r3, r9
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4641      	mov	r1, r8
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	4649      	mov	r1, r9
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004968:	4659      	mov	r1, fp
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004972:	4651      	mov	r1, sl
 8004974:	018a      	lsls	r2, r1, #6
 8004976:	4651      	mov	r1, sl
 8004978:	1a54      	subs	r4, r2, r1
 800497a:	4659      	mov	r1, fp
 800497c:	eb63 0501 	sbc.w	r5, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	00eb      	lsls	r3, r5, #3
 800498a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800498e:	00e2      	lsls	r2, r4, #3
 8004990:	4614      	mov	r4, r2
 8004992:	461d      	mov	r5, r3
 8004994:	4643      	mov	r3, r8
 8004996:	18e3      	adds	r3, r4, r3
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	464b      	mov	r3, r9
 800499c:	eb45 0303 	adc.w	r3, r5, r3
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ae:	4629      	mov	r1, r5
 80049b0:	028b      	lsls	r3, r1, #10
 80049b2:	4621      	mov	r1, r4
 80049b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b8:	4621      	mov	r1, r4
 80049ba:	028a      	lsls	r2, r1, #10
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049c4:	2200      	movs	r2, #0
 80049c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80049ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049ce:	f7fb fc77 	bl	80002c0 <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4613      	mov	r3, r2
 80049d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x458>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0f1b      	lsrs	r3, r3, #28
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80049ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049fa:	e003      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x45c>)
 80049fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	37b8      	adds	r7, #184	@ 0xb8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400

08004a1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e28d      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8083 	beq.w	8004b42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a3c:	4b94      	ldr	r3, [pc, #592]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d019      	beq.n	8004a7c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a48:	4b91      	ldr	r3, [pc, #580]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a54:	4b8e      	ldr	r3, [pc, #568]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a60:	d00c      	beq.n	8004a7c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a62:	4b8b      	ldr	r3, [pc, #556]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d112      	bne.n	8004a94 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6e:	4b88      	ldr	r3, [pc, #544]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	4b84      	ldr	r3, [pc, #528]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d05b      	beq.n	8004b40 <HAL_RCC_OscConfig+0x124>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d157      	bne.n	8004b40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e25a      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x90>
 8004a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7b      	ldr	r2, [pc, #492]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e01d      	b.n	8004ae8 <HAL_RCC_OscConfig+0xcc>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xb4>
 8004ab6:	4b76      	ldr	r3, [pc, #472]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a75      	ldr	r2, [pc, #468]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b73      	ldr	r3, [pc, #460]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a72      	ldr	r2, [pc, #456]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0xcc>
 8004ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b6c      	ldr	r3, [pc, #432]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe f886 	bl	8002c00 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fe f882 	bl	8002c00 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	@ 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e21f      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4b61      	ldr	r3, [pc, #388]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0xdc>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fe f872 	bl	8002c00 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe f86e 	bl	8002c00 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	@ 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e20b      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	4b57      	ldr	r3, [pc, #348]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x104>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d06f      	beq.n	8004c2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b4e:	4b50      	ldr	r3, [pc, #320]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d105      	bne.n	8004b72 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b66:	4b4a      	ldr	r3, [pc, #296]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b47      	ldr	r3, [pc, #284]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b44      	ldr	r3, [pc, #272]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b41      	ldr	r3, [pc, #260]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x186>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1d3      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4937      	ldr	r1, [pc, #220]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b34      	ldr	r3, [pc, #208]	@ (8004c94 <HAL_RCC_OscConfig+0x278>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe f81b 	bl	8002c00 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe f817 	bl	8002c00 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1b4      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b28      	ldr	r3, [pc, #160]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4925      	ldr	r1, [pc, #148]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <HAL_RCC_OscConfig+0x278>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fd fffa 	bl	8002c00 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fd fff6 	bl	8002c00 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e193      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b1b      	ldr	r3, [pc, #108]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d036      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fd ffda 	bl	8002c00 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fd ffd6 	bl	8002c00 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e173      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x234>
 8004c6e:	e01b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fd ffc3 	bl	8002c00 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e00e      	b.n	8004c9c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fd ffbf 	bl	8002c00 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d907      	bls.n	8004c9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e15c      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
 8004c90:	40023800 	.word	0x40023800
 8004c94:	42470000 	.word	0x42470000
 8004c98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ea      	bne.n	8004c7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8097 	beq.w	8004de4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b83      	ldr	r3, [pc, #524]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b79      	ldr	r3, [pc, #484]	@ (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf2:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd ff7f 	bl	8002c00 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fd ff7b 	bl	8002c00 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e118      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d18:	4b6c      	ldr	r3, [pc, #432]	@ (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x31e>
 8004d2c:	4b66      	ldr	r3, [pc, #408]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a65      	ldr	r2, [pc, #404]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d38:	e01c      	b.n	8004d74 <HAL_RCC_OscConfig+0x358>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x340>
 8004d42:	4b61      	ldr	r3, [pc, #388]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a60      	ldr	r2, [pc, #384]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d52:	4a5d      	ldr	r2, [pc, #372]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0x358>
 8004d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	4a59      	ldr	r2, [pc, #356]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d68:	4b57      	ldr	r3, [pc, #348]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6c:	4a56      	ldr	r2, [pc, #344]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d6e:	f023 0304 	bic.w	r3, r3, #4
 8004d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd ff40 	bl	8002c00 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd ff3c 	bl	8002c00 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0d7      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RCC_OscConfig+0x368>
 8004da6:	e014      	b.n	8004dd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fd ff2a 	bl	8002c00 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db0:	f7fd ff26 	bl	8002c00 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e0c1      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	4b40      	ldr	r3, [pc, #256]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ee      	bne.n	8004db0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80ad 	beq.w	8004f48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dee:	4b36      	ldr	r3, [pc, #216]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d060      	beq.n	8004ebc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d145      	bne.n	8004e8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b33      	ldr	r3, [pc, #204]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd fefa 	bl	8002c00 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fd fef6 	bl	8002c00 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e093      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	4b29      	ldr	r3, [pc, #164]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	019b      	lsls	r3, r3, #6
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	071b      	lsls	r3, r3, #28
 8004e5a:	491b      	ldr	r1, [pc, #108]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fd fecb 	bl	8002c00 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7fd fec7 	bl	8002c00 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e064      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e80:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x452>
 8004e8c:	e05c      	b.n	8004f48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd feb4 	bl	8002c00 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd feb0 	bl	8002c00 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04d      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x480>
 8004eba:	e045      	b.n	8004f48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e040      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f54 <HAL_RCC_OscConfig+0x538>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d030      	beq.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d129      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d122      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d119      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d10f      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800

08004f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e07b      	b.n	8005062 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d108      	bne.n	8004f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f7a:	d009      	beq.n	8004f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	61da      	str	r2, [r3, #28]
 8004f82:	e005      	b.n	8004f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fd fa06 	bl	80023bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005014:	ea42 0103 	orr.w	r1, r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0104 	and.w	r1, r3, #4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	f003 0210 	and.w	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08a      	sub	sp, #40	@ 0x28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005078:	2301      	movs	r3, #1
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800507c:	f7fd fdc0 	bl	8002c00 <HAL_GetTick>
 8005080:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005088:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005094:	7ffb      	ldrb	r3, [r7, #31]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d00c      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x4a>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050a0:	d106      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x46>
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d001      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	e17f      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x5c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x5c>
 80050c0:	887b      	ldrh	r3, [r7, #2]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e174      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x6e>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e16d      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d003      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2205      	movs	r2, #5
 80050f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	887a      	ldrh	r2, [r7, #2]
 800510a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	887a      	ldrh	r2, [r7, #2]
 800511c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b40      	cmp	r3, #64	@ 0x40
 8005136:	d007      	beq.n	8005148 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005150:	d17e      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_SPI_TransmitReceive+0xf6>
 800515a:	8afb      	ldrh	r3, [r7, #22]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d16c      	bne.n	800523a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005184:	e059      	b.n	800523a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d11b      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x162>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_SPI_TransmitReceive+0x162>
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d113      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a8:	881a      	ldrh	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b4:	1c9a      	adds	r2, r3, #2
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d119      	bne.n	800520e <HAL_SPI_TransmitReceive+0x1a4>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d014      	beq.n	800520e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	b292      	uxth	r2, r2
 80051f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800520a:	2301      	movs	r3, #1
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800520e:	f7fd fcf7 	bl	8002c00 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800521a:	429a      	cmp	r2, r3
 800521c:	d80d      	bhi.n	800523a <HAL_SPI_TransmitReceive+0x1d0>
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d009      	beq.n	800523a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0bc      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1a0      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x11c>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d19b      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x11c>
 800524e:	e082      	b.n	8005356 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_TransmitReceive+0x1f4>
 8005258:	8afb      	ldrh	r3, [r7, #22]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d171      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005284:	e05d      	b.n	8005342 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d11c      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x264>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d017      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x264>
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d114      	bne.n	80052ce <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d119      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x2a6>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d014      	beq.n	8005310 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800530c:	2301      	movs	r3, #1
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005310:	f7fd fc76 	bl	8002c00 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800531c:	429a      	cmp	r2, r3
 800531e:	d803      	bhi.n	8005328 <HAL_SPI_TransmitReceive+0x2be>
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d102      	bne.n	800532e <HAL_SPI_TransmitReceive+0x2c4>
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e038      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d19c      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x21c>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d197      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f8b6 	bl	80054cc <SPI_EndRxTxTransaction>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e01d      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80053b2:	2300      	movs	r3, #0
  }
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3728      	adds	r7, #40	@ 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053cc:	f7fd fc18 	bl	8002c00 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053dc:	f7fd fc10 	bl	8002c00 <HAL_GetTick>
 80053e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053e2:	4b39      	ldr	r3, [pc, #228]	@ (80054c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	015b      	lsls	r3, r3, #5
 80053e8:	0d1b      	lsrs	r3, r3, #20
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053f2:	e054      	b.n	800549e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d050      	beq.n	800549e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053fc:	f7fd fc00 	bl	8002c00 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	429a      	cmp	r2, r3
 800540a:	d902      	bls.n	8005412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d13d      	bne.n	800548e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800542a:	d111      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005434:	d004      	beq.n	8005440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543e:	d107      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005458:	d10f      	bne.n	800547a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e017      	b.n	80054be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3b01      	subs	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	bf0c      	ite	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	2300      	movne	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d19b      	bne.n	80053f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000004 	.word	0x20000004

080054cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2201      	movs	r2, #1
 80054e0:	2102      	movs	r1, #2
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff ff6a 	bl	80053bc <SPI_WaitFlagStateUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e032      	b.n	8005564 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054fe:	4b1b      	ldr	r3, [pc, #108]	@ (800556c <SPI_EndRxTxTransaction+0xa0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1b      	ldr	r2, [pc, #108]	@ (8005570 <SPI_EndRxTxTransaction+0xa4>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	0d5b      	lsrs	r3, r3, #21
 800550a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800551c:	d112      	bne.n	8005544 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2200      	movs	r2, #0
 8005526:	2180      	movs	r1, #128	@ 0x80
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7ff ff47 	bl	80053bc <SPI_WaitFlagStateUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d016      	beq.n	8005562 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e00f      	b.n	8005564 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3b01      	subs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555a:	2b80      	cmp	r3, #128	@ 0x80
 800555c:	d0f2      	beq.n	8005544 <SPI_EndRxTxTransaction+0x78>
 800555e:	e000      	b.n	8005562 <SPI_EndRxTxTransaction+0x96>
        break;
 8005560:	bf00      	nop
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000004 	.word	0x20000004
 8005570:	165e9f81 	.word	0x165e9f81

08005574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e041      	b.n	800560a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fc fff2 	bl	8002584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f000 fc58 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e041      	b.n	80056a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f839 	bl	80056b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f000 fc09 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e041      	b.n	800575a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f839 	bl	8005762 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f000 fbb0 	bl	8005e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01b      	beq.n	80057da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f06f 0202 	mvn.w	r2, #2
 80057aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7fb f803 	bl	80007cc <HAL_TIM_IC_CaptureCallback>
 80057c6:	e005      	b.n	80057d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fb2f 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb36 	bl	8005e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d020      	beq.n	8005826 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01b      	beq.n	8005826 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0204 	mvn.w	r2, #4
 80057f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7fa ffdd 	bl	80007cc <HAL_TIM_IC_CaptureCallback>
 8005812:	e005      	b.n	8005820 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fb09 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fb10 	bl	8005e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01b      	beq.n	8005872 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0208 	mvn.w	r2, #8
 8005842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2204      	movs	r2, #4
 8005848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fa ffb7 	bl	80007cc <HAL_TIM_IC_CaptureCallback>
 800585e:	e005      	b.n	800586c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fae3 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 faea 	bl	8005e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	d020      	beq.n	80058be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01b      	beq.n	80058be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f06f 0210 	mvn.w	r2, #16
 800588e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2208      	movs	r2, #8
 8005894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fa ff91 	bl	80007cc <HAL_TIM_IC_CaptureCallback>
 80058aa:	e005      	b.n	80058b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fabd 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fac4 	bl	8005e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f06f 0201 	mvn.w	r2, #1
 80058da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fc fc85 	bl	80021ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00c      	beq.n	8005906 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 ff57 	bl	80067b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fa95 	bl	8005e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f06f 0220 	mvn.w	r2, #32
 8005946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 ff29 	bl	80067a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800594e:	bf00      	nop
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b086      	sub	sp, #24
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005970:	2302      	movs	r3, #2
 8005972:	e088      	b.n	8005a86 <HAL_TIM_IC_ConfigChannel+0x130>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d11b      	bne.n	80059ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005992:	f000 fcc5 	bl	8006320 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 020c 	bic.w	r2, r2, #12
 80059a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6999      	ldr	r1, [r3, #24]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	619a      	str	r2, [r3, #24]
 80059b8:	e060      	b.n	8005a7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d11c      	bne.n	80059fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059d0:	f000 fd49 	bl	8006466 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6999      	ldr	r1, [r3, #24]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	021a      	lsls	r2, r3, #8
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	619a      	str	r2, [r3, #24]
 80059f8:	e040      	b.n	8005a7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a10:	f000 fd96 	bl	8006540 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69da      	ldr	r2, [r3, #28]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 020c 	bic.w	r2, r2, #12
 8005a22:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69d9      	ldr	r1, [r3, #28]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	61da      	str	r2, [r3, #28]
 8005a36:	e021      	b.n	8005a7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b0c      	cmp	r3, #12
 8005a3c:	d11c      	bne.n	8005a78 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a4e:	f000 fdb3 	bl	80065b8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69d9      	ldr	r1, [r3, #28]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	021a      	lsls	r2, r3, #8
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	61da      	str	r2, [r3, #28]
 8005a76:	e001      	b.n	8005a7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e0ae      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	f200 809f 	bhi.w	8005bfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005abe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005af9 	.word	0x08005af9
 8005ac8:	08005bfd 	.word	0x08005bfd
 8005acc:	08005bfd 	.word	0x08005bfd
 8005ad0:	08005bfd 	.word	0x08005bfd
 8005ad4:	08005b39 	.word	0x08005b39
 8005ad8:	08005bfd 	.word	0x08005bfd
 8005adc:	08005bfd 	.word	0x08005bfd
 8005ae0:	08005bfd 	.word	0x08005bfd
 8005ae4:	08005b7b 	.word	0x08005b7b
 8005ae8:	08005bfd 	.word	0x08005bfd
 8005aec:	08005bfd 	.word	0x08005bfd
 8005af0:	08005bfd 	.word	0x08005bfd
 8005af4:	08005bbb 	.word	0x08005bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fa5e 	bl	8005fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6999      	ldr	r1, [r3, #24]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	619a      	str	r2, [r3, #24]
      break;
 8005b36:	e064      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 faae 	bl	80060a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]
      break;
 8005b78:	e043      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fb03 	bl	800618c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0208 	orr.w	r2, r2, #8
 8005b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0204 	bic.w	r2, r2, #4
 8005ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69d9      	ldr	r1, [r3, #28]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	61da      	str	r2, [r3, #28]
      break;
 8005bb8:	e023      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fb57 	bl	8006274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	021a      	lsls	r2, r3, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	61da      	str	r2, [r3, #28]
      break;
 8005bfa:	e002      	b.n	8005c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e0b4      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x186>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c68:	d03e      	beq.n	8005ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6e:	f200 8087 	bhi.w	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	f000 8086 	beq.w	8005d86 <HAL_TIM_ConfigClockSource+0x172>
 8005c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7e:	d87f      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b70      	cmp	r3, #112	@ 0x70
 8005c82:	d01a      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0xa6>
 8005c84:	2b70      	cmp	r3, #112	@ 0x70
 8005c86:	d87b      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b60      	cmp	r3, #96	@ 0x60
 8005c8a:	d050      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x11a>
 8005c8c:	2b60      	cmp	r3, #96	@ 0x60
 8005c8e:	d877      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c90:	2b50      	cmp	r3, #80	@ 0x50
 8005c92:	d03c      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0xfa>
 8005c94:	2b50      	cmp	r3, #80	@ 0x50
 8005c96:	d873      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005c98:	2b40      	cmp	r3, #64	@ 0x40
 8005c9a:	d058      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x13a>
 8005c9c:	2b40      	cmp	r3, #64	@ 0x40
 8005c9e:	d86f      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca0:	2b30      	cmp	r3, #48	@ 0x30
 8005ca2:	d064      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005ca4:	2b30      	cmp	r3, #48	@ 0x30
 8005ca6:	d86b      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d060      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d867      	bhi.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05c      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d05a      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	e062      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cca:	f000 fccd 	bl	8006668 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	609a      	str	r2, [r3, #8]
      break;
 8005ce6:	e04f      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf8:	f000 fcb6 	bl	8006668 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d0a:	609a      	str	r2, [r3, #8]
      break;
 8005d0c:	e03c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 fb74 	bl	8006408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2150      	movs	r1, #80	@ 0x50
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fc83 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e02c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f000 fbd0 	bl	80064e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2160      	movs	r1, #96	@ 0x60
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fc73 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005d4c:	e01c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f000 fb54 	bl	8006408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2140      	movs	r1, #64	@ 0x40
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fc63 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e00c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f000 fc5a 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8005d7e:	e003      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      break;
 8005d84:	e000      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	d831      	bhi.n	8005e1c <HAL_TIM_ReadCapturedValue+0x78>
 8005db8:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbe:	bf00      	nop
 8005dc0:	08005df5 	.word	0x08005df5
 8005dc4:	08005e1d 	.word	0x08005e1d
 8005dc8:	08005e1d 	.word	0x08005e1d
 8005dcc:	08005e1d 	.word	0x08005e1d
 8005dd0:	08005dff 	.word	0x08005dff
 8005dd4:	08005e1d 	.word	0x08005e1d
 8005dd8:	08005e1d 	.word	0x08005e1d
 8005ddc:	08005e1d 	.word	0x08005e1d
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e1d 	.word	0x08005e1d
 8005de8:	08005e1d 	.word	0x08005e1d
 8005dec:	08005e1d 	.word	0x08005e1d
 8005df0:	08005e13 	.word	0x08005e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfa:	60fb      	str	r3, [r7, #12]

      break;
 8005dfc:	e00f      	b.n	8005e1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e04:	60fb      	str	r3, [r7, #12]

      break;
 8005e06:	e00a      	b.n	8005e1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	60fb      	str	r3, [r7, #12]

      break;
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e18:	60fb      	str	r3, [r7, #12]

      break;
 8005e1a:	e000      	b.n	8005e1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e1c:	bf00      	nop
  }

  return tmpreg;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a46      	ldr	r2, [pc, #280]	@ (8005f94 <TIM_Base_SetConfig+0x12c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d013      	beq.n	8005ea8 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e86:	d00f      	beq.n	8005ea8 <TIM_Base_SetConfig+0x40>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a43      	ldr	r2, [pc, #268]	@ (8005f98 <TIM_Base_SetConfig+0x130>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00b      	beq.n	8005ea8 <TIM_Base_SetConfig+0x40>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a42      	ldr	r2, [pc, #264]	@ (8005f9c <TIM_Base_SetConfig+0x134>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d007      	beq.n	8005ea8 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a41      	ldr	r2, [pc, #260]	@ (8005fa0 <TIM_Base_SetConfig+0x138>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	@ (8005fa4 <TIM_Base_SetConfig+0x13c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d108      	bne.n	8005eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a35      	ldr	r2, [pc, #212]	@ (8005f94 <TIM_Base_SetConfig+0x12c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d02b      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec8:	d027      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a32      	ldr	r2, [pc, #200]	@ (8005f98 <TIM_Base_SetConfig+0x130>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d023      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a31      	ldr	r2, [pc, #196]	@ (8005f9c <TIM_Base_SetConfig+0x134>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01f      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a30      	ldr	r2, [pc, #192]	@ (8005fa0 <TIM_Base_SetConfig+0x138>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d01b      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa4 <TIM_Base_SetConfig+0x13c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d017      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2e      	ldr	r2, [pc, #184]	@ (8005fa8 <TIM_Base_SetConfig+0x140>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8005fac <TIM_Base_SetConfig+0x144>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00f      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb0 <TIM_Base_SetConfig+0x148>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00b      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a2b      	ldr	r2, [pc, #172]	@ (8005fb4 <TIM_Base_SetConfig+0x14c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d007      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb8 <TIM_Base_SetConfig+0x150>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d003      	beq.n	8005f1a <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a29      	ldr	r2, [pc, #164]	@ (8005fbc <TIM_Base_SetConfig+0x154>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d108      	bne.n	8005f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a10      	ldr	r2, [pc, #64]	@ (8005f94 <TIM_Base_SetConfig+0x12c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_Base_SetConfig+0xf8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a12      	ldr	r2, [pc, #72]	@ (8005fa4 <TIM_Base_SetConfig+0x13c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d103      	bne.n	8005f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d105      	bne.n	8005f86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f023 0201 	bic.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	611a      	str	r2, [r3, #16]
  }
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40010400 	.word	0x40010400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800
 8005fb4:	40001800 	.word	0x40001800
 8005fb8:	40001c00 	.word	0x40001c00
 8005fbc:	40002000 	.word	0x40002000

08005fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f023 0201 	bic.w	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 0302 	bic.w	r3, r3, #2
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a20      	ldr	r2, [pc, #128]	@ (8006098 <TIM_OC1_SetConfig+0xd8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_OC1_SetConfig+0x64>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a1f      	ldr	r2, [pc, #124]	@ (800609c <TIM_OC1_SetConfig+0xdc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10c      	bne.n	800603e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0308 	bic.w	r3, r3, #8
 800602a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0304 	bic.w	r3, r3, #4
 800603c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a15      	ldr	r2, [pc, #84]	@ (8006098 <TIM_OC1_SetConfig+0xd8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC1_SetConfig+0x8e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a14      	ldr	r2, [pc, #80]	@ (800609c <TIM_OC1_SetConfig+0xdc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d111      	bne.n	8006072 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800605c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40010000 	.word	0x40010000
 800609c:	40010400 	.word	0x40010400

080060a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f023 0210 	bic.w	r2, r3, #16
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0320 	bic.w	r3, r3, #32
 80060ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a22      	ldr	r2, [pc, #136]	@ (8006184 <TIM_OC2_SetConfig+0xe4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_OC2_SetConfig+0x68>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a21      	ldr	r2, [pc, #132]	@ (8006188 <TIM_OC2_SetConfig+0xe8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d10d      	bne.n	8006124 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800610e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a17      	ldr	r2, [pc, #92]	@ (8006184 <TIM_OC2_SetConfig+0xe4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_OC2_SetConfig+0x94>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a16      	ldr	r2, [pc, #88]	@ (8006188 <TIM_OC2_SetConfig+0xe8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d113      	bne.n	800615c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800613a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40010400 	.word	0x40010400

0800618c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a21      	ldr	r2, [pc, #132]	@ (800626c <TIM_OC3_SetConfig+0xe0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_OC3_SetConfig+0x66>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a20      	ldr	r2, [pc, #128]	@ (8006270 <TIM_OC3_SetConfig+0xe4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10d      	bne.n	800620e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a16      	ldr	r2, [pc, #88]	@ (800626c <TIM_OC3_SetConfig+0xe0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_OC3_SetConfig+0x92>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a15      	ldr	r2, [pc, #84]	@ (8006270 <TIM_OC3_SetConfig+0xe4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d113      	bne.n	8006246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800622c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40010000 	.word	0x40010000
 8006270:	40010400 	.word	0x40010400

08006274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	031b      	lsls	r3, r3, #12
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a12      	ldr	r2, [pc, #72]	@ (8006318 <TIM_OC4_SetConfig+0xa4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC4_SetConfig+0x68>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a11      	ldr	r2, [pc, #68]	@ (800631c <TIM_OC4_SetConfig+0xa8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d109      	bne.n	80062f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40010400 	.word	0x40010400

08006320 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f023 0201 	bic.w	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a28      	ldr	r2, [pc, #160]	@ (80063ec <TIM_TI1_SetConfig+0xcc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01b      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006354:	d017      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a25      	ldr	r2, [pc, #148]	@ (80063f0 <TIM_TI1_SetConfig+0xd0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a24      	ldr	r2, [pc, #144]	@ (80063f4 <TIM_TI1_SetConfig+0xd4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00f      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a23      	ldr	r2, [pc, #140]	@ (80063f8 <TIM_TI1_SetConfig+0xd8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4a22      	ldr	r2, [pc, #136]	@ (80063fc <TIM_TI1_SetConfig+0xdc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a21      	ldr	r2, [pc, #132]	@ (8006400 <TIM_TI1_SetConfig+0xe0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a20      	ldr	r2, [pc, #128]	@ (8006404 <TIM_TI1_SetConfig+0xe4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <TIM_TI1_SetConfig+0x6a>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <TIM_TI1_SetConfig+0x6c>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e003      	b.n	80063aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f023 030a 	bic.w	r3, r3, #10
 80063c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f003 030a 	and.w	r3, r3, #10
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800

08006408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f023 0201 	bic.w	r2, r3, #1
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 030a 	bic.w	r3, r3, #10
 8006444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006466:	b480      	push	{r7}
 8006468:	b087      	sub	sp, #28
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0210 	bic.w	r2, r3, #16
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	031b      	lsls	r3, r3, #12
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	621a      	str	r2, [r3, #32]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f023 0210 	bic.w	r2, r3, #16
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800650a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	031b      	lsls	r3, r3, #12
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800651c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	621a      	str	r2, [r3, #32]
}
 8006534:	bf00      	nop
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f023 0303 	bic.w	r3, r3, #3
 800656c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800657c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	b2db      	uxtb	r3, r3
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006590:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	621a      	str	r2, [r3, #32]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	031b      	lsls	r3, r3, #12
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800660a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	031b      	lsls	r3, r3, #12
 8006610:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	f043 0307 	orr.w	r3, r3, #7
 8006654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	021a      	lsls	r2, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	431a      	orrs	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4313      	orrs	r3, r2
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	609a      	str	r2, [r3, #8]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066bc:	2302      	movs	r3, #2
 80066be:	e05a      	b.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a21      	ldr	r2, [pc, #132]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d022      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670c:	d01d      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1d      	ldr	r2, [pc, #116]	@ (8006788 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d018      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1b      	ldr	r2, [pc, #108]	@ (800678c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d013      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1a      	ldr	r2, [pc, #104]	@ (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00e      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a18      	ldr	r2, [pc, #96]	@ (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a17      	ldr	r2, [pc, #92]	@ (8006798 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d004      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a15      	ldr	r2, [pc, #84]	@ (800679c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d10c      	bne.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4313      	orrs	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40010000 	.word	0x40010000
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40010400 	.word	0x40010400
 8006798:	40014000 	.word	0x40014000
 800679c:	40001800 	.word	0x40001800

080067a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e042      	b.n	8006860 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fb ff9a 	bl	8002728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2224      	movs	r2, #36	@ 0x24
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800680a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fdbd 	bl	800738c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	@ 0x28
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b20      	cmp	r3, #32
 8006886:	d175      	bne.n	8006974 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_UART_Transmit+0x2c>
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e06e      	b.n	8006976 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2221      	movs	r2, #33	@ 0x21
 80068a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068a6:	f7fc f9ab 	bl	8002c00 <HAL_GetTick>
 80068aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	88fa      	ldrh	r2, [r7, #6]
 80068b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	88fa      	ldrh	r2, [r7, #6]
 80068b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068c0:	d108      	bne.n	80068d4 <HAL_UART_Transmit+0x6c>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	e003      	b.n	80068dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068dc:	e02e      	b.n	800693c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2200      	movs	r2, #0
 80068e6:	2180      	movs	r1, #128	@ 0x80
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fb1f 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e03a      	b.n	8006976 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006914:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	3302      	adds	r3, #2
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	e007      	b.n	800692e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	781a      	ldrb	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	3301      	adds	r3, #1
 800692c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1cb      	bne.n	80068de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2200      	movs	r2, #0
 800694e:	2140      	movs	r1, #64	@ 0x40
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 faeb 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e006      	b.n	8006976 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	e000      	b.n	8006976 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006974:	2302      	movs	r3, #2
  }
}
 8006976:	4618      	mov	r0, r3
 8006978:	3720      	adds	r7, #32
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	4613      	mov	r3, r2
 800698a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b20      	cmp	r3, #32
 8006996:	d112      	bne.n	80069be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_UART_Receive_IT+0x26>
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e00b      	b.n	80069c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	461a      	mov	r2, r3
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fb12 	bl	8006fde <UART_Start_Receive_IT>
 80069ba:	4603      	mov	r3, r0
 80069bc:	e000      	b.n	80069c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b0ba      	sub	sp, #232	@ 0xe8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10f      	bne.n	8006a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <HAL_UART_IRQHandler+0x66>
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fbf2 	bl	8007210 <UART_Receive_IT>
      return;
 8006a2c:	e25b      	b.n	8006ee6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 80de 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x22c>
 8006a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80d1 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <HAL_UART_IRQHandler+0xae>
 8006a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <HAL_UART_IRQHandler+0xd2>
 8006a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a92:	f043 0202 	orr.w	r2, r3, #2
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <HAL_UART_IRQHandler+0xf6>
 8006aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab6:	f043 0204 	orr.w	r2, r3, #4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d011      	beq.n	8006aee <HAL_UART_IRQHandler+0x126>
 8006aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae6:	f043 0208 	orr.w	r2, r3, #8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 81f2 	beq.w	8006edc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_UART_IRQHandler+0x14e>
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fb7d 	bl	8007210 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b40      	cmp	r3, #64	@ 0x40
 8006b22:	bf0c      	ite	eq
 8006b24:	2301      	moveq	r3, #1
 8006b26:	2300      	movne	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <HAL_UART_IRQHandler+0x17a>
 8006b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04f      	beq.n	8006be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa85 	bl	8007052 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b52:	2b40      	cmp	r3, #64	@ 0x40
 8006b54:	d141      	bne.n	8006bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1d9      	bne.n	8006b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d013      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bae:	4a7e      	ldr	r2, [pc, #504]	@ (8006da8 <HAL_UART_IRQHandler+0x3e0>)
 8006bb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fd f9fb 	bl	8003fb2 <HAL_DMA_Abort_IT>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d016      	beq.n	8006bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	e00e      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f994 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	e00a      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f990 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	e006      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f98c 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006bee:	e175      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	bf00      	nop
    return;
 8006bf2:	e173      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	f040 814f 	bne.w	8006e9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 8148 	beq.w	8006e9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8141 	beq.w	8006e9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3a:	2b40      	cmp	r3, #64	@ 0x40
 8006c3c:	f040 80b6 	bne.w	8006dac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8145 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	f080 813e 	bcs.w	8006ee0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c76:	f000 8088 	beq.w	8006d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1d9      	bne.n	8006c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3314      	adds	r3, #20
 8006ccc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006cd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006cea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e1      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e3      	bne.n	8006d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e3      	bne.n	8006d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fd f8a4 	bl	8003ed2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f8b7 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006da6:	e09b      	b.n	8006ee0 <HAL_UART_IRQHandler+0x518>
 8006da8:	08007119 	.word	0x08007119
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 808e 	beq.w	8006ee4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8089 	beq.w	8006ee4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006de8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006df6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006df8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e3      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3314      	adds	r3, #20
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	623b      	str	r3, [r7, #32]
   return(result);
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	f023 0301 	bic.w	r3, r3, #1
 8006e20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3314      	adds	r3, #20
 8006e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e3      	bne.n	8006e0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0310 	bic.w	r3, r3, #16
 8006e66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	330c      	adds	r3, #12
 8006e70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006e74:	61fa      	str	r2, [r7, #28]
 8006e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	69b9      	ldr	r1, [r7, #24]
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	617b      	str	r3, [r7, #20]
   return(result);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e3      	bne.n	8006e50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f83d 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e9a:	e023      	b.n	8006ee4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d009      	beq.n	8006ebc <HAL_UART_IRQHandler+0x4f4>
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f943 	bl	8007140 <UART_Transmit_IT>
    return;
 8006eba:	e014      	b.n	8006ee6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x51e>
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f983 	bl	80071e0 <UART_EndTransmit_IT>
    return;
 8006eda:	e004      	b.n	8006ee6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006edc:	bf00      	nop
 8006ede:	e002      	b.n	8006ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ee0:	bf00      	nop
 8006ee2:	e000      	b.n	8006ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ee4:	bf00      	nop
  }
}
 8006ee6:	37e8      	adds	r7, #232	@ 0xe8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3c:	e03b      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d037      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f46:	f7fb fe5b 	bl	8002c00 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	6a3a      	ldr	r2, [r7, #32]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d302      	bcc.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e03a      	b.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d023      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b80      	cmp	r3, #128	@ 0x80
 8006f72:	d020      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b40      	cmp	r3, #64	@ 0x40
 8006f78:	d01d      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d116      	bne.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f857 	bl	8007052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e00f      	b.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d0b4      	beq.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	88fa      	ldrh	r2, [r7, #6]
 8006ff6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2222      	movs	r2, #34	@ 0x22
 8007008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007022:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695a      	ldr	r2, [r3, #20]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0220 	orr.w	r2, r2, #32
 8007042:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007052:	b480      	push	{r7}
 8007054:	b095      	sub	sp, #84	@ 0x54
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800707a:	643a      	str	r2, [r7, #64]	@ 0x40
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e5      	bne.n	800705a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3314      	adds	r3, #20
 8007094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	61fb      	str	r3, [r7, #28]
   return(result);
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3314      	adds	r3, #20
 80070ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e5      	bne.n	800708e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d119      	bne.n	80070fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f023 0310 	bic.w	r3, r3, #16
 80070e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070ea:	61ba      	str	r2, [r7, #24]
 80070ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6979      	ldr	r1, [r7, #20]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	613b      	str	r3, [r7, #16]
   return(result);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e5      	bne.n	80070ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800710c:	bf00      	nop
 800710e:	3754      	adds	r7, #84	@ 0x54
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007124:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7ff fee4 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b21      	cmp	r3, #33	@ 0x21
 8007152:	d13e      	bne.n	80071d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800715c:	d114      	bne.n	8007188 <UART_Transmit_IT+0x48>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d110      	bne.n	8007188 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	621a      	str	r2, [r3, #32]
 8007186:	e008      	b.n	800719a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	1c59      	adds	r1, r3, #1
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6211      	str	r1, [r2, #32]
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800719e:	b29b      	uxth	r3, r3
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	4619      	mov	r1, r3
 80071a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10f      	bne.n	80071ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e000      	b.n	80071d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071d2:	2302      	movs	r3, #2
  }
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff fe73 	bl	8006eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08c      	sub	sp, #48	@ 0x30
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b22      	cmp	r3, #34	@ 0x22
 8007222:	f040 80ae 	bne.w	8007382 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722e:	d117      	bne.n	8007260 <UART_Receive_IT+0x50>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d113      	bne.n	8007260 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007238:	2300      	movs	r3, #0
 800723a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007240:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	b29b      	uxth	r3, r3
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	b29a      	uxth	r2, r3
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007258:	1c9a      	adds	r2, r3, #2
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	629a      	str	r2, [r3, #40]	@ 0x28
 800725e:	e026      	b.n	80072ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007272:	d007      	beq.n	8007284 <UART_Receive_IT+0x74>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <UART_Receive_IT+0x82>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	b2da      	uxtb	r2, r3
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	e008      	b.n	80072a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	4619      	mov	r1, r3
 80072bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d15d      	bne.n	800737e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0220 	bic.w	r2, r2, #32
 80072d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007304:	2b01      	cmp	r3, #1
 8007306:	d135      	bne.n	8007374 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	613b      	str	r3, [r7, #16]
   return(result);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f023 0310 	bic.w	r3, r3, #16
 8007324:	627b      	str	r3, [r7, #36]	@ 0x24
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800732e:	623a      	str	r2, [r7, #32]
 8007330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	69f9      	ldr	r1, [r7, #28]
 8007334:	6a3a      	ldr	r2, [r7, #32]
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	61bb      	str	r3, [r7, #24]
   return(result);
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b10      	cmp	r3, #16
 800734e:	d10a      	bne.n	8007366 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fdd1 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
 8007372:	e002      	b.n	800737a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7f9 f9a3 	bl	80006c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	e002      	b.n	8007384 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	e000      	b.n	8007384 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007382:	2302      	movs	r3, #2
  }
}
 8007384:	4618      	mov	r0, r3
 8007386:	3730      	adds	r7, #48	@ 0x30
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007390:	b0c0      	sub	sp, #256	@ 0x100
 8007392:	af00      	add	r7, sp, #0
 8007394:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	68d9      	ldr	r1, [r3, #12]
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	ea40 0301 	orr.w	r3, r0, r1
 80073b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073e4:	f021 010c 	bic.w	r1, r1, #12
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073f2:	430b      	orrs	r3, r1
 80073f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	6999      	ldr	r1, [r3, #24]
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	ea40 0301 	orr.w	r3, r0, r1
 8007412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b8f      	ldr	r3, [pc, #572]	@ (8007658 <UART_SetConfig+0x2cc>)
 800741c:	429a      	cmp	r2, r3
 800741e:	d005      	beq.n	800742c <UART_SetConfig+0xa0>
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b8d      	ldr	r3, [pc, #564]	@ (800765c <UART_SetConfig+0x2d0>)
 8007428:	429a      	cmp	r2, r3
 800742a:	d104      	bne.n	8007436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fd f8b2 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 8007430:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007434:	e003      	b.n	800743e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007436:	f7fd f899 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 800743a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007448:	f040 810c 	bne.w	8007664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800744c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007456:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800745a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	1891      	adds	r1, r2, r2
 8007464:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007466:	415b      	adcs	r3, r3
 8007468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800746a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800746e:	4621      	mov	r1, r4
 8007470:	eb12 0801 	adds.w	r8, r2, r1
 8007474:	4629      	mov	r1, r5
 8007476:	eb43 0901 	adc.w	r9, r3, r1
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800748a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800748e:	4690      	mov	r8, r2
 8007490:	4699      	mov	r9, r3
 8007492:	4623      	mov	r3, r4
 8007494:	eb18 0303 	adds.w	r3, r8, r3
 8007498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800749c:	462b      	mov	r3, r5
 800749e:	eb49 0303 	adc.w	r3, r9, r3
 80074a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074ba:	460b      	mov	r3, r1
 80074bc:	18db      	adds	r3, r3, r3
 80074be:	653b      	str	r3, [r7, #80]	@ 0x50
 80074c0:	4613      	mov	r3, r2
 80074c2:	eb42 0303 	adc.w	r3, r2, r3
 80074c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80074c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074d0:	f7f8 fef6 	bl	80002c0 <__aeabi_uldivmod>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4b61      	ldr	r3, [pc, #388]	@ (8007660 <UART_SetConfig+0x2d4>)
 80074da:	fba3 2302 	umull	r2, r3, r3, r2
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	011c      	lsls	r4, r3, #4
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	1891      	adds	r1, r2, r2
 80074fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074fc:	415b      	adcs	r3, r3
 80074fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007504:	4641      	mov	r1, r8
 8007506:	eb12 0a01 	adds.w	sl, r2, r1
 800750a:	4649      	mov	r1, r9
 800750c:	eb43 0b01 	adc.w	fp, r3, r1
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800751c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007524:	4692      	mov	sl, r2
 8007526:	469b      	mov	fp, r3
 8007528:	4643      	mov	r3, r8
 800752a:	eb1a 0303 	adds.w	r3, sl, r3
 800752e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007532:	464b      	mov	r3, r9
 8007534:	eb4b 0303 	adc.w	r3, fp, r3
 8007538:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007548:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800754c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007550:	460b      	mov	r3, r1
 8007552:	18db      	adds	r3, r3, r3
 8007554:	643b      	str	r3, [r7, #64]	@ 0x40
 8007556:	4613      	mov	r3, r2
 8007558:	eb42 0303 	adc.w	r3, r2, r3
 800755c:	647b      	str	r3, [r7, #68]	@ 0x44
 800755e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007566:	f7f8 feab 	bl	80002c0 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4611      	mov	r1, r2
 8007570:	4b3b      	ldr	r3, [pc, #236]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007572:	fba3 2301 	umull	r2, r3, r3, r1
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	@ 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1acb      	subs	r3, r1, r3
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007586:	4b36      	ldr	r3, [pc, #216]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007588:	fba3 2302 	umull	r2, r3, r3, r2
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007594:	441c      	add	r4, r3
 8007596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800759a:	2200      	movs	r2, #0
 800759c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	1891      	adds	r1, r2, r2
 80075ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075b0:	415b      	adcs	r3, r3
 80075b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075b8:	4641      	mov	r1, r8
 80075ba:	1851      	adds	r1, r2, r1
 80075bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80075be:	4649      	mov	r1, r9
 80075c0:	414b      	adcs	r3, r1
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075d0:	4659      	mov	r1, fp
 80075d2:	00cb      	lsls	r3, r1, #3
 80075d4:	4651      	mov	r1, sl
 80075d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075da:	4651      	mov	r1, sl
 80075dc:	00ca      	lsls	r2, r1, #3
 80075de:	4610      	mov	r0, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	4642      	mov	r2, r8
 80075e6:	189b      	adds	r3, r3, r2
 80075e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075ec:	464b      	mov	r3, r9
 80075ee:	460a      	mov	r2, r1
 80075f0:	eb42 0303 	adc.w	r3, r2, r3
 80075f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007604:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800760c:	460b      	mov	r3, r1
 800760e:	18db      	adds	r3, r3, r3
 8007610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007612:	4613      	mov	r3, r2
 8007614:	eb42 0303 	adc.w	r3, r2, r3
 8007618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800761a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800761e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007622:	f7f8 fe4d 	bl	80002c0 <__aeabi_uldivmod>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <UART_SetConfig+0x2d4>)
 800762c:	fba3 1302 	umull	r1, r3, r3, r2
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	2164      	movs	r1, #100	@ 0x64
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	3332      	adds	r3, #50	@ 0x32
 800763e:	4a08      	ldr	r2, [pc, #32]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f003 0207 	and.w	r2, r3, #7
 800764a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4422      	add	r2, r4
 8007652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007654:	e106      	b.n	8007864 <UART_SetConfig+0x4d8>
 8007656:	bf00      	nop
 8007658:	40011000 	.word	0x40011000
 800765c:	40011400 	.word	0x40011400
 8007660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007668:	2200      	movs	r2, #0
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800766e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007676:	4642      	mov	r2, r8
 8007678:	464b      	mov	r3, r9
 800767a:	1891      	adds	r1, r2, r2
 800767c:	6239      	str	r1, [r7, #32]
 800767e:	415b      	adcs	r3, r3
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
 8007682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007686:	4641      	mov	r1, r8
 8007688:	1854      	adds	r4, r2, r1
 800768a:	4649      	mov	r1, r9
 800768c:	eb43 0501 	adc.w	r5, r3, r1
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	00eb      	lsls	r3, r5, #3
 800769a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800769e:	00e2      	lsls	r2, r4, #3
 80076a0:	4614      	mov	r4, r2
 80076a2:	461d      	mov	r5, r3
 80076a4:	4643      	mov	r3, r8
 80076a6:	18e3      	adds	r3, r4, r3
 80076a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076ac:	464b      	mov	r3, r9
 80076ae:	eb45 0303 	adc.w	r3, r5, r3
 80076b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076d2:	4629      	mov	r1, r5
 80076d4:	008b      	lsls	r3, r1, #2
 80076d6:	4621      	mov	r1, r4
 80076d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076dc:	4621      	mov	r1, r4
 80076de:	008a      	lsls	r2, r1, #2
 80076e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076e4:	f7f8 fdec 	bl	80002c0 <__aeabi_uldivmod>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4b60      	ldr	r3, [pc, #384]	@ (8007870 <UART_SetConfig+0x4e4>)
 80076ee:	fba3 2302 	umull	r2, r3, r3, r2
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	011c      	lsls	r4, r3, #4
 80076f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007700:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	1891      	adds	r1, r2, r2
 800770e:	61b9      	str	r1, [r7, #24]
 8007710:	415b      	adcs	r3, r3
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007718:	4641      	mov	r1, r8
 800771a:	1851      	adds	r1, r2, r1
 800771c:	6139      	str	r1, [r7, #16]
 800771e:	4649      	mov	r1, r9
 8007720:	414b      	adcs	r3, r1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007730:	4659      	mov	r1, fp
 8007732:	00cb      	lsls	r3, r1, #3
 8007734:	4651      	mov	r1, sl
 8007736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773a:	4651      	mov	r1, sl
 800773c:	00ca      	lsls	r2, r1, #3
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	4603      	mov	r3, r0
 8007744:	4642      	mov	r2, r8
 8007746:	189b      	adds	r3, r3, r2
 8007748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800774c:	464b      	mov	r3, r9
 800774e:	460a      	mov	r2, r1
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007762:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007770:	4649      	mov	r1, r9
 8007772:	008b      	lsls	r3, r1, #2
 8007774:	4641      	mov	r1, r8
 8007776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800777a:	4641      	mov	r1, r8
 800777c:	008a      	lsls	r2, r1, #2
 800777e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007782:	f7f8 fd9d 	bl	80002c0 <__aeabi_uldivmod>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4611      	mov	r1, r2
 800778c:	4b38      	ldr	r3, [pc, #224]	@ (8007870 <UART_SetConfig+0x4e4>)
 800778e:	fba3 2301 	umull	r2, r3, r3, r1
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	2264      	movs	r2, #100	@ 0x64
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	1acb      	subs	r3, r1, r3
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	3332      	adds	r3, #50	@ 0x32
 80077a0:	4a33      	ldr	r2, [pc, #204]	@ (8007870 <UART_SetConfig+0x4e4>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077ac:	441c      	add	r4, r3
 80077ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b2:	2200      	movs	r2, #0
 80077b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80077b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80077b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077bc:	4642      	mov	r2, r8
 80077be:	464b      	mov	r3, r9
 80077c0:	1891      	adds	r1, r2, r2
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	415b      	adcs	r3, r3
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077cc:	4641      	mov	r1, r8
 80077ce:	1851      	adds	r1, r2, r1
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	4649      	mov	r1, r9
 80077d4:	414b      	adcs	r3, r1
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077e4:	4659      	mov	r1, fp
 80077e6:	00cb      	lsls	r3, r1, #3
 80077e8:	4651      	mov	r1, sl
 80077ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ee:	4651      	mov	r1, sl
 80077f0:	00ca      	lsls	r2, r1, #3
 80077f2:	4610      	mov	r0, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	4642      	mov	r2, r8
 80077fa:	189b      	adds	r3, r3, r2
 80077fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077fe:	464b      	mov	r3, r9
 8007800:	460a      	mov	r2, r1
 8007802:	eb42 0303 	adc.w	r3, r2, r3
 8007806:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	663b      	str	r3, [r7, #96]	@ 0x60
 8007812:	667a      	str	r2, [r7, #100]	@ 0x64
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007820:	4649      	mov	r1, r9
 8007822:	008b      	lsls	r3, r1, #2
 8007824:	4641      	mov	r1, r8
 8007826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800782a:	4641      	mov	r1, r8
 800782c:	008a      	lsls	r2, r1, #2
 800782e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007832:	f7f8 fd45 	bl	80002c0 <__aeabi_uldivmod>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <UART_SetConfig+0x4e4>)
 800783c:	fba3 1302 	umull	r1, r3, r3, r2
 8007840:	095b      	lsrs	r3, r3, #5
 8007842:	2164      	movs	r1, #100	@ 0x64
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	3332      	adds	r3, #50	@ 0x32
 800784e:	4a08      	ldr	r2, [pc, #32]	@ (8007870 <UART_SetConfig+0x4e4>)
 8007850:	fba2 2303 	umull	r2, r3, r2, r3
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4422      	add	r2, r4
 8007862:	609a      	str	r2, [r3, #8]
}
 8007864:	bf00      	nop
 8007866:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800786a:	46bd      	mov	sp, r7
 800786c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007870:	51eb851f 	.word	0x51eb851f

08007874 <std>:
 8007874:	2300      	movs	r3, #0
 8007876:	b510      	push	{r4, lr}
 8007878:	4604      	mov	r4, r0
 800787a:	e9c0 3300 	strd	r3, r3, [r0]
 800787e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007882:	6083      	str	r3, [r0, #8]
 8007884:	8181      	strh	r1, [r0, #12]
 8007886:	6643      	str	r3, [r0, #100]	@ 0x64
 8007888:	81c2      	strh	r2, [r0, #14]
 800788a:	6183      	str	r3, [r0, #24]
 800788c:	4619      	mov	r1, r3
 800788e:	2208      	movs	r2, #8
 8007890:	305c      	adds	r0, #92	@ 0x5c
 8007892:	f000 fa21 	bl	8007cd8 <memset>
 8007896:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <std+0x58>)
 8007898:	6263      	str	r3, [r4, #36]	@ 0x24
 800789a:	4b0d      	ldr	r3, [pc, #52]	@ (80078d0 <std+0x5c>)
 800789c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <std+0x60>)
 80078a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078a2:	4b0d      	ldr	r3, [pc, #52]	@ (80078d8 <std+0x64>)
 80078a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80078a6:	4b0d      	ldr	r3, [pc, #52]	@ (80078dc <std+0x68>)
 80078a8:	6224      	str	r4, [r4, #32]
 80078aa:	429c      	cmp	r4, r3
 80078ac:	d006      	beq.n	80078bc <std+0x48>
 80078ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078b2:	4294      	cmp	r4, r2
 80078b4:	d002      	beq.n	80078bc <std+0x48>
 80078b6:	33d0      	adds	r3, #208	@ 0xd0
 80078b8:	429c      	cmp	r4, r3
 80078ba:	d105      	bne.n	80078c8 <std+0x54>
 80078bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	f000 ba80 	b.w	8007dc8 <__retarget_lock_init_recursive>
 80078c8:	bd10      	pop	{r4, pc}
 80078ca:	bf00      	nop
 80078cc:	08007b29 	.word	0x08007b29
 80078d0:	08007b4b 	.word	0x08007b4b
 80078d4:	08007b83 	.word	0x08007b83
 80078d8:	08007ba7 	.word	0x08007ba7
 80078dc:	20000640 	.word	0x20000640

080078e0 <stdio_exit_handler>:
 80078e0:	4a02      	ldr	r2, [pc, #8]	@ (80078ec <stdio_exit_handler+0xc>)
 80078e2:	4903      	ldr	r1, [pc, #12]	@ (80078f0 <stdio_exit_handler+0x10>)
 80078e4:	4803      	ldr	r0, [pc, #12]	@ (80078f4 <stdio_exit_handler+0x14>)
 80078e6:	f000 b869 	b.w	80079bc <_fwalk_sglue>
 80078ea:	bf00      	nop
 80078ec:	20000010 	.word	0x20000010
 80078f0:	08008919 	.word	0x08008919
 80078f4:	20000020 	.word	0x20000020

080078f8 <cleanup_stdio>:
 80078f8:	6841      	ldr	r1, [r0, #4]
 80078fa:	4b0c      	ldr	r3, [pc, #48]	@ (800792c <cleanup_stdio+0x34>)
 80078fc:	4299      	cmp	r1, r3
 80078fe:	b510      	push	{r4, lr}
 8007900:	4604      	mov	r4, r0
 8007902:	d001      	beq.n	8007908 <cleanup_stdio+0x10>
 8007904:	f001 f808 	bl	8008918 <_fflush_r>
 8007908:	68a1      	ldr	r1, [r4, #8]
 800790a:	4b09      	ldr	r3, [pc, #36]	@ (8007930 <cleanup_stdio+0x38>)
 800790c:	4299      	cmp	r1, r3
 800790e:	d002      	beq.n	8007916 <cleanup_stdio+0x1e>
 8007910:	4620      	mov	r0, r4
 8007912:	f001 f801 	bl	8008918 <_fflush_r>
 8007916:	68e1      	ldr	r1, [r4, #12]
 8007918:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <cleanup_stdio+0x3c>)
 800791a:	4299      	cmp	r1, r3
 800791c:	d004      	beq.n	8007928 <cleanup_stdio+0x30>
 800791e:	4620      	mov	r0, r4
 8007920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007924:	f000 bff8 	b.w	8008918 <_fflush_r>
 8007928:	bd10      	pop	{r4, pc}
 800792a:	bf00      	nop
 800792c:	20000640 	.word	0x20000640
 8007930:	200006a8 	.word	0x200006a8
 8007934:	20000710 	.word	0x20000710

08007938 <global_stdio_init.part.0>:
 8007938:	b510      	push	{r4, lr}
 800793a:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <global_stdio_init.part.0+0x30>)
 800793c:	4c0b      	ldr	r4, [pc, #44]	@ (800796c <global_stdio_init.part.0+0x34>)
 800793e:	4a0c      	ldr	r2, [pc, #48]	@ (8007970 <global_stdio_init.part.0+0x38>)
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	4620      	mov	r0, r4
 8007944:	2200      	movs	r2, #0
 8007946:	2104      	movs	r1, #4
 8007948:	f7ff ff94 	bl	8007874 <std>
 800794c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007950:	2201      	movs	r2, #1
 8007952:	2109      	movs	r1, #9
 8007954:	f7ff ff8e 	bl	8007874 <std>
 8007958:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800795c:	2202      	movs	r2, #2
 800795e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007962:	2112      	movs	r1, #18
 8007964:	f7ff bf86 	b.w	8007874 <std>
 8007968:	20000778 	.word	0x20000778
 800796c:	20000640 	.word	0x20000640
 8007970:	080078e1 	.word	0x080078e1

08007974 <__sfp_lock_acquire>:
 8007974:	4801      	ldr	r0, [pc, #4]	@ (800797c <__sfp_lock_acquire+0x8>)
 8007976:	f000 ba28 	b.w	8007dca <__retarget_lock_acquire_recursive>
 800797a:	bf00      	nop
 800797c:	20000781 	.word	0x20000781

08007980 <__sfp_lock_release>:
 8007980:	4801      	ldr	r0, [pc, #4]	@ (8007988 <__sfp_lock_release+0x8>)
 8007982:	f000 ba23 	b.w	8007dcc <__retarget_lock_release_recursive>
 8007986:	bf00      	nop
 8007988:	20000781 	.word	0x20000781

0800798c <__sinit>:
 800798c:	b510      	push	{r4, lr}
 800798e:	4604      	mov	r4, r0
 8007990:	f7ff fff0 	bl	8007974 <__sfp_lock_acquire>
 8007994:	6a23      	ldr	r3, [r4, #32]
 8007996:	b11b      	cbz	r3, 80079a0 <__sinit+0x14>
 8007998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800799c:	f7ff bff0 	b.w	8007980 <__sfp_lock_release>
 80079a0:	4b04      	ldr	r3, [pc, #16]	@ (80079b4 <__sinit+0x28>)
 80079a2:	6223      	str	r3, [r4, #32]
 80079a4:	4b04      	ldr	r3, [pc, #16]	@ (80079b8 <__sinit+0x2c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f5      	bne.n	8007998 <__sinit+0xc>
 80079ac:	f7ff ffc4 	bl	8007938 <global_stdio_init.part.0>
 80079b0:	e7f2      	b.n	8007998 <__sinit+0xc>
 80079b2:	bf00      	nop
 80079b4:	080078f9 	.word	0x080078f9
 80079b8:	20000778 	.word	0x20000778

080079bc <_fwalk_sglue>:
 80079bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c0:	4607      	mov	r7, r0
 80079c2:	4688      	mov	r8, r1
 80079c4:	4614      	mov	r4, r2
 80079c6:	2600      	movs	r6, #0
 80079c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079cc:	f1b9 0901 	subs.w	r9, r9, #1
 80079d0:	d505      	bpl.n	80079de <_fwalk_sglue+0x22>
 80079d2:	6824      	ldr	r4, [r4, #0]
 80079d4:	2c00      	cmp	r4, #0
 80079d6:	d1f7      	bne.n	80079c8 <_fwalk_sglue+0xc>
 80079d8:	4630      	mov	r0, r6
 80079da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d907      	bls.n	80079f4 <_fwalk_sglue+0x38>
 80079e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079e8:	3301      	adds	r3, #1
 80079ea:	d003      	beq.n	80079f4 <_fwalk_sglue+0x38>
 80079ec:	4629      	mov	r1, r5
 80079ee:	4638      	mov	r0, r7
 80079f0:	47c0      	blx	r8
 80079f2:	4306      	orrs	r6, r0
 80079f4:	3568      	adds	r5, #104	@ 0x68
 80079f6:	e7e9      	b.n	80079cc <_fwalk_sglue+0x10>

080079f8 <iprintf>:
 80079f8:	b40f      	push	{r0, r1, r2, r3}
 80079fa:	b507      	push	{r0, r1, r2, lr}
 80079fc:	4906      	ldr	r1, [pc, #24]	@ (8007a18 <iprintf+0x20>)
 80079fe:	ab04      	add	r3, sp, #16
 8007a00:	6808      	ldr	r0, [r1, #0]
 8007a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a06:	6881      	ldr	r1, [r0, #8]
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	f000 fc5b 	bl	80082c4 <_vfiprintf_r>
 8007a0e:	b003      	add	sp, #12
 8007a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a14:	b004      	add	sp, #16
 8007a16:	4770      	bx	lr
 8007a18:	2000001c 	.word	0x2000001c

08007a1c <putchar>:
 8007a1c:	4b02      	ldr	r3, [pc, #8]	@ (8007a28 <putchar+0xc>)
 8007a1e:	4601      	mov	r1, r0
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	6882      	ldr	r2, [r0, #8]
 8007a24:	f001 b802 	b.w	8008a2c <_putc_r>
 8007a28:	2000001c 	.word	0x2000001c

08007a2c <_puts_r>:
 8007a2c:	6a03      	ldr	r3, [r0, #32]
 8007a2e:	b570      	push	{r4, r5, r6, lr}
 8007a30:	6884      	ldr	r4, [r0, #8]
 8007a32:	4605      	mov	r5, r0
 8007a34:	460e      	mov	r6, r1
 8007a36:	b90b      	cbnz	r3, 8007a3c <_puts_r+0x10>
 8007a38:	f7ff ffa8 	bl	800798c <__sinit>
 8007a3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a3e:	07db      	lsls	r3, r3, #31
 8007a40:	d405      	bmi.n	8007a4e <_puts_r+0x22>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	0598      	lsls	r0, r3, #22
 8007a46:	d402      	bmi.n	8007a4e <_puts_r+0x22>
 8007a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a4a:	f000 f9be 	bl	8007dca <__retarget_lock_acquire_recursive>
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	0719      	lsls	r1, r3, #28
 8007a52:	d502      	bpl.n	8007a5a <_puts_r+0x2e>
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d135      	bne.n	8007ac6 <_puts_r+0x9a>
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f000 f8e5 	bl	8007c2c <__swsetup_r>
 8007a62:	b380      	cbz	r0, 8007ac6 <_puts_r+0x9a>
 8007a64:	f04f 35ff 	mov.w	r5, #4294967295
 8007a68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a6a:	07da      	lsls	r2, r3, #31
 8007a6c:	d405      	bmi.n	8007a7a <_puts_r+0x4e>
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	059b      	lsls	r3, r3, #22
 8007a72:	d402      	bmi.n	8007a7a <_puts_r+0x4e>
 8007a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a76:	f000 f9a9 	bl	8007dcc <__retarget_lock_release_recursive>
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da04      	bge.n	8007a8c <_puts_r+0x60>
 8007a82:	69a2      	ldr	r2, [r4, #24]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	dc17      	bgt.n	8007ab8 <_puts_r+0x8c>
 8007a88:	290a      	cmp	r1, #10
 8007a8a:	d015      	beq.n	8007ab8 <_puts_r+0x8c>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	6022      	str	r2, [r4, #0]
 8007a92:	7019      	strb	r1, [r3, #0]
 8007a94:	68a3      	ldr	r3, [r4, #8]
 8007a96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	2900      	cmp	r1, #0
 8007aa0:	d1ed      	bne.n	8007a7e <_puts_r+0x52>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da11      	bge.n	8007aca <_puts_r+0x9e>
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	210a      	movs	r1, #10
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 f87f 	bl	8007bae <__swbuf_r>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d0d7      	beq.n	8007a64 <_puts_r+0x38>
 8007ab4:	250a      	movs	r5, #10
 8007ab6:	e7d7      	b.n	8007a68 <_puts_r+0x3c>
 8007ab8:	4622      	mov	r2, r4
 8007aba:	4628      	mov	r0, r5
 8007abc:	f000 f877 	bl	8007bae <__swbuf_r>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d1e7      	bne.n	8007a94 <_puts_r+0x68>
 8007ac4:	e7ce      	b.n	8007a64 <_puts_r+0x38>
 8007ac6:	3e01      	subs	r6, #1
 8007ac8:	e7e4      	b.n	8007a94 <_puts_r+0x68>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e7ee      	b.n	8007ab4 <_puts_r+0x88>
	...

08007ad8 <puts>:
 8007ad8:	4b02      	ldr	r3, [pc, #8]	@ (8007ae4 <puts+0xc>)
 8007ada:	4601      	mov	r1, r0
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	f7ff bfa5 	b.w	8007a2c <_puts_r>
 8007ae2:	bf00      	nop
 8007ae4:	2000001c 	.word	0x2000001c

08007ae8 <siprintf>:
 8007ae8:	b40e      	push	{r1, r2, r3}
 8007aea:	b500      	push	{lr}
 8007aec:	b09c      	sub	sp, #112	@ 0x70
 8007aee:	ab1d      	add	r3, sp, #116	@ 0x74
 8007af0:	9002      	str	r0, [sp, #8]
 8007af2:	9006      	str	r0, [sp, #24]
 8007af4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007af8:	4809      	ldr	r0, [pc, #36]	@ (8007b20 <siprintf+0x38>)
 8007afa:	9107      	str	r1, [sp, #28]
 8007afc:	9104      	str	r1, [sp, #16]
 8007afe:	4909      	ldr	r1, [pc, #36]	@ (8007b24 <siprintf+0x3c>)
 8007b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b04:	9105      	str	r1, [sp, #20]
 8007b06:	6800      	ldr	r0, [r0, #0]
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	a902      	add	r1, sp, #8
 8007b0c:	f000 fab4 	bl	8008078 <_svfiprintf_r>
 8007b10:	9b02      	ldr	r3, [sp, #8]
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	b01c      	add	sp, #112	@ 0x70
 8007b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b1c:	b003      	add	sp, #12
 8007b1e:	4770      	bx	lr
 8007b20:	2000001c 	.word	0x2000001c
 8007b24:	ffff0208 	.word	0xffff0208

08007b28 <__sread>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	f000 f8fc 	bl	8007d2c <_read_r>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	bfab      	itete	ge
 8007b38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b3c:	181b      	addge	r3, r3, r0
 8007b3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b42:	bfac      	ite	ge
 8007b44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b46:	81a3      	strhlt	r3, [r4, #12]
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <__swrite>:
 8007b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4e:	461f      	mov	r7, r3
 8007b50:	898b      	ldrh	r3, [r1, #12]
 8007b52:	05db      	lsls	r3, r3, #23
 8007b54:	4605      	mov	r5, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4616      	mov	r6, r2
 8007b5a:	d505      	bpl.n	8007b68 <__swrite+0x1e>
 8007b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b60:	2302      	movs	r3, #2
 8007b62:	2200      	movs	r2, #0
 8007b64:	f000 f8d0 	bl	8007d08 <_lseek_r>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	4632      	mov	r2, r6
 8007b76:	463b      	mov	r3, r7
 8007b78:	4628      	mov	r0, r5
 8007b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	f000 b8e7 	b.w	8007d50 <_write_r>

08007b82 <__sseek>:
 8007b82:	b510      	push	{r4, lr}
 8007b84:	460c      	mov	r4, r1
 8007b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8a:	f000 f8bd 	bl	8007d08 <_lseek_r>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	bf15      	itete	ne
 8007b94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b9e:	81a3      	strheq	r3, [r4, #12]
 8007ba0:	bf18      	it	ne
 8007ba2:	81a3      	strhne	r3, [r4, #12]
 8007ba4:	bd10      	pop	{r4, pc}

08007ba6 <__sclose>:
 8007ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007baa:	f000 b89d 	b.w	8007ce8 <_close_r>

08007bae <__swbuf_r>:
 8007bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb0:	460e      	mov	r6, r1
 8007bb2:	4614      	mov	r4, r2
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	b118      	cbz	r0, 8007bc0 <__swbuf_r+0x12>
 8007bb8:	6a03      	ldr	r3, [r0, #32]
 8007bba:	b90b      	cbnz	r3, 8007bc0 <__swbuf_r+0x12>
 8007bbc:	f7ff fee6 	bl	800798c <__sinit>
 8007bc0:	69a3      	ldr	r3, [r4, #24]
 8007bc2:	60a3      	str	r3, [r4, #8]
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	071a      	lsls	r2, r3, #28
 8007bc8:	d501      	bpl.n	8007bce <__swbuf_r+0x20>
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	b943      	cbnz	r3, 8007be0 <__swbuf_r+0x32>
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 f82b 	bl	8007c2c <__swsetup_r>
 8007bd6:	b118      	cbz	r0, 8007be0 <__swbuf_r+0x32>
 8007bd8:	f04f 37ff 	mov.w	r7, #4294967295
 8007bdc:	4638      	mov	r0, r7
 8007bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	6922      	ldr	r2, [r4, #16]
 8007be4:	1a98      	subs	r0, r3, r2
 8007be6:	6963      	ldr	r3, [r4, #20]
 8007be8:	b2f6      	uxtb	r6, r6
 8007bea:	4283      	cmp	r3, r0
 8007bec:	4637      	mov	r7, r6
 8007bee:	dc05      	bgt.n	8007bfc <__swbuf_r+0x4e>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 fe90 	bl	8008918 <_fflush_r>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d1ed      	bne.n	8007bd8 <__swbuf_r+0x2a>
 8007bfc:	68a3      	ldr	r3, [r4, #8]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	60a3      	str	r3, [r4, #8]
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	701e      	strb	r6, [r3, #0]
 8007c0a:	6962      	ldr	r2, [r4, #20]
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d004      	beq.n	8007c1c <__swbuf_r+0x6e>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	07db      	lsls	r3, r3, #31
 8007c16:	d5e1      	bpl.n	8007bdc <__swbuf_r+0x2e>
 8007c18:	2e0a      	cmp	r6, #10
 8007c1a:	d1df      	bne.n	8007bdc <__swbuf_r+0x2e>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 fe7a 	bl	8008918 <_fflush_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0d9      	beq.n	8007bdc <__swbuf_r+0x2e>
 8007c28:	e7d6      	b.n	8007bd8 <__swbuf_r+0x2a>
	...

08007c2c <__swsetup_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4b29      	ldr	r3, [pc, #164]	@ (8007cd4 <__swsetup_r+0xa8>)
 8007c30:	4605      	mov	r5, r0
 8007c32:	6818      	ldr	r0, [r3, #0]
 8007c34:	460c      	mov	r4, r1
 8007c36:	b118      	cbz	r0, 8007c40 <__swsetup_r+0x14>
 8007c38:	6a03      	ldr	r3, [r0, #32]
 8007c3a:	b90b      	cbnz	r3, 8007c40 <__swsetup_r+0x14>
 8007c3c:	f7ff fea6 	bl	800798c <__sinit>
 8007c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c44:	0719      	lsls	r1, r3, #28
 8007c46:	d422      	bmi.n	8007c8e <__swsetup_r+0x62>
 8007c48:	06da      	lsls	r2, r3, #27
 8007c4a:	d407      	bmi.n	8007c5c <__swsetup_r+0x30>
 8007c4c:	2209      	movs	r2, #9
 8007c4e:	602a      	str	r2, [r5, #0]
 8007c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5a:	e033      	b.n	8007cc4 <__swsetup_r+0x98>
 8007c5c:	0758      	lsls	r0, r3, #29
 8007c5e:	d512      	bpl.n	8007c86 <__swsetup_r+0x5a>
 8007c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c62:	b141      	cbz	r1, 8007c76 <__swsetup_r+0x4a>
 8007c64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c68:	4299      	cmp	r1, r3
 8007c6a:	d002      	beq.n	8007c72 <__swsetup_r+0x46>
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f8af 	bl	8007dd0 <_free_r>
 8007c72:	2300      	movs	r3, #0
 8007c74:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6063      	str	r3, [r4, #4]
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f043 0308 	orr.w	r3, r3, #8
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	b94b      	cbnz	r3, 8007ca6 <__swsetup_r+0x7a>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c9c:	d003      	beq.n	8007ca6 <__swsetup_r+0x7a>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 fe87 	bl	80089b4 <__smakebuf_r>
 8007ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007caa:	f013 0201 	ands.w	r2, r3, #1
 8007cae:	d00a      	beq.n	8007cc6 <__swsetup_r+0x9a>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	60a2      	str	r2, [r4, #8]
 8007cb4:	6962      	ldr	r2, [r4, #20]
 8007cb6:	4252      	negs	r2, r2
 8007cb8:	61a2      	str	r2, [r4, #24]
 8007cba:	6922      	ldr	r2, [r4, #16]
 8007cbc:	b942      	cbnz	r2, 8007cd0 <__swsetup_r+0xa4>
 8007cbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007cc2:	d1c5      	bne.n	8007c50 <__swsetup_r+0x24>
 8007cc4:	bd38      	pop	{r3, r4, r5, pc}
 8007cc6:	0799      	lsls	r1, r3, #30
 8007cc8:	bf58      	it	pl
 8007cca:	6962      	ldrpl	r2, [r4, #20]
 8007ccc:	60a2      	str	r2, [r4, #8]
 8007cce:	e7f4      	b.n	8007cba <__swsetup_r+0x8e>
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e7f7      	b.n	8007cc4 <__swsetup_r+0x98>
 8007cd4:	2000001c 	.word	0x2000001c

08007cd8 <memset>:
 8007cd8:	4402      	add	r2, r0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d100      	bne.n	8007ce2 <memset+0xa>
 8007ce0:	4770      	bx	lr
 8007ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce6:	e7f9      	b.n	8007cdc <memset+0x4>

08007ce8 <_close_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d06      	ldr	r5, [pc, #24]	@ (8007d04 <_close_r+0x1c>)
 8007cec:	2300      	movs	r3, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	f7fa fe61 	bl	80029ba <_close>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_close_r+0x1a>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_close_r+0x1a>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	2000077c 	.word	0x2000077c

08007d08 <_lseek_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d07      	ldr	r5, [pc, #28]	@ (8007d28 <_lseek_r+0x20>)
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4611      	mov	r1, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	602a      	str	r2, [r5, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f7fa fe76 	bl	8002a08 <_lseek>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_lseek_r+0x1e>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_lseek_r+0x1e>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	2000077c 	.word	0x2000077c

08007d2c <_read_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d07      	ldr	r5, [pc, #28]	@ (8007d4c <_read_r+0x20>)
 8007d30:	4604      	mov	r4, r0
 8007d32:	4608      	mov	r0, r1
 8007d34:	4611      	mov	r1, r2
 8007d36:	2200      	movs	r2, #0
 8007d38:	602a      	str	r2, [r5, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f7fa fe04 	bl	8002948 <_read>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_read_r+0x1e>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_read_r+0x1e>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	2000077c 	.word	0x2000077c

08007d50 <_write_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d07      	ldr	r5, [pc, #28]	@ (8007d70 <_write_r+0x20>)
 8007d54:	4604      	mov	r4, r0
 8007d56:	4608      	mov	r0, r1
 8007d58:	4611      	mov	r1, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f7fa fe0f 	bl	8002982 <_write>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_write_r+0x1e>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_write_r+0x1e>
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	2000077c 	.word	0x2000077c

08007d74 <__errno>:
 8007d74:	4b01      	ldr	r3, [pc, #4]	@ (8007d7c <__errno+0x8>)
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	2000001c 	.word	0x2000001c

08007d80 <__libc_init_array>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	4d0d      	ldr	r5, [pc, #52]	@ (8007db8 <__libc_init_array+0x38>)
 8007d84:	4c0d      	ldr	r4, [pc, #52]	@ (8007dbc <__libc_init_array+0x3c>)
 8007d86:	1b64      	subs	r4, r4, r5
 8007d88:	10a4      	asrs	r4, r4, #2
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	42a6      	cmp	r6, r4
 8007d8e:	d109      	bne.n	8007da4 <__libc_init_array+0x24>
 8007d90:	4d0b      	ldr	r5, [pc, #44]	@ (8007dc0 <__libc_init_array+0x40>)
 8007d92:	4c0c      	ldr	r4, [pc, #48]	@ (8007dc4 <__libc_init_array+0x44>)
 8007d94:	f000 ff0e 	bl	8008bb4 <_init>
 8007d98:	1b64      	subs	r4, r4, r5
 8007d9a:	10a4      	asrs	r4, r4, #2
 8007d9c:	2600      	movs	r6, #0
 8007d9e:	42a6      	cmp	r6, r4
 8007da0:	d105      	bne.n	8007dae <__libc_init_array+0x2e>
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da8:	4798      	blx	r3
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7ee      	b.n	8007d8c <__libc_init_array+0xc>
 8007dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db2:	4798      	blx	r3
 8007db4:	3601      	adds	r6, #1
 8007db6:	e7f2      	b.n	8007d9e <__libc_init_array+0x1e>
 8007db8:	08008eb0 	.word	0x08008eb0
 8007dbc:	08008eb0 	.word	0x08008eb0
 8007dc0:	08008eb0 	.word	0x08008eb0
 8007dc4:	08008eb4 	.word	0x08008eb4

08007dc8 <__retarget_lock_init_recursive>:
 8007dc8:	4770      	bx	lr

08007dca <__retarget_lock_acquire_recursive>:
 8007dca:	4770      	bx	lr

08007dcc <__retarget_lock_release_recursive>:
 8007dcc:	4770      	bx	lr
	...

08007dd0 <_free_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	2900      	cmp	r1, #0
 8007dd6:	d041      	beq.n	8007e5c <_free_r+0x8c>
 8007dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ddc:	1f0c      	subs	r4, r1, #4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bfb8      	it	lt
 8007de2:	18e4      	addlt	r4, r4, r3
 8007de4:	f000 f8e0 	bl	8007fa8 <__malloc_lock>
 8007de8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e60 <_free_r+0x90>)
 8007dea:	6813      	ldr	r3, [r2, #0]
 8007dec:	b933      	cbnz	r3, 8007dfc <_free_r+0x2c>
 8007dee:	6063      	str	r3, [r4, #4]
 8007df0:	6014      	str	r4, [r2, #0]
 8007df2:	4628      	mov	r0, r5
 8007df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007df8:	f000 b8dc 	b.w	8007fb4 <__malloc_unlock>
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d908      	bls.n	8007e12 <_free_r+0x42>
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	1821      	adds	r1, r4, r0
 8007e04:	428b      	cmp	r3, r1
 8007e06:	bf01      	itttt	eq
 8007e08:	6819      	ldreq	r1, [r3, #0]
 8007e0a:	685b      	ldreq	r3, [r3, #4]
 8007e0c:	1809      	addeq	r1, r1, r0
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	e7ed      	b.n	8007dee <_free_r+0x1e>
 8007e12:	461a      	mov	r2, r3
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	b10b      	cbz	r3, 8007e1c <_free_r+0x4c>
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d9fa      	bls.n	8007e12 <_free_r+0x42>
 8007e1c:	6811      	ldr	r1, [r2, #0]
 8007e1e:	1850      	adds	r0, r2, r1
 8007e20:	42a0      	cmp	r0, r4
 8007e22:	d10b      	bne.n	8007e3c <_free_r+0x6c>
 8007e24:	6820      	ldr	r0, [r4, #0]
 8007e26:	4401      	add	r1, r0
 8007e28:	1850      	adds	r0, r2, r1
 8007e2a:	4283      	cmp	r3, r0
 8007e2c:	6011      	str	r1, [r2, #0]
 8007e2e:	d1e0      	bne.n	8007df2 <_free_r+0x22>
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	6053      	str	r3, [r2, #4]
 8007e36:	4408      	add	r0, r1
 8007e38:	6010      	str	r0, [r2, #0]
 8007e3a:	e7da      	b.n	8007df2 <_free_r+0x22>
 8007e3c:	d902      	bls.n	8007e44 <_free_r+0x74>
 8007e3e:	230c      	movs	r3, #12
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	e7d6      	b.n	8007df2 <_free_r+0x22>
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	1821      	adds	r1, r4, r0
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf04      	itt	eq
 8007e4c:	6819      	ldreq	r1, [r3, #0]
 8007e4e:	685b      	ldreq	r3, [r3, #4]
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	bf04      	itt	eq
 8007e54:	1809      	addeq	r1, r1, r0
 8007e56:	6021      	streq	r1, [r4, #0]
 8007e58:	6054      	str	r4, [r2, #4]
 8007e5a:	e7ca      	b.n	8007df2 <_free_r+0x22>
 8007e5c:	bd38      	pop	{r3, r4, r5, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000788 	.word	0x20000788

08007e64 <sbrk_aligned>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	4e0f      	ldr	r6, [pc, #60]	@ (8007ea4 <sbrk_aligned+0x40>)
 8007e68:	460c      	mov	r4, r1
 8007e6a:	6831      	ldr	r1, [r6, #0]
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	b911      	cbnz	r1, 8007e76 <sbrk_aligned+0x12>
 8007e70:	f000 fe4c 	bl	8008b0c <_sbrk_r>
 8007e74:	6030      	str	r0, [r6, #0]
 8007e76:	4621      	mov	r1, r4
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f000 fe47 	bl	8008b0c <_sbrk_r>
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	d103      	bne.n	8007e8a <sbrk_aligned+0x26>
 8007e82:	f04f 34ff 	mov.w	r4, #4294967295
 8007e86:	4620      	mov	r0, r4
 8007e88:	bd70      	pop	{r4, r5, r6, pc}
 8007e8a:	1cc4      	adds	r4, r0, #3
 8007e8c:	f024 0403 	bic.w	r4, r4, #3
 8007e90:	42a0      	cmp	r0, r4
 8007e92:	d0f8      	beq.n	8007e86 <sbrk_aligned+0x22>
 8007e94:	1a21      	subs	r1, r4, r0
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 fe38 	bl	8008b0c <_sbrk_r>
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d1f2      	bne.n	8007e86 <sbrk_aligned+0x22>
 8007ea0:	e7ef      	b.n	8007e82 <sbrk_aligned+0x1e>
 8007ea2:	bf00      	nop
 8007ea4:	20000784 	.word	0x20000784

08007ea8 <_malloc_r>:
 8007ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eac:	1ccd      	adds	r5, r1, #3
 8007eae:	f025 0503 	bic.w	r5, r5, #3
 8007eb2:	3508      	adds	r5, #8
 8007eb4:	2d0c      	cmp	r5, #12
 8007eb6:	bf38      	it	cc
 8007eb8:	250c      	movcc	r5, #12
 8007eba:	2d00      	cmp	r5, #0
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	db01      	blt.n	8007ec4 <_malloc_r+0x1c>
 8007ec0:	42a9      	cmp	r1, r5
 8007ec2:	d904      	bls.n	8007ece <_malloc_r+0x26>
 8007ec4:	230c      	movs	r3, #12
 8007ec6:	6033      	str	r3, [r6, #0]
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fa4 <_malloc_r+0xfc>
 8007ed2:	f000 f869 	bl	8007fa8 <__malloc_lock>
 8007ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eda:	461c      	mov	r4, r3
 8007edc:	bb44      	cbnz	r4, 8007f30 <_malloc_r+0x88>
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff ffbf 	bl	8007e64 <sbrk_aligned>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	4604      	mov	r4, r0
 8007eea:	d158      	bne.n	8007f9e <_malloc_r+0xf6>
 8007eec:	f8d8 4000 	ldr.w	r4, [r8]
 8007ef0:	4627      	mov	r7, r4
 8007ef2:	2f00      	cmp	r7, #0
 8007ef4:	d143      	bne.n	8007f7e <_malloc_r+0xd6>
 8007ef6:	2c00      	cmp	r4, #0
 8007ef8:	d04b      	beq.n	8007f92 <_malloc_r+0xea>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	4639      	mov	r1, r7
 8007efe:	4630      	mov	r0, r6
 8007f00:	eb04 0903 	add.w	r9, r4, r3
 8007f04:	f000 fe02 	bl	8008b0c <_sbrk_r>
 8007f08:	4581      	cmp	r9, r0
 8007f0a:	d142      	bne.n	8007f92 <_malloc_r+0xea>
 8007f0c:	6821      	ldr	r1, [r4, #0]
 8007f0e:	1a6d      	subs	r5, r5, r1
 8007f10:	4629      	mov	r1, r5
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff ffa6 	bl	8007e64 <sbrk_aligned>
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d03a      	beq.n	8007f92 <_malloc_r+0xea>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	442b      	add	r3, r5
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	f8d8 3000 	ldr.w	r3, [r8]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	bb62      	cbnz	r2, 8007f84 <_malloc_r+0xdc>
 8007f2a:	f8c8 7000 	str.w	r7, [r8]
 8007f2e:	e00f      	b.n	8007f50 <_malloc_r+0xa8>
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	1b52      	subs	r2, r2, r5
 8007f34:	d420      	bmi.n	8007f78 <_malloc_r+0xd0>
 8007f36:	2a0b      	cmp	r2, #11
 8007f38:	d917      	bls.n	8007f6a <_malloc_r+0xc2>
 8007f3a:	1961      	adds	r1, r4, r5
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	6025      	str	r5, [r4, #0]
 8007f40:	bf18      	it	ne
 8007f42:	6059      	strne	r1, [r3, #4]
 8007f44:	6863      	ldr	r3, [r4, #4]
 8007f46:	bf08      	it	eq
 8007f48:	f8c8 1000 	streq.w	r1, [r8]
 8007f4c:	5162      	str	r2, [r4, r5]
 8007f4e:	604b      	str	r3, [r1, #4]
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 f82f 	bl	8007fb4 <__malloc_unlock>
 8007f56:	f104 000b 	add.w	r0, r4, #11
 8007f5a:	1d23      	adds	r3, r4, #4
 8007f5c:	f020 0007 	bic.w	r0, r0, #7
 8007f60:	1ac2      	subs	r2, r0, r3
 8007f62:	bf1c      	itt	ne
 8007f64:	1a1b      	subne	r3, r3, r0
 8007f66:	50a3      	strne	r3, [r4, r2]
 8007f68:	e7af      	b.n	8007eca <_malloc_r+0x22>
 8007f6a:	6862      	ldr	r2, [r4, #4]
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	bf0c      	ite	eq
 8007f70:	f8c8 2000 	streq.w	r2, [r8]
 8007f74:	605a      	strne	r2, [r3, #4]
 8007f76:	e7eb      	b.n	8007f50 <_malloc_r+0xa8>
 8007f78:	4623      	mov	r3, r4
 8007f7a:	6864      	ldr	r4, [r4, #4]
 8007f7c:	e7ae      	b.n	8007edc <_malloc_r+0x34>
 8007f7e:	463c      	mov	r4, r7
 8007f80:	687f      	ldr	r7, [r7, #4]
 8007f82:	e7b6      	b.n	8007ef2 <_malloc_r+0x4a>
 8007f84:	461a      	mov	r2, r3
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	d1fb      	bne.n	8007f84 <_malloc_r+0xdc>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	6053      	str	r3, [r2, #4]
 8007f90:	e7de      	b.n	8007f50 <_malloc_r+0xa8>
 8007f92:	230c      	movs	r3, #12
 8007f94:	6033      	str	r3, [r6, #0]
 8007f96:	4630      	mov	r0, r6
 8007f98:	f000 f80c 	bl	8007fb4 <__malloc_unlock>
 8007f9c:	e794      	b.n	8007ec8 <_malloc_r+0x20>
 8007f9e:	6005      	str	r5, [r0, #0]
 8007fa0:	e7d6      	b.n	8007f50 <_malloc_r+0xa8>
 8007fa2:	bf00      	nop
 8007fa4:	20000788 	.word	0x20000788

08007fa8 <__malloc_lock>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	@ (8007fb0 <__malloc_lock+0x8>)
 8007faa:	f7ff bf0e 	b.w	8007dca <__retarget_lock_acquire_recursive>
 8007fae:	bf00      	nop
 8007fb0:	20000780 	.word	0x20000780

08007fb4 <__malloc_unlock>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	@ (8007fbc <__malloc_unlock+0x8>)
 8007fb6:	f7ff bf09 	b.w	8007dcc <__retarget_lock_release_recursive>
 8007fba:	bf00      	nop
 8007fbc:	20000780 	.word	0x20000780

08007fc0 <__ssputs_r>:
 8007fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc4:	688e      	ldr	r6, [r1, #8]
 8007fc6:	461f      	mov	r7, r3
 8007fc8:	42be      	cmp	r6, r7
 8007fca:	680b      	ldr	r3, [r1, #0]
 8007fcc:	4682      	mov	sl, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	4690      	mov	r8, r2
 8007fd2:	d82d      	bhi.n	8008030 <__ssputs_r+0x70>
 8007fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fdc:	d026      	beq.n	800802c <__ssputs_r+0x6c>
 8007fde:	6965      	ldr	r5, [r4, #20]
 8007fe0:	6909      	ldr	r1, [r1, #16]
 8007fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fe6:	eba3 0901 	sub.w	r9, r3, r1
 8007fea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fee:	1c7b      	adds	r3, r7, #1
 8007ff0:	444b      	add	r3, r9
 8007ff2:	106d      	asrs	r5, r5, #1
 8007ff4:	429d      	cmp	r5, r3
 8007ff6:	bf38      	it	cc
 8007ff8:	461d      	movcc	r5, r3
 8007ffa:	0553      	lsls	r3, r2, #21
 8007ffc:	d527      	bpl.n	800804e <__ssputs_r+0x8e>
 8007ffe:	4629      	mov	r1, r5
 8008000:	f7ff ff52 	bl	8007ea8 <_malloc_r>
 8008004:	4606      	mov	r6, r0
 8008006:	b360      	cbz	r0, 8008062 <__ssputs_r+0xa2>
 8008008:	6921      	ldr	r1, [r4, #16]
 800800a:	464a      	mov	r2, r9
 800800c:	f000 fd8e 	bl	8008b2c <memcpy>
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800801a:	81a3      	strh	r3, [r4, #12]
 800801c:	6126      	str	r6, [r4, #16]
 800801e:	6165      	str	r5, [r4, #20]
 8008020:	444e      	add	r6, r9
 8008022:	eba5 0509 	sub.w	r5, r5, r9
 8008026:	6026      	str	r6, [r4, #0]
 8008028:	60a5      	str	r5, [r4, #8]
 800802a:	463e      	mov	r6, r7
 800802c:	42be      	cmp	r6, r7
 800802e:	d900      	bls.n	8008032 <__ssputs_r+0x72>
 8008030:	463e      	mov	r6, r7
 8008032:	6820      	ldr	r0, [r4, #0]
 8008034:	4632      	mov	r2, r6
 8008036:	4641      	mov	r1, r8
 8008038:	f000 fd2c 	bl	8008a94 <memmove>
 800803c:	68a3      	ldr	r3, [r4, #8]
 800803e:	1b9b      	subs	r3, r3, r6
 8008040:	60a3      	str	r3, [r4, #8]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	4433      	add	r3, r6
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	2000      	movs	r0, #0
 800804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804e:	462a      	mov	r2, r5
 8008050:	f000 fd7a 	bl	8008b48 <_realloc_r>
 8008054:	4606      	mov	r6, r0
 8008056:	2800      	cmp	r0, #0
 8008058:	d1e0      	bne.n	800801c <__ssputs_r+0x5c>
 800805a:	6921      	ldr	r1, [r4, #16]
 800805c:	4650      	mov	r0, sl
 800805e:	f7ff feb7 	bl	8007dd0 <_free_r>
 8008062:	230c      	movs	r3, #12
 8008064:	f8ca 3000 	str.w	r3, [sl]
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	e7e9      	b.n	800804a <__ssputs_r+0x8a>
	...

08008078 <_svfiprintf_r>:
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	4698      	mov	r8, r3
 800807e:	898b      	ldrh	r3, [r1, #12]
 8008080:	061b      	lsls	r3, r3, #24
 8008082:	b09d      	sub	sp, #116	@ 0x74
 8008084:	4607      	mov	r7, r0
 8008086:	460d      	mov	r5, r1
 8008088:	4614      	mov	r4, r2
 800808a:	d510      	bpl.n	80080ae <_svfiprintf_r+0x36>
 800808c:	690b      	ldr	r3, [r1, #16]
 800808e:	b973      	cbnz	r3, 80080ae <_svfiprintf_r+0x36>
 8008090:	2140      	movs	r1, #64	@ 0x40
 8008092:	f7ff ff09 	bl	8007ea8 <_malloc_r>
 8008096:	6028      	str	r0, [r5, #0]
 8008098:	6128      	str	r0, [r5, #16]
 800809a:	b930      	cbnz	r0, 80080aa <_svfiprintf_r+0x32>
 800809c:	230c      	movs	r3, #12
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	b01d      	add	sp, #116	@ 0x74
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080aa:	2340      	movs	r3, #64	@ 0x40
 80080ac:	616b      	str	r3, [r5, #20]
 80080ae:	2300      	movs	r3, #0
 80080b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b2:	2320      	movs	r3, #32
 80080b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080bc:	2330      	movs	r3, #48	@ 0x30
 80080be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800825c <_svfiprintf_r+0x1e4>
 80080c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080c6:	f04f 0901 	mov.w	r9, #1
 80080ca:	4623      	mov	r3, r4
 80080cc:	469a      	mov	sl, r3
 80080ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d2:	b10a      	cbz	r2, 80080d8 <_svfiprintf_r+0x60>
 80080d4:	2a25      	cmp	r2, #37	@ 0x25
 80080d6:	d1f9      	bne.n	80080cc <_svfiprintf_r+0x54>
 80080d8:	ebba 0b04 	subs.w	fp, sl, r4
 80080dc:	d00b      	beq.n	80080f6 <_svfiprintf_r+0x7e>
 80080de:	465b      	mov	r3, fp
 80080e0:	4622      	mov	r2, r4
 80080e2:	4629      	mov	r1, r5
 80080e4:	4638      	mov	r0, r7
 80080e6:	f7ff ff6b 	bl	8007fc0 <__ssputs_r>
 80080ea:	3001      	adds	r0, #1
 80080ec:	f000 80a7 	beq.w	800823e <_svfiprintf_r+0x1c6>
 80080f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080f2:	445a      	add	r2, fp
 80080f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80080f6:	f89a 3000 	ldrb.w	r3, [sl]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 809f 	beq.w	800823e <_svfiprintf_r+0x1c6>
 8008100:	2300      	movs	r3, #0
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800810a:	f10a 0a01 	add.w	sl, sl, #1
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008116:	931a      	str	r3, [sp, #104]	@ 0x68
 8008118:	4654      	mov	r4, sl
 800811a:	2205      	movs	r2, #5
 800811c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008120:	484e      	ldr	r0, [pc, #312]	@ (800825c <_svfiprintf_r+0x1e4>)
 8008122:	f7f8 f87d 	bl	8000220 <memchr>
 8008126:	9a04      	ldr	r2, [sp, #16]
 8008128:	b9d8      	cbnz	r0, 8008162 <_svfiprintf_r+0xea>
 800812a:	06d0      	lsls	r0, r2, #27
 800812c:	bf44      	itt	mi
 800812e:	2320      	movmi	r3, #32
 8008130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008134:	0711      	lsls	r1, r2, #28
 8008136:	bf44      	itt	mi
 8008138:	232b      	movmi	r3, #43	@ 0x2b
 800813a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800813e:	f89a 3000 	ldrb.w	r3, [sl]
 8008142:	2b2a      	cmp	r3, #42	@ 0x2a
 8008144:	d015      	beq.n	8008172 <_svfiprintf_r+0xfa>
 8008146:	9a07      	ldr	r2, [sp, #28]
 8008148:	4654      	mov	r4, sl
 800814a:	2000      	movs	r0, #0
 800814c:	f04f 0c0a 	mov.w	ip, #10
 8008150:	4621      	mov	r1, r4
 8008152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008156:	3b30      	subs	r3, #48	@ 0x30
 8008158:	2b09      	cmp	r3, #9
 800815a:	d94b      	bls.n	80081f4 <_svfiprintf_r+0x17c>
 800815c:	b1b0      	cbz	r0, 800818c <_svfiprintf_r+0x114>
 800815e:	9207      	str	r2, [sp, #28]
 8008160:	e014      	b.n	800818c <_svfiprintf_r+0x114>
 8008162:	eba0 0308 	sub.w	r3, r0, r8
 8008166:	fa09 f303 	lsl.w	r3, r9, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	9304      	str	r3, [sp, #16]
 800816e:	46a2      	mov	sl, r4
 8008170:	e7d2      	b.n	8008118 <_svfiprintf_r+0xa0>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	1d19      	adds	r1, r3, #4
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	9103      	str	r1, [sp, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	bfbb      	ittet	lt
 800817e:	425b      	neglt	r3, r3
 8008180:	f042 0202 	orrlt.w	r2, r2, #2
 8008184:	9307      	strge	r3, [sp, #28]
 8008186:	9307      	strlt	r3, [sp, #28]
 8008188:	bfb8      	it	lt
 800818a:	9204      	strlt	r2, [sp, #16]
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008190:	d10a      	bne.n	80081a8 <_svfiprintf_r+0x130>
 8008192:	7863      	ldrb	r3, [r4, #1]
 8008194:	2b2a      	cmp	r3, #42	@ 0x2a
 8008196:	d132      	bne.n	80081fe <_svfiprintf_r+0x186>
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	1d1a      	adds	r2, r3, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	9203      	str	r2, [sp, #12]
 80081a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081a4:	3402      	adds	r4, #2
 80081a6:	9305      	str	r3, [sp, #20]
 80081a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800826c <_svfiprintf_r+0x1f4>
 80081ac:	7821      	ldrb	r1, [r4, #0]
 80081ae:	2203      	movs	r2, #3
 80081b0:	4650      	mov	r0, sl
 80081b2:	f7f8 f835 	bl	8000220 <memchr>
 80081b6:	b138      	cbz	r0, 80081c8 <_svfiprintf_r+0x150>
 80081b8:	9b04      	ldr	r3, [sp, #16]
 80081ba:	eba0 000a 	sub.w	r0, r0, sl
 80081be:	2240      	movs	r2, #64	@ 0x40
 80081c0:	4082      	lsls	r2, r0
 80081c2:	4313      	orrs	r3, r2
 80081c4:	3401      	adds	r4, #1
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081cc:	4824      	ldr	r0, [pc, #144]	@ (8008260 <_svfiprintf_r+0x1e8>)
 80081ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081d2:	2206      	movs	r2, #6
 80081d4:	f7f8 f824 	bl	8000220 <memchr>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d036      	beq.n	800824a <_svfiprintf_r+0x1d2>
 80081dc:	4b21      	ldr	r3, [pc, #132]	@ (8008264 <_svfiprintf_r+0x1ec>)
 80081de:	bb1b      	cbnz	r3, 8008228 <_svfiprintf_r+0x1b0>
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	3307      	adds	r3, #7
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	3308      	adds	r3, #8
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ee:	4433      	add	r3, r6
 80081f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081f2:	e76a      	b.n	80080ca <_svfiprintf_r+0x52>
 80081f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f8:	460c      	mov	r4, r1
 80081fa:	2001      	movs	r0, #1
 80081fc:	e7a8      	b.n	8008150 <_svfiprintf_r+0xd8>
 80081fe:	2300      	movs	r3, #0
 8008200:	3401      	adds	r4, #1
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	4619      	mov	r1, r3
 8008206:	f04f 0c0a 	mov.w	ip, #10
 800820a:	4620      	mov	r0, r4
 800820c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008210:	3a30      	subs	r2, #48	@ 0x30
 8008212:	2a09      	cmp	r2, #9
 8008214:	d903      	bls.n	800821e <_svfiprintf_r+0x1a6>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0c6      	beq.n	80081a8 <_svfiprintf_r+0x130>
 800821a:	9105      	str	r1, [sp, #20]
 800821c:	e7c4      	b.n	80081a8 <_svfiprintf_r+0x130>
 800821e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008222:	4604      	mov	r4, r0
 8008224:	2301      	movs	r3, #1
 8008226:	e7f0      	b.n	800820a <_svfiprintf_r+0x192>
 8008228:	ab03      	add	r3, sp, #12
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	462a      	mov	r2, r5
 800822e:	4b0e      	ldr	r3, [pc, #56]	@ (8008268 <_svfiprintf_r+0x1f0>)
 8008230:	a904      	add	r1, sp, #16
 8008232:	4638      	mov	r0, r7
 8008234:	f3af 8000 	nop.w
 8008238:	1c42      	adds	r2, r0, #1
 800823a:	4606      	mov	r6, r0
 800823c:	d1d6      	bne.n	80081ec <_svfiprintf_r+0x174>
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	065b      	lsls	r3, r3, #25
 8008242:	f53f af2d 	bmi.w	80080a0 <_svfiprintf_r+0x28>
 8008246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008248:	e72c      	b.n	80080a4 <_svfiprintf_r+0x2c>
 800824a:	ab03      	add	r3, sp, #12
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	462a      	mov	r2, r5
 8008250:	4b05      	ldr	r3, [pc, #20]	@ (8008268 <_svfiprintf_r+0x1f0>)
 8008252:	a904      	add	r1, sp, #16
 8008254:	4638      	mov	r0, r7
 8008256:	f000 f9bb 	bl	80085d0 <_printf_i>
 800825a:	e7ed      	b.n	8008238 <_svfiprintf_r+0x1c0>
 800825c:	08008e74 	.word	0x08008e74
 8008260:	08008e7e 	.word	0x08008e7e
 8008264:	00000000 	.word	0x00000000
 8008268:	08007fc1 	.word	0x08007fc1
 800826c:	08008e7a 	.word	0x08008e7a

08008270 <__sfputc_r>:
 8008270:	6893      	ldr	r3, [r2, #8]
 8008272:	3b01      	subs	r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	b410      	push	{r4}
 8008278:	6093      	str	r3, [r2, #8]
 800827a:	da08      	bge.n	800828e <__sfputc_r+0x1e>
 800827c:	6994      	ldr	r4, [r2, #24]
 800827e:	42a3      	cmp	r3, r4
 8008280:	db01      	blt.n	8008286 <__sfputc_r+0x16>
 8008282:	290a      	cmp	r1, #10
 8008284:	d103      	bne.n	800828e <__sfputc_r+0x1e>
 8008286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800828a:	f7ff bc90 	b.w	8007bae <__swbuf_r>
 800828e:	6813      	ldr	r3, [r2, #0]
 8008290:	1c58      	adds	r0, r3, #1
 8008292:	6010      	str	r0, [r2, #0]
 8008294:	7019      	strb	r1, [r3, #0]
 8008296:	4608      	mov	r0, r1
 8008298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800829c:	4770      	bx	lr

0800829e <__sfputs_r>:
 800829e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a0:	4606      	mov	r6, r0
 80082a2:	460f      	mov	r7, r1
 80082a4:	4614      	mov	r4, r2
 80082a6:	18d5      	adds	r5, r2, r3
 80082a8:	42ac      	cmp	r4, r5
 80082aa:	d101      	bne.n	80082b0 <__sfputs_r+0x12>
 80082ac:	2000      	movs	r0, #0
 80082ae:	e007      	b.n	80082c0 <__sfputs_r+0x22>
 80082b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b4:	463a      	mov	r2, r7
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff ffda 	bl	8008270 <__sfputc_r>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d1f3      	bne.n	80082a8 <__sfputs_r+0xa>
 80082c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082c4 <_vfiprintf_r>:
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	460d      	mov	r5, r1
 80082ca:	b09d      	sub	sp, #116	@ 0x74
 80082cc:	4614      	mov	r4, r2
 80082ce:	4698      	mov	r8, r3
 80082d0:	4606      	mov	r6, r0
 80082d2:	b118      	cbz	r0, 80082dc <_vfiprintf_r+0x18>
 80082d4:	6a03      	ldr	r3, [r0, #32]
 80082d6:	b90b      	cbnz	r3, 80082dc <_vfiprintf_r+0x18>
 80082d8:	f7ff fb58 	bl	800798c <__sinit>
 80082dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082de:	07d9      	lsls	r1, r3, #31
 80082e0:	d405      	bmi.n	80082ee <_vfiprintf_r+0x2a>
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	059a      	lsls	r2, r3, #22
 80082e6:	d402      	bmi.n	80082ee <_vfiprintf_r+0x2a>
 80082e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ea:	f7ff fd6e 	bl	8007dca <__retarget_lock_acquire_recursive>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	071b      	lsls	r3, r3, #28
 80082f2:	d501      	bpl.n	80082f8 <_vfiprintf_r+0x34>
 80082f4:	692b      	ldr	r3, [r5, #16]
 80082f6:	b99b      	cbnz	r3, 8008320 <_vfiprintf_r+0x5c>
 80082f8:	4629      	mov	r1, r5
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7ff fc96 	bl	8007c2c <__swsetup_r>
 8008300:	b170      	cbz	r0, 8008320 <_vfiprintf_r+0x5c>
 8008302:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008304:	07dc      	lsls	r4, r3, #31
 8008306:	d504      	bpl.n	8008312 <_vfiprintf_r+0x4e>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	b01d      	add	sp, #116	@ 0x74
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	0598      	lsls	r0, r3, #22
 8008316:	d4f7      	bmi.n	8008308 <_vfiprintf_r+0x44>
 8008318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800831a:	f7ff fd57 	bl	8007dcc <__retarget_lock_release_recursive>
 800831e:	e7f3      	b.n	8008308 <_vfiprintf_r+0x44>
 8008320:	2300      	movs	r3, #0
 8008322:	9309      	str	r3, [sp, #36]	@ 0x24
 8008324:	2320      	movs	r3, #32
 8008326:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800832a:	f8cd 800c 	str.w	r8, [sp, #12]
 800832e:	2330      	movs	r3, #48	@ 0x30
 8008330:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084e0 <_vfiprintf_r+0x21c>
 8008334:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008338:	f04f 0901 	mov.w	r9, #1
 800833c:	4623      	mov	r3, r4
 800833e:	469a      	mov	sl, r3
 8008340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008344:	b10a      	cbz	r2, 800834a <_vfiprintf_r+0x86>
 8008346:	2a25      	cmp	r2, #37	@ 0x25
 8008348:	d1f9      	bne.n	800833e <_vfiprintf_r+0x7a>
 800834a:	ebba 0b04 	subs.w	fp, sl, r4
 800834e:	d00b      	beq.n	8008368 <_vfiprintf_r+0xa4>
 8008350:	465b      	mov	r3, fp
 8008352:	4622      	mov	r2, r4
 8008354:	4629      	mov	r1, r5
 8008356:	4630      	mov	r0, r6
 8008358:	f7ff ffa1 	bl	800829e <__sfputs_r>
 800835c:	3001      	adds	r0, #1
 800835e:	f000 80a7 	beq.w	80084b0 <_vfiprintf_r+0x1ec>
 8008362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008364:	445a      	add	r2, fp
 8008366:	9209      	str	r2, [sp, #36]	@ 0x24
 8008368:	f89a 3000 	ldrb.w	r3, [sl]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 809f 	beq.w	80084b0 <_vfiprintf_r+0x1ec>
 8008372:	2300      	movs	r3, #0
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800837c:	f10a 0a01 	add.w	sl, sl, #1
 8008380:	9304      	str	r3, [sp, #16]
 8008382:	9307      	str	r3, [sp, #28]
 8008384:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008388:	931a      	str	r3, [sp, #104]	@ 0x68
 800838a:	4654      	mov	r4, sl
 800838c:	2205      	movs	r2, #5
 800838e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008392:	4853      	ldr	r0, [pc, #332]	@ (80084e0 <_vfiprintf_r+0x21c>)
 8008394:	f7f7 ff44 	bl	8000220 <memchr>
 8008398:	9a04      	ldr	r2, [sp, #16]
 800839a:	b9d8      	cbnz	r0, 80083d4 <_vfiprintf_r+0x110>
 800839c:	06d1      	lsls	r1, r2, #27
 800839e:	bf44      	itt	mi
 80083a0:	2320      	movmi	r3, #32
 80083a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083a6:	0713      	lsls	r3, r2, #28
 80083a8:	bf44      	itt	mi
 80083aa:	232b      	movmi	r3, #43	@ 0x2b
 80083ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083b0:	f89a 3000 	ldrb.w	r3, [sl]
 80083b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b6:	d015      	beq.n	80083e4 <_vfiprintf_r+0x120>
 80083b8:	9a07      	ldr	r2, [sp, #28]
 80083ba:	4654      	mov	r4, sl
 80083bc:	2000      	movs	r0, #0
 80083be:	f04f 0c0a 	mov.w	ip, #10
 80083c2:	4621      	mov	r1, r4
 80083c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c8:	3b30      	subs	r3, #48	@ 0x30
 80083ca:	2b09      	cmp	r3, #9
 80083cc:	d94b      	bls.n	8008466 <_vfiprintf_r+0x1a2>
 80083ce:	b1b0      	cbz	r0, 80083fe <_vfiprintf_r+0x13a>
 80083d0:	9207      	str	r2, [sp, #28]
 80083d2:	e014      	b.n	80083fe <_vfiprintf_r+0x13a>
 80083d4:	eba0 0308 	sub.w	r3, r0, r8
 80083d8:	fa09 f303 	lsl.w	r3, r9, r3
 80083dc:	4313      	orrs	r3, r2
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	46a2      	mov	sl, r4
 80083e2:	e7d2      	b.n	800838a <_vfiprintf_r+0xc6>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	1d19      	adds	r1, r3, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	9103      	str	r1, [sp, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bfbb      	ittet	lt
 80083f0:	425b      	neglt	r3, r3
 80083f2:	f042 0202 	orrlt.w	r2, r2, #2
 80083f6:	9307      	strge	r3, [sp, #28]
 80083f8:	9307      	strlt	r3, [sp, #28]
 80083fa:	bfb8      	it	lt
 80083fc:	9204      	strlt	r2, [sp, #16]
 80083fe:	7823      	ldrb	r3, [r4, #0]
 8008400:	2b2e      	cmp	r3, #46	@ 0x2e
 8008402:	d10a      	bne.n	800841a <_vfiprintf_r+0x156>
 8008404:	7863      	ldrb	r3, [r4, #1]
 8008406:	2b2a      	cmp	r3, #42	@ 0x2a
 8008408:	d132      	bne.n	8008470 <_vfiprintf_r+0x1ac>
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	1d1a      	adds	r2, r3, #4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	9203      	str	r2, [sp, #12]
 8008412:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008416:	3402      	adds	r4, #2
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084f0 <_vfiprintf_r+0x22c>
 800841e:	7821      	ldrb	r1, [r4, #0]
 8008420:	2203      	movs	r2, #3
 8008422:	4650      	mov	r0, sl
 8008424:	f7f7 fefc 	bl	8000220 <memchr>
 8008428:	b138      	cbz	r0, 800843a <_vfiprintf_r+0x176>
 800842a:	9b04      	ldr	r3, [sp, #16]
 800842c:	eba0 000a 	sub.w	r0, r0, sl
 8008430:	2240      	movs	r2, #64	@ 0x40
 8008432:	4082      	lsls	r2, r0
 8008434:	4313      	orrs	r3, r2
 8008436:	3401      	adds	r4, #1
 8008438:	9304      	str	r3, [sp, #16]
 800843a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800843e:	4829      	ldr	r0, [pc, #164]	@ (80084e4 <_vfiprintf_r+0x220>)
 8008440:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008444:	2206      	movs	r2, #6
 8008446:	f7f7 feeb 	bl	8000220 <memchr>
 800844a:	2800      	cmp	r0, #0
 800844c:	d03f      	beq.n	80084ce <_vfiprintf_r+0x20a>
 800844e:	4b26      	ldr	r3, [pc, #152]	@ (80084e8 <_vfiprintf_r+0x224>)
 8008450:	bb1b      	cbnz	r3, 800849a <_vfiprintf_r+0x1d6>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	3307      	adds	r3, #7
 8008456:	f023 0307 	bic.w	r3, r3, #7
 800845a:	3308      	adds	r3, #8
 800845c:	9303      	str	r3, [sp, #12]
 800845e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008460:	443b      	add	r3, r7
 8008462:	9309      	str	r3, [sp, #36]	@ 0x24
 8008464:	e76a      	b.n	800833c <_vfiprintf_r+0x78>
 8008466:	fb0c 3202 	mla	r2, ip, r2, r3
 800846a:	460c      	mov	r4, r1
 800846c:	2001      	movs	r0, #1
 800846e:	e7a8      	b.n	80083c2 <_vfiprintf_r+0xfe>
 8008470:	2300      	movs	r3, #0
 8008472:	3401      	adds	r4, #1
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	4619      	mov	r1, r3
 8008478:	f04f 0c0a 	mov.w	ip, #10
 800847c:	4620      	mov	r0, r4
 800847e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008482:	3a30      	subs	r2, #48	@ 0x30
 8008484:	2a09      	cmp	r2, #9
 8008486:	d903      	bls.n	8008490 <_vfiprintf_r+0x1cc>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0c6      	beq.n	800841a <_vfiprintf_r+0x156>
 800848c:	9105      	str	r1, [sp, #20]
 800848e:	e7c4      	b.n	800841a <_vfiprintf_r+0x156>
 8008490:	fb0c 2101 	mla	r1, ip, r1, r2
 8008494:	4604      	mov	r4, r0
 8008496:	2301      	movs	r3, #1
 8008498:	e7f0      	b.n	800847c <_vfiprintf_r+0x1b8>
 800849a:	ab03      	add	r3, sp, #12
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	462a      	mov	r2, r5
 80084a0:	4b12      	ldr	r3, [pc, #72]	@ (80084ec <_vfiprintf_r+0x228>)
 80084a2:	a904      	add	r1, sp, #16
 80084a4:	4630      	mov	r0, r6
 80084a6:	f3af 8000 	nop.w
 80084aa:	4607      	mov	r7, r0
 80084ac:	1c78      	adds	r0, r7, #1
 80084ae:	d1d6      	bne.n	800845e <_vfiprintf_r+0x19a>
 80084b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084b2:	07d9      	lsls	r1, r3, #31
 80084b4:	d405      	bmi.n	80084c2 <_vfiprintf_r+0x1fe>
 80084b6:	89ab      	ldrh	r3, [r5, #12]
 80084b8:	059a      	lsls	r2, r3, #22
 80084ba:	d402      	bmi.n	80084c2 <_vfiprintf_r+0x1fe>
 80084bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084be:	f7ff fc85 	bl	8007dcc <__retarget_lock_release_recursive>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	065b      	lsls	r3, r3, #25
 80084c6:	f53f af1f 	bmi.w	8008308 <_vfiprintf_r+0x44>
 80084ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084cc:	e71e      	b.n	800830c <_vfiprintf_r+0x48>
 80084ce:	ab03      	add	r3, sp, #12
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	462a      	mov	r2, r5
 80084d4:	4b05      	ldr	r3, [pc, #20]	@ (80084ec <_vfiprintf_r+0x228>)
 80084d6:	a904      	add	r1, sp, #16
 80084d8:	4630      	mov	r0, r6
 80084da:	f000 f879 	bl	80085d0 <_printf_i>
 80084de:	e7e4      	b.n	80084aa <_vfiprintf_r+0x1e6>
 80084e0:	08008e74 	.word	0x08008e74
 80084e4:	08008e7e 	.word	0x08008e7e
 80084e8:	00000000 	.word	0x00000000
 80084ec:	0800829f 	.word	0x0800829f
 80084f0:	08008e7a 	.word	0x08008e7a

080084f4 <_printf_common>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	4616      	mov	r6, r2
 80084fa:	4698      	mov	r8, r3
 80084fc:	688a      	ldr	r2, [r1, #8]
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008504:	4293      	cmp	r3, r2
 8008506:	bfb8      	it	lt
 8008508:	4613      	movlt	r3, r2
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008510:	4607      	mov	r7, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b10a      	cbz	r2, 800851a <_printf_common+0x26>
 8008516:	3301      	adds	r3, #1
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	0699      	lsls	r1, r3, #26
 800851e:	bf42      	ittt	mi
 8008520:	6833      	ldrmi	r3, [r6, #0]
 8008522:	3302      	addmi	r3, #2
 8008524:	6033      	strmi	r3, [r6, #0]
 8008526:	6825      	ldr	r5, [r4, #0]
 8008528:	f015 0506 	ands.w	r5, r5, #6
 800852c:	d106      	bne.n	800853c <_printf_common+0x48>
 800852e:	f104 0a19 	add.w	sl, r4, #25
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	6832      	ldr	r2, [r6, #0]
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	42ab      	cmp	r3, r5
 800853a:	dc26      	bgt.n	800858a <_printf_common+0x96>
 800853c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008540:	6822      	ldr	r2, [r4, #0]
 8008542:	3b00      	subs	r3, #0
 8008544:	bf18      	it	ne
 8008546:	2301      	movne	r3, #1
 8008548:	0692      	lsls	r2, r2, #26
 800854a:	d42b      	bmi.n	80085a4 <_printf_common+0xb0>
 800854c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008550:	4641      	mov	r1, r8
 8008552:	4638      	mov	r0, r7
 8008554:	47c8      	blx	r9
 8008556:	3001      	adds	r0, #1
 8008558:	d01e      	beq.n	8008598 <_printf_common+0xa4>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	6922      	ldr	r2, [r4, #16]
 800855e:	f003 0306 	and.w	r3, r3, #6
 8008562:	2b04      	cmp	r3, #4
 8008564:	bf02      	ittt	eq
 8008566:	68e5      	ldreq	r5, [r4, #12]
 8008568:	6833      	ldreq	r3, [r6, #0]
 800856a:	1aed      	subeq	r5, r5, r3
 800856c:	68a3      	ldr	r3, [r4, #8]
 800856e:	bf0c      	ite	eq
 8008570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008574:	2500      	movne	r5, #0
 8008576:	4293      	cmp	r3, r2
 8008578:	bfc4      	itt	gt
 800857a:	1a9b      	subgt	r3, r3, r2
 800857c:	18ed      	addgt	r5, r5, r3
 800857e:	2600      	movs	r6, #0
 8008580:	341a      	adds	r4, #26
 8008582:	42b5      	cmp	r5, r6
 8008584:	d11a      	bne.n	80085bc <_printf_common+0xc8>
 8008586:	2000      	movs	r0, #0
 8008588:	e008      	b.n	800859c <_printf_common+0xa8>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4641      	mov	r1, r8
 8008590:	4638      	mov	r0, r7
 8008592:	47c8      	blx	r9
 8008594:	3001      	adds	r0, #1
 8008596:	d103      	bne.n	80085a0 <_printf_common+0xac>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	3501      	adds	r5, #1
 80085a2:	e7c6      	b.n	8008532 <_printf_common+0x3e>
 80085a4:	18e1      	adds	r1, r4, r3
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	2030      	movs	r0, #48	@ 0x30
 80085aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085ae:	4422      	add	r2, r4
 80085b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085b8:	3302      	adds	r3, #2
 80085ba:	e7c7      	b.n	800854c <_printf_common+0x58>
 80085bc:	2301      	movs	r3, #1
 80085be:	4622      	mov	r2, r4
 80085c0:	4641      	mov	r1, r8
 80085c2:	4638      	mov	r0, r7
 80085c4:	47c8      	blx	r9
 80085c6:	3001      	adds	r0, #1
 80085c8:	d0e6      	beq.n	8008598 <_printf_common+0xa4>
 80085ca:	3601      	adds	r6, #1
 80085cc:	e7d9      	b.n	8008582 <_printf_common+0x8e>
	...

080085d0 <_printf_i>:
 80085d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	7e0f      	ldrb	r7, [r1, #24]
 80085d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085d8:	2f78      	cmp	r7, #120	@ 0x78
 80085da:	4691      	mov	r9, r2
 80085dc:	4680      	mov	r8, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	469a      	mov	sl, r3
 80085e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085e6:	d807      	bhi.n	80085f8 <_printf_i+0x28>
 80085e8:	2f62      	cmp	r7, #98	@ 0x62
 80085ea:	d80a      	bhi.n	8008602 <_printf_i+0x32>
 80085ec:	2f00      	cmp	r7, #0
 80085ee:	f000 80d2 	beq.w	8008796 <_printf_i+0x1c6>
 80085f2:	2f58      	cmp	r7, #88	@ 0x58
 80085f4:	f000 80b9 	beq.w	800876a <_printf_i+0x19a>
 80085f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008600:	e03a      	b.n	8008678 <_printf_i+0xa8>
 8008602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008606:	2b15      	cmp	r3, #21
 8008608:	d8f6      	bhi.n	80085f8 <_printf_i+0x28>
 800860a:	a101      	add	r1, pc, #4	@ (adr r1, 8008610 <_printf_i+0x40>)
 800860c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008610:	08008669 	.word	0x08008669
 8008614:	0800867d 	.word	0x0800867d
 8008618:	080085f9 	.word	0x080085f9
 800861c:	080085f9 	.word	0x080085f9
 8008620:	080085f9 	.word	0x080085f9
 8008624:	080085f9 	.word	0x080085f9
 8008628:	0800867d 	.word	0x0800867d
 800862c:	080085f9 	.word	0x080085f9
 8008630:	080085f9 	.word	0x080085f9
 8008634:	080085f9 	.word	0x080085f9
 8008638:	080085f9 	.word	0x080085f9
 800863c:	0800877d 	.word	0x0800877d
 8008640:	080086a7 	.word	0x080086a7
 8008644:	08008737 	.word	0x08008737
 8008648:	080085f9 	.word	0x080085f9
 800864c:	080085f9 	.word	0x080085f9
 8008650:	0800879f 	.word	0x0800879f
 8008654:	080085f9 	.word	0x080085f9
 8008658:	080086a7 	.word	0x080086a7
 800865c:	080085f9 	.word	0x080085f9
 8008660:	080085f9 	.word	0x080085f9
 8008664:	0800873f 	.word	0x0800873f
 8008668:	6833      	ldr	r3, [r6, #0]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6032      	str	r2, [r6, #0]
 8008670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008678:	2301      	movs	r3, #1
 800867a:	e09d      	b.n	80087b8 <_printf_i+0x1e8>
 800867c:	6833      	ldr	r3, [r6, #0]
 800867e:	6820      	ldr	r0, [r4, #0]
 8008680:	1d19      	adds	r1, r3, #4
 8008682:	6031      	str	r1, [r6, #0]
 8008684:	0606      	lsls	r6, r0, #24
 8008686:	d501      	bpl.n	800868c <_printf_i+0xbc>
 8008688:	681d      	ldr	r5, [r3, #0]
 800868a:	e003      	b.n	8008694 <_printf_i+0xc4>
 800868c:	0645      	lsls	r5, r0, #25
 800868e:	d5fb      	bpl.n	8008688 <_printf_i+0xb8>
 8008690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008694:	2d00      	cmp	r5, #0
 8008696:	da03      	bge.n	80086a0 <_printf_i+0xd0>
 8008698:	232d      	movs	r3, #45	@ 0x2d
 800869a:	426d      	negs	r5, r5
 800869c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086a0:	4859      	ldr	r0, [pc, #356]	@ (8008808 <_printf_i+0x238>)
 80086a2:	230a      	movs	r3, #10
 80086a4:	e011      	b.n	80086ca <_printf_i+0xfa>
 80086a6:	6821      	ldr	r1, [r4, #0]
 80086a8:	6833      	ldr	r3, [r6, #0]
 80086aa:	0608      	lsls	r0, r1, #24
 80086ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80086b0:	d402      	bmi.n	80086b8 <_printf_i+0xe8>
 80086b2:	0649      	lsls	r1, r1, #25
 80086b4:	bf48      	it	mi
 80086b6:	b2ad      	uxthmi	r5, r5
 80086b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80086ba:	4853      	ldr	r0, [pc, #332]	@ (8008808 <_printf_i+0x238>)
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	bf14      	ite	ne
 80086c0:	230a      	movne	r3, #10
 80086c2:	2308      	moveq	r3, #8
 80086c4:	2100      	movs	r1, #0
 80086c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086ca:	6866      	ldr	r6, [r4, #4]
 80086cc:	60a6      	str	r6, [r4, #8]
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	bfa2      	ittt	ge
 80086d2:	6821      	ldrge	r1, [r4, #0]
 80086d4:	f021 0104 	bicge.w	r1, r1, #4
 80086d8:	6021      	strge	r1, [r4, #0]
 80086da:	b90d      	cbnz	r5, 80086e0 <_printf_i+0x110>
 80086dc:	2e00      	cmp	r6, #0
 80086de:	d04b      	beq.n	8008778 <_printf_i+0x1a8>
 80086e0:	4616      	mov	r6, r2
 80086e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80086e6:	fb03 5711 	mls	r7, r3, r1, r5
 80086ea:	5dc7      	ldrb	r7, [r0, r7]
 80086ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086f0:	462f      	mov	r7, r5
 80086f2:	42bb      	cmp	r3, r7
 80086f4:	460d      	mov	r5, r1
 80086f6:	d9f4      	bls.n	80086e2 <_printf_i+0x112>
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d10b      	bne.n	8008714 <_printf_i+0x144>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	07df      	lsls	r7, r3, #31
 8008700:	d508      	bpl.n	8008714 <_printf_i+0x144>
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	6861      	ldr	r1, [r4, #4]
 8008706:	4299      	cmp	r1, r3
 8008708:	bfde      	ittt	le
 800870a:	2330      	movle	r3, #48	@ 0x30
 800870c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008710:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008714:	1b92      	subs	r2, r2, r6
 8008716:	6122      	str	r2, [r4, #16]
 8008718:	f8cd a000 	str.w	sl, [sp]
 800871c:	464b      	mov	r3, r9
 800871e:	aa03      	add	r2, sp, #12
 8008720:	4621      	mov	r1, r4
 8008722:	4640      	mov	r0, r8
 8008724:	f7ff fee6 	bl	80084f4 <_printf_common>
 8008728:	3001      	adds	r0, #1
 800872a:	d14a      	bne.n	80087c2 <_printf_i+0x1f2>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b004      	add	sp, #16
 8008732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	f043 0320 	orr.w	r3, r3, #32
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	4833      	ldr	r0, [pc, #204]	@ (800880c <_printf_i+0x23c>)
 8008740:	2778      	movs	r7, #120	@ 0x78
 8008742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	6831      	ldr	r1, [r6, #0]
 800874a:	061f      	lsls	r7, r3, #24
 800874c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008750:	d402      	bmi.n	8008758 <_printf_i+0x188>
 8008752:	065f      	lsls	r7, r3, #25
 8008754:	bf48      	it	mi
 8008756:	b2ad      	uxthmi	r5, r5
 8008758:	6031      	str	r1, [r6, #0]
 800875a:	07d9      	lsls	r1, r3, #31
 800875c:	bf44      	itt	mi
 800875e:	f043 0320 	orrmi.w	r3, r3, #32
 8008762:	6023      	strmi	r3, [r4, #0]
 8008764:	b11d      	cbz	r5, 800876e <_printf_i+0x19e>
 8008766:	2310      	movs	r3, #16
 8008768:	e7ac      	b.n	80086c4 <_printf_i+0xf4>
 800876a:	4827      	ldr	r0, [pc, #156]	@ (8008808 <_printf_i+0x238>)
 800876c:	e7e9      	b.n	8008742 <_printf_i+0x172>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	f023 0320 	bic.w	r3, r3, #32
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	e7f6      	b.n	8008766 <_printf_i+0x196>
 8008778:	4616      	mov	r6, r2
 800877a:	e7bd      	b.n	80086f8 <_printf_i+0x128>
 800877c:	6833      	ldr	r3, [r6, #0]
 800877e:	6825      	ldr	r5, [r4, #0]
 8008780:	6961      	ldr	r1, [r4, #20]
 8008782:	1d18      	adds	r0, r3, #4
 8008784:	6030      	str	r0, [r6, #0]
 8008786:	062e      	lsls	r6, r5, #24
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	d501      	bpl.n	8008790 <_printf_i+0x1c0>
 800878c:	6019      	str	r1, [r3, #0]
 800878e:	e002      	b.n	8008796 <_printf_i+0x1c6>
 8008790:	0668      	lsls	r0, r5, #25
 8008792:	d5fb      	bpl.n	800878c <_printf_i+0x1bc>
 8008794:	8019      	strh	r1, [r3, #0]
 8008796:	2300      	movs	r3, #0
 8008798:	6123      	str	r3, [r4, #16]
 800879a:	4616      	mov	r6, r2
 800879c:	e7bc      	b.n	8008718 <_printf_i+0x148>
 800879e:	6833      	ldr	r3, [r6, #0]
 80087a0:	1d1a      	adds	r2, r3, #4
 80087a2:	6032      	str	r2, [r6, #0]
 80087a4:	681e      	ldr	r6, [r3, #0]
 80087a6:	6862      	ldr	r2, [r4, #4]
 80087a8:	2100      	movs	r1, #0
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7f7 fd38 	bl	8000220 <memchr>
 80087b0:	b108      	cbz	r0, 80087b6 <_printf_i+0x1e6>
 80087b2:	1b80      	subs	r0, r0, r6
 80087b4:	6060      	str	r0, [r4, #4]
 80087b6:	6863      	ldr	r3, [r4, #4]
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	2300      	movs	r3, #0
 80087bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087c0:	e7aa      	b.n	8008718 <_printf_i+0x148>
 80087c2:	6923      	ldr	r3, [r4, #16]
 80087c4:	4632      	mov	r2, r6
 80087c6:	4649      	mov	r1, r9
 80087c8:	4640      	mov	r0, r8
 80087ca:	47d0      	blx	sl
 80087cc:	3001      	adds	r0, #1
 80087ce:	d0ad      	beq.n	800872c <_printf_i+0x15c>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	079b      	lsls	r3, r3, #30
 80087d4:	d413      	bmi.n	80087fe <_printf_i+0x22e>
 80087d6:	68e0      	ldr	r0, [r4, #12]
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	4298      	cmp	r0, r3
 80087dc:	bfb8      	it	lt
 80087de:	4618      	movlt	r0, r3
 80087e0:	e7a6      	b.n	8008730 <_printf_i+0x160>
 80087e2:	2301      	movs	r3, #1
 80087e4:	4632      	mov	r2, r6
 80087e6:	4649      	mov	r1, r9
 80087e8:	4640      	mov	r0, r8
 80087ea:	47d0      	blx	sl
 80087ec:	3001      	adds	r0, #1
 80087ee:	d09d      	beq.n	800872c <_printf_i+0x15c>
 80087f0:	3501      	adds	r5, #1
 80087f2:	68e3      	ldr	r3, [r4, #12]
 80087f4:	9903      	ldr	r1, [sp, #12]
 80087f6:	1a5b      	subs	r3, r3, r1
 80087f8:	42ab      	cmp	r3, r5
 80087fa:	dcf2      	bgt.n	80087e2 <_printf_i+0x212>
 80087fc:	e7eb      	b.n	80087d6 <_printf_i+0x206>
 80087fe:	2500      	movs	r5, #0
 8008800:	f104 0619 	add.w	r6, r4, #25
 8008804:	e7f5      	b.n	80087f2 <_printf_i+0x222>
 8008806:	bf00      	nop
 8008808:	08008e85 	.word	0x08008e85
 800880c:	08008e96 	.word	0x08008e96

08008810 <__sflush_r>:
 8008810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008818:	0716      	lsls	r6, r2, #28
 800881a:	4605      	mov	r5, r0
 800881c:	460c      	mov	r4, r1
 800881e:	d454      	bmi.n	80088ca <__sflush_r+0xba>
 8008820:	684b      	ldr	r3, [r1, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	dc02      	bgt.n	800882c <__sflush_r+0x1c>
 8008826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	dd48      	ble.n	80088be <__sflush_r+0xae>
 800882c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800882e:	2e00      	cmp	r6, #0
 8008830:	d045      	beq.n	80088be <__sflush_r+0xae>
 8008832:	2300      	movs	r3, #0
 8008834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008838:	682f      	ldr	r7, [r5, #0]
 800883a:	6a21      	ldr	r1, [r4, #32]
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	d030      	beq.n	80088a2 <__sflush_r+0x92>
 8008840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	0759      	lsls	r1, r3, #29
 8008846:	d505      	bpl.n	8008854 <__sflush_r+0x44>
 8008848:	6863      	ldr	r3, [r4, #4]
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800884e:	b10b      	cbz	r3, 8008854 <__sflush_r+0x44>
 8008850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008852:	1ad2      	subs	r2, r2, r3
 8008854:	2300      	movs	r3, #0
 8008856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008858:	6a21      	ldr	r1, [r4, #32]
 800885a:	4628      	mov	r0, r5
 800885c:	47b0      	blx	r6
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	d106      	bne.n	8008872 <__sflush_r+0x62>
 8008864:	6829      	ldr	r1, [r5, #0]
 8008866:	291d      	cmp	r1, #29
 8008868:	d82b      	bhi.n	80088c2 <__sflush_r+0xb2>
 800886a:	4a2a      	ldr	r2, [pc, #168]	@ (8008914 <__sflush_r+0x104>)
 800886c:	410a      	asrs	r2, r1
 800886e:	07d6      	lsls	r6, r2, #31
 8008870:	d427      	bmi.n	80088c2 <__sflush_r+0xb2>
 8008872:	2200      	movs	r2, #0
 8008874:	6062      	str	r2, [r4, #4]
 8008876:	04d9      	lsls	r1, r3, #19
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	6022      	str	r2, [r4, #0]
 800887c:	d504      	bpl.n	8008888 <__sflush_r+0x78>
 800887e:	1c42      	adds	r2, r0, #1
 8008880:	d101      	bne.n	8008886 <__sflush_r+0x76>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	b903      	cbnz	r3, 8008888 <__sflush_r+0x78>
 8008886:	6560      	str	r0, [r4, #84]	@ 0x54
 8008888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800888a:	602f      	str	r7, [r5, #0]
 800888c:	b1b9      	cbz	r1, 80088be <__sflush_r+0xae>
 800888e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008892:	4299      	cmp	r1, r3
 8008894:	d002      	beq.n	800889c <__sflush_r+0x8c>
 8008896:	4628      	mov	r0, r5
 8008898:	f7ff fa9a 	bl	8007dd0 <_free_r>
 800889c:	2300      	movs	r3, #0
 800889e:	6363      	str	r3, [r4, #52]	@ 0x34
 80088a0:	e00d      	b.n	80088be <__sflush_r+0xae>
 80088a2:	2301      	movs	r3, #1
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b0      	blx	r6
 80088a8:	4602      	mov	r2, r0
 80088aa:	1c50      	adds	r0, r2, #1
 80088ac:	d1c9      	bne.n	8008842 <__sflush_r+0x32>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0c6      	beq.n	8008842 <__sflush_r+0x32>
 80088b4:	2b1d      	cmp	r3, #29
 80088b6:	d001      	beq.n	80088bc <__sflush_r+0xac>
 80088b8:	2b16      	cmp	r3, #22
 80088ba:	d11e      	bne.n	80088fa <__sflush_r+0xea>
 80088bc:	602f      	str	r7, [r5, #0]
 80088be:	2000      	movs	r0, #0
 80088c0:	e022      	b.n	8008908 <__sflush_r+0xf8>
 80088c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088c6:	b21b      	sxth	r3, r3
 80088c8:	e01b      	b.n	8008902 <__sflush_r+0xf2>
 80088ca:	690f      	ldr	r7, [r1, #16]
 80088cc:	2f00      	cmp	r7, #0
 80088ce:	d0f6      	beq.n	80088be <__sflush_r+0xae>
 80088d0:	0793      	lsls	r3, r2, #30
 80088d2:	680e      	ldr	r6, [r1, #0]
 80088d4:	bf08      	it	eq
 80088d6:	694b      	ldreq	r3, [r1, #20]
 80088d8:	600f      	str	r7, [r1, #0]
 80088da:	bf18      	it	ne
 80088dc:	2300      	movne	r3, #0
 80088de:	eba6 0807 	sub.w	r8, r6, r7
 80088e2:	608b      	str	r3, [r1, #8]
 80088e4:	f1b8 0f00 	cmp.w	r8, #0
 80088e8:	dde9      	ble.n	80088be <__sflush_r+0xae>
 80088ea:	6a21      	ldr	r1, [r4, #32]
 80088ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088ee:	4643      	mov	r3, r8
 80088f0:	463a      	mov	r2, r7
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b0      	blx	r6
 80088f6:	2800      	cmp	r0, #0
 80088f8:	dc08      	bgt.n	800890c <__sflush_r+0xfc>
 80088fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890c:	4407      	add	r7, r0
 800890e:	eba8 0800 	sub.w	r8, r8, r0
 8008912:	e7e7      	b.n	80088e4 <__sflush_r+0xd4>
 8008914:	dfbffffe 	.word	0xdfbffffe

08008918 <_fflush_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	690b      	ldr	r3, [r1, #16]
 800891c:	4605      	mov	r5, r0
 800891e:	460c      	mov	r4, r1
 8008920:	b913      	cbnz	r3, 8008928 <_fflush_r+0x10>
 8008922:	2500      	movs	r5, #0
 8008924:	4628      	mov	r0, r5
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	b118      	cbz	r0, 8008932 <_fflush_r+0x1a>
 800892a:	6a03      	ldr	r3, [r0, #32]
 800892c:	b90b      	cbnz	r3, 8008932 <_fflush_r+0x1a>
 800892e:	f7ff f82d 	bl	800798c <__sinit>
 8008932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f3      	beq.n	8008922 <_fflush_r+0xa>
 800893a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800893c:	07d0      	lsls	r0, r2, #31
 800893e:	d404      	bmi.n	800894a <_fflush_r+0x32>
 8008940:	0599      	lsls	r1, r3, #22
 8008942:	d402      	bmi.n	800894a <_fflush_r+0x32>
 8008944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008946:	f7ff fa40 	bl	8007dca <__retarget_lock_acquire_recursive>
 800894a:	4628      	mov	r0, r5
 800894c:	4621      	mov	r1, r4
 800894e:	f7ff ff5f 	bl	8008810 <__sflush_r>
 8008952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008954:	07da      	lsls	r2, r3, #31
 8008956:	4605      	mov	r5, r0
 8008958:	d4e4      	bmi.n	8008924 <_fflush_r+0xc>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	059b      	lsls	r3, r3, #22
 800895e:	d4e1      	bmi.n	8008924 <_fflush_r+0xc>
 8008960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008962:	f7ff fa33 	bl	8007dcc <__retarget_lock_release_recursive>
 8008966:	e7dd      	b.n	8008924 <_fflush_r+0xc>

08008968 <__swhatbuf_r>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	2900      	cmp	r1, #0
 8008972:	b096      	sub	sp, #88	@ 0x58
 8008974:	4615      	mov	r5, r2
 8008976:	461e      	mov	r6, r3
 8008978:	da0d      	bge.n	8008996 <__swhatbuf_r+0x2e>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008980:	f04f 0100 	mov.w	r1, #0
 8008984:	bf14      	ite	ne
 8008986:	2340      	movne	r3, #64	@ 0x40
 8008988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800898c:	2000      	movs	r0, #0
 800898e:	6031      	str	r1, [r6, #0]
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	b016      	add	sp, #88	@ 0x58
 8008994:	bd70      	pop	{r4, r5, r6, pc}
 8008996:	466a      	mov	r2, sp
 8008998:	f000 f896 	bl	8008ac8 <_fstat_r>
 800899c:	2800      	cmp	r0, #0
 800899e:	dbec      	blt.n	800897a <__swhatbuf_r+0x12>
 80089a0:	9901      	ldr	r1, [sp, #4]
 80089a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089aa:	4259      	negs	r1, r3
 80089ac:	4159      	adcs	r1, r3
 80089ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089b2:	e7eb      	b.n	800898c <__swhatbuf_r+0x24>

080089b4 <__smakebuf_r>:
 80089b4:	898b      	ldrh	r3, [r1, #12]
 80089b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089b8:	079d      	lsls	r5, r3, #30
 80089ba:	4606      	mov	r6, r0
 80089bc:	460c      	mov	r4, r1
 80089be:	d507      	bpl.n	80089d0 <__smakebuf_r+0x1c>
 80089c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	6123      	str	r3, [r4, #16]
 80089c8:	2301      	movs	r3, #1
 80089ca:	6163      	str	r3, [r4, #20]
 80089cc:	b003      	add	sp, #12
 80089ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d0:	ab01      	add	r3, sp, #4
 80089d2:	466a      	mov	r2, sp
 80089d4:	f7ff ffc8 	bl	8008968 <__swhatbuf_r>
 80089d8:	9f00      	ldr	r7, [sp, #0]
 80089da:	4605      	mov	r5, r0
 80089dc:	4639      	mov	r1, r7
 80089de:	4630      	mov	r0, r6
 80089e0:	f7ff fa62 	bl	8007ea8 <_malloc_r>
 80089e4:	b948      	cbnz	r0, 80089fa <__smakebuf_r+0x46>
 80089e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ea:	059a      	lsls	r2, r3, #22
 80089ec:	d4ee      	bmi.n	80089cc <__smakebuf_r+0x18>
 80089ee:	f023 0303 	bic.w	r3, r3, #3
 80089f2:	f043 0302 	orr.w	r3, r3, #2
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	e7e2      	b.n	80089c0 <__smakebuf_r+0xc>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	6020      	str	r0, [r4, #0]
 80089fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	9b01      	ldr	r3, [sp, #4]
 8008a06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a0a:	b15b      	cbz	r3, 8008a24 <__smakebuf_r+0x70>
 8008a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a10:	4630      	mov	r0, r6
 8008a12:	f000 f86b 	bl	8008aec <_isatty_r>
 8008a16:	b128      	cbz	r0, 8008a24 <__smakebuf_r+0x70>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f023 0303 	bic.w	r3, r3, #3
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	431d      	orrs	r5, r3
 8008a28:	81a5      	strh	r5, [r4, #12]
 8008a2a:	e7cf      	b.n	80089cc <__smakebuf_r+0x18>

08008a2c <_putc_r>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	460d      	mov	r5, r1
 8008a30:	4614      	mov	r4, r2
 8008a32:	4606      	mov	r6, r0
 8008a34:	b118      	cbz	r0, 8008a3e <_putc_r+0x12>
 8008a36:	6a03      	ldr	r3, [r0, #32]
 8008a38:	b90b      	cbnz	r3, 8008a3e <_putc_r+0x12>
 8008a3a:	f7fe ffa7 	bl	800798c <__sinit>
 8008a3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a40:	07d8      	lsls	r0, r3, #31
 8008a42:	d405      	bmi.n	8008a50 <_putc_r+0x24>
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	0599      	lsls	r1, r3, #22
 8008a48:	d402      	bmi.n	8008a50 <_putc_r+0x24>
 8008a4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a4c:	f7ff f9bd 	bl	8007dca <__retarget_lock_acquire_recursive>
 8008a50:	68a3      	ldr	r3, [r4, #8]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	60a3      	str	r3, [r4, #8]
 8008a58:	da05      	bge.n	8008a66 <_putc_r+0x3a>
 8008a5a:	69a2      	ldr	r2, [r4, #24]
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	db12      	blt.n	8008a86 <_putc_r+0x5a>
 8008a60:	b2eb      	uxtb	r3, r5
 8008a62:	2b0a      	cmp	r3, #10
 8008a64:	d00f      	beq.n	8008a86 <_putc_r+0x5a>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	6022      	str	r2, [r4, #0]
 8008a6c:	701d      	strb	r5, [r3, #0]
 8008a6e:	b2ed      	uxtb	r5, r5
 8008a70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a72:	07da      	lsls	r2, r3, #31
 8008a74:	d405      	bmi.n	8008a82 <_putc_r+0x56>
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	059b      	lsls	r3, r3, #22
 8008a7a:	d402      	bmi.n	8008a82 <_putc_r+0x56>
 8008a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a7e:	f7ff f9a5 	bl	8007dcc <__retarget_lock_release_recursive>
 8008a82:	4628      	mov	r0, r5
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
 8008a86:	4629      	mov	r1, r5
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff f88f 	bl	8007bae <__swbuf_r>
 8008a90:	4605      	mov	r5, r0
 8008a92:	e7ed      	b.n	8008a70 <_putc_r+0x44>

08008a94 <memmove>:
 8008a94:	4288      	cmp	r0, r1
 8008a96:	b510      	push	{r4, lr}
 8008a98:	eb01 0402 	add.w	r4, r1, r2
 8008a9c:	d902      	bls.n	8008aa4 <memmove+0x10>
 8008a9e:	4284      	cmp	r4, r0
 8008aa0:	4623      	mov	r3, r4
 8008aa2:	d807      	bhi.n	8008ab4 <memmove+0x20>
 8008aa4:	1e43      	subs	r3, r0, #1
 8008aa6:	42a1      	cmp	r1, r4
 8008aa8:	d008      	beq.n	8008abc <memmove+0x28>
 8008aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ab2:	e7f8      	b.n	8008aa6 <memmove+0x12>
 8008ab4:	4402      	add	r2, r0
 8008ab6:	4601      	mov	r1, r0
 8008ab8:	428a      	cmp	r2, r1
 8008aba:	d100      	bne.n	8008abe <memmove+0x2a>
 8008abc:	bd10      	pop	{r4, pc}
 8008abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ac6:	e7f7      	b.n	8008ab8 <memmove+0x24>

08008ac8 <_fstat_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d07      	ldr	r5, [pc, #28]	@ (8008ae8 <_fstat_r+0x20>)
 8008acc:	2300      	movs	r3, #0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4608      	mov	r0, r1
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	602b      	str	r3, [r5, #0]
 8008ad6:	f7f9 ff7c 	bl	80029d2 <_fstat>
 8008ada:	1c43      	adds	r3, r0, #1
 8008adc:	d102      	bne.n	8008ae4 <_fstat_r+0x1c>
 8008ade:	682b      	ldr	r3, [r5, #0]
 8008ae0:	b103      	cbz	r3, 8008ae4 <_fstat_r+0x1c>
 8008ae2:	6023      	str	r3, [r4, #0]
 8008ae4:	bd38      	pop	{r3, r4, r5, pc}
 8008ae6:	bf00      	nop
 8008ae8:	2000077c 	.word	0x2000077c

08008aec <_isatty_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4d06      	ldr	r5, [pc, #24]	@ (8008b08 <_isatty_r+0x1c>)
 8008af0:	2300      	movs	r3, #0
 8008af2:	4604      	mov	r4, r0
 8008af4:	4608      	mov	r0, r1
 8008af6:	602b      	str	r3, [r5, #0]
 8008af8:	f7f9 ff7b 	bl	80029f2 <_isatty>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d102      	bne.n	8008b06 <_isatty_r+0x1a>
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	b103      	cbz	r3, 8008b06 <_isatty_r+0x1a>
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	2000077c 	.word	0x2000077c

08008b0c <_sbrk_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d06      	ldr	r5, [pc, #24]	@ (8008b28 <_sbrk_r+0x1c>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7f9 ff84 	bl	8002a24 <_sbrk>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_sbrk_r+0x1a>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_sbrk_r+0x1a>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	2000077c 	.word	0x2000077c

08008b2c <memcpy>:
 8008b2c:	440a      	add	r2, r1
 8008b2e:	4291      	cmp	r1, r2
 8008b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b34:	d100      	bne.n	8008b38 <memcpy+0xc>
 8008b36:	4770      	bx	lr
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b42:	4291      	cmp	r1, r2
 8008b44:	d1f9      	bne.n	8008b3a <memcpy+0xe>
 8008b46:	bd10      	pop	{r4, pc}

08008b48 <_realloc_r>:
 8008b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	4615      	mov	r5, r2
 8008b50:	460c      	mov	r4, r1
 8008b52:	b921      	cbnz	r1, 8008b5e <_realloc_r+0x16>
 8008b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b58:	4611      	mov	r1, r2
 8008b5a:	f7ff b9a5 	b.w	8007ea8 <_malloc_r>
 8008b5e:	b92a      	cbnz	r2, 8008b6c <_realloc_r+0x24>
 8008b60:	f7ff f936 	bl	8007dd0 <_free_r>
 8008b64:	2400      	movs	r4, #0
 8008b66:	4620      	mov	r0, r4
 8008b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6c:	f000 f81a 	bl	8008ba4 <_malloc_usable_size_r>
 8008b70:	4285      	cmp	r5, r0
 8008b72:	4606      	mov	r6, r0
 8008b74:	d802      	bhi.n	8008b7c <_realloc_r+0x34>
 8008b76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b7a:	d8f4      	bhi.n	8008b66 <_realloc_r+0x1e>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4640      	mov	r0, r8
 8008b80:	f7ff f992 	bl	8007ea8 <_malloc_r>
 8008b84:	4607      	mov	r7, r0
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d0ec      	beq.n	8008b64 <_realloc_r+0x1c>
 8008b8a:	42b5      	cmp	r5, r6
 8008b8c:	462a      	mov	r2, r5
 8008b8e:	4621      	mov	r1, r4
 8008b90:	bf28      	it	cs
 8008b92:	4632      	movcs	r2, r6
 8008b94:	f7ff ffca 	bl	8008b2c <memcpy>
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	f7ff f918 	bl	8007dd0 <_free_r>
 8008ba0:	463c      	mov	r4, r7
 8008ba2:	e7e0      	b.n	8008b66 <_realloc_r+0x1e>

08008ba4 <_malloc_usable_size_r>:
 8008ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba8:	1f18      	subs	r0, r3, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfbc      	itt	lt
 8008bae:	580b      	ldrlt	r3, [r1, r0]
 8008bb0:	18c0      	addlt	r0, r0, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_init>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr

08008bc0 <_fini>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	bf00      	nop
 8008bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc6:	bc08      	pop	{r3}
 8008bc8:	469e      	mov	lr, r3
 8008bca:	4770      	bx	lr
